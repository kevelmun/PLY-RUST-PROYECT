Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> main_rule
Rule 1     main_rule -> father_rule
Rule 2     main_rule -> father_rule main_rule
Rule 3     father_rule -> print
Rule 4     father_rule -> dvariable
Rule 5     father_rule -> function
Rule 6     father_rule -> control_str
Rule 7     father_rule -> void
Rule 8     father_rule -> data_str
Rule 9     father_rule -> array
Rule 10    father_rule -> linkedlist_methods
Rule 11    father_rule -> hashmap_methods
Rule 12    father_rule -> initialization
Rule 13    father_rule -> input
Rule 14    father_rule -> assignation
Rule 15    father_rule -> declare_data_type
Rule 16    expression -> expression PLUS expression
Rule 17    expression -> expression MINUS expression
Rule 18    expression -> expression TIMES expression
Rule 19    expression -> LPAREN expression RPAREN
Rule 20    expression -> number
Rule 21    expression -> division
Rule 22    number -> INTEGER
Rule 23    number -> FLOAT
Rule 24    number -> VARIABLE
Rule 25    data_type -> UNSIG_INT_8
Rule 26    data_type -> UNSIG_INT_16
Rule 27    data_type -> UNSIG_INT_32
Rule 28    data_type -> UNSIG_INT_64
Rule 29    data_type -> UNSIG_INT_128
Rule 30    data_type -> SIG_INT_8
Rule 31    data_type -> SIG_INT_16
Rule 32    data_type -> SIG_INT_32
Rule 33    data_type -> SIG_INT_64
Rule 34    data_type -> SIG_INT_128
Rule 35    data_type -> FLOAT_32
Rule 36    data_type -> FLOAT_64
Rule 37    data_type -> KW_BOOLEAN
Rule 38    data_type -> KW_STRING
Rule 39    data_type -> KW_CHARACTER
Rule 40    assign_operators -> EQUALS
Rule 41    assign_operators -> TIMESEQUAL
Rule 42    assign_operators -> DIVEQUAL
Rule 43    assign_operators -> MODULUSEQUAL
Rule 44    assign_operators -> PLUSEQUAL
Rule 45    assign_operators -> MINUSEQUAL
Rule 46    division -> INTEGER DIVIDE INTEGER
Rule 47    division -> FLOAT DIVIDE FLOAT
Rule 48    data -> CADENA
Rule 49    data -> INTEGER
Rule 50    data -> CHAR
Rule 51    data -> FLOAT
Rule 52    data -> KW_FALSE
Rule 53    data -> KW_TRUE
Rule 54    data -> tuple
Rule 55    comparator -> <empty>
Rule 56    comparator -> EQ
Rule 57    comparator -> NE
Rule 58    comparator -> GE
Rule 59    comparator -> LE
Rule 60    comparator -> GT
Rule 61    comparator -> LT
Rule 62    logic -> LOR
Rule 63    logic -> LAND
Rule 64    lvariable -> VARIABLE logic VARIABLE
Rule 65    conditional -> VARIABLE comparator data
Rule 66    conditional -> LPAREN lvariable RPAREN comparator data
Rule 67    mdata -> data
Rule 68    mdata -> data COMMA mdata
Rule 69    print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI
Rule 70    print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI
Rule 71    dvariable -> KW_LET VARIABLE SEMI
Rule 72    array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
Rule 73    array -> LBRACKET mdata RBRACKET
Rule 74    array -> LBRACKET data SEMI data RBRACKET
Rule 75    array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
Rule 76    array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
Rule 77    variables -> VARIABLE
Rule 78    variables -> VARIABLE COMMA variables
Rule 79    while -> KW_WHILE conditional LBRACE main_rule RBRACE
Rule 80    tuple -> LPAREN mdata RPAREN
Rule 81    initialization -> let_initialization SEMI
Rule 82    initialization -> const_initialization SEMI
Rule 83    initialization -> data_str SEMI
Rule 84    initialization -> input_init SEMI
Rule 85    let_initialization -> KW_LET VARIABLE EQUALS data
Rule 86    let_initialization -> KW_LET VARIABLE COLON data_type EQUALS data
Rule 87    let_initialization -> KW_LET KW_MUT VARIABLE EQUALS data
Rule 88    let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS data
Rule 89    let_initialization -> KW_LET VARIABLE EQUALS expression_var
Rule 90    let_initialization -> KW_LET VARIABLE COLON data_type EQUALS expression_var
Rule 91    let_initialization -> KW_LET KW_MUT VARIABLE EQUALS expression_var
Rule 92    let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var
Rule 93    const_initialization -> KW_CONST VARIABLE COLON data_type EQUALS data
Rule 94    arguments -> void
Rule 95    arguments -> variables
Rule 96    function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE
Rule 97    control_str -> for_str
Rule 98    control_str -> for_str_tagged
Rule 99    control_str -> if
Rule 100   control_str -> else
Rule 101   control_str -> else_if
Rule 102   control_str -> while
Rule 103   for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE
Rule 104   for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE
Rule 105   for_str_tagged -> label COLON for_str
Rule 106   range -> INTEGER DOT DOT INTEGER
Rule 107   range -> VARIABLE DOT DOT VARIABLE
Rule 108   label -> QUOTE VARIABLE
Rule 109   data_str -> array
Rule 110   data_str -> hashmap
Rule 111   data_str -> linkedlist
Rule 112   hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
Rule 113   hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
Rule 114   hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
Rule 115   hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
Rule 116   hashmap_methods -> VARIABLE hashmap_insert
Rule 117   hashmap_methods -> VARIABLE hashmap_remove
Rule 118   hashmap_insert -> DOT KW_INSERT LPAREN mdata RPAREN SEMI
Rule 119   hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI
Rule 120   void -> <empty>
Rule 121   linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
Rule 122   linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
Rule 123   linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
Rule 124   linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
Rule 125   linkedlist_methods -> VARIABLE linkedlist_push
Rule 126   linkedlist_methods -> VARIABLE linkedlist_remove
Rule 127   linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI
Rule 128   linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI
Rule 129   if -> KW_IF conditional LBRACE main_rule RBRACE
Rule 130   else -> KW_ELSE LBRACE main_rule RBRACE
Rule 131   else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE
Rule 132   function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE
Rule 133   expression_var -> expression
Rule 134   expression_var -> data
Rule 135   return -> main_rule
Rule 136   return -> KW_RETURN expression_var SEMI
Rule 137   return -> main_rule KW_RETURN expression_var SEMI
Rule 138   input_init -> KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN
Rule 139   input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI
Rule 140   assignation -> VARIABLE assign_operators number SEMI
Rule 141   assignation -> VARIABLE assign_operators expression SEMI
Rule 142   assignation -> VARIABLE assign_operators number
Rule 143   assignation -> VARIABLE assign_operators expression
Rule 144   declare_data_type -> KW_LET VARIABLE COLON data_type SEMI

Terminals, with rules where they appear

AND                  : 119 139
CADENA               : 48 69 70 139
CHAR                 : 50
COLON                : 75 76 86 88 90 92 93 105 112 112 113 113 114 114 115 115 121 121 121 122 122 122 123 123 124 124 138 138 144
COMMA                : 68 70 78
COMMENT              : 
DIVEQUAL             : 42
DIVIDE               : 46 47
DOT                  : 106 106 107 107 118 119 127 128 139 139
EQ                   : 56
EQUALS               : 40 72 75 76 85 86 87 88 89 90 91 92 93 112 113 114 115 121 122 123 124 138
FLOAT                : 23 47 47 51
FLOAT_32             : 35
FLOAT_64             : 36
GE                   : 58
GT                   : 60 121 122 132
INTEGER              : 22 46 46 49 106 106 128
KW_BOOLEAN           : 37
KW_CHARACTER         : 39
KW_CONST             : 93
KW_ELSE              : 130 131
KW_EXPECT            : 139
KW_FALSE             : 52
KW_FN                : 96 132
KW_FOR               : 103 104
KW_FROM              : 114 115 123 124
KW_HASHMAP           : 112 113 114 115
KW_IF                : 129 131
KW_IN                : 103 104
KW_INSERT            : 118
KW_IO                : 138
KW_LET               : 71 72 75 76 85 86 87 88 89 90 91 92 112 113 114 115 121 122 123 124 138 144
KW_LINKEDLIST        : 121 121 122 122 123 124
KW_MUT               : 75 76 87 88 91 92 113 115 122 124 139
KW_NEW               : 112 113 121 122
KW_PRINT             : 69 70
KW_PUSH_BACK         : 127
KW_READ_LINE         : 139
KW_REMOVE            : 119 128
KW_RETURN            : 136 137
KW_STDIN             : 138
KW_STRING            : 38
KW_TRUE              : 53
KW_WHILE             : 79
LAND                 : 63
LBRACE               : 79 96 103 104 129 130 131 132
LBRACKET             : 72 73 74 75 75 76 76
LE                   : 59
LNOT                 : 69 70
LOR                  : 62
LPAREN               : 19 66 69 70 80 96 112 113 114 115 118 119 121 122 123 124 127 128 132 138 139 139
LT                   : 61 121 122
MINUS                : 17 132
MINUSEQUAL           : 45
MODULUSEQUAL         : 43
NE                   : 57
PLUS                 : 16
PLUSEQUAL            : 44
QUOTE                : 108
RBRACE               : 79 96 103 104 129 130 131 132
RBRACKET             : 72 73 74 75 75 76 76
RPAREN               : 19 66 69 70 80 96 112 113 114 115 118 119 121 122 123 124 127 128 132 138 139 139
SEMI                 : 69 70 71 72 74 75 75 76 76 76 81 82 83 84 118 119 127 128 136 137 139 140 141 144
SIG_INT_128          : 34
SIG_INT_16           : 31
SIG_INT_32           : 32
SIG_INT_64           : 33
SIG_INT_8            : 30
TIMES                : 18
TIMESEQUAL           : 41
UNSIG_INT_128        : 29
UNSIG_INT_16         : 26
UNSIG_INT_32         : 27
UNSIG_INT_64         : 28
UNSIG_INT_8          : 25
VARIABLE             : 24 64 64 65 70 71 72 75 76 77 78 85 86 87 88 89 90 91 92 93 96 103 104 104 107 107 108 112 113 114 115 116 117 121 122 123 124 125 126 132 138 139 139 140 141 142 143 144
error                : 

Nonterminals, with rules where they appear

arguments            : 96 132
array                : 9 109 114 115 123 124
assign_operators     : 140 141 142 143
assignation          : 14
comparator           : 65 66
conditional          : 79 129 131
const_initialization : 82
control_str          : 6
data                 : 65 66 67 68 74 74 75 76 76 76 85 86 87 88 93 119 127 134
data_str             : 8 83
data_type            : 75 76 86 88 90 92 93 121 122 132 144
declare_data_type    : 15
division             : 21
dvariable            : 4
else                 : 100
else_if              : 101
expression           : 16 16 17 17 18 18 19 133 141 143
expression_var       : 89 90 91 92 136 137
father_rule          : 1 2
for_str              : 97 105
for_str_tagged       : 98
function             : 5
hashmap              : 110
hashmap_insert       : 116
hashmap_methods      : 11
hashmap_remove       : 117
if                   : 99
initialization       : 12
input                : 13
input_init           : 84
label                : 105
let_initialization   : 81
linkedlist           : 111
linkedlist_methods   : 10
linkedlist_push      : 125
linkedlist_remove    : 126
logic                : 64
lvariable            : 66
main_rule            : 2 79 96 103 104 129 130 131 135 137 0
mdata                : 68 72 73 75 80 118
number               : 20 140 142
print                : 3
range                : 103
return               : 132
tuple                : 54
variables            : 78 95
void                 : 7 94
while                : 102

Parsing method: LALR

state 0

    (0) S' -> . main_rule
    (1) main_rule -> . father_rule
    (2) main_rule -> . father_rule main_rule
    (3) father_rule -> . print
    (4) father_rule -> . dvariable
    (5) father_rule -> . function
    (6) father_rule -> . control_str
    (7) father_rule -> . void
    (8) father_rule -> . data_str
    (9) father_rule -> . array
    (10) father_rule -> . linkedlist_methods
    (11) father_rule -> . hashmap_methods
    (12) father_rule -> . initialization
    (13) father_rule -> . input
    (14) father_rule -> . assignation
    (15) father_rule -> . declare_data_type
    (69) print -> . KW_PRINT LNOT LPAREN CADENA RPAREN SEMI
    (70) print -> . KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI
    (71) dvariable -> . KW_LET VARIABLE SEMI
    (96) function -> . KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE
    (132) function -> . KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE
    (97) control_str -> . for_str
    (98) control_str -> . for_str_tagged
    (99) control_str -> . if
    (100) control_str -> . else
    (101) control_str -> . else_if
    (102) control_str -> . while
    (120) void -> .
    (109) data_str -> . array
    (110) data_str -> . hashmap
    (111) data_str -> . linkedlist
    (72) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (73) array -> . LBRACKET mdata RBRACKET
    (74) array -> . LBRACKET data SEMI data RBRACKET
    (75) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (125) linkedlist_methods -> . VARIABLE linkedlist_push
    (126) linkedlist_methods -> . VARIABLE linkedlist_remove
    (116) hashmap_methods -> . VARIABLE hashmap_insert
    (117) hashmap_methods -> . VARIABLE hashmap_remove
    (81) initialization -> . let_initialization SEMI
    (82) initialization -> . const_initialization SEMI
    (83) initialization -> . data_str SEMI
    (84) initialization -> . input_init SEMI
    (139) input -> . VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI
    (140) assignation -> . VARIABLE assign_operators number SEMI
    (141) assignation -> . VARIABLE assign_operators expression SEMI
    (142) assignation -> . VARIABLE assign_operators number
    (143) assignation -> . VARIABLE assign_operators expression
    (144) declare_data_type -> . KW_LET VARIABLE COLON data_type SEMI
    (103) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE
    (104) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE
    (105) for_str_tagged -> . label COLON for_str
    (129) if -> . KW_IF conditional LBRACE main_rule RBRACE
    (130) else -> . KW_ELSE LBRACE main_rule RBRACE
    (131) else_if -> . KW_ELSE KW_IF conditional LBRACE main_rule RBRACE
    (79) while -> . KW_WHILE conditional LBRACE main_rule RBRACE
    (112) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (113) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (114) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (115) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (121) linkedlist -> . KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (122) linkedlist -> . KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (123) linkedlist -> . KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (124) linkedlist -> . KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (85) let_initialization -> . KW_LET VARIABLE EQUALS data
    (86) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS data
    (87) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS data
    (88) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS data
    (89) let_initialization -> . KW_LET VARIABLE EQUALS expression_var
    (90) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS expression_var
    (91) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS expression_var
    (92) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var
    (93) const_initialization -> . KW_CONST VARIABLE COLON data_type EQUALS data
    (138) input_init -> . KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN
    (108) label -> . QUOTE VARIABLE

  ! shift/reduce conflict for KW_PRINT resolved as shift
  ! shift/reduce conflict for KW_LET resolved as shift
  ! shift/reduce conflict for KW_FN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for KW_FOR resolved as shift
  ! shift/reduce conflict for KW_IF resolved as shift
  ! shift/reduce conflict for KW_ELSE resolved as shift
  ! shift/reduce conflict for KW_WHILE resolved as shift
  ! shift/reduce conflict for KW_CONST resolved as shift
  ! shift/reduce conflict for QUOTE resolved as shift
    KW_PRINT        shift and go to state 16
    KW_LET          shift and go to state 18
    KW_FN           shift and go to state 19
    $end            reduce using rule 120 (void -> .)
    LBRACKET        shift and go to state 28
    VARIABLE        shift and go to state 17
    KW_FOR          shift and go to state 32
    KW_IF           shift and go to state 34
    KW_ELSE         shift and go to state 35
    KW_WHILE        shift and go to state 36
    KW_CONST        shift and go to state 37
    QUOTE           shift and go to state 38

  ! KW_PRINT        [ reduce using rule 120 (void -> .) ]
  ! KW_LET          [ reduce using rule 120 (void -> .) ]
  ! KW_FN           [ reduce using rule 120 (void -> .) ]
  ! LBRACKET        [ reduce using rule 120 (void -> .) ]
  ! VARIABLE        [ reduce using rule 120 (void -> .) ]
  ! KW_FOR          [ reduce using rule 120 (void -> .) ]
  ! KW_IF           [ reduce using rule 120 (void -> .) ]
  ! KW_ELSE         [ reduce using rule 120 (void -> .) ]
  ! KW_WHILE        [ reduce using rule 120 (void -> .) ]
  ! KW_CONST        [ reduce using rule 120 (void -> .) ]
  ! QUOTE           [ reduce using rule 120 (void -> .) ]

    main_rule                      shift and go to state 1
    father_rule                    shift and go to state 2
    print                          shift and go to state 3
    dvariable                      shift and go to state 4
    function                       shift and go to state 5
    control_str                    shift and go to state 6
    void                           shift and go to state 7
    data_str                       shift and go to state 8
    array                          shift and go to state 9
    linkedlist_methods             shift and go to state 10
    hashmap_methods                shift and go to state 11
    initialization                 shift and go to state 12
    input                          shift and go to state 13
    assignation                    shift and go to state 14
    declare_data_type              shift and go to state 15
    for_str                        shift and go to state 20
    for_str_tagged                 shift and go to state 21
    if                             shift and go to state 22
    else                           shift and go to state 23
    else_if                        shift and go to state 24
    while                          shift and go to state 25
    hashmap                        shift and go to state 26
    linkedlist                     shift and go to state 27
    let_initialization             shift and go to state 29
    const_initialization           shift and go to state 30
    input_init                     shift and go to state 31
    label                          shift and go to state 33

state 1

    (0) S' -> main_rule .



state 2

    (1) main_rule -> father_rule .
    (2) main_rule -> father_rule . main_rule
    (1) main_rule -> . father_rule
    (2) main_rule -> . father_rule main_rule
    (3) father_rule -> . print
    (4) father_rule -> . dvariable
    (5) father_rule -> . function
    (6) father_rule -> . control_str
    (7) father_rule -> . void
    (8) father_rule -> . data_str
    (9) father_rule -> . array
    (10) father_rule -> . linkedlist_methods
    (11) father_rule -> . hashmap_methods
    (12) father_rule -> . initialization
    (13) father_rule -> . input
    (14) father_rule -> . assignation
    (15) father_rule -> . declare_data_type
    (69) print -> . KW_PRINT LNOT LPAREN CADENA RPAREN SEMI
    (70) print -> . KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI
    (71) dvariable -> . KW_LET VARIABLE SEMI
    (96) function -> . KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE
    (132) function -> . KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE
    (97) control_str -> . for_str
    (98) control_str -> . for_str_tagged
    (99) control_str -> . if
    (100) control_str -> . else
    (101) control_str -> . else_if
    (102) control_str -> . while
    (120) void -> .
    (109) data_str -> . array
    (110) data_str -> . hashmap
    (111) data_str -> . linkedlist
    (72) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (73) array -> . LBRACKET mdata RBRACKET
    (74) array -> . LBRACKET data SEMI data RBRACKET
    (75) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (125) linkedlist_methods -> . VARIABLE linkedlist_push
    (126) linkedlist_methods -> . VARIABLE linkedlist_remove
    (116) hashmap_methods -> . VARIABLE hashmap_insert
    (117) hashmap_methods -> . VARIABLE hashmap_remove
    (81) initialization -> . let_initialization SEMI
    (82) initialization -> . const_initialization SEMI
    (83) initialization -> . data_str SEMI
    (84) initialization -> . input_init SEMI
    (139) input -> . VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI
    (140) assignation -> . VARIABLE assign_operators number SEMI
    (141) assignation -> . VARIABLE assign_operators expression SEMI
    (142) assignation -> . VARIABLE assign_operators number
    (143) assignation -> . VARIABLE assign_operators expression
    (144) declare_data_type -> . KW_LET VARIABLE COLON data_type SEMI
    (103) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE
    (104) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE
    (105) for_str_tagged -> . label COLON for_str
    (129) if -> . KW_IF conditional LBRACE main_rule RBRACE
    (130) else -> . KW_ELSE LBRACE main_rule RBRACE
    (131) else_if -> . KW_ELSE KW_IF conditional LBRACE main_rule RBRACE
    (79) while -> . KW_WHILE conditional LBRACE main_rule RBRACE
    (112) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (113) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (114) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (115) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (121) linkedlist -> . KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (122) linkedlist -> . KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (123) linkedlist -> . KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (124) linkedlist -> . KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (85) let_initialization -> . KW_LET VARIABLE EQUALS data
    (86) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS data
    (87) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS data
    (88) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS data
    (89) let_initialization -> . KW_LET VARIABLE EQUALS expression_var
    (90) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS expression_var
    (91) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS expression_var
    (92) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var
    (93) const_initialization -> . KW_CONST VARIABLE COLON data_type EQUALS data
    (138) input_init -> . KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN
    (108) label -> . QUOTE VARIABLE

  ! shift/reduce conflict for KW_PRINT resolved as shift
  ! shift/reduce conflict for KW_LET resolved as shift
  ! shift/reduce conflict for KW_FN resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 1 (main_rule -> father_rule .)
  ! reduce/reduce conflict for RBRACE resolved using rule 1 (main_rule -> father_rule .)
  ! reduce/reduce conflict for KW_RETURN resolved using rule 1 (main_rule -> father_rule .)
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for KW_FOR resolved as shift
  ! shift/reduce conflict for KW_IF resolved as shift
  ! shift/reduce conflict for KW_ELSE resolved as shift
  ! shift/reduce conflict for KW_WHILE resolved as shift
  ! shift/reduce conflict for KW_CONST resolved as shift
  ! shift/reduce conflict for QUOTE resolved as shift
    $end            reduce using rule 1 (main_rule -> father_rule .)
    RBRACE          reduce using rule 1 (main_rule -> father_rule .)
    KW_RETURN       reduce using rule 1 (main_rule -> father_rule .)
    KW_PRINT        shift and go to state 16
    KW_LET          shift and go to state 18
    KW_FN           shift and go to state 19
    LBRACKET        shift and go to state 28
    VARIABLE        shift and go to state 17
    KW_FOR          shift and go to state 32
    KW_IF           shift and go to state 34
    KW_ELSE         shift and go to state 35
    KW_WHILE        shift and go to state 36
    KW_CONST        shift and go to state 37
    QUOTE           shift and go to state 38

  ! KW_PRINT        [ reduce using rule 120 (void -> .) ]
  ! KW_LET          [ reduce using rule 120 (void -> .) ]
  ! KW_FN           [ reduce using rule 120 (void -> .) ]
  ! LBRACKET        [ reduce using rule 120 (void -> .) ]
  ! VARIABLE        [ reduce using rule 120 (void -> .) ]
  ! KW_FOR          [ reduce using rule 120 (void -> .) ]
  ! KW_IF           [ reduce using rule 120 (void -> .) ]
  ! KW_ELSE         [ reduce using rule 120 (void -> .) ]
  ! KW_WHILE        [ reduce using rule 120 (void -> .) ]
  ! KW_CONST        [ reduce using rule 120 (void -> .) ]
  ! QUOTE           [ reduce using rule 120 (void -> .) ]
  ! $end            [ reduce using rule 120 (void -> .) ]
  ! RBRACE          [ reduce using rule 120 (void -> .) ]
  ! KW_RETURN       [ reduce using rule 120 (void -> .) ]

    father_rule                    shift and go to state 2
    main_rule                      shift and go to state 39
    print                          shift and go to state 3
    dvariable                      shift and go to state 4
    function                       shift and go to state 5
    control_str                    shift and go to state 6
    void                           shift and go to state 7
    data_str                       shift and go to state 8
    array                          shift and go to state 9
    linkedlist_methods             shift and go to state 10
    hashmap_methods                shift and go to state 11
    initialization                 shift and go to state 12
    input                          shift and go to state 13
    assignation                    shift and go to state 14
    declare_data_type              shift and go to state 15
    for_str                        shift and go to state 20
    for_str_tagged                 shift and go to state 21
    if                             shift and go to state 22
    else                           shift and go to state 23
    else_if                        shift and go to state 24
    while                          shift and go to state 25
    hashmap                        shift and go to state 26
    linkedlist                     shift and go to state 27
    let_initialization             shift and go to state 29
    const_initialization           shift and go to state 30
    input_init                     shift and go to state 31
    label                          shift and go to state 33

state 3

    (3) father_rule -> print .

    KW_PRINT        reduce using rule 3 (father_rule -> print .)
    KW_LET          reduce using rule 3 (father_rule -> print .)
    KW_FN           reduce using rule 3 (father_rule -> print .)
    LBRACKET        reduce using rule 3 (father_rule -> print .)
    VARIABLE        reduce using rule 3 (father_rule -> print .)
    KW_FOR          reduce using rule 3 (father_rule -> print .)
    KW_IF           reduce using rule 3 (father_rule -> print .)
    KW_ELSE         reduce using rule 3 (father_rule -> print .)
    KW_WHILE        reduce using rule 3 (father_rule -> print .)
    KW_CONST        reduce using rule 3 (father_rule -> print .)
    QUOTE           reduce using rule 3 (father_rule -> print .)
    $end            reduce using rule 3 (father_rule -> print .)
    RBRACE          reduce using rule 3 (father_rule -> print .)
    KW_RETURN       reduce using rule 3 (father_rule -> print .)


state 4

    (4) father_rule -> dvariable .

    KW_PRINT        reduce using rule 4 (father_rule -> dvariable .)
    KW_LET          reduce using rule 4 (father_rule -> dvariable .)
    KW_FN           reduce using rule 4 (father_rule -> dvariable .)
    LBRACKET        reduce using rule 4 (father_rule -> dvariable .)
    VARIABLE        reduce using rule 4 (father_rule -> dvariable .)
    KW_FOR          reduce using rule 4 (father_rule -> dvariable .)
    KW_IF           reduce using rule 4 (father_rule -> dvariable .)
    KW_ELSE         reduce using rule 4 (father_rule -> dvariable .)
    KW_WHILE        reduce using rule 4 (father_rule -> dvariable .)
    KW_CONST        reduce using rule 4 (father_rule -> dvariable .)
    QUOTE           reduce using rule 4 (father_rule -> dvariable .)
    $end            reduce using rule 4 (father_rule -> dvariable .)
    RBRACE          reduce using rule 4 (father_rule -> dvariable .)
    KW_RETURN       reduce using rule 4 (father_rule -> dvariable .)


state 5

    (5) father_rule -> function .

    KW_PRINT        reduce using rule 5 (father_rule -> function .)
    KW_LET          reduce using rule 5 (father_rule -> function .)
    KW_FN           reduce using rule 5 (father_rule -> function .)
    LBRACKET        reduce using rule 5 (father_rule -> function .)
    VARIABLE        reduce using rule 5 (father_rule -> function .)
    KW_FOR          reduce using rule 5 (father_rule -> function .)
    KW_IF           reduce using rule 5 (father_rule -> function .)
    KW_ELSE         reduce using rule 5 (father_rule -> function .)
    KW_WHILE        reduce using rule 5 (father_rule -> function .)
    KW_CONST        reduce using rule 5 (father_rule -> function .)
    QUOTE           reduce using rule 5 (father_rule -> function .)
    $end            reduce using rule 5 (father_rule -> function .)
    RBRACE          reduce using rule 5 (father_rule -> function .)
    KW_RETURN       reduce using rule 5 (father_rule -> function .)


state 6

    (6) father_rule -> control_str .

    KW_PRINT        reduce using rule 6 (father_rule -> control_str .)
    KW_LET          reduce using rule 6 (father_rule -> control_str .)
    KW_FN           reduce using rule 6 (father_rule -> control_str .)
    LBRACKET        reduce using rule 6 (father_rule -> control_str .)
    VARIABLE        reduce using rule 6 (father_rule -> control_str .)
    KW_FOR          reduce using rule 6 (father_rule -> control_str .)
    KW_IF           reduce using rule 6 (father_rule -> control_str .)
    KW_ELSE         reduce using rule 6 (father_rule -> control_str .)
    KW_WHILE        reduce using rule 6 (father_rule -> control_str .)
    KW_CONST        reduce using rule 6 (father_rule -> control_str .)
    QUOTE           reduce using rule 6 (father_rule -> control_str .)
    $end            reduce using rule 6 (father_rule -> control_str .)
    RBRACE          reduce using rule 6 (father_rule -> control_str .)
    KW_RETURN       reduce using rule 6 (father_rule -> control_str .)


state 7

    (7) father_rule -> void .

    KW_PRINT        reduce using rule 7 (father_rule -> void .)
    KW_LET          reduce using rule 7 (father_rule -> void .)
    KW_FN           reduce using rule 7 (father_rule -> void .)
    LBRACKET        reduce using rule 7 (father_rule -> void .)
    VARIABLE        reduce using rule 7 (father_rule -> void .)
    KW_FOR          reduce using rule 7 (father_rule -> void .)
    KW_IF           reduce using rule 7 (father_rule -> void .)
    KW_ELSE         reduce using rule 7 (father_rule -> void .)
    KW_WHILE        reduce using rule 7 (father_rule -> void .)
    KW_CONST        reduce using rule 7 (father_rule -> void .)
    QUOTE           reduce using rule 7 (father_rule -> void .)
    $end            reduce using rule 7 (father_rule -> void .)
    RBRACE          reduce using rule 7 (father_rule -> void .)
    KW_RETURN       reduce using rule 7 (father_rule -> void .)


state 8

    (8) father_rule -> data_str .
    (83) initialization -> data_str . SEMI

    KW_PRINT        reduce using rule 8 (father_rule -> data_str .)
    KW_LET          reduce using rule 8 (father_rule -> data_str .)
    KW_FN           reduce using rule 8 (father_rule -> data_str .)
    LBRACKET        reduce using rule 8 (father_rule -> data_str .)
    VARIABLE        reduce using rule 8 (father_rule -> data_str .)
    KW_FOR          reduce using rule 8 (father_rule -> data_str .)
    KW_IF           reduce using rule 8 (father_rule -> data_str .)
    KW_ELSE         reduce using rule 8 (father_rule -> data_str .)
    KW_WHILE        reduce using rule 8 (father_rule -> data_str .)
    KW_CONST        reduce using rule 8 (father_rule -> data_str .)
    QUOTE           reduce using rule 8 (father_rule -> data_str .)
    $end            reduce using rule 8 (father_rule -> data_str .)
    RBRACE          reduce using rule 8 (father_rule -> data_str .)
    KW_RETURN       reduce using rule 8 (father_rule -> data_str .)
    SEMI            shift and go to state 40


state 9

    (9) father_rule -> array .
    (109) data_str -> array .

  ! reduce/reduce conflict for KW_PRINT resolved using rule 9 (father_rule -> array .)
  ! reduce/reduce conflict for KW_LET resolved using rule 9 (father_rule -> array .)
  ! reduce/reduce conflict for KW_FN resolved using rule 9 (father_rule -> array .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 9 (father_rule -> array .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 9 (father_rule -> array .)
  ! reduce/reduce conflict for KW_FOR resolved using rule 9 (father_rule -> array .)
  ! reduce/reduce conflict for KW_IF resolved using rule 9 (father_rule -> array .)
  ! reduce/reduce conflict for KW_ELSE resolved using rule 9 (father_rule -> array .)
  ! reduce/reduce conflict for KW_WHILE resolved using rule 9 (father_rule -> array .)
  ! reduce/reduce conflict for KW_CONST resolved using rule 9 (father_rule -> array .)
  ! reduce/reduce conflict for QUOTE resolved using rule 9 (father_rule -> array .)
  ! reduce/reduce conflict for $end resolved using rule 9 (father_rule -> array .)
  ! reduce/reduce conflict for RBRACE resolved using rule 9 (father_rule -> array .)
  ! reduce/reduce conflict for KW_RETURN resolved using rule 9 (father_rule -> array .)
    KW_PRINT        reduce using rule 9 (father_rule -> array .)
    KW_LET          reduce using rule 9 (father_rule -> array .)
    KW_FN           reduce using rule 9 (father_rule -> array .)
    LBRACKET        reduce using rule 9 (father_rule -> array .)
    VARIABLE        reduce using rule 9 (father_rule -> array .)
    KW_FOR          reduce using rule 9 (father_rule -> array .)
    KW_IF           reduce using rule 9 (father_rule -> array .)
    KW_ELSE         reduce using rule 9 (father_rule -> array .)
    KW_WHILE        reduce using rule 9 (father_rule -> array .)
    KW_CONST        reduce using rule 9 (father_rule -> array .)
    QUOTE           reduce using rule 9 (father_rule -> array .)
    $end            reduce using rule 9 (father_rule -> array .)
    RBRACE          reduce using rule 9 (father_rule -> array .)
    KW_RETURN       reduce using rule 9 (father_rule -> array .)
    SEMI            reduce using rule 109 (data_str -> array .)

  ! KW_PRINT        [ reduce using rule 109 (data_str -> array .) ]
  ! KW_LET          [ reduce using rule 109 (data_str -> array .) ]
  ! KW_FN           [ reduce using rule 109 (data_str -> array .) ]
  ! LBRACKET        [ reduce using rule 109 (data_str -> array .) ]
  ! VARIABLE        [ reduce using rule 109 (data_str -> array .) ]
  ! KW_FOR          [ reduce using rule 109 (data_str -> array .) ]
  ! KW_IF           [ reduce using rule 109 (data_str -> array .) ]
  ! KW_ELSE         [ reduce using rule 109 (data_str -> array .) ]
  ! KW_WHILE        [ reduce using rule 109 (data_str -> array .) ]
  ! KW_CONST        [ reduce using rule 109 (data_str -> array .) ]
  ! QUOTE           [ reduce using rule 109 (data_str -> array .) ]
  ! $end            [ reduce using rule 109 (data_str -> array .) ]
  ! RBRACE          [ reduce using rule 109 (data_str -> array .) ]
  ! KW_RETURN       [ reduce using rule 109 (data_str -> array .) ]


state 10

    (10) father_rule -> linkedlist_methods .

    KW_PRINT        reduce using rule 10 (father_rule -> linkedlist_methods .)
    KW_LET          reduce using rule 10 (father_rule -> linkedlist_methods .)
    KW_FN           reduce using rule 10 (father_rule -> linkedlist_methods .)
    LBRACKET        reduce using rule 10 (father_rule -> linkedlist_methods .)
    VARIABLE        reduce using rule 10 (father_rule -> linkedlist_methods .)
    KW_FOR          reduce using rule 10 (father_rule -> linkedlist_methods .)
    KW_IF           reduce using rule 10 (father_rule -> linkedlist_methods .)
    KW_ELSE         reduce using rule 10 (father_rule -> linkedlist_methods .)
    KW_WHILE        reduce using rule 10 (father_rule -> linkedlist_methods .)
    KW_CONST        reduce using rule 10 (father_rule -> linkedlist_methods .)
    QUOTE           reduce using rule 10 (father_rule -> linkedlist_methods .)
    $end            reduce using rule 10 (father_rule -> linkedlist_methods .)
    RBRACE          reduce using rule 10 (father_rule -> linkedlist_methods .)
    KW_RETURN       reduce using rule 10 (father_rule -> linkedlist_methods .)


state 11

    (11) father_rule -> hashmap_methods .

    KW_PRINT        reduce using rule 11 (father_rule -> hashmap_methods .)
    KW_LET          reduce using rule 11 (father_rule -> hashmap_methods .)
    KW_FN           reduce using rule 11 (father_rule -> hashmap_methods .)
    LBRACKET        reduce using rule 11 (father_rule -> hashmap_methods .)
    VARIABLE        reduce using rule 11 (father_rule -> hashmap_methods .)
    KW_FOR          reduce using rule 11 (father_rule -> hashmap_methods .)
    KW_IF           reduce using rule 11 (father_rule -> hashmap_methods .)
    KW_ELSE         reduce using rule 11 (father_rule -> hashmap_methods .)
    KW_WHILE        reduce using rule 11 (father_rule -> hashmap_methods .)
    KW_CONST        reduce using rule 11 (father_rule -> hashmap_methods .)
    QUOTE           reduce using rule 11 (father_rule -> hashmap_methods .)
    $end            reduce using rule 11 (father_rule -> hashmap_methods .)
    RBRACE          reduce using rule 11 (father_rule -> hashmap_methods .)
    KW_RETURN       reduce using rule 11 (father_rule -> hashmap_methods .)


state 12

    (12) father_rule -> initialization .

    KW_PRINT        reduce using rule 12 (father_rule -> initialization .)
    KW_LET          reduce using rule 12 (father_rule -> initialization .)
    KW_FN           reduce using rule 12 (father_rule -> initialization .)
    LBRACKET        reduce using rule 12 (father_rule -> initialization .)
    VARIABLE        reduce using rule 12 (father_rule -> initialization .)
    KW_FOR          reduce using rule 12 (father_rule -> initialization .)
    KW_IF           reduce using rule 12 (father_rule -> initialization .)
    KW_ELSE         reduce using rule 12 (father_rule -> initialization .)
    KW_WHILE        reduce using rule 12 (father_rule -> initialization .)
    KW_CONST        reduce using rule 12 (father_rule -> initialization .)
    QUOTE           reduce using rule 12 (father_rule -> initialization .)
    $end            reduce using rule 12 (father_rule -> initialization .)
    RBRACE          reduce using rule 12 (father_rule -> initialization .)
    KW_RETURN       reduce using rule 12 (father_rule -> initialization .)


state 13

    (13) father_rule -> input .

    KW_PRINT        reduce using rule 13 (father_rule -> input .)
    KW_LET          reduce using rule 13 (father_rule -> input .)
    KW_FN           reduce using rule 13 (father_rule -> input .)
    LBRACKET        reduce using rule 13 (father_rule -> input .)
    VARIABLE        reduce using rule 13 (father_rule -> input .)
    KW_FOR          reduce using rule 13 (father_rule -> input .)
    KW_IF           reduce using rule 13 (father_rule -> input .)
    KW_ELSE         reduce using rule 13 (father_rule -> input .)
    KW_WHILE        reduce using rule 13 (father_rule -> input .)
    KW_CONST        reduce using rule 13 (father_rule -> input .)
    QUOTE           reduce using rule 13 (father_rule -> input .)
    $end            reduce using rule 13 (father_rule -> input .)
    RBRACE          reduce using rule 13 (father_rule -> input .)
    KW_RETURN       reduce using rule 13 (father_rule -> input .)


state 14

    (14) father_rule -> assignation .

    KW_PRINT        reduce using rule 14 (father_rule -> assignation .)
    KW_LET          reduce using rule 14 (father_rule -> assignation .)
    KW_FN           reduce using rule 14 (father_rule -> assignation .)
    LBRACKET        reduce using rule 14 (father_rule -> assignation .)
    VARIABLE        reduce using rule 14 (father_rule -> assignation .)
    KW_FOR          reduce using rule 14 (father_rule -> assignation .)
    KW_IF           reduce using rule 14 (father_rule -> assignation .)
    KW_ELSE         reduce using rule 14 (father_rule -> assignation .)
    KW_WHILE        reduce using rule 14 (father_rule -> assignation .)
    KW_CONST        reduce using rule 14 (father_rule -> assignation .)
    QUOTE           reduce using rule 14 (father_rule -> assignation .)
    $end            reduce using rule 14 (father_rule -> assignation .)
    RBRACE          reduce using rule 14 (father_rule -> assignation .)
    KW_RETURN       reduce using rule 14 (father_rule -> assignation .)


state 15

    (15) father_rule -> declare_data_type .

    KW_PRINT        reduce using rule 15 (father_rule -> declare_data_type .)
    KW_LET          reduce using rule 15 (father_rule -> declare_data_type .)
    KW_FN           reduce using rule 15 (father_rule -> declare_data_type .)
    LBRACKET        reduce using rule 15 (father_rule -> declare_data_type .)
    VARIABLE        reduce using rule 15 (father_rule -> declare_data_type .)
    KW_FOR          reduce using rule 15 (father_rule -> declare_data_type .)
    KW_IF           reduce using rule 15 (father_rule -> declare_data_type .)
    KW_ELSE         reduce using rule 15 (father_rule -> declare_data_type .)
    KW_WHILE        reduce using rule 15 (father_rule -> declare_data_type .)
    KW_CONST        reduce using rule 15 (father_rule -> declare_data_type .)
    QUOTE           reduce using rule 15 (father_rule -> declare_data_type .)
    $end            reduce using rule 15 (father_rule -> declare_data_type .)
    RBRACE          reduce using rule 15 (father_rule -> declare_data_type .)
    KW_RETURN       reduce using rule 15 (father_rule -> declare_data_type .)


state 16

    (69) print -> KW_PRINT . LNOT LPAREN CADENA RPAREN SEMI
    (70) print -> KW_PRINT . LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI

    LNOT            shift and go to state 41


state 17

    (125) linkedlist_methods -> VARIABLE . linkedlist_push
    (126) linkedlist_methods -> VARIABLE . linkedlist_remove
    (116) hashmap_methods -> VARIABLE . hashmap_insert
    (117) hashmap_methods -> VARIABLE . hashmap_remove
    (139) input -> VARIABLE . DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI
    (140) assignation -> VARIABLE . assign_operators number SEMI
    (141) assignation -> VARIABLE . assign_operators expression SEMI
    (142) assignation -> VARIABLE . assign_operators number
    (143) assignation -> VARIABLE . assign_operators expression
    (127) linkedlist_push -> . DOT KW_PUSH_BACK LPAREN data RPAREN SEMI
    (128) linkedlist_remove -> . DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI
    (118) hashmap_insert -> . DOT KW_INSERT LPAREN mdata RPAREN SEMI
    (119) hashmap_remove -> . DOT KW_REMOVE LPAREN AND data RPAREN SEMI
    (40) assign_operators -> . EQUALS
    (41) assign_operators -> . TIMESEQUAL
    (42) assign_operators -> . DIVEQUAL
    (43) assign_operators -> . MODULUSEQUAL
    (44) assign_operators -> . PLUSEQUAL
    (45) assign_operators -> . MINUSEQUAL

    DOT             shift and go to state 46
    EQUALS          shift and go to state 48
    TIMESEQUAL      shift and go to state 49
    DIVEQUAL        shift and go to state 50
    MODULUSEQUAL    shift and go to state 51
    PLUSEQUAL       shift and go to state 52
    MINUSEQUAL      shift and go to state 53

    linkedlist_push                shift and go to state 42
    linkedlist_remove              shift and go to state 43
    hashmap_insert                 shift and go to state 44
    hashmap_remove                 shift and go to state 45
    assign_operators               shift and go to state 47

state 18

    (71) dvariable -> KW_LET . VARIABLE SEMI
    (72) array -> KW_LET . VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (75) array -> KW_LET . KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> KW_LET . KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (144) declare_data_type -> KW_LET . VARIABLE COLON data_type SEMI
    (112) hashmap -> KW_LET . VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (113) hashmap -> KW_LET . KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (114) hashmap -> KW_LET . VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (115) hashmap -> KW_LET . KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (121) linkedlist -> KW_LET . VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (122) linkedlist -> KW_LET . KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (123) linkedlist -> KW_LET . VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (124) linkedlist -> KW_LET . KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (85) let_initialization -> KW_LET . VARIABLE EQUALS data
    (86) let_initialization -> KW_LET . VARIABLE COLON data_type EQUALS data
    (87) let_initialization -> KW_LET . KW_MUT VARIABLE EQUALS data
    (88) let_initialization -> KW_LET . KW_MUT VARIABLE COLON data_type EQUALS data
    (89) let_initialization -> KW_LET . VARIABLE EQUALS expression_var
    (90) let_initialization -> KW_LET . VARIABLE COLON data_type EQUALS expression_var
    (91) let_initialization -> KW_LET . KW_MUT VARIABLE EQUALS expression_var
    (92) let_initialization -> KW_LET . KW_MUT VARIABLE COLON data_type EQUALS expression_var
    (138) input_init -> KW_LET . VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN

    VARIABLE        shift and go to state 54
    KW_MUT          shift and go to state 55


state 19

    (96) function -> KW_FN . VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE
    (132) function -> KW_FN . VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE

    VARIABLE        shift and go to state 56


state 20

    (97) control_str -> for_str .

    KW_PRINT        reduce using rule 97 (control_str -> for_str .)
    KW_LET          reduce using rule 97 (control_str -> for_str .)
    KW_FN           reduce using rule 97 (control_str -> for_str .)
    LBRACKET        reduce using rule 97 (control_str -> for_str .)
    VARIABLE        reduce using rule 97 (control_str -> for_str .)
    KW_FOR          reduce using rule 97 (control_str -> for_str .)
    KW_IF           reduce using rule 97 (control_str -> for_str .)
    KW_ELSE         reduce using rule 97 (control_str -> for_str .)
    KW_WHILE        reduce using rule 97 (control_str -> for_str .)
    KW_CONST        reduce using rule 97 (control_str -> for_str .)
    QUOTE           reduce using rule 97 (control_str -> for_str .)
    $end            reduce using rule 97 (control_str -> for_str .)
    RBRACE          reduce using rule 97 (control_str -> for_str .)
    KW_RETURN       reduce using rule 97 (control_str -> for_str .)


state 21

    (98) control_str -> for_str_tagged .

    KW_PRINT        reduce using rule 98 (control_str -> for_str_tagged .)
    KW_LET          reduce using rule 98 (control_str -> for_str_tagged .)
    KW_FN           reduce using rule 98 (control_str -> for_str_tagged .)
    LBRACKET        reduce using rule 98 (control_str -> for_str_tagged .)
    VARIABLE        reduce using rule 98 (control_str -> for_str_tagged .)
    KW_FOR          reduce using rule 98 (control_str -> for_str_tagged .)
    KW_IF           reduce using rule 98 (control_str -> for_str_tagged .)
    KW_ELSE         reduce using rule 98 (control_str -> for_str_tagged .)
    KW_WHILE        reduce using rule 98 (control_str -> for_str_tagged .)
    KW_CONST        reduce using rule 98 (control_str -> for_str_tagged .)
    QUOTE           reduce using rule 98 (control_str -> for_str_tagged .)
    $end            reduce using rule 98 (control_str -> for_str_tagged .)
    RBRACE          reduce using rule 98 (control_str -> for_str_tagged .)
    KW_RETURN       reduce using rule 98 (control_str -> for_str_tagged .)


state 22

    (99) control_str -> if .

    KW_PRINT        reduce using rule 99 (control_str -> if .)
    KW_LET          reduce using rule 99 (control_str -> if .)
    KW_FN           reduce using rule 99 (control_str -> if .)
    LBRACKET        reduce using rule 99 (control_str -> if .)
    VARIABLE        reduce using rule 99 (control_str -> if .)
    KW_FOR          reduce using rule 99 (control_str -> if .)
    KW_IF           reduce using rule 99 (control_str -> if .)
    KW_ELSE         reduce using rule 99 (control_str -> if .)
    KW_WHILE        reduce using rule 99 (control_str -> if .)
    KW_CONST        reduce using rule 99 (control_str -> if .)
    QUOTE           reduce using rule 99 (control_str -> if .)
    $end            reduce using rule 99 (control_str -> if .)
    RBRACE          reduce using rule 99 (control_str -> if .)
    KW_RETURN       reduce using rule 99 (control_str -> if .)


state 23

    (100) control_str -> else .

    KW_PRINT        reduce using rule 100 (control_str -> else .)
    KW_LET          reduce using rule 100 (control_str -> else .)
    KW_FN           reduce using rule 100 (control_str -> else .)
    LBRACKET        reduce using rule 100 (control_str -> else .)
    VARIABLE        reduce using rule 100 (control_str -> else .)
    KW_FOR          reduce using rule 100 (control_str -> else .)
    KW_IF           reduce using rule 100 (control_str -> else .)
    KW_ELSE         reduce using rule 100 (control_str -> else .)
    KW_WHILE        reduce using rule 100 (control_str -> else .)
    KW_CONST        reduce using rule 100 (control_str -> else .)
    QUOTE           reduce using rule 100 (control_str -> else .)
    $end            reduce using rule 100 (control_str -> else .)
    RBRACE          reduce using rule 100 (control_str -> else .)
    KW_RETURN       reduce using rule 100 (control_str -> else .)


state 24

    (101) control_str -> else_if .

    KW_PRINT        reduce using rule 101 (control_str -> else_if .)
    KW_LET          reduce using rule 101 (control_str -> else_if .)
    KW_FN           reduce using rule 101 (control_str -> else_if .)
    LBRACKET        reduce using rule 101 (control_str -> else_if .)
    VARIABLE        reduce using rule 101 (control_str -> else_if .)
    KW_FOR          reduce using rule 101 (control_str -> else_if .)
    KW_IF           reduce using rule 101 (control_str -> else_if .)
    KW_ELSE         reduce using rule 101 (control_str -> else_if .)
    KW_WHILE        reduce using rule 101 (control_str -> else_if .)
    KW_CONST        reduce using rule 101 (control_str -> else_if .)
    QUOTE           reduce using rule 101 (control_str -> else_if .)
    $end            reduce using rule 101 (control_str -> else_if .)
    RBRACE          reduce using rule 101 (control_str -> else_if .)
    KW_RETURN       reduce using rule 101 (control_str -> else_if .)


state 25

    (102) control_str -> while .

    KW_PRINT        reduce using rule 102 (control_str -> while .)
    KW_LET          reduce using rule 102 (control_str -> while .)
    KW_FN           reduce using rule 102 (control_str -> while .)
    LBRACKET        reduce using rule 102 (control_str -> while .)
    VARIABLE        reduce using rule 102 (control_str -> while .)
    KW_FOR          reduce using rule 102 (control_str -> while .)
    KW_IF           reduce using rule 102 (control_str -> while .)
    KW_ELSE         reduce using rule 102 (control_str -> while .)
    KW_WHILE        reduce using rule 102 (control_str -> while .)
    KW_CONST        reduce using rule 102 (control_str -> while .)
    QUOTE           reduce using rule 102 (control_str -> while .)
    $end            reduce using rule 102 (control_str -> while .)
    RBRACE          reduce using rule 102 (control_str -> while .)
    KW_RETURN       reduce using rule 102 (control_str -> while .)


state 26

    (110) data_str -> hashmap .

    SEMI            reduce using rule 110 (data_str -> hashmap .)
    KW_PRINT        reduce using rule 110 (data_str -> hashmap .)
    KW_LET          reduce using rule 110 (data_str -> hashmap .)
    KW_FN           reduce using rule 110 (data_str -> hashmap .)
    LBRACKET        reduce using rule 110 (data_str -> hashmap .)
    VARIABLE        reduce using rule 110 (data_str -> hashmap .)
    KW_FOR          reduce using rule 110 (data_str -> hashmap .)
    KW_IF           reduce using rule 110 (data_str -> hashmap .)
    KW_ELSE         reduce using rule 110 (data_str -> hashmap .)
    KW_WHILE        reduce using rule 110 (data_str -> hashmap .)
    KW_CONST        reduce using rule 110 (data_str -> hashmap .)
    QUOTE           reduce using rule 110 (data_str -> hashmap .)
    $end            reduce using rule 110 (data_str -> hashmap .)
    RBRACE          reduce using rule 110 (data_str -> hashmap .)
    KW_RETURN       reduce using rule 110 (data_str -> hashmap .)


state 27

    (111) data_str -> linkedlist .

    SEMI            reduce using rule 111 (data_str -> linkedlist .)
    KW_PRINT        reduce using rule 111 (data_str -> linkedlist .)
    KW_LET          reduce using rule 111 (data_str -> linkedlist .)
    KW_FN           reduce using rule 111 (data_str -> linkedlist .)
    LBRACKET        reduce using rule 111 (data_str -> linkedlist .)
    VARIABLE        reduce using rule 111 (data_str -> linkedlist .)
    KW_FOR          reduce using rule 111 (data_str -> linkedlist .)
    KW_IF           reduce using rule 111 (data_str -> linkedlist .)
    KW_ELSE         reduce using rule 111 (data_str -> linkedlist .)
    KW_WHILE        reduce using rule 111 (data_str -> linkedlist .)
    KW_CONST        reduce using rule 111 (data_str -> linkedlist .)
    QUOTE           reduce using rule 111 (data_str -> linkedlist .)
    $end            reduce using rule 111 (data_str -> linkedlist .)
    RBRACE          reduce using rule 111 (data_str -> linkedlist .)
    KW_RETURN       reduce using rule 111 (data_str -> linkedlist .)


state 28

    (73) array -> LBRACKET . mdata RBRACKET
    (74) array -> LBRACKET . data SEMI data RBRACKET
    (67) mdata -> . data
    (68) mdata -> . data COMMA mdata
    (48) data -> . CADENA
    (49) data -> . INTEGER
    (50) data -> . CHAR
    (51) data -> . FLOAT
    (52) data -> . KW_FALSE
    (53) data -> . KW_TRUE
    (54) data -> . tuple
    (80) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 59
    INTEGER         shift and go to state 60
    CHAR            shift and go to state 61
    FLOAT           shift and go to state 62
    KW_FALSE        shift and go to state 63
    KW_TRUE         shift and go to state 64
    LPAREN          shift and go to state 66

    mdata                          shift and go to state 57
    data                           shift and go to state 58
    tuple                          shift and go to state 65

state 29

    (81) initialization -> let_initialization . SEMI

    SEMI            shift and go to state 67


state 30

    (82) initialization -> const_initialization . SEMI

    SEMI            shift and go to state 68


state 31

    (84) initialization -> input_init . SEMI

    SEMI            shift and go to state 69


state 32

    (103) for_str -> KW_FOR . VARIABLE KW_IN range LBRACE main_rule RBRACE
    (104) for_str -> KW_FOR . VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE

    VARIABLE        shift and go to state 70


state 33

    (105) for_str_tagged -> label . COLON for_str

    COLON           shift and go to state 71


state 34

    (129) if -> KW_IF . conditional LBRACE main_rule RBRACE
    (65) conditional -> . VARIABLE comparator data
    (66) conditional -> . LPAREN lvariable RPAREN comparator data

    VARIABLE        shift and go to state 73
    LPAREN          shift and go to state 74

    conditional                    shift and go to state 72

state 35

    (130) else -> KW_ELSE . LBRACE main_rule RBRACE
    (131) else_if -> KW_ELSE . KW_IF conditional LBRACE main_rule RBRACE

    LBRACE          shift and go to state 75
    KW_IF           shift and go to state 76


state 36

    (79) while -> KW_WHILE . conditional LBRACE main_rule RBRACE
    (65) conditional -> . VARIABLE comparator data
    (66) conditional -> . LPAREN lvariable RPAREN comparator data

    VARIABLE        shift and go to state 73
    LPAREN          shift and go to state 74

    conditional                    shift and go to state 77

state 37

    (93) const_initialization -> KW_CONST . VARIABLE COLON data_type EQUALS data

    VARIABLE        shift and go to state 78


state 38

    (108) label -> QUOTE . VARIABLE

    VARIABLE        shift and go to state 79


state 39

    (2) main_rule -> father_rule main_rule .

    $end            reduce using rule 2 (main_rule -> father_rule main_rule .)
    RBRACE          reduce using rule 2 (main_rule -> father_rule main_rule .)
    KW_RETURN       reduce using rule 2 (main_rule -> father_rule main_rule .)


state 40

    (83) initialization -> data_str SEMI .

    KW_PRINT        reduce using rule 83 (initialization -> data_str SEMI .)
    KW_LET          reduce using rule 83 (initialization -> data_str SEMI .)
    KW_FN           reduce using rule 83 (initialization -> data_str SEMI .)
    LBRACKET        reduce using rule 83 (initialization -> data_str SEMI .)
    VARIABLE        reduce using rule 83 (initialization -> data_str SEMI .)
    KW_FOR          reduce using rule 83 (initialization -> data_str SEMI .)
    KW_IF           reduce using rule 83 (initialization -> data_str SEMI .)
    KW_ELSE         reduce using rule 83 (initialization -> data_str SEMI .)
    KW_WHILE        reduce using rule 83 (initialization -> data_str SEMI .)
    KW_CONST        reduce using rule 83 (initialization -> data_str SEMI .)
    QUOTE           reduce using rule 83 (initialization -> data_str SEMI .)
    $end            reduce using rule 83 (initialization -> data_str SEMI .)
    RBRACE          reduce using rule 83 (initialization -> data_str SEMI .)
    KW_RETURN       reduce using rule 83 (initialization -> data_str SEMI .)


state 41

    (69) print -> KW_PRINT LNOT . LPAREN CADENA RPAREN SEMI
    (70) print -> KW_PRINT LNOT . LPAREN CADENA COMMA VARIABLE RPAREN SEMI

    LPAREN          shift and go to state 80


state 42

    (125) linkedlist_methods -> VARIABLE linkedlist_push .

    KW_PRINT        reduce using rule 125 (linkedlist_methods -> VARIABLE linkedlist_push .)
    KW_LET          reduce using rule 125 (linkedlist_methods -> VARIABLE linkedlist_push .)
    KW_FN           reduce using rule 125 (linkedlist_methods -> VARIABLE linkedlist_push .)
    LBRACKET        reduce using rule 125 (linkedlist_methods -> VARIABLE linkedlist_push .)
    VARIABLE        reduce using rule 125 (linkedlist_methods -> VARIABLE linkedlist_push .)
    KW_FOR          reduce using rule 125 (linkedlist_methods -> VARIABLE linkedlist_push .)
    KW_IF           reduce using rule 125 (linkedlist_methods -> VARIABLE linkedlist_push .)
    KW_ELSE         reduce using rule 125 (linkedlist_methods -> VARIABLE linkedlist_push .)
    KW_WHILE        reduce using rule 125 (linkedlist_methods -> VARIABLE linkedlist_push .)
    KW_CONST        reduce using rule 125 (linkedlist_methods -> VARIABLE linkedlist_push .)
    QUOTE           reduce using rule 125 (linkedlist_methods -> VARIABLE linkedlist_push .)
    $end            reduce using rule 125 (linkedlist_methods -> VARIABLE linkedlist_push .)
    RBRACE          reduce using rule 125 (linkedlist_methods -> VARIABLE linkedlist_push .)
    KW_RETURN       reduce using rule 125 (linkedlist_methods -> VARIABLE linkedlist_push .)


state 43

    (126) linkedlist_methods -> VARIABLE linkedlist_remove .

    KW_PRINT        reduce using rule 126 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    KW_LET          reduce using rule 126 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    KW_FN           reduce using rule 126 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    LBRACKET        reduce using rule 126 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    VARIABLE        reduce using rule 126 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    KW_FOR          reduce using rule 126 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    KW_IF           reduce using rule 126 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    KW_ELSE         reduce using rule 126 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    KW_WHILE        reduce using rule 126 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    KW_CONST        reduce using rule 126 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    QUOTE           reduce using rule 126 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    $end            reduce using rule 126 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    RBRACE          reduce using rule 126 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    KW_RETURN       reduce using rule 126 (linkedlist_methods -> VARIABLE linkedlist_remove .)


state 44

    (116) hashmap_methods -> VARIABLE hashmap_insert .

    KW_PRINT        reduce using rule 116 (hashmap_methods -> VARIABLE hashmap_insert .)
    KW_LET          reduce using rule 116 (hashmap_methods -> VARIABLE hashmap_insert .)
    KW_FN           reduce using rule 116 (hashmap_methods -> VARIABLE hashmap_insert .)
    LBRACKET        reduce using rule 116 (hashmap_methods -> VARIABLE hashmap_insert .)
    VARIABLE        reduce using rule 116 (hashmap_methods -> VARIABLE hashmap_insert .)
    KW_FOR          reduce using rule 116 (hashmap_methods -> VARIABLE hashmap_insert .)
    KW_IF           reduce using rule 116 (hashmap_methods -> VARIABLE hashmap_insert .)
    KW_ELSE         reduce using rule 116 (hashmap_methods -> VARIABLE hashmap_insert .)
    KW_WHILE        reduce using rule 116 (hashmap_methods -> VARIABLE hashmap_insert .)
    KW_CONST        reduce using rule 116 (hashmap_methods -> VARIABLE hashmap_insert .)
    QUOTE           reduce using rule 116 (hashmap_methods -> VARIABLE hashmap_insert .)
    $end            reduce using rule 116 (hashmap_methods -> VARIABLE hashmap_insert .)
    RBRACE          reduce using rule 116 (hashmap_methods -> VARIABLE hashmap_insert .)
    KW_RETURN       reduce using rule 116 (hashmap_methods -> VARIABLE hashmap_insert .)


state 45

    (117) hashmap_methods -> VARIABLE hashmap_remove .

    KW_PRINT        reduce using rule 117 (hashmap_methods -> VARIABLE hashmap_remove .)
    KW_LET          reduce using rule 117 (hashmap_methods -> VARIABLE hashmap_remove .)
    KW_FN           reduce using rule 117 (hashmap_methods -> VARIABLE hashmap_remove .)
    LBRACKET        reduce using rule 117 (hashmap_methods -> VARIABLE hashmap_remove .)
    VARIABLE        reduce using rule 117 (hashmap_methods -> VARIABLE hashmap_remove .)
    KW_FOR          reduce using rule 117 (hashmap_methods -> VARIABLE hashmap_remove .)
    KW_IF           reduce using rule 117 (hashmap_methods -> VARIABLE hashmap_remove .)
    KW_ELSE         reduce using rule 117 (hashmap_methods -> VARIABLE hashmap_remove .)
    KW_WHILE        reduce using rule 117 (hashmap_methods -> VARIABLE hashmap_remove .)
    KW_CONST        reduce using rule 117 (hashmap_methods -> VARIABLE hashmap_remove .)
    QUOTE           reduce using rule 117 (hashmap_methods -> VARIABLE hashmap_remove .)
    $end            reduce using rule 117 (hashmap_methods -> VARIABLE hashmap_remove .)
    RBRACE          reduce using rule 117 (hashmap_methods -> VARIABLE hashmap_remove .)
    KW_RETURN       reduce using rule 117 (hashmap_methods -> VARIABLE hashmap_remove .)


state 46

    (139) input -> VARIABLE DOT . KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI
    (127) linkedlist_push -> DOT . KW_PUSH_BACK LPAREN data RPAREN SEMI
    (128) linkedlist_remove -> DOT . KW_REMOVE LPAREN INTEGER RPAREN SEMI
    (118) hashmap_insert -> DOT . KW_INSERT LPAREN mdata RPAREN SEMI
    (119) hashmap_remove -> DOT . KW_REMOVE LPAREN AND data RPAREN SEMI

    KW_READ_LINE    shift and go to state 81
    KW_PUSH_BACK    shift and go to state 82
    KW_REMOVE       shift and go to state 83
    KW_INSERT       shift and go to state 84


state 47

    (140) assignation -> VARIABLE assign_operators . number SEMI
    (141) assignation -> VARIABLE assign_operators . expression SEMI
    (142) assignation -> VARIABLE assign_operators . number
    (143) assignation -> VARIABLE assign_operators . expression
    (22) number -> . INTEGER
    (23) number -> . FLOAT
    (24) number -> . VARIABLE
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . number
    (21) expression -> . division
    (46) division -> . INTEGER DIVIDE INTEGER
    (47) division -> . FLOAT DIVIDE FLOAT

    INTEGER         shift and go to state 88
    FLOAT           shift and go to state 89
    VARIABLE        shift and go to state 85
    LPAREN          shift and go to state 90

    number                         shift and go to state 86
    expression                     shift and go to state 87
    division                       shift and go to state 91

state 48

    (40) assign_operators -> EQUALS .

    INTEGER         reduce using rule 40 (assign_operators -> EQUALS .)
    FLOAT           reduce using rule 40 (assign_operators -> EQUALS .)
    VARIABLE        reduce using rule 40 (assign_operators -> EQUALS .)
    LPAREN          reduce using rule 40 (assign_operators -> EQUALS .)


state 49

    (41) assign_operators -> TIMESEQUAL .

    INTEGER         reduce using rule 41 (assign_operators -> TIMESEQUAL .)
    FLOAT           reduce using rule 41 (assign_operators -> TIMESEQUAL .)
    VARIABLE        reduce using rule 41 (assign_operators -> TIMESEQUAL .)
    LPAREN          reduce using rule 41 (assign_operators -> TIMESEQUAL .)


state 50

    (42) assign_operators -> DIVEQUAL .

    INTEGER         reduce using rule 42 (assign_operators -> DIVEQUAL .)
    FLOAT           reduce using rule 42 (assign_operators -> DIVEQUAL .)
    VARIABLE        reduce using rule 42 (assign_operators -> DIVEQUAL .)
    LPAREN          reduce using rule 42 (assign_operators -> DIVEQUAL .)


state 51

    (43) assign_operators -> MODULUSEQUAL .

    INTEGER         reduce using rule 43 (assign_operators -> MODULUSEQUAL .)
    FLOAT           reduce using rule 43 (assign_operators -> MODULUSEQUAL .)
    VARIABLE        reduce using rule 43 (assign_operators -> MODULUSEQUAL .)
    LPAREN          reduce using rule 43 (assign_operators -> MODULUSEQUAL .)


state 52

    (44) assign_operators -> PLUSEQUAL .

    INTEGER         reduce using rule 44 (assign_operators -> PLUSEQUAL .)
    FLOAT           reduce using rule 44 (assign_operators -> PLUSEQUAL .)
    VARIABLE        reduce using rule 44 (assign_operators -> PLUSEQUAL .)
    LPAREN          reduce using rule 44 (assign_operators -> PLUSEQUAL .)


state 53

    (45) assign_operators -> MINUSEQUAL .

    INTEGER         reduce using rule 45 (assign_operators -> MINUSEQUAL .)
    FLOAT           reduce using rule 45 (assign_operators -> MINUSEQUAL .)
    VARIABLE        reduce using rule 45 (assign_operators -> MINUSEQUAL .)
    LPAREN          reduce using rule 45 (assign_operators -> MINUSEQUAL .)


state 54

    (71) dvariable -> KW_LET VARIABLE . SEMI
    (72) array -> KW_LET VARIABLE . EQUALS LBRACKET mdata RBRACKET SEMI
    (144) declare_data_type -> KW_LET VARIABLE . COLON data_type SEMI
    (112) hashmap -> KW_LET VARIABLE . EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (114) hashmap -> KW_LET VARIABLE . EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (121) linkedlist -> KW_LET VARIABLE . COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (123) linkedlist -> KW_LET VARIABLE . EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (85) let_initialization -> KW_LET VARIABLE . EQUALS data
    (86) let_initialization -> KW_LET VARIABLE . COLON data_type EQUALS data
    (89) let_initialization -> KW_LET VARIABLE . EQUALS expression_var
    (90) let_initialization -> KW_LET VARIABLE . COLON data_type EQUALS expression_var
    (138) input_init -> KW_LET VARIABLE . EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN

    SEMI            shift and go to state 92
    EQUALS          shift and go to state 93
    COLON           shift and go to state 94


state 55

    (75) array -> KW_LET KW_MUT . VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> KW_LET KW_MUT . VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (113) hashmap -> KW_LET KW_MUT . VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (115) hashmap -> KW_LET KW_MUT . VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (122) linkedlist -> KW_LET KW_MUT . VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (124) linkedlist -> KW_LET KW_MUT . VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (87) let_initialization -> KW_LET KW_MUT . VARIABLE EQUALS data
    (88) let_initialization -> KW_LET KW_MUT . VARIABLE COLON data_type EQUALS data
    (91) let_initialization -> KW_LET KW_MUT . VARIABLE EQUALS expression_var
    (92) let_initialization -> KW_LET KW_MUT . VARIABLE COLON data_type EQUALS expression_var

    VARIABLE        shift and go to state 95


state 56

    (96) function -> KW_FN VARIABLE . LPAREN arguments RPAREN LBRACE main_rule RBRACE
    (132) function -> KW_FN VARIABLE . LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE

    LPAREN          shift and go to state 96


state 57

    (73) array -> LBRACKET mdata . RBRACKET

    RBRACKET        shift and go to state 97


state 58

    (74) array -> LBRACKET data . SEMI data RBRACKET
    (67) mdata -> data .
    (68) mdata -> data . COMMA mdata

    SEMI            shift and go to state 98
    RBRACKET        reduce using rule 67 (mdata -> data .)
    COMMA           shift and go to state 99


state 59

    (48) data -> CADENA .

    SEMI            reduce using rule 48 (data -> CADENA .)
    COMMA           reduce using rule 48 (data -> CADENA .)
    RBRACKET        reduce using rule 48 (data -> CADENA .)
    RPAREN          reduce using rule 48 (data -> CADENA .)
    LBRACE          reduce using rule 48 (data -> CADENA .)


state 60

    (49) data -> INTEGER .

    SEMI            reduce using rule 49 (data -> INTEGER .)
    COMMA           reduce using rule 49 (data -> INTEGER .)
    RBRACKET        reduce using rule 49 (data -> INTEGER .)
    RPAREN          reduce using rule 49 (data -> INTEGER .)
    LBRACE          reduce using rule 49 (data -> INTEGER .)


state 61

    (50) data -> CHAR .

    SEMI            reduce using rule 50 (data -> CHAR .)
    COMMA           reduce using rule 50 (data -> CHAR .)
    RBRACKET        reduce using rule 50 (data -> CHAR .)
    RPAREN          reduce using rule 50 (data -> CHAR .)
    LBRACE          reduce using rule 50 (data -> CHAR .)


state 62

    (51) data -> FLOAT .

    SEMI            reduce using rule 51 (data -> FLOAT .)
    COMMA           reduce using rule 51 (data -> FLOAT .)
    RBRACKET        reduce using rule 51 (data -> FLOAT .)
    RPAREN          reduce using rule 51 (data -> FLOAT .)
    LBRACE          reduce using rule 51 (data -> FLOAT .)


state 63

    (52) data -> KW_FALSE .

    SEMI            reduce using rule 52 (data -> KW_FALSE .)
    COMMA           reduce using rule 52 (data -> KW_FALSE .)
    RBRACKET        reduce using rule 52 (data -> KW_FALSE .)
    RPAREN          reduce using rule 52 (data -> KW_FALSE .)
    LBRACE          reduce using rule 52 (data -> KW_FALSE .)


state 64

    (53) data -> KW_TRUE .

    SEMI            reduce using rule 53 (data -> KW_TRUE .)
    COMMA           reduce using rule 53 (data -> KW_TRUE .)
    RBRACKET        reduce using rule 53 (data -> KW_TRUE .)
    RPAREN          reduce using rule 53 (data -> KW_TRUE .)
    LBRACE          reduce using rule 53 (data -> KW_TRUE .)


state 65

    (54) data -> tuple .

    SEMI            reduce using rule 54 (data -> tuple .)
    COMMA           reduce using rule 54 (data -> tuple .)
    RBRACKET        reduce using rule 54 (data -> tuple .)
    RPAREN          reduce using rule 54 (data -> tuple .)
    LBRACE          reduce using rule 54 (data -> tuple .)


state 66

    (80) tuple -> LPAREN . mdata RPAREN
    (67) mdata -> . data
    (68) mdata -> . data COMMA mdata
    (48) data -> . CADENA
    (49) data -> . INTEGER
    (50) data -> . CHAR
    (51) data -> . FLOAT
    (52) data -> . KW_FALSE
    (53) data -> . KW_TRUE
    (54) data -> . tuple
    (80) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 59
    INTEGER         shift and go to state 60
    CHAR            shift and go to state 61
    FLOAT           shift and go to state 62
    KW_FALSE        shift and go to state 63
    KW_TRUE         shift and go to state 64
    LPAREN          shift and go to state 66

    mdata                          shift and go to state 100
    data                           shift and go to state 101
    tuple                          shift and go to state 65

state 67

    (81) initialization -> let_initialization SEMI .

    KW_PRINT        reduce using rule 81 (initialization -> let_initialization SEMI .)
    KW_LET          reduce using rule 81 (initialization -> let_initialization SEMI .)
    KW_FN           reduce using rule 81 (initialization -> let_initialization SEMI .)
    LBRACKET        reduce using rule 81 (initialization -> let_initialization SEMI .)
    VARIABLE        reduce using rule 81 (initialization -> let_initialization SEMI .)
    KW_FOR          reduce using rule 81 (initialization -> let_initialization SEMI .)
    KW_IF           reduce using rule 81 (initialization -> let_initialization SEMI .)
    KW_ELSE         reduce using rule 81 (initialization -> let_initialization SEMI .)
    KW_WHILE        reduce using rule 81 (initialization -> let_initialization SEMI .)
    KW_CONST        reduce using rule 81 (initialization -> let_initialization SEMI .)
    QUOTE           reduce using rule 81 (initialization -> let_initialization SEMI .)
    $end            reduce using rule 81 (initialization -> let_initialization SEMI .)
    RBRACE          reduce using rule 81 (initialization -> let_initialization SEMI .)
    KW_RETURN       reduce using rule 81 (initialization -> let_initialization SEMI .)


state 68

    (82) initialization -> const_initialization SEMI .

    KW_PRINT        reduce using rule 82 (initialization -> const_initialization SEMI .)
    KW_LET          reduce using rule 82 (initialization -> const_initialization SEMI .)
    KW_FN           reduce using rule 82 (initialization -> const_initialization SEMI .)
    LBRACKET        reduce using rule 82 (initialization -> const_initialization SEMI .)
    VARIABLE        reduce using rule 82 (initialization -> const_initialization SEMI .)
    KW_FOR          reduce using rule 82 (initialization -> const_initialization SEMI .)
    KW_IF           reduce using rule 82 (initialization -> const_initialization SEMI .)
    KW_ELSE         reduce using rule 82 (initialization -> const_initialization SEMI .)
    KW_WHILE        reduce using rule 82 (initialization -> const_initialization SEMI .)
    KW_CONST        reduce using rule 82 (initialization -> const_initialization SEMI .)
    QUOTE           reduce using rule 82 (initialization -> const_initialization SEMI .)
    $end            reduce using rule 82 (initialization -> const_initialization SEMI .)
    RBRACE          reduce using rule 82 (initialization -> const_initialization SEMI .)
    KW_RETURN       reduce using rule 82 (initialization -> const_initialization SEMI .)


state 69

    (84) initialization -> input_init SEMI .

    KW_PRINT        reduce using rule 84 (initialization -> input_init SEMI .)
    KW_LET          reduce using rule 84 (initialization -> input_init SEMI .)
    KW_FN           reduce using rule 84 (initialization -> input_init SEMI .)
    LBRACKET        reduce using rule 84 (initialization -> input_init SEMI .)
    VARIABLE        reduce using rule 84 (initialization -> input_init SEMI .)
    KW_FOR          reduce using rule 84 (initialization -> input_init SEMI .)
    KW_IF           reduce using rule 84 (initialization -> input_init SEMI .)
    KW_ELSE         reduce using rule 84 (initialization -> input_init SEMI .)
    KW_WHILE        reduce using rule 84 (initialization -> input_init SEMI .)
    KW_CONST        reduce using rule 84 (initialization -> input_init SEMI .)
    QUOTE           reduce using rule 84 (initialization -> input_init SEMI .)
    $end            reduce using rule 84 (initialization -> input_init SEMI .)
    RBRACE          reduce using rule 84 (initialization -> input_init SEMI .)
    KW_RETURN       reduce using rule 84 (initialization -> input_init SEMI .)


state 70

    (103) for_str -> KW_FOR VARIABLE . KW_IN range LBRACE main_rule RBRACE
    (104) for_str -> KW_FOR VARIABLE . KW_IN VARIABLE LBRACE main_rule RBRACE

    KW_IN           shift and go to state 102


state 71

    (105) for_str_tagged -> label COLON . for_str
    (103) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE
    (104) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE

    KW_FOR          shift and go to state 32

    for_str                        shift and go to state 103

state 72

    (129) if -> KW_IF conditional . LBRACE main_rule RBRACE

    LBRACE          shift and go to state 104


state 73

    (65) conditional -> VARIABLE . comparator data
    (55) comparator -> .
    (56) comparator -> . EQ
    (57) comparator -> . NE
    (58) comparator -> . GE
    (59) comparator -> . LE
    (60) comparator -> . GT
    (61) comparator -> . LT

    CADENA          reduce using rule 55 (comparator -> .)
    INTEGER         reduce using rule 55 (comparator -> .)
    CHAR            reduce using rule 55 (comparator -> .)
    FLOAT           reduce using rule 55 (comparator -> .)
    KW_FALSE        reduce using rule 55 (comparator -> .)
    KW_TRUE         reduce using rule 55 (comparator -> .)
    LPAREN          reduce using rule 55 (comparator -> .)
    EQ              shift and go to state 106
    NE              shift and go to state 107
    GE              shift and go to state 108
    LE              shift and go to state 109
    GT              shift and go to state 110
    LT              shift and go to state 111

    comparator                     shift and go to state 105

state 74

    (66) conditional -> LPAREN . lvariable RPAREN comparator data
    (64) lvariable -> . VARIABLE logic VARIABLE

    VARIABLE        shift and go to state 113

    lvariable                      shift and go to state 112

state 75

    (130) else -> KW_ELSE LBRACE . main_rule RBRACE
    (1) main_rule -> . father_rule
    (2) main_rule -> . father_rule main_rule
    (3) father_rule -> . print
    (4) father_rule -> . dvariable
    (5) father_rule -> . function
    (6) father_rule -> . control_str
    (7) father_rule -> . void
    (8) father_rule -> . data_str
    (9) father_rule -> . array
    (10) father_rule -> . linkedlist_methods
    (11) father_rule -> . hashmap_methods
    (12) father_rule -> . initialization
    (13) father_rule -> . input
    (14) father_rule -> . assignation
    (15) father_rule -> . declare_data_type
    (69) print -> . KW_PRINT LNOT LPAREN CADENA RPAREN SEMI
    (70) print -> . KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI
    (71) dvariable -> . KW_LET VARIABLE SEMI
    (96) function -> . KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE
    (132) function -> . KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE
    (97) control_str -> . for_str
    (98) control_str -> . for_str_tagged
    (99) control_str -> . if
    (100) control_str -> . else
    (101) control_str -> . else_if
    (102) control_str -> . while
    (120) void -> .
    (109) data_str -> . array
    (110) data_str -> . hashmap
    (111) data_str -> . linkedlist
    (72) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (73) array -> . LBRACKET mdata RBRACKET
    (74) array -> . LBRACKET data SEMI data RBRACKET
    (75) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (125) linkedlist_methods -> . VARIABLE linkedlist_push
    (126) linkedlist_methods -> . VARIABLE linkedlist_remove
    (116) hashmap_methods -> . VARIABLE hashmap_insert
    (117) hashmap_methods -> . VARIABLE hashmap_remove
    (81) initialization -> . let_initialization SEMI
    (82) initialization -> . const_initialization SEMI
    (83) initialization -> . data_str SEMI
    (84) initialization -> . input_init SEMI
    (139) input -> . VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI
    (140) assignation -> . VARIABLE assign_operators number SEMI
    (141) assignation -> . VARIABLE assign_operators expression SEMI
    (142) assignation -> . VARIABLE assign_operators number
    (143) assignation -> . VARIABLE assign_operators expression
    (144) declare_data_type -> . KW_LET VARIABLE COLON data_type SEMI
    (103) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE
    (104) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE
    (105) for_str_tagged -> . label COLON for_str
    (129) if -> . KW_IF conditional LBRACE main_rule RBRACE
    (130) else -> . KW_ELSE LBRACE main_rule RBRACE
    (131) else_if -> . KW_ELSE KW_IF conditional LBRACE main_rule RBRACE
    (79) while -> . KW_WHILE conditional LBRACE main_rule RBRACE
    (112) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (113) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (114) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (115) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (121) linkedlist -> . KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (122) linkedlist -> . KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (123) linkedlist -> . KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (124) linkedlist -> . KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (85) let_initialization -> . KW_LET VARIABLE EQUALS data
    (86) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS data
    (87) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS data
    (88) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS data
    (89) let_initialization -> . KW_LET VARIABLE EQUALS expression_var
    (90) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS expression_var
    (91) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS expression_var
    (92) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var
    (93) const_initialization -> . KW_CONST VARIABLE COLON data_type EQUALS data
    (138) input_init -> . KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN
    (108) label -> . QUOTE VARIABLE

  ! shift/reduce conflict for KW_PRINT resolved as shift
  ! shift/reduce conflict for KW_LET resolved as shift
  ! shift/reduce conflict for KW_FN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for KW_FOR resolved as shift
  ! shift/reduce conflict for KW_IF resolved as shift
  ! shift/reduce conflict for KW_ELSE resolved as shift
  ! shift/reduce conflict for KW_WHILE resolved as shift
  ! shift/reduce conflict for KW_CONST resolved as shift
  ! shift/reduce conflict for QUOTE resolved as shift
    KW_PRINT        shift and go to state 16
    KW_LET          shift and go to state 18
    KW_FN           shift and go to state 19
    RBRACE          reduce using rule 120 (void -> .)
    LBRACKET        shift and go to state 28
    VARIABLE        shift and go to state 17
    KW_FOR          shift and go to state 32
    KW_IF           shift and go to state 34
    KW_ELSE         shift and go to state 35
    KW_WHILE        shift and go to state 36
    KW_CONST        shift and go to state 37
    QUOTE           shift and go to state 38

  ! KW_PRINT        [ reduce using rule 120 (void -> .) ]
  ! KW_LET          [ reduce using rule 120 (void -> .) ]
  ! KW_FN           [ reduce using rule 120 (void -> .) ]
  ! LBRACKET        [ reduce using rule 120 (void -> .) ]
  ! VARIABLE        [ reduce using rule 120 (void -> .) ]
  ! KW_FOR          [ reduce using rule 120 (void -> .) ]
  ! KW_IF           [ reduce using rule 120 (void -> .) ]
  ! KW_ELSE         [ reduce using rule 120 (void -> .) ]
  ! KW_WHILE        [ reduce using rule 120 (void -> .) ]
  ! KW_CONST        [ reduce using rule 120 (void -> .) ]
  ! QUOTE           [ reduce using rule 120 (void -> .) ]

    main_rule                      shift and go to state 114
    father_rule                    shift and go to state 2
    print                          shift and go to state 3
    dvariable                      shift and go to state 4
    function                       shift and go to state 5
    control_str                    shift and go to state 6
    void                           shift and go to state 7
    data_str                       shift and go to state 8
    array                          shift and go to state 9
    linkedlist_methods             shift and go to state 10
    hashmap_methods                shift and go to state 11
    initialization                 shift and go to state 12
    input                          shift and go to state 13
    assignation                    shift and go to state 14
    declare_data_type              shift and go to state 15
    for_str                        shift and go to state 20
    for_str_tagged                 shift and go to state 21
    if                             shift and go to state 22
    else                           shift and go to state 23
    else_if                        shift and go to state 24
    while                          shift and go to state 25
    hashmap                        shift and go to state 26
    linkedlist                     shift and go to state 27
    let_initialization             shift and go to state 29
    const_initialization           shift and go to state 30
    input_init                     shift and go to state 31
    label                          shift and go to state 33

state 76

    (131) else_if -> KW_ELSE KW_IF . conditional LBRACE main_rule RBRACE
    (65) conditional -> . VARIABLE comparator data
    (66) conditional -> . LPAREN lvariable RPAREN comparator data

    VARIABLE        shift and go to state 73
    LPAREN          shift and go to state 74

    conditional                    shift and go to state 115

state 77

    (79) while -> KW_WHILE conditional . LBRACE main_rule RBRACE

    LBRACE          shift and go to state 116


state 78

    (93) const_initialization -> KW_CONST VARIABLE . COLON data_type EQUALS data

    COLON           shift and go to state 117


state 79

    (108) label -> QUOTE VARIABLE .

    COLON           reduce using rule 108 (label -> QUOTE VARIABLE .)


state 80

    (69) print -> KW_PRINT LNOT LPAREN . CADENA RPAREN SEMI
    (70) print -> KW_PRINT LNOT LPAREN . CADENA COMMA VARIABLE RPAREN SEMI

    CADENA          shift and go to state 118


state 81

    (139) input -> VARIABLE DOT KW_READ_LINE . LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI

    LPAREN          shift and go to state 119


state 82

    (127) linkedlist_push -> DOT KW_PUSH_BACK . LPAREN data RPAREN SEMI

    LPAREN          shift and go to state 120


state 83

    (128) linkedlist_remove -> DOT KW_REMOVE . LPAREN INTEGER RPAREN SEMI
    (119) hashmap_remove -> DOT KW_REMOVE . LPAREN AND data RPAREN SEMI

    LPAREN          shift and go to state 121


state 84

    (118) hashmap_insert -> DOT KW_INSERT . LPAREN mdata RPAREN SEMI

    LPAREN          shift and go to state 122


state 85

    (24) number -> VARIABLE .

    SEMI            reduce using rule 24 (number -> VARIABLE .)
    KW_PRINT        reduce using rule 24 (number -> VARIABLE .)
    KW_LET          reduce using rule 24 (number -> VARIABLE .)
    KW_FN           reduce using rule 24 (number -> VARIABLE .)
    LBRACKET        reduce using rule 24 (number -> VARIABLE .)
    VARIABLE        reduce using rule 24 (number -> VARIABLE .)
    KW_FOR          reduce using rule 24 (number -> VARIABLE .)
    KW_IF           reduce using rule 24 (number -> VARIABLE .)
    KW_ELSE         reduce using rule 24 (number -> VARIABLE .)
    KW_WHILE        reduce using rule 24 (number -> VARIABLE .)
    KW_CONST        reduce using rule 24 (number -> VARIABLE .)
    QUOTE           reduce using rule 24 (number -> VARIABLE .)
    $end            reduce using rule 24 (number -> VARIABLE .)
    RBRACE          reduce using rule 24 (number -> VARIABLE .)
    KW_RETURN       reduce using rule 24 (number -> VARIABLE .)
    PLUS            reduce using rule 24 (number -> VARIABLE .)
    MINUS           reduce using rule 24 (number -> VARIABLE .)
    TIMES           reduce using rule 24 (number -> VARIABLE .)
    RPAREN          reduce using rule 24 (number -> VARIABLE .)


state 86

    (140) assignation -> VARIABLE assign_operators number . SEMI
    (142) assignation -> VARIABLE assign_operators number .
    (20) expression -> number .

  ! shift/reduce conflict for SEMI resolved as shift
  ! reduce/reduce conflict for KW_PRINT resolved using rule 20 (expression -> number .)
  ! reduce/reduce conflict for KW_LET resolved using rule 20 (expression -> number .)
  ! reduce/reduce conflict for KW_FN resolved using rule 20 (expression -> number .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 20 (expression -> number .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 20 (expression -> number .)
  ! reduce/reduce conflict for KW_FOR resolved using rule 20 (expression -> number .)
  ! reduce/reduce conflict for KW_IF resolved using rule 20 (expression -> number .)
  ! reduce/reduce conflict for KW_ELSE resolved using rule 20 (expression -> number .)
  ! reduce/reduce conflict for KW_WHILE resolved using rule 20 (expression -> number .)
  ! reduce/reduce conflict for KW_CONST resolved using rule 20 (expression -> number .)
  ! reduce/reduce conflict for QUOTE resolved using rule 20 (expression -> number .)
  ! reduce/reduce conflict for $end resolved using rule 20 (expression -> number .)
  ! reduce/reduce conflict for RBRACE resolved using rule 20 (expression -> number .)
  ! reduce/reduce conflict for KW_RETURN resolved using rule 20 (expression -> number .)
    SEMI            shift and go to state 123
    PLUS            reduce using rule 20 (expression -> number .)
    MINUS           reduce using rule 20 (expression -> number .)
    TIMES           reduce using rule 20 (expression -> number .)
    KW_PRINT        reduce using rule 20 (expression -> number .)
    KW_LET          reduce using rule 20 (expression -> number .)
    KW_FN           reduce using rule 20 (expression -> number .)
    LBRACKET        reduce using rule 20 (expression -> number .)
    VARIABLE        reduce using rule 20 (expression -> number .)
    KW_FOR          reduce using rule 20 (expression -> number .)
    KW_IF           reduce using rule 20 (expression -> number .)
    KW_ELSE         reduce using rule 20 (expression -> number .)
    KW_WHILE        reduce using rule 20 (expression -> number .)
    KW_CONST        reduce using rule 20 (expression -> number .)
    QUOTE           reduce using rule 20 (expression -> number .)
    $end            reduce using rule 20 (expression -> number .)
    RBRACE          reduce using rule 20 (expression -> number .)
    KW_RETURN       reduce using rule 20 (expression -> number .)

  ! KW_PRINT        [ reduce using rule 142 (assignation -> VARIABLE assign_operators number .) ]
  ! KW_LET          [ reduce using rule 142 (assignation -> VARIABLE assign_operators number .) ]
  ! KW_FN           [ reduce using rule 142 (assignation -> VARIABLE assign_operators number .) ]
  ! LBRACKET        [ reduce using rule 142 (assignation -> VARIABLE assign_operators number .) ]
  ! VARIABLE        [ reduce using rule 142 (assignation -> VARIABLE assign_operators number .) ]
  ! KW_FOR          [ reduce using rule 142 (assignation -> VARIABLE assign_operators number .) ]
  ! KW_IF           [ reduce using rule 142 (assignation -> VARIABLE assign_operators number .) ]
  ! KW_ELSE         [ reduce using rule 142 (assignation -> VARIABLE assign_operators number .) ]
  ! KW_WHILE        [ reduce using rule 142 (assignation -> VARIABLE assign_operators number .) ]
  ! KW_CONST        [ reduce using rule 142 (assignation -> VARIABLE assign_operators number .) ]
  ! QUOTE           [ reduce using rule 142 (assignation -> VARIABLE assign_operators number .) ]
  ! $end            [ reduce using rule 142 (assignation -> VARIABLE assign_operators number .) ]
  ! RBRACE          [ reduce using rule 142 (assignation -> VARIABLE assign_operators number .) ]
  ! KW_RETURN       [ reduce using rule 142 (assignation -> VARIABLE assign_operators number .) ]
  ! SEMI            [ reduce using rule 20 (expression -> number .) ]


state 87

    (141) assignation -> VARIABLE assign_operators expression . SEMI
    (143) assignation -> VARIABLE assign_operators expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . MINUS expression
    (18) expression -> expression . TIMES expression

    SEMI            shift and go to state 124
    KW_PRINT        reduce using rule 143 (assignation -> VARIABLE assign_operators expression .)
    KW_LET          reduce using rule 143 (assignation -> VARIABLE assign_operators expression .)
    KW_FN           reduce using rule 143 (assignation -> VARIABLE assign_operators expression .)
    LBRACKET        reduce using rule 143 (assignation -> VARIABLE assign_operators expression .)
    VARIABLE        reduce using rule 143 (assignation -> VARIABLE assign_operators expression .)
    KW_FOR          reduce using rule 143 (assignation -> VARIABLE assign_operators expression .)
    KW_IF           reduce using rule 143 (assignation -> VARIABLE assign_operators expression .)
    KW_ELSE         reduce using rule 143 (assignation -> VARIABLE assign_operators expression .)
    KW_WHILE        reduce using rule 143 (assignation -> VARIABLE assign_operators expression .)
    KW_CONST        reduce using rule 143 (assignation -> VARIABLE assign_operators expression .)
    QUOTE           reduce using rule 143 (assignation -> VARIABLE assign_operators expression .)
    $end            reduce using rule 143 (assignation -> VARIABLE assign_operators expression .)
    RBRACE          reduce using rule 143 (assignation -> VARIABLE assign_operators expression .)
    KW_RETURN       reduce using rule 143 (assignation -> VARIABLE assign_operators expression .)
    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    TIMES           shift and go to state 127


state 88

    (22) number -> INTEGER .
    (46) division -> INTEGER . DIVIDE INTEGER

    SEMI            reduce using rule 22 (number -> INTEGER .)
    KW_PRINT        reduce using rule 22 (number -> INTEGER .)
    KW_LET          reduce using rule 22 (number -> INTEGER .)
    KW_FN           reduce using rule 22 (number -> INTEGER .)
    LBRACKET        reduce using rule 22 (number -> INTEGER .)
    VARIABLE        reduce using rule 22 (number -> INTEGER .)
    KW_FOR          reduce using rule 22 (number -> INTEGER .)
    KW_IF           reduce using rule 22 (number -> INTEGER .)
    KW_ELSE         reduce using rule 22 (number -> INTEGER .)
    KW_WHILE        reduce using rule 22 (number -> INTEGER .)
    KW_CONST        reduce using rule 22 (number -> INTEGER .)
    QUOTE           reduce using rule 22 (number -> INTEGER .)
    $end            reduce using rule 22 (number -> INTEGER .)
    RBRACE          reduce using rule 22 (number -> INTEGER .)
    KW_RETURN       reduce using rule 22 (number -> INTEGER .)
    PLUS            reduce using rule 22 (number -> INTEGER .)
    MINUS           reduce using rule 22 (number -> INTEGER .)
    TIMES           reduce using rule 22 (number -> INTEGER .)
    RPAREN          reduce using rule 22 (number -> INTEGER .)
    DIVIDE          shift and go to state 128


state 89

    (23) number -> FLOAT .
    (47) division -> FLOAT . DIVIDE FLOAT

    SEMI            reduce using rule 23 (number -> FLOAT .)
    KW_PRINT        reduce using rule 23 (number -> FLOAT .)
    KW_LET          reduce using rule 23 (number -> FLOAT .)
    KW_FN           reduce using rule 23 (number -> FLOAT .)
    LBRACKET        reduce using rule 23 (number -> FLOAT .)
    VARIABLE        reduce using rule 23 (number -> FLOAT .)
    KW_FOR          reduce using rule 23 (number -> FLOAT .)
    KW_IF           reduce using rule 23 (number -> FLOAT .)
    KW_ELSE         reduce using rule 23 (number -> FLOAT .)
    KW_WHILE        reduce using rule 23 (number -> FLOAT .)
    KW_CONST        reduce using rule 23 (number -> FLOAT .)
    QUOTE           reduce using rule 23 (number -> FLOAT .)
    $end            reduce using rule 23 (number -> FLOAT .)
    RBRACE          reduce using rule 23 (number -> FLOAT .)
    KW_RETURN       reduce using rule 23 (number -> FLOAT .)
    PLUS            reduce using rule 23 (number -> FLOAT .)
    MINUS           reduce using rule 23 (number -> FLOAT .)
    TIMES           reduce using rule 23 (number -> FLOAT .)
    RPAREN          reduce using rule 23 (number -> FLOAT .)
    DIVIDE          shift and go to state 129


state 90

    (19) expression -> LPAREN . expression RPAREN
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . number
    (21) expression -> . division
    (22) number -> . INTEGER
    (23) number -> . FLOAT
    (24) number -> . VARIABLE
    (46) division -> . INTEGER DIVIDE INTEGER
    (47) division -> . FLOAT DIVIDE FLOAT

    LPAREN          shift and go to state 90
    INTEGER         shift and go to state 88
    FLOAT           shift and go to state 89
    VARIABLE        shift and go to state 85

    expression                     shift and go to state 130
    number                         shift and go to state 131
    division                       shift and go to state 91

state 91

    (21) expression -> division .

    SEMI            reduce using rule 21 (expression -> division .)
    PLUS            reduce using rule 21 (expression -> division .)
    MINUS           reduce using rule 21 (expression -> division .)
    TIMES           reduce using rule 21 (expression -> division .)
    KW_PRINT        reduce using rule 21 (expression -> division .)
    KW_LET          reduce using rule 21 (expression -> division .)
    KW_FN           reduce using rule 21 (expression -> division .)
    LBRACKET        reduce using rule 21 (expression -> division .)
    VARIABLE        reduce using rule 21 (expression -> division .)
    KW_FOR          reduce using rule 21 (expression -> division .)
    KW_IF           reduce using rule 21 (expression -> division .)
    KW_ELSE         reduce using rule 21 (expression -> division .)
    KW_WHILE        reduce using rule 21 (expression -> division .)
    KW_CONST        reduce using rule 21 (expression -> division .)
    QUOTE           reduce using rule 21 (expression -> division .)
    $end            reduce using rule 21 (expression -> division .)
    RBRACE          reduce using rule 21 (expression -> division .)
    KW_RETURN       reduce using rule 21 (expression -> division .)
    RPAREN          reduce using rule 21 (expression -> division .)


state 92

    (71) dvariable -> KW_LET VARIABLE SEMI .

    KW_PRINT        reduce using rule 71 (dvariable -> KW_LET VARIABLE SEMI .)
    KW_LET          reduce using rule 71 (dvariable -> KW_LET VARIABLE SEMI .)
    KW_FN           reduce using rule 71 (dvariable -> KW_LET VARIABLE SEMI .)
    LBRACKET        reduce using rule 71 (dvariable -> KW_LET VARIABLE SEMI .)
    VARIABLE        reduce using rule 71 (dvariable -> KW_LET VARIABLE SEMI .)
    KW_FOR          reduce using rule 71 (dvariable -> KW_LET VARIABLE SEMI .)
    KW_IF           reduce using rule 71 (dvariable -> KW_LET VARIABLE SEMI .)
    KW_ELSE         reduce using rule 71 (dvariable -> KW_LET VARIABLE SEMI .)
    KW_WHILE        reduce using rule 71 (dvariable -> KW_LET VARIABLE SEMI .)
    KW_CONST        reduce using rule 71 (dvariable -> KW_LET VARIABLE SEMI .)
    QUOTE           reduce using rule 71 (dvariable -> KW_LET VARIABLE SEMI .)
    $end            reduce using rule 71 (dvariable -> KW_LET VARIABLE SEMI .)
    RBRACE          reduce using rule 71 (dvariable -> KW_LET VARIABLE SEMI .)
    KW_RETURN       reduce using rule 71 (dvariable -> KW_LET VARIABLE SEMI .)


state 93

    (72) array -> KW_LET VARIABLE EQUALS . LBRACKET mdata RBRACKET SEMI
    (112) hashmap -> KW_LET VARIABLE EQUALS . KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (114) hashmap -> KW_LET VARIABLE EQUALS . KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (123) linkedlist -> KW_LET VARIABLE EQUALS . KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (85) let_initialization -> KW_LET VARIABLE EQUALS . data
    (89) let_initialization -> KW_LET VARIABLE EQUALS . expression_var
    (138) input_init -> KW_LET VARIABLE EQUALS . KW_IO COLON COLON KW_STDIN LPAREN RPAREN
    (48) data -> . CADENA
    (49) data -> . INTEGER
    (50) data -> . CHAR
    (51) data -> . FLOAT
    (52) data -> . KW_FALSE
    (53) data -> . KW_TRUE
    (54) data -> . tuple
    (133) expression_var -> . expression
    (134) expression_var -> . data
    (80) tuple -> . LPAREN mdata RPAREN
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . number
    (21) expression -> . division
    (22) number -> . INTEGER
    (23) number -> . FLOAT
    (24) number -> . VARIABLE
    (46) division -> . INTEGER DIVIDE INTEGER
    (47) division -> . FLOAT DIVIDE FLOAT

    LBRACKET        shift and go to state 132
    KW_HASHMAP      shift and go to state 133
    KW_LINKEDLIST   shift and go to state 135
    KW_IO           shift and go to state 138
    CADENA          shift and go to state 59
    INTEGER         shift and go to state 139
    CHAR            shift and go to state 61
    FLOAT           shift and go to state 140
    KW_FALSE        shift and go to state 63
    KW_TRUE         shift and go to state 64
    LPAREN          shift and go to state 134
    VARIABLE        shift and go to state 85

    data                           shift and go to state 136
    expression_var                 shift and go to state 137
    tuple                          shift and go to state 65
    expression                     shift and go to state 141
    number                         shift and go to state 131
    division                       shift and go to state 91

state 94

    (144) declare_data_type -> KW_LET VARIABLE COLON . data_type SEMI
    (121) linkedlist -> KW_LET VARIABLE COLON . KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (86) let_initialization -> KW_LET VARIABLE COLON . data_type EQUALS data
    (90) let_initialization -> KW_LET VARIABLE COLON . data_type EQUALS expression_var
    (25) data_type -> . UNSIG_INT_8
    (26) data_type -> . UNSIG_INT_16
    (27) data_type -> . UNSIG_INT_32
    (28) data_type -> . UNSIG_INT_64
    (29) data_type -> . UNSIG_INT_128
    (30) data_type -> . SIG_INT_8
    (31) data_type -> . SIG_INT_16
    (32) data_type -> . SIG_INT_32
    (33) data_type -> . SIG_INT_64
    (34) data_type -> . SIG_INT_128
    (35) data_type -> . FLOAT_32
    (36) data_type -> . FLOAT_64
    (37) data_type -> . KW_BOOLEAN
    (38) data_type -> . KW_STRING
    (39) data_type -> . KW_CHARACTER

    KW_LINKEDLIST   shift and go to state 143
    UNSIG_INT_8     shift and go to state 144
    UNSIG_INT_16    shift and go to state 145
    UNSIG_INT_32    shift and go to state 146
    UNSIG_INT_64    shift and go to state 147
    UNSIG_INT_128   shift and go to state 148
    SIG_INT_8       shift and go to state 149
    SIG_INT_16      shift and go to state 150
    SIG_INT_32      shift and go to state 151
    SIG_INT_64      shift and go to state 152
    SIG_INT_128     shift and go to state 153
    FLOAT_32        shift and go to state 154
    FLOAT_64        shift and go to state 155
    KW_BOOLEAN      shift and go to state 156
    KW_STRING       shift and go to state 157
    KW_CHARACTER    shift and go to state 158

    data_type                      shift and go to state 142

state 95

    (75) array -> KW_LET KW_MUT VARIABLE . COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> KW_LET KW_MUT VARIABLE . COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (113) hashmap -> KW_LET KW_MUT VARIABLE . EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (115) hashmap -> KW_LET KW_MUT VARIABLE . EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (122) linkedlist -> KW_LET KW_MUT VARIABLE . COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (124) linkedlist -> KW_LET KW_MUT VARIABLE . EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (87) let_initialization -> KW_LET KW_MUT VARIABLE . EQUALS data
    (88) let_initialization -> KW_LET KW_MUT VARIABLE . COLON data_type EQUALS data
    (91) let_initialization -> KW_LET KW_MUT VARIABLE . EQUALS expression_var
    (92) let_initialization -> KW_LET KW_MUT VARIABLE . COLON data_type EQUALS expression_var

    COLON           shift and go to state 159
    EQUALS          shift and go to state 160


state 96

    (96) function -> KW_FN VARIABLE LPAREN . arguments RPAREN LBRACE main_rule RBRACE
    (132) function -> KW_FN VARIABLE LPAREN . arguments RPAREN MINUS GT data_type LBRACE return RBRACE
    (94) arguments -> . void
    (95) arguments -> . variables
    (120) void -> .
    (77) variables -> . VARIABLE
    (78) variables -> . VARIABLE COMMA variables

    RPAREN          reduce using rule 120 (void -> .)
    VARIABLE        shift and go to state 161

    arguments                      shift and go to state 162
    void                           shift and go to state 163
    variables                      shift and go to state 164

state 97

    (73) array -> LBRACKET mdata RBRACKET .

    KW_PRINT        reduce using rule 73 (array -> LBRACKET mdata RBRACKET .)
    KW_LET          reduce using rule 73 (array -> LBRACKET mdata RBRACKET .)
    KW_FN           reduce using rule 73 (array -> LBRACKET mdata RBRACKET .)
    LBRACKET        reduce using rule 73 (array -> LBRACKET mdata RBRACKET .)
    VARIABLE        reduce using rule 73 (array -> LBRACKET mdata RBRACKET .)
    KW_FOR          reduce using rule 73 (array -> LBRACKET mdata RBRACKET .)
    KW_IF           reduce using rule 73 (array -> LBRACKET mdata RBRACKET .)
    KW_ELSE         reduce using rule 73 (array -> LBRACKET mdata RBRACKET .)
    KW_WHILE        reduce using rule 73 (array -> LBRACKET mdata RBRACKET .)
    KW_CONST        reduce using rule 73 (array -> LBRACKET mdata RBRACKET .)
    QUOTE           reduce using rule 73 (array -> LBRACKET mdata RBRACKET .)
    $end            reduce using rule 73 (array -> LBRACKET mdata RBRACKET .)
    SEMI            reduce using rule 73 (array -> LBRACKET mdata RBRACKET .)
    RBRACE          reduce using rule 73 (array -> LBRACKET mdata RBRACKET .)
    KW_RETURN       reduce using rule 73 (array -> LBRACKET mdata RBRACKET .)
    RPAREN          reduce using rule 73 (array -> LBRACKET mdata RBRACKET .)


state 98

    (74) array -> LBRACKET data SEMI . data RBRACKET
    (48) data -> . CADENA
    (49) data -> . INTEGER
    (50) data -> . CHAR
    (51) data -> . FLOAT
    (52) data -> . KW_FALSE
    (53) data -> . KW_TRUE
    (54) data -> . tuple
    (80) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 59
    INTEGER         shift and go to state 60
    CHAR            shift and go to state 61
    FLOAT           shift and go to state 62
    KW_FALSE        shift and go to state 63
    KW_TRUE         shift and go to state 64
    LPAREN          shift and go to state 66

    data                           shift and go to state 165
    tuple                          shift and go to state 65

state 99

    (68) mdata -> data COMMA . mdata
    (67) mdata -> . data
    (68) mdata -> . data COMMA mdata
    (48) data -> . CADENA
    (49) data -> . INTEGER
    (50) data -> . CHAR
    (51) data -> . FLOAT
    (52) data -> . KW_FALSE
    (53) data -> . KW_TRUE
    (54) data -> . tuple
    (80) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 59
    INTEGER         shift and go to state 60
    CHAR            shift and go to state 61
    FLOAT           shift and go to state 62
    KW_FALSE        shift and go to state 63
    KW_TRUE         shift and go to state 64
    LPAREN          shift and go to state 66

    data                           shift and go to state 101
    mdata                          shift and go to state 166
    tuple                          shift and go to state 65

state 100

    (80) tuple -> LPAREN mdata . RPAREN

    RPAREN          shift and go to state 167


state 101

    (67) mdata -> data .
    (68) mdata -> data . COMMA mdata

    RPAREN          reduce using rule 67 (mdata -> data .)
    RBRACKET        reduce using rule 67 (mdata -> data .)
    COMMA           shift and go to state 99


state 102

    (103) for_str -> KW_FOR VARIABLE KW_IN . range LBRACE main_rule RBRACE
    (104) for_str -> KW_FOR VARIABLE KW_IN . VARIABLE LBRACE main_rule RBRACE
    (106) range -> . INTEGER DOT DOT INTEGER
    (107) range -> . VARIABLE DOT DOT VARIABLE

    VARIABLE        shift and go to state 168
    INTEGER         shift and go to state 170

    range                          shift and go to state 169

state 103

    (105) for_str_tagged -> label COLON for_str .

    KW_PRINT        reduce using rule 105 (for_str_tagged -> label COLON for_str .)
    KW_LET          reduce using rule 105 (for_str_tagged -> label COLON for_str .)
    KW_FN           reduce using rule 105 (for_str_tagged -> label COLON for_str .)
    LBRACKET        reduce using rule 105 (for_str_tagged -> label COLON for_str .)
    VARIABLE        reduce using rule 105 (for_str_tagged -> label COLON for_str .)
    KW_FOR          reduce using rule 105 (for_str_tagged -> label COLON for_str .)
    KW_IF           reduce using rule 105 (for_str_tagged -> label COLON for_str .)
    KW_ELSE         reduce using rule 105 (for_str_tagged -> label COLON for_str .)
    KW_WHILE        reduce using rule 105 (for_str_tagged -> label COLON for_str .)
    KW_CONST        reduce using rule 105 (for_str_tagged -> label COLON for_str .)
    QUOTE           reduce using rule 105 (for_str_tagged -> label COLON for_str .)
    $end            reduce using rule 105 (for_str_tagged -> label COLON for_str .)
    RBRACE          reduce using rule 105 (for_str_tagged -> label COLON for_str .)
    KW_RETURN       reduce using rule 105 (for_str_tagged -> label COLON for_str .)


state 104

    (129) if -> KW_IF conditional LBRACE . main_rule RBRACE
    (1) main_rule -> . father_rule
    (2) main_rule -> . father_rule main_rule
    (3) father_rule -> . print
    (4) father_rule -> . dvariable
    (5) father_rule -> . function
    (6) father_rule -> . control_str
    (7) father_rule -> . void
    (8) father_rule -> . data_str
    (9) father_rule -> . array
    (10) father_rule -> . linkedlist_methods
    (11) father_rule -> . hashmap_methods
    (12) father_rule -> . initialization
    (13) father_rule -> . input
    (14) father_rule -> . assignation
    (15) father_rule -> . declare_data_type
    (69) print -> . KW_PRINT LNOT LPAREN CADENA RPAREN SEMI
    (70) print -> . KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI
    (71) dvariable -> . KW_LET VARIABLE SEMI
    (96) function -> . KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE
    (132) function -> . KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE
    (97) control_str -> . for_str
    (98) control_str -> . for_str_tagged
    (99) control_str -> . if
    (100) control_str -> . else
    (101) control_str -> . else_if
    (102) control_str -> . while
    (120) void -> .
    (109) data_str -> . array
    (110) data_str -> . hashmap
    (111) data_str -> . linkedlist
    (72) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (73) array -> . LBRACKET mdata RBRACKET
    (74) array -> . LBRACKET data SEMI data RBRACKET
    (75) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (125) linkedlist_methods -> . VARIABLE linkedlist_push
    (126) linkedlist_methods -> . VARIABLE linkedlist_remove
    (116) hashmap_methods -> . VARIABLE hashmap_insert
    (117) hashmap_methods -> . VARIABLE hashmap_remove
    (81) initialization -> . let_initialization SEMI
    (82) initialization -> . const_initialization SEMI
    (83) initialization -> . data_str SEMI
    (84) initialization -> . input_init SEMI
    (139) input -> . VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI
    (140) assignation -> . VARIABLE assign_operators number SEMI
    (141) assignation -> . VARIABLE assign_operators expression SEMI
    (142) assignation -> . VARIABLE assign_operators number
    (143) assignation -> . VARIABLE assign_operators expression
    (144) declare_data_type -> . KW_LET VARIABLE COLON data_type SEMI
    (103) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE
    (104) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE
    (105) for_str_tagged -> . label COLON for_str
    (129) if -> . KW_IF conditional LBRACE main_rule RBRACE
    (130) else -> . KW_ELSE LBRACE main_rule RBRACE
    (131) else_if -> . KW_ELSE KW_IF conditional LBRACE main_rule RBRACE
    (79) while -> . KW_WHILE conditional LBRACE main_rule RBRACE
    (112) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (113) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (114) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (115) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (121) linkedlist -> . KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (122) linkedlist -> . KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (123) linkedlist -> . KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (124) linkedlist -> . KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (85) let_initialization -> . KW_LET VARIABLE EQUALS data
    (86) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS data
    (87) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS data
    (88) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS data
    (89) let_initialization -> . KW_LET VARIABLE EQUALS expression_var
    (90) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS expression_var
    (91) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS expression_var
    (92) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var
    (93) const_initialization -> . KW_CONST VARIABLE COLON data_type EQUALS data
    (138) input_init -> . KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN
    (108) label -> . QUOTE VARIABLE

  ! shift/reduce conflict for KW_PRINT resolved as shift
  ! shift/reduce conflict for KW_LET resolved as shift
  ! shift/reduce conflict for KW_FN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for KW_FOR resolved as shift
  ! shift/reduce conflict for KW_IF resolved as shift
  ! shift/reduce conflict for KW_ELSE resolved as shift
  ! shift/reduce conflict for KW_WHILE resolved as shift
  ! shift/reduce conflict for KW_CONST resolved as shift
  ! shift/reduce conflict for QUOTE resolved as shift
    KW_PRINT        shift and go to state 16
    KW_LET          shift and go to state 18
    KW_FN           shift and go to state 19
    RBRACE          reduce using rule 120 (void -> .)
    LBRACKET        shift and go to state 28
    VARIABLE        shift and go to state 17
    KW_FOR          shift and go to state 32
    KW_IF           shift and go to state 34
    KW_ELSE         shift and go to state 35
    KW_WHILE        shift and go to state 36
    KW_CONST        shift and go to state 37
    QUOTE           shift and go to state 38

  ! KW_PRINT        [ reduce using rule 120 (void -> .) ]
  ! KW_LET          [ reduce using rule 120 (void -> .) ]
  ! KW_FN           [ reduce using rule 120 (void -> .) ]
  ! LBRACKET        [ reduce using rule 120 (void -> .) ]
  ! VARIABLE        [ reduce using rule 120 (void -> .) ]
  ! KW_FOR          [ reduce using rule 120 (void -> .) ]
  ! KW_IF           [ reduce using rule 120 (void -> .) ]
  ! KW_ELSE         [ reduce using rule 120 (void -> .) ]
  ! KW_WHILE        [ reduce using rule 120 (void -> .) ]
  ! KW_CONST        [ reduce using rule 120 (void -> .) ]
  ! QUOTE           [ reduce using rule 120 (void -> .) ]

    main_rule                      shift and go to state 171
    father_rule                    shift and go to state 2
    print                          shift and go to state 3
    dvariable                      shift and go to state 4
    function                       shift and go to state 5
    control_str                    shift and go to state 6
    void                           shift and go to state 7
    data_str                       shift and go to state 8
    array                          shift and go to state 9
    linkedlist_methods             shift and go to state 10
    hashmap_methods                shift and go to state 11
    initialization                 shift and go to state 12
    input                          shift and go to state 13
    assignation                    shift and go to state 14
    declare_data_type              shift and go to state 15
    for_str                        shift and go to state 20
    for_str_tagged                 shift and go to state 21
    if                             shift and go to state 22
    else                           shift and go to state 23
    else_if                        shift and go to state 24
    while                          shift and go to state 25
    hashmap                        shift and go to state 26
    linkedlist                     shift and go to state 27
    let_initialization             shift and go to state 29
    const_initialization           shift and go to state 30
    input_init                     shift and go to state 31
    label                          shift and go to state 33

state 105

    (65) conditional -> VARIABLE comparator . data
    (48) data -> . CADENA
    (49) data -> . INTEGER
    (50) data -> . CHAR
    (51) data -> . FLOAT
    (52) data -> . KW_FALSE
    (53) data -> . KW_TRUE
    (54) data -> . tuple
    (80) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 59
    INTEGER         shift and go to state 60
    CHAR            shift and go to state 61
    FLOAT           shift and go to state 62
    KW_FALSE        shift and go to state 63
    KW_TRUE         shift and go to state 64
    LPAREN          shift and go to state 66

    data                           shift and go to state 172
    tuple                          shift and go to state 65

state 106

    (56) comparator -> EQ .

    CADENA          reduce using rule 56 (comparator -> EQ .)
    INTEGER         reduce using rule 56 (comparator -> EQ .)
    CHAR            reduce using rule 56 (comparator -> EQ .)
    FLOAT           reduce using rule 56 (comparator -> EQ .)
    KW_FALSE        reduce using rule 56 (comparator -> EQ .)
    KW_TRUE         reduce using rule 56 (comparator -> EQ .)
    LPAREN          reduce using rule 56 (comparator -> EQ .)


state 107

    (57) comparator -> NE .

    CADENA          reduce using rule 57 (comparator -> NE .)
    INTEGER         reduce using rule 57 (comparator -> NE .)
    CHAR            reduce using rule 57 (comparator -> NE .)
    FLOAT           reduce using rule 57 (comparator -> NE .)
    KW_FALSE        reduce using rule 57 (comparator -> NE .)
    KW_TRUE         reduce using rule 57 (comparator -> NE .)
    LPAREN          reduce using rule 57 (comparator -> NE .)


state 108

    (58) comparator -> GE .

    CADENA          reduce using rule 58 (comparator -> GE .)
    INTEGER         reduce using rule 58 (comparator -> GE .)
    CHAR            reduce using rule 58 (comparator -> GE .)
    FLOAT           reduce using rule 58 (comparator -> GE .)
    KW_FALSE        reduce using rule 58 (comparator -> GE .)
    KW_TRUE         reduce using rule 58 (comparator -> GE .)
    LPAREN          reduce using rule 58 (comparator -> GE .)


state 109

    (59) comparator -> LE .

    CADENA          reduce using rule 59 (comparator -> LE .)
    INTEGER         reduce using rule 59 (comparator -> LE .)
    CHAR            reduce using rule 59 (comparator -> LE .)
    FLOAT           reduce using rule 59 (comparator -> LE .)
    KW_FALSE        reduce using rule 59 (comparator -> LE .)
    KW_TRUE         reduce using rule 59 (comparator -> LE .)
    LPAREN          reduce using rule 59 (comparator -> LE .)


state 110

    (60) comparator -> GT .

    CADENA          reduce using rule 60 (comparator -> GT .)
    INTEGER         reduce using rule 60 (comparator -> GT .)
    CHAR            reduce using rule 60 (comparator -> GT .)
    FLOAT           reduce using rule 60 (comparator -> GT .)
    KW_FALSE        reduce using rule 60 (comparator -> GT .)
    KW_TRUE         reduce using rule 60 (comparator -> GT .)
    LPAREN          reduce using rule 60 (comparator -> GT .)


state 111

    (61) comparator -> LT .

    CADENA          reduce using rule 61 (comparator -> LT .)
    INTEGER         reduce using rule 61 (comparator -> LT .)
    CHAR            reduce using rule 61 (comparator -> LT .)
    FLOAT           reduce using rule 61 (comparator -> LT .)
    KW_FALSE        reduce using rule 61 (comparator -> LT .)
    KW_TRUE         reduce using rule 61 (comparator -> LT .)
    LPAREN          reduce using rule 61 (comparator -> LT .)


state 112

    (66) conditional -> LPAREN lvariable . RPAREN comparator data

    RPAREN          shift and go to state 173


state 113

    (64) lvariable -> VARIABLE . logic VARIABLE
    (62) logic -> . LOR
    (63) logic -> . LAND

    LOR             shift and go to state 175
    LAND            shift and go to state 176

    logic                          shift and go to state 174

state 114

    (130) else -> KW_ELSE LBRACE main_rule . RBRACE

    RBRACE          shift and go to state 177


state 115

    (131) else_if -> KW_ELSE KW_IF conditional . LBRACE main_rule RBRACE

    LBRACE          shift and go to state 178


state 116

    (79) while -> KW_WHILE conditional LBRACE . main_rule RBRACE
    (1) main_rule -> . father_rule
    (2) main_rule -> . father_rule main_rule
    (3) father_rule -> . print
    (4) father_rule -> . dvariable
    (5) father_rule -> . function
    (6) father_rule -> . control_str
    (7) father_rule -> . void
    (8) father_rule -> . data_str
    (9) father_rule -> . array
    (10) father_rule -> . linkedlist_methods
    (11) father_rule -> . hashmap_methods
    (12) father_rule -> . initialization
    (13) father_rule -> . input
    (14) father_rule -> . assignation
    (15) father_rule -> . declare_data_type
    (69) print -> . KW_PRINT LNOT LPAREN CADENA RPAREN SEMI
    (70) print -> . KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI
    (71) dvariable -> . KW_LET VARIABLE SEMI
    (96) function -> . KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE
    (132) function -> . KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE
    (97) control_str -> . for_str
    (98) control_str -> . for_str_tagged
    (99) control_str -> . if
    (100) control_str -> . else
    (101) control_str -> . else_if
    (102) control_str -> . while
    (120) void -> .
    (109) data_str -> . array
    (110) data_str -> . hashmap
    (111) data_str -> . linkedlist
    (72) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (73) array -> . LBRACKET mdata RBRACKET
    (74) array -> . LBRACKET data SEMI data RBRACKET
    (75) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (125) linkedlist_methods -> . VARIABLE linkedlist_push
    (126) linkedlist_methods -> . VARIABLE linkedlist_remove
    (116) hashmap_methods -> . VARIABLE hashmap_insert
    (117) hashmap_methods -> . VARIABLE hashmap_remove
    (81) initialization -> . let_initialization SEMI
    (82) initialization -> . const_initialization SEMI
    (83) initialization -> . data_str SEMI
    (84) initialization -> . input_init SEMI
    (139) input -> . VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI
    (140) assignation -> . VARIABLE assign_operators number SEMI
    (141) assignation -> . VARIABLE assign_operators expression SEMI
    (142) assignation -> . VARIABLE assign_operators number
    (143) assignation -> . VARIABLE assign_operators expression
    (144) declare_data_type -> . KW_LET VARIABLE COLON data_type SEMI
    (103) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE
    (104) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE
    (105) for_str_tagged -> . label COLON for_str
    (129) if -> . KW_IF conditional LBRACE main_rule RBRACE
    (130) else -> . KW_ELSE LBRACE main_rule RBRACE
    (131) else_if -> . KW_ELSE KW_IF conditional LBRACE main_rule RBRACE
    (79) while -> . KW_WHILE conditional LBRACE main_rule RBRACE
    (112) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (113) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (114) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (115) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (121) linkedlist -> . KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (122) linkedlist -> . KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (123) linkedlist -> . KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (124) linkedlist -> . KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (85) let_initialization -> . KW_LET VARIABLE EQUALS data
    (86) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS data
    (87) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS data
    (88) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS data
    (89) let_initialization -> . KW_LET VARIABLE EQUALS expression_var
    (90) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS expression_var
    (91) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS expression_var
    (92) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var
    (93) const_initialization -> . KW_CONST VARIABLE COLON data_type EQUALS data
    (138) input_init -> . KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN
    (108) label -> . QUOTE VARIABLE

  ! shift/reduce conflict for KW_PRINT resolved as shift
  ! shift/reduce conflict for KW_LET resolved as shift
  ! shift/reduce conflict for KW_FN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for KW_FOR resolved as shift
  ! shift/reduce conflict for KW_IF resolved as shift
  ! shift/reduce conflict for KW_ELSE resolved as shift
  ! shift/reduce conflict for KW_WHILE resolved as shift
  ! shift/reduce conflict for KW_CONST resolved as shift
  ! shift/reduce conflict for QUOTE resolved as shift
    KW_PRINT        shift and go to state 16
    KW_LET          shift and go to state 18
    KW_FN           shift and go to state 19
    RBRACE          reduce using rule 120 (void -> .)
    LBRACKET        shift and go to state 28
    VARIABLE        shift and go to state 17
    KW_FOR          shift and go to state 32
    KW_IF           shift and go to state 34
    KW_ELSE         shift and go to state 35
    KW_WHILE        shift and go to state 36
    KW_CONST        shift and go to state 37
    QUOTE           shift and go to state 38

  ! KW_PRINT        [ reduce using rule 120 (void -> .) ]
  ! KW_LET          [ reduce using rule 120 (void -> .) ]
  ! KW_FN           [ reduce using rule 120 (void -> .) ]
  ! LBRACKET        [ reduce using rule 120 (void -> .) ]
  ! VARIABLE        [ reduce using rule 120 (void -> .) ]
  ! KW_FOR          [ reduce using rule 120 (void -> .) ]
  ! KW_IF           [ reduce using rule 120 (void -> .) ]
  ! KW_ELSE         [ reduce using rule 120 (void -> .) ]
  ! KW_WHILE        [ reduce using rule 120 (void -> .) ]
  ! KW_CONST        [ reduce using rule 120 (void -> .) ]
  ! QUOTE           [ reduce using rule 120 (void -> .) ]

    main_rule                      shift and go to state 179
    father_rule                    shift and go to state 2
    print                          shift and go to state 3
    dvariable                      shift and go to state 4
    function                       shift and go to state 5
    control_str                    shift and go to state 6
    void                           shift and go to state 7
    data_str                       shift and go to state 8
    array                          shift and go to state 9
    linkedlist_methods             shift and go to state 10
    hashmap_methods                shift and go to state 11
    initialization                 shift and go to state 12
    input                          shift and go to state 13
    assignation                    shift and go to state 14
    declare_data_type              shift and go to state 15
    for_str                        shift and go to state 20
    for_str_tagged                 shift and go to state 21
    if                             shift and go to state 22
    else                           shift and go to state 23
    else_if                        shift and go to state 24
    while                          shift and go to state 25
    hashmap                        shift and go to state 26
    linkedlist                     shift and go to state 27
    let_initialization             shift and go to state 29
    const_initialization           shift and go to state 30
    input_init                     shift and go to state 31
    label                          shift and go to state 33

state 117

    (93) const_initialization -> KW_CONST VARIABLE COLON . data_type EQUALS data
    (25) data_type -> . UNSIG_INT_8
    (26) data_type -> . UNSIG_INT_16
    (27) data_type -> . UNSIG_INT_32
    (28) data_type -> . UNSIG_INT_64
    (29) data_type -> . UNSIG_INT_128
    (30) data_type -> . SIG_INT_8
    (31) data_type -> . SIG_INT_16
    (32) data_type -> . SIG_INT_32
    (33) data_type -> . SIG_INT_64
    (34) data_type -> . SIG_INT_128
    (35) data_type -> . FLOAT_32
    (36) data_type -> . FLOAT_64
    (37) data_type -> . KW_BOOLEAN
    (38) data_type -> . KW_STRING
    (39) data_type -> . KW_CHARACTER

    UNSIG_INT_8     shift and go to state 144
    UNSIG_INT_16    shift and go to state 145
    UNSIG_INT_32    shift and go to state 146
    UNSIG_INT_64    shift and go to state 147
    UNSIG_INT_128   shift and go to state 148
    SIG_INT_8       shift and go to state 149
    SIG_INT_16      shift and go to state 150
    SIG_INT_32      shift and go to state 151
    SIG_INT_64      shift and go to state 152
    SIG_INT_128     shift and go to state 153
    FLOAT_32        shift and go to state 154
    FLOAT_64        shift and go to state 155
    KW_BOOLEAN      shift and go to state 156
    KW_STRING       shift and go to state 157
    KW_CHARACTER    shift and go to state 158

    data_type                      shift and go to state 180

state 118

    (69) print -> KW_PRINT LNOT LPAREN CADENA . RPAREN SEMI
    (70) print -> KW_PRINT LNOT LPAREN CADENA . COMMA VARIABLE RPAREN SEMI

    RPAREN          shift and go to state 181
    COMMA           shift and go to state 182


state 119

    (139) input -> VARIABLE DOT KW_READ_LINE LPAREN . AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI

    AND             shift and go to state 183


state 120

    (127) linkedlist_push -> DOT KW_PUSH_BACK LPAREN . data RPAREN SEMI
    (48) data -> . CADENA
    (49) data -> . INTEGER
    (50) data -> . CHAR
    (51) data -> . FLOAT
    (52) data -> . KW_FALSE
    (53) data -> . KW_TRUE
    (54) data -> . tuple
    (80) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 59
    INTEGER         shift and go to state 60
    CHAR            shift and go to state 61
    FLOAT           shift and go to state 62
    KW_FALSE        shift and go to state 63
    KW_TRUE         shift and go to state 64
    LPAREN          shift and go to state 66

    data                           shift and go to state 184
    tuple                          shift and go to state 65

state 121

    (128) linkedlist_remove -> DOT KW_REMOVE LPAREN . INTEGER RPAREN SEMI
    (119) hashmap_remove -> DOT KW_REMOVE LPAREN . AND data RPAREN SEMI

    INTEGER         shift and go to state 185
    AND             shift and go to state 186


state 122

    (118) hashmap_insert -> DOT KW_INSERT LPAREN . mdata RPAREN SEMI
    (67) mdata -> . data
    (68) mdata -> . data COMMA mdata
    (48) data -> . CADENA
    (49) data -> . INTEGER
    (50) data -> . CHAR
    (51) data -> . FLOAT
    (52) data -> . KW_FALSE
    (53) data -> . KW_TRUE
    (54) data -> . tuple
    (80) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 59
    INTEGER         shift and go to state 60
    CHAR            shift and go to state 61
    FLOAT           shift and go to state 62
    KW_FALSE        shift and go to state 63
    KW_TRUE         shift and go to state 64
    LPAREN          shift and go to state 66

    mdata                          shift and go to state 187
    data                           shift and go to state 101
    tuple                          shift and go to state 65

state 123

    (140) assignation -> VARIABLE assign_operators number SEMI .

    KW_PRINT        reduce using rule 140 (assignation -> VARIABLE assign_operators number SEMI .)
    KW_LET          reduce using rule 140 (assignation -> VARIABLE assign_operators number SEMI .)
    KW_FN           reduce using rule 140 (assignation -> VARIABLE assign_operators number SEMI .)
    LBRACKET        reduce using rule 140 (assignation -> VARIABLE assign_operators number SEMI .)
    VARIABLE        reduce using rule 140 (assignation -> VARIABLE assign_operators number SEMI .)
    KW_FOR          reduce using rule 140 (assignation -> VARIABLE assign_operators number SEMI .)
    KW_IF           reduce using rule 140 (assignation -> VARIABLE assign_operators number SEMI .)
    KW_ELSE         reduce using rule 140 (assignation -> VARIABLE assign_operators number SEMI .)
    KW_WHILE        reduce using rule 140 (assignation -> VARIABLE assign_operators number SEMI .)
    KW_CONST        reduce using rule 140 (assignation -> VARIABLE assign_operators number SEMI .)
    QUOTE           reduce using rule 140 (assignation -> VARIABLE assign_operators number SEMI .)
    $end            reduce using rule 140 (assignation -> VARIABLE assign_operators number SEMI .)
    RBRACE          reduce using rule 140 (assignation -> VARIABLE assign_operators number SEMI .)
    KW_RETURN       reduce using rule 140 (assignation -> VARIABLE assign_operators number SEMI .)


state 124

    (141) assignation -> VARIABLE assign_operators expression SEMI .

    KW_PRINT        reduce using rule 141 (assignation -> VARIABLE assign_operators expression SEMI .)
    KW_LET          reduce using rule 141 (assignation -> VARIABLE assign_operators expression SEMI .)
    KW_FN           reduce using rule 141 (assignation -> VARIABLE assign_operators expression SEMI .)
    LBRACKET        reduce using rule 141 (assignation -> VARIABLE assign_operators expression SEMI .)
    VARIABLE        reduce using rule 141 (assignation -> VARIABLE assign_operators expression SEMI .)
    KW_FOR          reduce using rule 141 (assignation -> VARIABLE assign_operators expression SEMI .)
    KW_IF           reduce using rule 141 (assignation -> VARIABLE assign_operators expression SEMI .)
    KW_ELSE         reduce using rule 141 (assignation -> VARIABLE assign_operators expression SEMI .)
    KW_WHILE        reduce using rule 141 (assignation -> VARIABLE assign_operators expression SEMI .)
    KW_CONST        reduce using rule 141 (assignation -> VARIABLE assign_operators expression SEMI .)
    QUOTE           reduce using rule 141 (assignation -> VARIABLE assign_operators expression SEMI .)
    $end            reduce using rule 141 (assignation -> VARIABLE assign_operators expression SEMI .)
    RBRACE          reduce using rule 141 (assignation -> VARIABLE assign_operators expression SEMI .)
    KW_RETURN       reduce using rule 141 (assignation -> VARIABLE assign_operators expression SEMI .)


state 125

    (16) expression -> expression PLUS . expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . number
    (21) expression -> . division
    (22) number -> . INTEGER
    (23) number -> . FLOAT
    (24) number -> . VARIABLE
    (46) division -> . INTEGER DIVIDE INTEGER
    (47) division -> . FLOAT DIVIDE FLOAT

    LPAREN          shift and go to state 90
    INTEGER         shift and go to state 88
    FLOAT           shift and go to state 89
    VARIABLE        shift and go to state 85

    expression                     shift and go to state 188
    number                         shift and go to state 131
    division                       shift and go to state 91

state 126

    (17) expression -> expression MINUS . expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . number
    (21) expression -> . division
    (22) number -> . INTEGER
    (23) number -> . FLOAT
    (24) number -> . VARIABLE
    (46) division -> . INTEGER DIVIDE INTEGER
    (47) division -> . FLOAT DIVIDE FLOAT

    LPAREN          shift and go to state 90
    INTEGER         shift and go to state 88
    FLOAT           shift and go to state 89
    VARIABLE        shift and go to state 85

    expression                     shift and go to state 189
    number                         shift and go to state 131
    division                       shift and go to state 91

state 127

    (18) expression -> expression TIMES . expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . number
    (21) expression -> . division
    (22) number -> . INTEGER
    (23) number -> . FLOAT
    (24) number -> . VARIABLE
    (46) division -> . INTEGER DIVIDE INTEGER
    (47) division -> . FLOAT DIVIDE FLOAT

    LPAREN          shift and go to state 90
    INTEGER         shift and go to state 88
    FLOAT           shift and go to state 89
    VARIABLE        shift and go to state 85

    expression                     shift and go to state 190
    number                         shift and go to state 131
    division                       shift and go to state 91

state 128

    (46) division -> INTEGER DIVIDE . INTEGER

    INTEGER         shift and go to state 191


state 129

    (47) division -> FLOAT DIVIDE . FLOAT

    FLOAT           shift and go to state 192


state 130

    (19) expression -> LPAREN expression . RPAREN
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . MINUS expression
    (18) expression -> expression . TIMES expression

    RPAREN          shift and go to state 193
    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    TIMES           shift and go to state 127


state 131

    (20) expression -> number .

    RPAREN          reduce using rule 20 (expression -> number .)
    PLUS            reduce using rule 20 (expression -> number .)
    MINUS           reduce using rule 20 (expression -> number .)
    TIMES           reduce using rule 20 (expression -> number .)
    SEMI            reduce using rule 20 (expression -> number .)
    KW_PRINT        reduce using rule 20 (expression -> number .)
    KW_LET          reduce using rule 20 (expression -> number .)
    KW_FN           reduce using rule 20 (expression -> number .)
    LBRACKET        reduce using rule 20 (expression -> number .)
    VARIABLE        reduce using rule 20 (expression -> number .)
    KW_FOR          reduce using rule 20 (expression -> number .)
    KW_IF           reduce using rule 20 (expression -> number .)
    KW_ELSE         reduce using rule 20 (expression -> number .)
    KW_WHILE        reduce using rule 20 (expression -> number .)
    KW_CONST        reduce using rule 20 (expression -> number .)
    QUOTE           reduce using rule 20 (expression -> number .)
    $end            reduce using rule 20 (expression -> number .)
    RBRACE          reduce using rule 20 (expression -> number .)
    KW_RETURN       reduce using rule 20 (expression -> number .)


state 132

    (72) array -> KW_LET VARIABLE EQUALS LBRACKET . mdata RBRACKET SEMI
    (67) mdata -> . data
    (68) mdata -> . data COMMA mdata
    (48) data -> . CADENA
    (49) data -> . INTEGER
    (50) data -> . CHAR
    (51) data -> . FLOAT
    (52) data -> . KW_FALSE
    (53) data -> . KW_TRUE
    (54) data -> . tuple
    (80) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 59
    INTEGER         shift and go to state 60
    CHAR            shift and go to state 61
    FLOAT           shift and go to state 62
    KW_FALSE        shift and go to state 63
    KW_TRUE         shift and go to state 64
    LPAREN          shift and go to state 66

    mdata                          shift and go to state 194
    data                           shift and go to state 101
    tuple                          shift and go to state 65

state 133

    (112) hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP . COLON COLON KW_NEW LPAREN RPAREN
    (114) hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP . COLON COLON KW_FROM LPAREN array RPAREN

    COLON           shift and go to state 195


state 134

    (80) tuple -> LPAREN . mdata RPAREN
    (19) expression -> LPAREN . expression RPAREN
    (67) mdata -> . data
    (68) mdata -> . data COMMA mdata
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . number
    (21) expression -> . division
    (48) data -> . CADENA
    (49) data -> . INTEGER
    (50) data -> . CHAR
    (51) data -> . FLOAT
    (52) data -> . KW_FALSE
    (53) data -> . KW_TRUE
    (54) data -> . tuple
    (22) number -> . INTEGER
    (23) number -> . FLOAT
    (24) number -> . VARIABLE
    (46) division -> . INTEGER DIVIDE INTEGER
    (47) division -> . FLOAT DIVIDE FLOAT
    (80) tuple -> . LPAREN mdata RPAREN

    LPAREN          shift and go to state 196
    CADENA          shift and go to state 59
    INTEGER         shift and go to state 139
    CHAR            shift and go to state 61
    FLOAT           shift and go to state 140
    KW_FALSE        shift and go to state 63
    KW_TRUE         shift and go to state 64
    VARIABLE        shift and go to state 85

    mdata                          shift and go to state 100
    expression                     shift and go to state 130
    data                           shift and go to state 101
    number                         shift and go to state 131
    division                       shift and go to state 91
    tuple                          shift and go to state 65

state 135

    (123) linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST . COLON COLON KW_FROM LPAREN array RPAREN

    COLON           shift and go to state 197


state 136

    (85) let_initialization -> KW_LET VARIABLE EQUALS data .
    (134) expression_var -> data .

  ! reduce/reduce conflict for SEMI resolved using rule 85 (let_initialization -> KW_LET VARIABLE EQUALS data .)
    SEMI            reduce using rule 85 (let_initialization -> KW_LET VARIABLE EQUALS data .)

  ! SEMI            [ reduce using rule 134 (expression_var -> data .) ]


state 137

    (89) let_initialization -> KW_LET VARIABLE EQUALS expression_var .

    SEMI            reduce using rule 89 (let_initialization -> KW_LET VARIABLE EQUALS expression_var .)


state 138

    (138) input_init -> KW_LET VARIABLE EQUALS KW_IO . COLON COLON KW_STDIN LPAREN RPAREN

    COLON           shift and go to state 198


state 139

    (49) data -> INTEGER .
    (22) number -> INTEGER .
    (46) division -> INTEGER . DIVIDE INTEGER

  ! reduce/reduce conflict for SEMI resolved using rule 22 (number -> INTEGER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 22 (number -> INTEGER .)
    COMMA           reduce using rule 49 (data -> INTEGER .)
    PLUS            reduce using rule 22 (number -> INTEGER .)
    MINUS           reduce using rule 22 (number -> INTEGER .)
    TIMES           reduce using rule 22 (number -> INTEGER .)
    SEMI            reduce using rule 22 (number -> INTEGER .)
    RPAREN          reduce using rule 22 (number -> INTEGER .)
    DIVIDE          shift and go to state 128

  ! SEMI            [ reduce using rule 49 (data -> INTEGER .) ]
  ! RPAREN          [ reduce using rule 49 (data -> INTEGER .) ]


state 140

    (51) data -> FLOAT .
    (23) number -> FLOAT .
    (47) division -> FLOAT . DIVIDE FLOAT

  ! reduce/reduce conflict for SEMI resolved using rule 23 (number -> FLOAT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 23 (number -> FLOAT .)
    COMMA           reduce using rule 51 (data -> FLOAT .)
    PLUS            reduce using rule 23 (number -> FLOAT .)
    MINUS           reduce using rule 23 (number -> FLOAT .)
    TIMES           reduce using rule 23 (number -> FLOAT .)
    SEMI            reduce using rule 23 (number -> FLOAT .)
    RPAREN          reduce using rule 23 (number -> FLOAT .)
    DIVIDE          shift and go to state 129

  ! SEMI            [ reduce using rule 51 (data -> FLOAT .) ]
  ! RPAREN          [ reduce using rule 51 (data -> FLOAT .) ]


state 141

    (133) expression_var -> expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . MINUS expression
    (18) expression -> expression . TIMES expression

    SEMI            reduce using rule 133 (expression_var -> expression .)
    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    TIMES           shift and go to state 127


state 142

    (144) declare_data_type -> KW_LET VARIABLE COLON data_type . SEMI
    (86) let_initialization -> KW_LET VARIABLE COLON data_type . EQUALS data
    (90) let_initialization -> KW_LET VARIABLE COLON data_type . EQUALS expression_var

    SEMI            shift and go to state 199
    EQUALS          shift and go to state 200


state 143

    (121) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST . LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN

    LT              shift and go to state 201


state 144

    (25) data_type -> UNSIG_INT_8 .

    SEMI            reduce using rule 25 (data_type -> UNSIG_INT_8 .)
    EQUALS          reduce using rule 25 (data_type -> UNSIG_INT_8 .)
    GT              reduce using rule 25 (data_type -> UNSIG_INT_8 .)
    LBRACE          reduce using rule 25 (data_type -> UNSIG_INT_8 .)


state 145

    (26) data_type -> UNSIG_INT_16 .

    SEMI            reduce using rule 26 (data_type -> UNSIG_INT_16 .)
    EQUALS          reduce using rule 26 (data_type -> UNSIG_INT_16 .)
    GT              reduce using rule 26 (data_type -> UNSIG_INT_16 .)
    LBRACE          reduce using rule 26 (data_type -> UNSIG_INT_16 .)


state 146

    (27) data_type -> UNSIG_INT_32 .

    SEMI            reduce using rule 27 (data_type -> UNSIG_INT_32 .)
    EQUALS          reduce using rule 27 (data_type -> UNSIG_INT_32 .)
    GT              reduce using rule 27 (data_type -> UNSIG_INT_32 .)
    LBRACE          reduce using rule 27 (data_type -> UNSIG_INT_32 .)


state 147

    (28) data_type -> UNSIG_INT_64 .

    SEMI            reduce using rule 28 (data_type -> UNSIG_INT_64 .)
    EQUALS          reduce using rule 28 (data_type -> UNSIG_INT_64 .)
    GT              reduce using rule 28 (data_type -> UNSIG_INT_64 .)
    LBRACE          reduce using rule 28 (data_type -> UNSIG_INT_64 .)


state 148

    (29) data_type -> UNSIG_INT_128 .

    SEMI            reduce using rule 29 (data_type -> UNSIG_INT_128 .)
    EQUALS          reduce using rule 29 (data_type -> UNSIG_INT_128 .)
    GT              reduce using rule 29 (data_type -> UNSIG_INT_128 .)
    LBRACE          reduce using rule 29 (data_type -> UNSIG_INT_128 .)


state 149

    (30) data_type -> SIG_INT_8 .

    SEMI            reduce using rule 30 (data_type -> SIG_INT_8 .)
    EQUALS          reduce using rule 30 (data_type -> SIG_INT_8 .)
    GT              reduce using rule 30 (data_type -> SIG_INT_8 .)
    LBRACE          reduce using rule 30 (data_type -> SIG_INT_8 .)


state 150

    (31) data_type -> SIG_INT_16 .

    SEMI            reduce using rule 31 (data_type -> SIG_INT_16 .)
    EQUALS          reduce using rule 31 (data_type -> SIG_INT_16 .)
    GT              reduce using rule 31 (data_type -> SIG_INT_16 .)
    LBRACE          reduce using rule 31 (data_type -> SIG_INT_16 .)


state 151

    (32) data_type -> SIG_INT_32 .

    SEMI            reduce using rule 32 (data_type -> SIG_INT_32 .)
    EQUALS          reduce using rule 32 (data_type -> SIG_INT_32 .)
    GT              reduce using rule 32 (data_type -> SIG_INT_32 .)
    LBRACE          reduce using rule 32 (data_type -> SIG_INT_32 .)


state 152

    (33) data_type -> SIG_INT_64 .

    SEMI            reduce using rule 33 (data_type -> SIG_INT_64 .)
    EQUALS          reduce using rule 33 (data_type -> SIG_INT_64 .)
    GT              reduce using rule 33 (data_type -> SIG_INT_64 .)
    LBRACE          reduce using rule 33 (data_type -> SIG_INT_64 .)


state 153

    (34) data_type -> SIG_INT_128 .

    SEMI            reduce using rule 34 (data_type -> SIG_INT_128 .)
    EQUALS          reduce using rule 34 (data_type -> SIG_INT_128 .)
    GT              reduce using rule 34 (data_type -> SIG_INT_128 .)
    LBRACE          reduce using rule 34 (data_type -> SIG_INT_128 .)


state 154

    (35) data_type -> FLOAT_32 .

    SEMI            reduce using rule 35 (data_type -> FLOAT_32 .)
    EQUALS          reduce using rule 35 (data_type -> FLOAT_32 .)
    GT              reduce using rule 35 (data_type -> FLOAT_32 .)
    LBRACE          reduce using rule 35 (data_type -> FLOAT_32 .)


state 155

    (36) data_type -> FLOAT_64 .

    SEMI            reduce using rule 36 (data_type -> FLOAT_64 .)
    EQUALS          reduce using rule 36 (data_type -> FLOAT_64 .)
    GT              reduce using rule 36 (data_type -> FLOAT_64 .)
    LBRACE          reduce using rule 36 (data_type -> FLOAT_64 .)


state 156

    (37) data_type -> KW_BOOLEAN .

    SEMI            reduce using rule 37 (data_type -> KW_BOOLEAN .)
    EQUALS          reduce using rule 37 (data_type -> KW_BOOLEAN .)
    GT              reduce using rule 37 (data_type -> KW_BOOLEAN .)
    LBRACE          reduce using rule 37 (data_type -> KW_BOOLEAN .)


state 157

    (38) data_type -> KW_STRING .

    SEMI            reduce using rule 38 (data_type -> KW_STRING .)
    EQUALS          reduce using rule 38 (data_type -> KW_STRING .)
    GT              reduce using rule 38 (data_type -> KW_STRING .)
    LBRACE          reduce using rule 38 (data_type -> KW_STRING .)


state 158

    (39) data_type -> KW_CHARACTER .

    SEMI            reduce using rule 39 (data_type -> KW_CHARACTER .)
    EQUALS          reduce using rule 39 (data_type -> KW_CHARACTER .)
    GT              reduce using rule 39 (data_type -> KW_CHARACTER .)
    LBRACE          reduce using rule 39 (data_type -> KW_CHARACTER .)


state 159

    (75) array -> KW_LET KW_MUT VARIABLE COLON . LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> KW_LET KW_MUT VARIABLE COLON . LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (122) linkedlist -> KW_LET KW_MUT VARIABLE COLON . KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (88) let_initialization -> KW_LET KW_MUT VARIABLE COLON . data_type EQUALS data
    (92) let_initialization -> KW_LET KW_MUT VARIABLE COLON . data_type EQUALS expression_var
    (25) data_type -> . UNSIG_INT_8
    (26) data_type -> . UNSIG_INT_16
    (27) data_type -> . UNSIG_INT_32
    (28) data_type -> . UNSIG_INT_64
    (29) data_type -> . UNSIG_INT_128
    (30) data_type -> . SIG_INT_8
    (31) data_type -> . SIG_INT_16
    (32) data_type -> . SIG_INT_32
    (33) data_type -> . SIG_INT_64
    (34) data_type -> . SIG_INT_128
    (35) data_type -> . FLOAT_32
    (36) data_type -> . FLOAT_64
    (37) data_type -> . KW_BOOLEAN
    (38) data_type -> . KW_STRING
    (39) data_type -> . KW_CHARACTER

    LBRACKET        shift and go to state 202
    KW_LINKEDLIST   shift and go to state 204
    UNSIG_INT_8     shift and go to state 144
    UNSIG_INT_16    shift and go to state 145
    UNSIG_INT_32    shift and go to state 146
    UNSIG_INT_64    shift and go to state 147
    UNSIG_INT_128   shift and go to state 148
    SIG_INT_8       shift and go to state 149
    SIG_INT_16      shift and go to state 150
    SIG_INT_32      shift and go to state 151
    SIG_INT_64      shift and go to state 152
    SIG_INT_128     shift and go to state 153
    FLOAT_32        shift and go to state 154
    FLOAT_64        shift and go to state 155
    KW_BOOLEAN      shift and go to state 156
    KW_STRING       shift and go to state 157
    KW_CHARACTER    shift and go to state 158

    data_type                      shift and go to state 203

state 160

    (113) hashmap -> KW_LET KW_MUT VARIABLE EQUALS . KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (115) hashmap -> KW_LET KW_MUT VARIABLE EQUALS . KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (124) linkedlist -> KW_LET KW_MUT VARIABLE EQUALS . KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (87) let_initialization -> KW_LET KW_MUT VARIABLE EQUALS . data
    (91) let_initialization -> KW_LET KW_MUT VARIABLE EQUALS . expression_var
    (48) data -> . CADENA
    (49) data -> . INTEGER
    (50) data -> . CHAR
    (51) data -> . FLOAT
    (52) data -> . KW_FALSE
    (53) data -> . KW_TRUE
    (54) data -> . tuple
    (133) expression_var -> . expression
    (134) expression_var -> . data
    (80) tuple -> . LPAREN mdata RPAREN
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . number
    (21) expression -> . division
    (22) number -> . INTEGER
    (23) number -> . FLOAT
    (24) number -> . VARIABLE
    (46) division -> . INTEGER DIVIDE INTEGER
    (47) division -> . FLOAT DIVIDE FLOAT

    KW_HASHMAP      shift and go to state 205
    KW_LINKEDLIST   shift and go to state 206
    CADENA          shift and go to state 59
    INTEGER         shift and go to state 139
    CHAR            shift and go to state 61
    FLOAT           shift and go to state 140
    KW_FALSE        shift and go to state 63
    KW_TRUE         shift and go to state 64
    LPAREN          shift and go to state 134
    VARIABLE        shift and go to state 85

    data                           shift and go to state 207
    expression_var                 shift and go to state 208
    tuple                          shift and go to state 65
    expression                     shift and go to state 141
    number                         shift and go to state 131
    division                       shift and go to state 91

state 161

    (77) variables -> VARIABLE .
    (78) variables -> VARIABLE . COMMA variables

    RPAREN          reduce using rule 77 (variables -> VARIABLE .)
    COMMA           shift and go to state 209


state 162

    (96) function -> KW_FN VARIABLE LPAREN arguments . RPAREN LBRACE main_rule RBRACE
    (132) function -> KW_FN VARIABLE LPAREN arguments . RPAREN MINUS GT data_type LBRACE return RBRACE

    RPAREN          shift and go to state 210


state 163

    (94) arguments -> void .

    RPAREN          reduce using rule 94 (arguments -> void .)


state 164

    (95) arguments -> variables .

    RPAREN          reduce using rule 95 (arguments -> variables .)


state 165

    (74) array -> LBRACKET data SEMI data . RBRACKET

    RBRACKET        shift and go to state 211


state 166

    (68) mdata -> data COMMA mdata .

    RBRACKET        reduce using rule 68 (mdata -> data COMMA mdata .)
    RPAREN          reduce using rule 68 (mdata -> data COMMA mdata .)


state 167

    (80) tuple -> LPAREN mdata RPAREN .

    SEMI            reduce using rule 80 (tuple -> LPAREN mdata RPAREN .)
    COMMA           reduce using rule 80 (tuple -> LPAREN mdata RPAREN .)
    RBRACKET        reduce using rule 80 (tuple -> LPAREN mdata RPAREN .)
    RPAREN          reduce using rule 80 (tuple -> LPAREN mdata RPAREN .)
    LBRACE          reduce using rule 80 (tuple -> LPAREN mdata RPAREN .)


state 168

    (104) for_str -> KW_FOR VARIABLE KW_IN VARIABLE . LBRACE main_rule RBRACE
    (107) range -> VARIABLE . DOT DOT VARIABLE

    LBRACE          shift and go to state 212
    DOT             shift and go to state 213


state 169

    (103) for_str -> KW_FOR VARIABLE KW_IN range . LBRACE main_rule RBRACE

    LBRACE          shift and go to state 214


state 170

    (106) range -> INTEGER . DOT DOT INTEGER

    DOT             shift and go to state 215


state 171

    (129) if -> KW_IF conditional LBRACE main_rule . RBRACE

    RBRACE          shift and go to state 216


state 172

    (65) conditional -> VARIABLE comparator data .

    LBRACE          reduce using rule 65 (conditional -> VARIABLE comparator data .)


state 173

    (66) conditional -> LPAREN lvariable RPAREN . comparator data
    (55) comparator -> .
    (56) comparator -> . EQ
    (57) comparator -> . NE
    (58) comparator -> . GE
    (59) comparator -> . LE
    (60) comparator -> . GT
    (61) comparator -> . LT

    CADENA          reduce using rule 55 (comparator -> .)
    INTEGER         reduce using rule 55 (comparator -> .)
    CHAR            reduce using rule 55 (comparator -> .)
    FLOAT           reduce using rule 55 (comparator -> .)
    KW_FALSE        reduce using rule 55 (comparator -> .)
    KW_TRUE         reduce using rule 55 (comparator -> .)
    LPAREN          reduce using rule 55 (comparator -> .)
    EQ              shift and go to state 106
    NE              shift and go to state 107
    GE              shift and go to state 108
    LE              shift and go to state 109
    GT              shift and go to state 110
    LT              shift and go to state 111

    comparator                     shift and go to state 217

state 174

    (64) lvariable -> VARIABLE logic . VARIABLE

    VARIABLE        shift and go to state 218


state 175

    (62) logic -> LOR .

    VARIABLE        reduce using rule 62 (logic -> LOR .)


state 176

    (63) logic -> LAND .

    VARIABLE        reduce using rule 63 (logic -> LAND .)


state 177

    (130) else -> KW_ELSE LBRACE main_rule RBRACE .

    KW_PRINT        reduce using rule 130 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    KW_LET          reduce using rule 130 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    KW_FN           reduce using rule 130 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    LBRACKET        reduce using rule 130 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    VARIABLE        reduce using rule 130 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    KW_FOR          reduce using rule 130 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    KW_IF           reduce using rule 130 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    KW_ELSE         reduce using rule 130 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    KW_WHILE        reduce using rule 130 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    KW_CONST        reduce using rule 130 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    QUOTE           reduce using rule 130 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    $end            reduce using rule 130 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    RBRACE          reduce using rule 130 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    KW_RETURN       reduce using rule 130 (else -> KW_ELSE LBRACE main_rule RBRACE .)


state 178

    (131) else_if -> KW_ELSE KW_IF conditional LBRACE . main_rule RBRACE
    (1) main_rule -> . father_rule
    (2) main_rule -> . father_rule main_rule
    (3) father_rule -> . print
    (4) father_rule -> . dvariable
    (5) father_rule -> . function
    (6) father_rule -> . control_str
    (7) father_rule -> . void
    (8) father_rule -> . data_str
    (9) father_rule -> . array
    (10) father_rule -> . linkedlist_methods
    (11) father_rule -> . hashmap_methods
    (12) father_rule -> . initialization
    (13) father_rule -> . input
    (14) father_rule -> . assignation
    (15) father_rule -> . declare_data_type
    (69) print -> . KW_PRINT LNOT LPAREN CADENA RPAREN SEMI
    (70) print -> . KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI
    (71) dvariable -> . KW_LET VARIABLE SEMI
    (96) function -> . KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE
    (132) function -> . KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE
    (97) control_str -> . for_str
    (98) control_str -> . for_str_tagged
    (99) control_str -> . if
    (100) control_str -> . else
    (101) control_str -> . else_if
    (102) control_str -> . while
    (120) void -> .
    (109) data_str -> . array
    (110) data_str -> . hashmap
    (111) data_str -> . linkedlist
    (72) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (73) array -> . LBRACKET mdata RBRACKET
    (74) array -> . LBRACKET data SEMI data RBRACKET
    (75) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (125) linkedlist_methods -> . VARIABLE linkedlist_push
    (126) linkedlist_methods -> . VARIABLE linkedlist_remove
    (116) hashmap_methods -> . VARIABLE hashmap_insert
    (117) hashmap_methods -> . VARIABLE hashmap_remove
    (81) initialization -> . let_initialization SEMI
    (82) initialization -> . const_initialization SEMI
    (83) initialization -> . data_str SEMI
    (84) initialization -> . input_init SEMI
    (139) input -> . VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI
    (140) assignation -> . VARIABLE assign_operators number SEMI
    (141) assignation -> . VARIABLE assign_operators expression SEMI
    (142) assignation -> . VARIABLE assign_operators number
    (143) assignation -> . VARIABLE assign_operators expression
    (144) declare_data_type -> . KW_LET VARIABLE COLON data_type SEMI
    (103) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE
    (104) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE
    (105) for_str_tagged -> . label COLON for_str
    (129) if -> . KW_IF conditional LBRACE main_rule RBRACE
    (130) else -> . KW_ELSE LBRACE main_rule RBRACE
    (131) else_if -> . KW_ELSE KW_IF conditional LBRACE main_rule RBRACE
    (79) while -> . KW_WHILE conditional LBRACE main_rule RBRACE
    (112) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (113) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (114) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (115) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (121) linkedlist -> . KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (122) linkedlist -> . KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (123) linkedlist -> . KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (124) linkedlist -> . KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (85) let_initialization -> . KW_LET VARIABLE EQUALS data
    (86) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS data
    (87) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS data
    (88) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS data
    (89) let_initialization -> . KW_LET VARIABLE EQUALS expression_var
    (90) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS expression_var
    (91) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS expression_var
    (92) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var
    (93) const_initialization -> . KW_CONST VARIABLE COLON data_type EQUALS data
    (138) input_init -> . KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN
    (108) label -> . QUOTE VARIABLE

  ! shift/reduce conflict for KW_PRINT resolved as shift
  ! shift/reduce conflict for KW_LET resolved as shift
  ! shift/reduce conflict for KW_FN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for KW_FOR resolved as shift
  ! shift/reduce conflict for KW_IF resolved as shift
  ! shift/reduce conflict for KW_ELSE resolved as shift
  ! shift/reduce conflict for KW_WHILE resolved as shift
  ! shift/reduce conflict for KW_CONST resolved as shift
  ! shift/reduce conflict for QUOTE resolved as shift
    KW_PRINT        shift and go to state 16
    KW_LET          shift and go to state 18
    KW_FN           shift and go to state 19
    RBRACE          reduce using rule 120 (void -> .)
    LBRACKET        shift and go to state 28
    VARIABLE        shift and go to state 17
    KW_FOR          shift and go to state 32
    KW_IF           shift and go to state 34
    KW_ELSE         shift and go to state 35
    KW_WHILE        shift and go to state 36
    KW_CONST        shift and go to state 37
    QUOTE           shift and go to state 38

  ! KW_PRINT        [ reduce using rule 120 (void -> .) ]
  ! KW_LET          [ reduce using rule 120 (void -> .) ]
  ! KW_FN           [ reduce using rule 120 (void -> .) ]
  ! LBRACKET        [ reduce using rule 120 (void -> .) ]
  ! VARIABLE        [ reduce using rule 120 (void -> .) ]
  ! KW_FOR          [ reduce using rule 120 (void -> .) ]
  ! KW_IF           [ reduce using rule 120 (void -> .) ]
  ! KW_ELSE         [ reduce using rule 120 (void -> .) ]
  ! KW_WHILE        [ reduce using rule 120 (void -> .) ]
  ! KW_CONST        [ reduce using rule 120 (void -> .) ]
  ! QUOTE           [ reduce using rule 120 (void -> .) ]

    main_rule                      shift and go to state 219
    father_rule                    shift and go to state 2
    print                          shift and go to state 3
    dvariable                      shift and go to state 4
    function                       shift and go to state 5
    control_str                    shift and go to state 6
    void                           shift and go to state 7
    data_str                       shift and go to state 8
    array                          shift and go to state 9
    linkedlist_methods             shift and go to state 10
    hashmap_methods                shift and go to state 11
    initialization                 shift and go to state 12
    input                          shift and go to state 13
    assignation                    shift and go to state 14
    declare_data_type              shift and go to state 15
    for_str                        shift and go to state 20
    for_str_tagged                 shift and go to state 21
    if                             shift and go to state 22
    else                           shift and go to state 23
    else_if                        shift and go to state 24
    while                          shift and go to state 25
    hashmap                        shift and go to state 26
    linkedlist                     shift and go to state 27
    let_initialization             shift and go to state 29
    const_initialization           shift and go to state 30
    input_init                     shift and go to state 31
    label                          shift and go to state 33

state 179

    (79) while -> KW_WHILE conditional LBRACE main_rule . RBRACE

    RBRACE          shift and go to state 220


state 180

    (93) const_initialization -> KW_CONST VARIABLE COLON data_type . EQUALS data

    EQUALS          shift and go to state 221


state 181

    (69) print -> KW_PRINT LNOT LPAREN CADENA RPAREN . SEMI

    SEMI            shift and go to state 222


state 182

    (70) print -> KW_PRINT LNOT LPAREN CADENA COMMA . VARIABLE RPAREN SEMI

    VARIABLE        shift and go to state 223


state 183

    (139) input -> VARIABLE DOT KW_READ_LINE LPAREN AND . KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI

    KW_MUT          shift and go to state 224


state 184

    (127) linkedlist_push -> DOT KW_PUSH_BACK LPAREN data . RPAREN SEMI

    RPAREN          shift and go to state 225


state 185

    (128) linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER . RPAREN SEMI

    RPAREN          shift and go to state 226


state 186

    (119) hashmap_remove -> DOT KW_REMOVE LPAREN AND . data RPAREN SEMI
    (48) data -> . CADENA
    (49) data -> . INTEGER
    (50) data -> . CHAR
    (51) data -> . FLOAT
    (52) data -> . KW_FALSE
    (53) data -> . KW_TRUE
    (54) data -> . tuple
    (80) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 59
    INTEGER         shift and go to state 60
    CHAR            shift and go to state 61
    FLOAT           shift and go to state 62
    KW_FALSE        shift and go to state 63
    KW_TRUE         shift and go to state 64
    LPAREN          shift and go to state 66

    data                           shift and go to state 227
    tuple                          shift and go to state 65

state 187

    (118) hashmap_insert -> DOT KW_INSERT LPAREN mdata . RPAREN SEMI

    RPAREN          shift and go to state 228


state 188

    (16) expression -> expression PLUS expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . MINUS expression
    (18) expression -> expression . TIMES expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
    SEMI            reduce using rule 16 (expression -> expression PLUS expression .)
    KW_PRINT        reduce using rule 16 (expression -> expression PLUS expression .)
    KW_LET          reduce using rule 16 (expression -> expression PLUS expression .)
    KW_FN           reduce using rule 16 (expression -> expression PLUS expression .)
    LBRACKET        reduce using rule 16 (expression -> expression PLUS expression .)
    VARIABLE        reduce using rule 16 (expression -> expression PLUS expression .)
    KW_FOR          reduce using rule 16 (expression -> expression PLUS expression .)
    KW_IF           reduce using rule 16 (expression -> expression PLUS expression .)
    KW_ELSE         reduce using rule 16 (expression -> expression PLUS expression .)
    KW_WHILE        reduce using rule 16 (expression -> expression PLUS expression .)
    KW_CONST        reduce using rule 16 (expression -> expression PLUS expression .)
    QUOTE           reduce using rule 16 (expression -> expression PLUS expression .)
    $end            reduce using rule 16 (expression -> expression PLUS expression .)
    RBRACE          reduce using rule 16 (expression -> expression PLUS expression .)
    KW_RETURN       reduce using rule 16 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 16 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    TIMES           shift and go to state 127

  ! PLUS            [ reduce using rule 16 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 16 (expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 16 (expression -> expression PLUS expression .) ]


state 189

    (17) expression -> expression MINUS expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . MINUS expression
    (18) expression -> expression . TIMES expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
    SEMI            reduce using rule 17 (expression -> expression MINUS expression .)
    KW_PRINT        reduce using rule 17 (expression -> expression MINUS expression .)
    KW_LET          reduce using rule 17 (expression -> expression MINUS expression .)
    KW_FN           reduce using rule 17 (expression -> expression MINUS expression .)
    LBRACKET        reduce using rule 17 (expression -> expression MINUS expression .)
    VARIABLE        reduce using rule 17 (expression -> expression MINUS expression .)
    KW_FOR          reduce using rule 17 (expression -> expression MINUS expression .)
    KW_IF           reduce using rule 17 (expression -> expression MINUS expression .)
    KW_ELSE         reduce using rule 17 (expression -> expression MINUS expression .)
    KW_WHILE        reduce using rule 17 (expression -> expression MINUS expression .)
    KW_CONST        reduce using rule 17 (expression -> expression MINUS expression .)
    QUOTE           reduce using rule 17 (expression -> expression MINUS expression .)
    $end            reduce using rule 17 (expression -> expression MINUS expression .)
    RBRACE          reduce using rule 17 (expression -> expression MINUS expression .)
    KW_RETURN       reduce using rule 17 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 17 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    TIMES           shift and go to state 127

  ! PLUS            [ reduce using rule 17 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 17 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 17 (expression -> expression MINUS expression .) ]


state 190

    (18) expression -> expression TIMES expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . MINUS expression
    (18) expression -> expression . TIMES expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
    SEMI            reduce using rule 18 (expression -> expression TIMES expression .)
    KW_PRINT        reduce using rule 18 (expression -> expression TIMES expression .)
    KW_LET          reduce using rule 18 (expression -> expression TIMES expression .)
    KW_FN           reduce using rule 18 (expression -> expression TIMES expression .)
    LBRACKET        reduce using rule 18 (expression -> expression TIMES expression .)
    VARIABLE        reduce using rule 18 (expression -> expression TIMES expression .)
    KW_FOR          reduce using rule 18 (expression -> expression TIMES expression .)
    KW_IF           reduce using rule 18 (expression -> expression TIMES expression .)
    KW_ELSE         reduce using rule 18 (expression -> expression TIMES expression .)
    KW_WHILE        reduce using rule 18 (expression -> expression TIMES expression .)
    KW_CONST        reduce using rule 18 (expression -> expression TIMES expression .)
    QUOTE           reduce using rule 18 (expression -> expression TIMES expression .)
    $end            reduce using rule 18 (expression -> expression TIMES expression .)
    RBRACE          reduce using rule 18 (expression -> expression TIMES expression .)
    KW_RETURN       reduce using rule 18 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 18 (expression -> expression TIMES expression .)
    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    TIMES           shift and go to state 127

  ! PLUS            [ reduce using rule 18 (expression -> expression TIMES expression .) ]
  ! MINUS           [ reduce using rule 18 (expression -> expression TIMES expression .) ]
  ! TIMES           [ reduce using rule 18 (expression -> expression TIMES expression .) ]


state 191

    (46) division -> INTEGER DIVIDE INTEGER .

    SEMI            reduce using rule 46 (division -> INTEGER DIVIDE INTEGER .)
    PLUS            reduce using rule 46 (division -> INTEGER DIVIDE INTEGER .)
    MINUS           reduce using rule 46 (division -> INTEGER DIVIDE INTEGER .)
    TIMES           reduce using rule 46 (division -> INTEGER DIVIDE INTEGER .)
    KW_PRINT        reduce using rule 46 (division -> INTEGER DIVIDE INTEGER .)
    KW_LET          reduce using rule 46 (division -> INTEGER DIVIDE INTEGER .)
    KW_FN           reduce using rule 46 (division -> INTEGER DIVIDE INTEGER .)
    LBRACKET        reduce using rule 46 (division -> INTEGER DIVIDE INTEGER .)
    VARIABLE        reduce using rule 46 (division -> INTEGER DIVIDE INTEGER .)
    KW_FOR          reduce using rule 46 (division -> INTEGER DIVIDE INTEGER .)
    KW_IF           reduce using rule 46 (division -> INTEGER DIVIDE INTEGER .)
    KW_ELSE         reduce using rule 46 (division -> INTEGER DIVIDE INTEGER .)
    KW_WHILE        reduce using rule 46 (division -> INTEGER DIVIDE INTEGER .)
    KW_CONST        reduce using rule 46 (division -> INTEGER DIVIDE INTEGER .)
    QUOTE           reduce using rule 46 (division -> INTEGER DIVIDE INTEGER .)
    $end            reduce using rule 46 (division -> INTEGER DIVIDE INTEGER .)
    RBRACE          reduce using rule 46 (division -> INTEGER DIVIDE INTEGER .)
    KW_RETURN       reduce using rule 46 (division -> INTEGER DIVIDE INTEGER .)
    RPAREN          reduce using rule 46 (division -> INTEGER DIVIDE INTEGER .)


state 192

    (47) division -> FLOAT DIVIDE FLOAT .

    SEMI            reduce using rule 47 (division -> FLOAT DIVIDE FLOAT .)
    PLUS            reduce using rule 47 (division -> FLOAT DIVIDE FLOAT .)
    MINUS           reduce using rule 47 (division -> FLOAT DIVIDE FLOAT .)
    TIMES           reduce using rule 47 (division -> FLOAT DIVIDE FLOAT .)
    KW_PRINT        reduce using rule 47 (division -> FLOAT DIVIDE FLOAT .)
    KW_LET          reduce using rule 47 (division -> FLOAT DIVIDE FLOAT .)
    KW_FN           reduce using rule 47 (division -> FLOAT DIVIDE FLOAT .)
    LBRACKET        reduce using rule 47 (division -> FLOAT DIVIDE FLOAT .)
    VARIABLE        reduce using rule 47 (division -> FLOAT DIVIDE FLOAT .)
    KW_FOR          reduce using rule 47 (division -> FLOAT DIVIDE FLOAT .)
    KW_IF           reduce using rule 47 (division -> FLOAT DIVIDE FLOAT .)
    KW_ELSE         reduce using rule 47 (division -> FLOAT DIVIDE FLOAT .)
    KW_WHILE        reduce using rule 47 (division -> FLOAT DIVIDE FLOAT .)
    KW_CONST        reduce using rule 47 (division -> FLOAT DIVIDE FLOAT .)
    QUOTE           reduce using rule 47 (division -> FLOAT DIVIDE FLOAT .)
    $end            reduce using rule 47 (division -> FLOAT DIVIDE FLOAT .)
    RBRACE          reduce using rule 47 (division -> FLOAT DIVIDE FLOAT .)
    KW_RETURN       reduce using rule 47 (division -> FLOAT DIVIDE FLOAT .)
    RPAREN          reduce using rule 47 (division -> FLOAT DIVIDE FLOAT .)


state 193

    (19) expression -> LPAREN expression RPAREN .

    SEMI            reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    KW_PRINT        reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    KW_LET          reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    KW_FN           reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    VARIABLE        reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    KW_FOR          reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    KW_IF           reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    KW_ELSE         reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    KW_WHILE        reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    KW_CONST        reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    QUOTE           reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    KW_RETURN       reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 19 (expression -> LPAREN expression RPAREN .)


state 194

    (72) array -> KW_LET VARIABLE EQUALS LBRACKET mdata . RBRACKET SEMI

    RBRACKET        shift and go to state 229


state 195

    (112) hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON . COLON KW_NEW LPAREN RPAREN
    (114) hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON . COLON KW_FROM LPAREN array RPAREN

    COLON           shift and go to state 230


state 196

    (19) expression -> LPAREN . expression RPAREN
    (80) tuple -> LPAREN . mdata RPAREN
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . number
    (21) expression -> . division
    (67) mdata -> . data
    (68) mdata -> . data COMMA mdata
    (22) number -> . INTEGER
    (23) number -> . FLOAT
    (24) number -> . VARIABLE
    (46) division -> . INTEGER DIVIDE INTEGER
    (47) division -> . FLOAT DIVIDE FLOAT
    (48) data -> . CADENA
    (49) data -> . INTEGER
    (50) data -> . CHAR
    (51) data -> . FLOAT
    (52) data -> . KW_FALSE
    (53) data -> . KW_TRUE
    (54) data -> . tuple
    (80) tuple -> . LPAREN mdata RPAREN

    LPAREN          shift and go to state 196
    INTEGER         shift and go to state 231
    FLOAT           shift and go to state 232
    VARIABLE        shift and go to state 85
    CADENA          shift and go to state 59
    CHAR            shift and go to state 61
    KW_FALSE        shift and go to state 63
    KW_TRUE         shift and go to state 64

    expression                     shift and go to state 130
    mdata                          shift and go to state 100
    number                         shift and go to state 131
    division                       shift and go to state 91
    data                           shift and go to state 101
    tuple                          shift and go to state 65

state 197

    (123) linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON . COLON KW_FROM LPAREN array RPAREN

    COLON           shift and go to state 233


state 198

    (138) input_init -> KW_LET VARIABLE EQUALS KW_IO COLON . COLON KW_STDIN LPAREN RPAREN

    COLON           shift and go to state 234


state 199

    (144) declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .

    KW_PRINT        reduce using rule 144 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .)
    KW_LET          reduce using rule 144 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .)
    KW_FN           reduce using rule 144 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .)
    LBRACKET        reduce using rule 144 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .)
    VARIABLE        reduce using rule 144 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .)
    KW_FOR          reduce using rule 144 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .)
    KW_IF           reduce using rule 144 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .)
    KW_ELSE         reduce using rule 144 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .)
    KW_WHILE        reduce using rule 144 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .)
    KW_CONST        reduce using rule 144 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .)
    QUOTE           reduce using rule 144 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .)
    $end            reduce using rule 144 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .)
    RBRACE          reduce using rule 144 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .)
    KW_RETURN       reduce using rule 144 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .)


state 200

    (86) let_initialization -> KW_LET VARIABLE COLON data_type EQUALS . data
    (90) let_initialization -> KW_LET VARIABLE COLON data_type EQUALS . expression_var
    (48) data -> . CADENA
    (49) data -> . INTEGER
    (50) data -> . CHAR
    (51) data -> . FLOAT
    (52) data -> . KW_FALSE
    (53) data -> . KW_TRUE
    (54) data -> . tuple
    (133) expression_var -> . expression
    (134) expression_var -> . data
    (80) tuple -> . LPAREN mdata RPAREN
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . number
    (21) expression -> . division
    (22) number -> . INTEGER
    (23) number -> . FLOAT
    (24) number -> . VARIABLE
    (46) division -> . INTEGER DIVIDE INTEGER
    (47) division -> . FLOAT DIVIDE FLOAT

    CADENA          shift and go to state 59
    INTEGER         shift and go to state 139
    CHAR            shift and go to state 61
    FLOAT           shift and go to state 140
    KW_FALSE        shift and go to state 63
    KW_TRUE         shift and go to state 64
    LPAREN          shift and go to state 134
    VARIABLE        shift and go to state 85

    data                           shift and go to state 235
    expression_var                 shift and go to state 236
    tuple                          shift and go to state 65
    expression                     shift and go to state 141
    number                         shift and go to state 131
    division                       shift and go to state 91

state 201

    (121) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT . data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (25) data_type -> . UNSIG_INT_8
    (26) data_type -> . UNSIG_INT_16
    (27) data_type -> . UNSIG_INT_32
    (28) data_type -> . UNSIG_INT_64
    (29) data_type -> . UNSIG_INT_128
    (30) data_type -> . SIG_INT_8
    (31) data_type -> . SIG_INT_16
    (32) data_type -> . SIG_INT_32
    (33) data_type -> . SIG_INT_64
    (34) data_type -> . SIG_INT_128
    (35) data_type -> . FLOAT_32
    (36) data_type -> . FLOAT_64
    (37) data_type -> . KW_BOOLEAN
    (38) data_type -> . KW_STRING
    (39) data_type -> . KW_CHARACTER

    UNSIG_INT_8     shift and go to state 144
    UNSIG_INT_16    shift and go to state 145
    UNSIG_INT_32    shift and go to state 146
    UNSIG_INT_64    shift and go to state 147
    UNSIG_INT_128   shift and go to state 148
    SIG_INT_8       shift and go to state 149
    SIG_INT_16      shift and go to state 150
    SIG_INT_32      shift and go to state 151
    SIG_INT_64      shift and go to state 152
    SIG_INT_128     shift and go to state 153
    FLOAT_32        shift and go to state 154
    FLOAT_64        shift and go to state 155
    KW_BOOLEAN      shift and go to state 156
    KW_STRING       shift and go to state 157
    KW_CHARACTER    shift and go to state 158

    data_type                      shift and go to state 237

state 202

    (75) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET . data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET . data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (25) data_type -> . UNSIG_INT_8
    (26) data_type -> . UNSIG_INT_16
    (27) data_type -> . UNSIG_INT_32
    (28) data_type -> . UNSIG_INT_64
    (29) data_type -> . UNSIG_INT_128
    (30) data_type -> . SIG_INT_8
    (31) data_type -> . SIG_INT_16
    (32) data_type -> . SIG_INT_32
    (33) data_type -> . SIG_INT_64
    (34) data_type -> . SIG_INT_128
    (35) data_type -> . FLOAT_32
    (36) data_type -> . FLOAT_64
    (37) data_type -> . KW_BOOLEAN
    (38) data_type -> . KW_STRING
    (39) data_type -> . KW_CHARACTER

    UNSIG_INT_8     shift and go to state 144
    UNSIG_INT_16    shift and go to state 145
    UNSIG_INT_32    shift and go to state 146
    UNSIG_INT_64    shift and go to state 147
    UNSIG_INT_128   shift and go to state 148
    SIG_INT_8       shift and go to state 149
    SIG_INT_16      shift and go to state 150
    SIG_INT_32      shift and go to state 151
    SIG_INT_64      shift and go to state 152
    SIG_INT_128     shift and go to state 153
    FLOAT_32        shift and go to state 154
    FLOAT_64        shift and go to state 155
    KW_BOOLEAN      shift and go to state 156
    KW_STRING       shift and go to state 157
    KW_CHARACTER    shift and go to state 158

    data_type                      shift and go to state 238

state 203

    (88) let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type . EQUALS data
    (92) let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type . EQUALS expression_var

    EQUALS          shift and go to state 239


state 204

    (122) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST . LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN

    LT              shift and go to state 240


state 205

    (113) hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP . COLON COLON KW_NEW LPAREN RPAREN
    (115) hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP . COLON COLON KW_FROM LPAREN array RPAREN

    COLON           shift and go to state 241


state 206

    (124) linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST . COLON COLON KW_FROM LPAREN array RPAREN

    COLON           shift and go to state 242


state 207

    (87) let_initialization -> KW_LET KW_MUT VARIABLE EQUALS data .
    (134) expression_var -> data .

  ! reduce/reduce conflict for SEMI resolved using rule 87 (let_initialization -> KW_LET KW_MUT VARIABLE EQUALS data .)
    SEMI            reduce using rule 87 (let_initialization -> KW_LET KW_MUT VARIABLE EQUALS data .)

  ! SEMI            [ reduce using rule 134 (expression_var -> data .) ]


state 208

    (91) let_initialization -> KW_LET KW_MUT VARIABLE EQUALS expression_var .

    SEMI            reduce using rule 91 (let_initialization -> KW_LET KW_MUT VARIABLE EQUALS expression_var .)


state 209

    (78) variables -> VARIABLE COMMA . variables
    (77) variables -> . VARIABLE
    (78) variables -> . VARIABLE COMMA variables

    VARIABLE        shift and go to state 161

    variables                      shift and go to state 243

state 210

    (96) function -> KW_FN VARIABLE LPAREN arguments RPAREN . LBRACE main_rule RBRACE
    (132) function -> KW_FN VARIABLE LPAREN arguments RPAREN . MINUS GT data_type LBRACE return RBRACE

    LBRACE          shift and go to state 244
    MINUS           shift and go to state 245


state 211

    (74) array -> LBRACKET data SEMI data RBRACKET .

    KW_PRINT        reduce using rule 74 (array -> LBRACKET data SEMI data RBRACKET .)
    KW_LET          reduce using rule 74 (array -> LBRACKET data SEMI data RBRACKET .)
    KW_FN           reduce using rule 74 (array -> LBRACKET data SEMI data RBRACKET .)
    LBRACKET        reduce using rule 74 (array -> LBRACKET data SEMI data RBRACKET .)
    VARIABLE        reduce using rule 74 (array -> LBRACKET data SEMI data RBRACKET .)
    KW_FOR          reduce using rule 74 (array -> LBRACKET data SEMI data RBRACKET .)
    KW_IF           reduce using rule 74 (array -> LBRACKET data SEMI data RBRACKET .)
    KW_ELSE         reduce using rule 74 (array -> LBRACKET data SEMI data RBRACKET .)
    KW_WHILE        reduce using rule 74 (array -> LBRACKET data SEMI data RBRACKET .)
    KW_CONST        reduce using rule 74 (array -> LBRACKET data SEMI data RBRACKET .)
    QUOTE           reduce using rule 74 (array -> LBRACKET data SEMI data RBRACKET .)
    $end            reduce using rule 74 (array -> LBRACKET data SEMI data RBRACKET .)
    SEMI            reduce using rule 74 (array -> LBRACKET data SEMI data RBRACKET .)
    RBRACE          reduce using rule 74 (array -> LBRACKET data SEMI data RBRACKET .)
    KW_RETURN       reduce using rule 74 (array -> LBRACKET data SEMI data RBRACKET .)
    RPAREN          reduce using rule 74 (array -> LBRACKET data SEMI data RBRACKET .)


state 212

    (104) for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE . main_rule RBRACE
    (1) main_rule -> . father_rule
    (2) main_rule -> . father_rule main_rule
    (3) father_rule -> . print
    (4) father_rule -> . dvariable
    (5) father_rule -> . function
    (6) father_rule -> . control_str
    (7) father_rule -> . void
    (8) father_rule -> . data_str
    (9) father_rule -> . array
    (10) father_rule -> . linkedlist_methods
    (11) father_rule -> . hashmap_methods
    (12) father_rule -> . initialization
    (13) father_rule -> . input
    (14) father_rule -> . assignation
    (15) father_rule -> . declare_data_type
    (69) print -> . KW_PRINT LNOT LPAREN CADENA RPAREN SEMI
    (70) print -> . KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI
    (71) dvariable -> . KW_LET VARIABLE SEMI
    (96) function -> . KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE
    (132) function -> . KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE
    (97) control_str -> . for_str
    (98) control_str -> . for_str_tagged
    (99) control_str -> . if
    (100) control_str -> . else
    (101) control_str -> . else_if
    (102) control_str -> . while
    (120) void -> .
    (109) data_str -> . array
    (110) data_str -> . hashmap
    (111) data_str -> . linkedlist
    (72) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (73) array -> . LBRACKET mdata RBRACKET
    (74) array -> . LBRACKET data SEMI data RBRACKET
    (75) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (125) linkedlist_methods -> . VARIABLE linkedlist_push
    (126) linkedlist_methods -> . VARIABLE linkedlist_remove
    (116) hashmap_methods -> . VARIABLE hashmap_insert
    (117) hashmap_methods -> . VARIABLE hashmap_remove
    (81) initialization -> . let_initialization SEMI
    (82) initialization -> . const_initialization SEMI
    (83) initialization -> . data_str SEMI
    (84) initialization -> . input_init SEMI
    (139) input -> . VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI
    (140) assignation -> . VARIABLE assign_operators number SEMI
    (141) assignation -> . VARIABLE assign_operators expression SEMI
    (142) assignation -> . VARIABLE assign_operators number
    (143) assignation -> . VARIABLE assign_operators expression
    (144) declare_data_type -> . KW_LET VARIABLE COLON data_type SEMI
    (103) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE
    (104) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE
    (105) for_str_tagged -> . label COLON for_str
    (129) if -> . KW_IF conditional LBRACE main_rule RBRACE
    (130) else -> . KW_ELSE LBRACE main_rule RBRACE
    (131) else_if -> . KW_ELSE KW_IF conditional LBRACE main_rule RBRACE
    (79) while -> . KW_WHILE conditional LBRACE main_rule RBRACE
    (112) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (113) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (114) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (115) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (121) linkedlist -> . KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (122) linkedlist -> . KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (123) linkedlist -> . KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (124) linkedlist -> . KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (85) let_initialization -> . KW_LET VARIABLE EQUALS data
    (86) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS data
    (87) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS data
    (88) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS data
    (89) let_initialization -> . KW_LET VARIABLE EQUALS expression_var
    (90) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS expression_var
    (91) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS expression_var
    (92) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var
    (93) const_initialization -> . KW_CONST VARIABLE COLON data_type EQUALS data
    (138) input_init -> . KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN
    (108) label -> . QUOTE VARIABLE

  ! shift/reduce conflict for KW_PRINT resolved as shift
  ! shift/reduce conflict for KW_LET resolved as shift
  ! shift/reduce conflict for KW_FN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for KW_FOR resolved as shift
  ! shift/reduce conflict for KW_IF resolved as shift
  ! shift/reduce conflict for KW_ELSE resolved as shift
  ! shift/reduce conflict for KW_WHILE resolved as shift
  ! shift/reduce conflict for KW_CONST resolved as shift
  ! shift/reduce conflict for QUOTE resolved as shift
    KW_PRINT        shift and go to state 16
    KW_LET          shift and go to state 18
    KW_FN           shift and go to state 19
    RBRACE          reduce using rule 120 (void -> .)
    LBRACKET        shift and go to state 28
    VARIABLE        shift and go to state 17
    KW_FOR          shift and go to state 32
    KW_IF           shift and go to state 34
    KW_ELSE         shift and go to state 35
    KW_WHILE        shift and go to state 36
    KW_CONST        shift and go to state 37
    QUOTE           shift and go to state 38

  ! KW_PRINT        [ reduce using rule 120 (void -> .) ]
  ! KW_LET          [ reduce using rule 120 (void -> .) ]
  ! KW_FN           [ reduce using rule 120 (void -> .) ]
  ! LBRACKET        [ reduce using rule 120 (void -> .) ]
  ! VARIABLE        [ reduce using rule 120 (void -> .) ]
  ! KW_FOR          [ reduce using rule 120 (void -> .) ]
  ! KW_IF           [ reduce using rule 120 (void -> .) ]
  ! KW_ELSE         [ reduce using rule 120 (void -> .) ]
  ! KW_WHILE        [ reduce using rule 120 (void -> .) ]
  ! KW_CONST        [ reduce using rule 120 (void -> .) ]
  ! QUOTE           [ reduce using rule 120 (void -> .) ]

    main_rule                      shift and go to state 246
    father_rule                    shift and go to state 2
    print                          shift and go to state 3
    dvariable                      shift and go to state 4
    function                       shift and go to state 5
    control_str                    shift and go to state 6
    void                           shift and go to state 7
    data_str                       shift and go to state 8
    array                          shift and go to state 9
    linkedlist_methods             shift and go to state 10
    hashmap_methods                shift and go to state 11
    initialization                 shift and go to state 12
    input                          shift and go to state 13
    assignation                    shift and go to state 14
    declare_data_type              shift and go to state 15
    for_str                        shift and go to state 20
    for_str_tagged                 shift and go to state 21
    if                             shift and go to state 22
    else                           shift and go to state 23
    else_if                        shift and go to state 24
    while                          shift and go to state 25
    hashmap                        shift and go to state 26
    linkedlist                     shift and go to state 27
    let_initialization             shift and go to state 29
    const_initialization           shift and go to state 30
    input_init                     shift and go to state 31
    label                          shift and go to state 33

state 213

    (107) range -> VARIABLE DOT . DOT VARIABLE

    DOT             shift and go to state 247


state 214

    (103) for_str -> KW_FOR VARIABLE KW_IN range LBRACE . main_rule RBRACE
    (1) main_rule -> . father_rule
    (2) main_rule -> . father_rule main_rule
    (3) father_rule -> . print
    (4) father_rule -> . dvariable
    (5) father_rule -> . function
    (6) father_rule -> . control_str
    (7) father_rule -> . void
    (8) father_rule -> . data_str
    (9) father_rule -> . array
    (10) father_rule -> . linkedlist_methods
    (11) father_rule -> . hashmap_methods
    (12) father_rule -> . initialization
    (13) father_rule -> . input
    (14) father_rule -> . assignation
    (15) father_rule -> . declare_data_type
    (69) print -> . KW_PRINT LNOT LPAREN CADENA RPAREN SEMI
    (70) print -> . KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI
    (71) dvariable -> . KW_LET VARIABLE SEMI
    (96) function -> . KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE
    (132) function -> . KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE
    (97) control_str -> . for_str
    (98) control_str -> . for_str_tagged
    (99) control_str -> . if
    (100) control_str -> . else
    (101) control_str -> . else_if
    (102) control_str -> . while
    (120) void -> .
    (109) data_str -> . array
    (110) data_str -> . hashmap
    (111) data_str -> . linkedlist
    (72) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (73) array -> . LBRACKET mdata RBRACKET
    (74) array -> . LBRACKET data SEMI data RBRACKET
    (75) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (125) linkedlist_methods -> . VARIABLE linkedlist_push
    (126) linkedlist_methods -> . VARIABLE linkedlist_remove
    (116) hashmap_methods -> . VARIABLE hashmap_insert
    (117) hashmap_methods -> . VARIABLE hashmap_remove
    (81) initialization -> . let_initialization SEMI
    (82) initialization -> . const_initialization SEMI
    (83) initialization -> . data_str SEMI
    (84) initialization -> . input_init SEMI
    (139) input -> . VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI
    (140) assignation -> . VARIABLE assign_operators number SEMI
    (141) assignation -> . VARIABLE assign_operators expression SEMI
    (142) assignation -> . VARIABLE assign_operators number
    (143) assignation -> . VARIABLE assign_operators expression
    (144) declare_data_type -> . KW_LET VARIABLE COLON data_type SEMI
    (103) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE
    (104) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE
    (105) for_str_tagged -> . label COLON for_str
    (129) if -> . KW_IF conditional LBRACE main_rule RBRACE
    (130) else -> . KW_ELSE LBRACE main_rule RBRACE
    (131) else_if -> . KW_ELSE KW_IF conditional LBRACE main_rule RBRACE
    (79) while -> . KW_WHILE conditional LBRACE main_rule RBRACE
    (112) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (113) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (114) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (115) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (121) linkedlist -> . KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (122) linkedlist -> . KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (123) linkedlist -> . KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (124) linkedlist -> . KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (85) let_initialization -> . KW_LET VARIABLE EQUALS data
    (86) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS data
    (87) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS data
    (88) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS data
    (89) let_initialization -> . KW_LET VARIABLE EQUALS expression_var
    (90) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS expression_var
    (91) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS expression_var
    (92) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var
    (93) const_initialization -> . KW_CONST VARIABLE COLON data_type EQUALS data
    (138) input_init -> . KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN
    (108) label -> . QUOTE VARIABLE

  ! shift/reduce conflict for KW_PRINT resolved as shift
  ! shift/reduce conflict for KW_LET resolved as shift
  ! shift/reduce conflict for KW_FN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for KW_FOR resolved as shift
  ! shift/reduce conflict for KW_IF resolved as shift
  ! shift/reduce conflict for KW_ELSE resolved as shift
  ! shift/reduce conflict for KW_WHILE resolved as shift
  ! shift/reduce conflict for KW_CONST resolved as shift
  ! shift/reduce conflict for QUOTE resolved as shift
    KW_PRINT        shift and go to state 16
    KW_LET          shift and go to state 18
    KW_FN           shift and go to state 19
    RBRACE          reduce using rule 120 (void -> .)
    LBRACKET        shift and go to state 28
    VARIABLE        shift and go to state 17
    KW_FOR          shift and go to state 32
    KW_IF           shift and go to state 34
    KW_ELSE         shift and go to state 35
    KW_WHILE        shift and go to state 36
    KW_CONST        shift and go to state 37
    QUOTE           shift and go to state 38

  ! KW_PRINT        [ reduce using rule 120 (void -> .) ]
  ! KW_LET          [ reduce using rule 120 (void -> .) ]
  ! KW_FN           [ reduce using rule 120 (void -> .) ]
  ! LBRACKET        [ reduce using rule 120 (void -> .) ]
  ! VARIABLE        [ reduce using rule 120 (void -> .) ]
  ! KW_FOR          [ reduce using rule 120 (void -> .) ]
  ! KW_IF           [ reduce using rule 120 (void -> .) ]
  ! KW_ELSE         [ reduce using rule 120 (void -> .) ]
  ! KW_WHILE        [ reduce using rule 120 (void -> .) ]
  ! KW_CONST        [ reduce using rule 120 (void -> .) ]
  ! QUOTE           [ reduce using rule 120 (void -> .) ]

    main_rule                      shift and go to state 248
    father_rule                    shift and go to state 2
    print                          shift and go to state 3
    dvariable                      shift and go to state 4
    function                       shift and go to state 5
    control_str                    shift and go to state 6
    void                           shift and go to state 7
    data_str                       shift and go to state 8
    array                          shift and go to state 9
    linkedlist_methods             shift and go to state 10
    hashmap_methods                shift and go to state 11
    initialization                 shift and go to state 12
    input                          shift and go to state 13
    assignation                    shift and go to state 14
    declare_data_type              shift and go to state 15
    for_str                        shift and go to state 20
    for_str_tagged                 shift and go to state 21
    if                             shift and go to state 22
    else                           shift and go to state 23
    else_if                        shift and go to state 24
    while                          shift and go to state 25
    hashmap                        shift and go to state 26
    linkedlist                     shift and go to state 27
    let_initialization             shift and go to state 29
    const_initialization           shift and go to state 30
    input_init                     shift and go to state 31
    label                          shift and go to state 33

state 215

    (106) range -> INTEGER DOT . DOT INTEGER

    DOT             shift and go to state 249


state 216

    (129) if -> KW_IF conditional LBRACE main_rule RBRACE .

    KW_PRINT        reduce using rule 129 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    KW_LET          reduce using rule 129 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    KW_FN           reduce using rule 129 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    LBRACKET        reduce using rule 129 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    VARIABLE        reduce using rule 129 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    KW_FOR          reduce using rule 129 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    KW_IF           reduce using rule 129 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    KW_ELSE         reduce using rule 129 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    KW_WHILE        reduce using rule 129 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    KW_CONST        reduce using rule 129 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    QUOTE           reduce using rule 129 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    $end            reduce using rule 129 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    RBRACE          reduce using rule 129 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    KW_RETURN       reduce using rule 129 (if -> KW_IF conditional LBRACE main_rule RBRACE .)


state 217

    (66) conditional -> LPAREN lvariable RPAREN comparator . data
    (48) data -> . CADENA
    (49) data -> . INTEGER
    (50) data -> . CHAR
    (51) data -> . FLOAT
    (52) data -> . KW_FALSE
    (53) data -> . KW_TRUE
    (54) data -> . tuple
    (80) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 59
    INTEGER         shift and go to state 60
    CHAR            shift and go to state 61
    FLOAT           shift and go to state 62
    KW_FALSE        shift and go to state 63
    KW_TRUE         shift and go to state 64
    LPAREN          shift and go to state 66

    data                           shift and go to state 250
    tuple                          shift and go to state 65

state 218

    (64) lvariable -> VARIABLE logic VARIABLE .

    RPAREN          reduce using rule 64 (lvariable -> VARIABLE logic VARIABLE .)


state 219

    (131) else_if -> KW_ELSE KW_IF conditional LBRACE main_rule . RBRACE

    RBRACE          shift and go to state 251


state 220

    (79) while -> KW_WHILE conditional LBRACE main_rule RBRACE .

    KW_PRINT        reduce using rule 79 (while -> KW_WHILE conditional LBRACE main_rule RBRACE .)
    KW_LET          reduce using rule 79 (while -> KW_WHILE conditional LBRACE main_rule RBRACE .)
    KW_FN           reduce using rule 79 (while -> KW_WHILE conditional LBRACE main_rule RBRACE .)
    LBRACKET        reduce using rule 79 (while -> KW_WHILE conditional LBRACE main_rule RBRACE .)
    VARIABLE        reduce using rule 79 (while -> KW_WHILE conditional LBRACE main_rule RBRACE .)
    KW_FOR          reduce using rule 79 (while -> KW_WHILE conditional LBRACE main_rule RBRACE .)
    KW_IF           reduce using rule 79 (while -> KW_WHILE conditional LBRACE main_rule RBRACE .)
    KW_ELSE         reduce using rule 79 (while -> KW_WHILE conditional LBRACE main_rule RBRACE .)
    KW_WHILE        reduce using rule 79 (while -> KW_WHILE conditional LBRACE main_rule RBRACE .)
    KW_CONST        reduce using rule 79 (while -> KW_WHILE conditional LBRACE main_rule RBRACE .)
    QUOTE           reduce using rule 79 (while -> KW_WHILE conditional LBRACE main_rule RBRACE .)
    $end            reduce using rule 79 (while -> KW_WHILE conditional LBRACE main_rule RBRACE .)
    RBRACE          reduce using rule 79 (while -> KW_WHILE conditional LBRACE main_rule RBRACE .)
    KW_RETURN       reduce using rule 79 (while -> KW_WHILE conditional LBRACE main_rule RBRACE .)


state 221

    (93) const_initialization -> KW_CONST VARIABLE COLON data_type EQUALS . data
    (48) data -> . CADENA
    (49) data -> . INTEGER
    (50) data -> . CHAR
    (51) data -> . FLOAT
    (52) data -> . KW_FALSE
    (53) data -> . KW_TRUE
    (54) data -> . tuple
    (80) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 59
    INTEGER         shift and go to state 60
    CHAR            shift and go to state 61
    FLOAT           shift and go to state 62
    KW_FALSE        shift and go to state 63
    KW_TRUE         shift and go to state 64
    LPAREN          shift and go to state 66

    data                           shift and go to state 252
    tuple                          shift and go to state 65

state 222

    (69) print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .

    KW_PRINT        reduce using rule 69 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    KW_LET          reduce using rule 69 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    KW_FN           reduce using rule 69 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    LBRACKET        reduce using rule 69 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    VARIABLE        reduce using rule 69 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    KW_FOR          reduce using rule 69 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    KW_IF           reduce using rule 69 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    KW_ELSE         reduce using rule 69 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    KW_WHILE        reduce using rule 69 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    KW_CONST        reduce using rule 69 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    QUOTE           reduce using rule 69 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    $end            reduce using rule 69 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    RBRACE          reduce using rule 69 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    KW_RETURN       reduce using rule 69 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)


state 223

    (70) print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE . RPAREN SEMI

    RPAREN          shift and go to state 253


state 224

    (139) input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT . VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI

    VARIABLE        shift and go to state 254


state 225

    (127) linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN . SEMI

    SEMI            shift and go to state 255


state 226

    (128) linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN . SEMI

    SEMI            shift and go to state 256


state 227

    (119) hashmap_remove -> DOT KW_REMOVE LPAREN AND data . RPAREN SEMI

    RPAREN          shift and go to state 257


state 228

    (118) hashmap_insert -> DOT KW_INSERT LPAREN mdata RPAREN . SEMI

    SEMI            shift and go to state 258


state 229

    (72) array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET . SEMI

    SEMI            shift and go to state 259


state 230

    (112) hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON . KW_NEW LPAREN RPAREN
    (114) hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON . KW_FROM LPAREN array RPAREN

    KW_NEW          shift and go to state 260
    KW_FROM         shift and go to state 261


state 231

    (22) number -> INTEGER .
    (46) division -> INTEGER . DIVIDE INTEGER
    (49) data -> INTEGER .

  ! reduce/reduce conflict for RPAREN resolved using rule 22 (number -> INTEGER .)
    RPAREN          reduce using rule 22 (number -> INTEGER .)
    PLUS            reduce using rule 22 (number -> INTEGER .)
    MINUS           reduce using rule 22 (number -> INTEGER .)
    TIMES           reduce using rule 22 (number -> INTEGER .)
    DIVIDE          shift and go to state 128
    COMMA           reduce using rule 49 (data -> INTEGER .)

  ! RPAREN          [ reduce using rule 49 (data -> INTEGER .) ]


state 232

    (23) number -> FLOAT .
    (47) division -> FLOAT . DIVIDE FLOAT
    (51) data -> FLOAT .

  ! reduce/reduce conflict for RPAREN resolved using rule 23 (number -> FLOAT .)
    RPAREN          reduce using rule 23 (number -> FLOAT .)
    PLUS            reduce using rule 23 (number -> FLOAT .)
    MINUS           reduce using rule 23 (number -> FLOAT .)
    TIMES           reduce using rule 23 (number -> FLOAT .)
    DIVIDE          shift and go to state 129
    COMMA           reduce using rule 51 (data -> FLOAT .)

  ! RPAREN          [ reduce using rule 51 (data -> FLOAT .) ]


state 233

    (123) linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON . KW_FROM LPAREN array RPAREN

    KW_FROM         shift and go to state 262


state 234

    (138) input_init -> KW_LET VARIABLE EQUALS KW_IO COLON COLON . KW_STDIN LPAREN RPAREN

    KW_STDIN        shift and go to state 263


state 235

    (86) let_initialization -> KW_LET VARIABLE COLON data_type EQUALS data .
    (134) expression_var -> data .

  ! reduce/reduce conflict for SEMI resolved using rule 86 (let_initialization -> KW_LET VARIABLE COLON data_type EQUALS data .)
    SEMI            reduce using rule 86 (let_initialization -> KW_LET VARIABLE COLON data_type EQUALS data .)

  ! SEMI            [ reduce using rule 134 (expression_var -> data .) ]


state 236

    (90) let_initialization -> KW_LET VARIABLE COLON data_type EQUALS expression_var .

    SEMI            reduce using rule 90 (let_initialization -> KW_LET VARIABLE COLON data_type EQUALS expression_var .)


state 237

    (121) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type . GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN

    GT              shift and go to state 264


state 238

    (75) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type . SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type . SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI

    SEMI            shift and go to state 265


state 239

    (88) let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS . data
    (92) let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS . expression_var
    (48) data -> . CADENA
    (49) data -> . INTEGER
    (50) data -> . CHAR
    (51) data -> . FLOAT
    (52) data -> . KW_FALSE
    (53) data -> . KW_TRUE
    (54) data -> . tuple
    (133) expression_var -> . expression
    (134) expression_var -> . data
    (80) tuple -> . LPAREN mdata RPAREN
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . number
    (21) expression -> . division
    (22) number -> . INTEGER
    (23) number -> . FLOAT
    (24) number -> . VARIABLE
    (46) division -> . INTEGER DIVIDE INTEGER
    (47) division -> . FLOAT DIVIDE FLOAT

    CADENA          shift and go to state 59
    INTEGER         shift and go to state 139
    CHAR            shift and go to state 61
    FLOAT           shift and go to state 140
    KW_FALSE        shift and go to state 63
    KW_TRUE         shift and go to state 64
    LPAREN          shift and go to state 134
    VARIABLE        shift and go to state 85

    data                           shift and go to state 266
    expression_var                 shift and go to state 267
    tuple                          shift and go to state 65
    expression                     shift and go to state 141
    number                         shift and go to state 131
    division                       shift and go to state 91

state 240

    (122) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT . data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (25) data_type -> . UNSIG_INT_8
    (26) data_type -> . UNSIG_INT_16
    (27) data_type -> . UNSIG_INT_32
    (28) data_type -> . UNSIG_INT_64
    (29) data_type -> . UNSIG_INT_128
    (30) data_type -> . SIG_INT_8
    (31) data_type -> . SIG_INT_16
    (32) data_type -> . SIG_INT_32
    (33) data_type -> . SIG_INT_64
    (34) data_type -> . SIG_INT_128
    (35) data_type -> . FLOAT_32
    (36) data_type -> . FLOAT_64
    (37) data_type -> . KW_BOOLEAN
    (38) data_type -> . KW_STRING
    (39) data_type -> . KW_CHARACTER

    UNSIG_INT_8     shift and go to state 144
    UNSIG_INT_16    shift and go to state 145
    UNSIG_INT_32    shift and go to state 146
    UNSIG_INT_64    shift and go to state 147
    UNSIG_INT_128   shift and go to state 148
    SIG_INT_8       shift and go to state 149
    SIG_INT_16      shift and go to state 150
    SIG_INT_32      shift and go to state 151
    SIG_INT_64      shift and go to state 152
    SIG_INT_128     shift and go to state 153
    FLOAT_32        shift and go to state 154
    FLOAT_64        shift and go to state 155
    KW_BOOLEAN      shift and go to state 156
    KW_STRING       shift and go to state 157
    KW_CHARACTER    shift and go to state 158

    data_type                      shift and go to state 268

state 241

    (113) hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON . COLON KW_NEW LPAREN RPAREN
    (115) hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON . COLON KW_FROM LPAREN array RPAREN

    COLON           shift and go to state 269


state 242

    (124) linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON . COLON KW_FROM LPAREN array RPAREN

    COLON           shift and go to state 270


state 243

    (78) variables -> VARIABLE COMMA variables .

    RPAREN          reduce using rule 78 (variables -> VARIABLE COMMA variables .)


state 244

    (96) function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE . main_rule RBRACE
    (1) main_rule -> . father_rule
    (2) main_rule -> . father_rule main_rule
    (3) father_rule -> . print
    (4) father_rule -> . dvariable
    (5) father_rule -> . function
    (6) father_rule -> . control_str
    (7) father_rule -> . void
    (8) father_rule -> . data_str
    (9) father_rule -> . array
    (10) father_rule -> . linkedlist_methods
    (11) father_rule -> . hashmap_methods
    (12) father_rule -> . initialization
    (13) father_rule -> . input
    (14) father_rule -> . assignation
    (15) father_rule -> . declare_data_type
    (69) print -> . KW_PRINT LNOT LPAREN CADENA RPAREN SEMI
    (70) print -> . KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI
    (71) dvariable -> . KW_LET VARIABLE SEMI
    (96) function -> . KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE
    (132) function -> . KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE
    (97) control_str -> . for_str
    (98) control_str -> . for_str_tagged
    (99) control_str -> . if
    (100) control_str -> . else
    (101) control_str -> . else_if
    (102) control_str -> . while
    (120) void -> .
    (109) data_str -> . array
    (110) data_str -> . hashmap
    (111) data_str -> . linkedlist
    (72) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (73) array -> . LBRACKET mdata RBRACKET
    (74) array -> . LBRACKET data SEMI data RBRACKET
    (75) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (125) linkedlist_methods -> . VARIABLE linkedlist_push
    (126) linkedlist_methods -> . VARIABLE linkedlist_remove
    (116) hashmap_methods -> . VARIABLE hashmap_insert
    (117) hashmap_methods -> . VARIABLE hashmap_remove
    (81) initialization -> . let_initialization SEMI
    (82) initialization -> . const_initialization SEMI
    (83) initialization -> . data_str SEMI
    (84) initialization -> . input_init SEMI
    (139) input -> . VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI
    (140) assignation -> . VARIABLE assign_operators number SEMI
    (141) assignation -> . VARIABLE assign_operators expression SEMI
    (142) assignation -> . VARIABLE assign_operators number
    (143) assignation -> . VARIABLE assign_operators expression
    (144) declare_data_type -> . KW_LET VARIABLE COLON data_type SEMI
    (103) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE
    (104) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE
    (105) for_str_tagged -> . label COLON for_str
    (129) if -> . KW_IF conditional LBRACE main_rule RBRACE
    (130) else -> . KW_ELSE LBRACE main_rule RBRACE
    (131) else_if -> . KW_ELSE KW_IF conditional LBRACE main_rule RBRACE
    (79) while -> . KW_WHILE conditional LBRACE main_rule RBRACE
    (112) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (113) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (114) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (115) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (121) linkedlist -> . KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (122) linkedlist -> . KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (123) linkedlist -> . KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (124) linkedlist -> . KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (85) let_initialization -> . KW_LET VARIABLE EQUALS data
    (86) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS data
    (87) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS data
    (88) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS data
    (89) let_initialization -> . KW_LET VARIABLE EQUALS expression_var
    (90) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS expression_var
    (91) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS expression_var
    (92) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var
    (93) const_initialization -> . KW_CONST VARIABLE COLON data_type EQUALS data
    (138) input_init -> . KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN
    (108) label -> . QUOTE VARIABLE

  ! shift/reduce conflict for KW_PRINT resolved as shift
  ! shift/reduce conflict for KW_LET resolved as shift
  ! shift/reduce conflict for KW_FN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for KW_FOR resolved as shift
  ! shift/reduce conflict for KW_IF resolved as shift
  ! shift/reduce conflict for KW_ELSE resolved as shift
  ! shift/reduce conflict for KW_WHILE resolved as shift
  ! shift/reduce conflict for KW_CONST resolved as shift
  ! shift/reduce conflict for QUOTE resolved as shift
    KW_PRINT        shift and go to state 16
    KW_LET          shift and go to state 18
    KW_FN           shift and go to state 19
    RBRACE          reduce using rule 120 (void -> .)
    LBRACKET        shift and go to state 28
    VARIABLE        shift and go to state 17
    KW_FOR          shift and go to state 32
    KW_IF           shift and go to state 34
    KW_ELSE         shift and go to state 35
    KW_WHILE        shift and go to state 36
    KW_CONST        shift and go to state 37
    QUOTE           shift and go to state 38

  ! KW_PRINT        [ reduce using rule 120 (void -> .) ]
  ! KW_LET          [ reduce using rule 120 (void -> .) ]
  ! KW_FN           [ reduce using rule 120 (void -> .) ]
  ! LBRACKET        [ reduce using rule 120 (void -> .) ]
  ! VARIABLE        [ reduce using rule 120 (void -> .) ]
  ! KW_FOR          [ reduce using rule 120 (void -> .) ]
  ! KW_IF           [ reduce using rule 120 (void -> .) ]
  ! KW_ELSE         [ reduce using rule 120 (void -> .) ]
  ! KW_WHILE        [ reduce using rule 120 (void -> .) ]
  ! KW_CONST        [ reduce using rule 120 (void -> .) ]
  ! QUOTE           [ reduce using rule 120 (void -> .) ]

    main_rule                      shift and go to state 271
    father_rule                    shift and go to state 2
    print                          shift and go to state 3
    dvariable                      shift and go to state 4
    function                       shift and go to state 5
    control_str                    shift and go to state 6
    void                           shift and go to state 7
    data_str                       shift and go to state 8
    array                          shift and go to state 9
    linkedlist_methods             shift and go to state 10
    hashmap_methods                shift and go to state 11
    initialization                 shift and go to state 12
    input                          shift and go to state 13
    assignation                    shift and go to state 14
    declare_data_type              shift and go to state 15
    for_str                        shift and go to state 20
    for_str_tagged                 shift and go to state 21
    if                             shift and go to state 22
    else                           shift and go to state 23
    else_if                        shift and go to state 24
    while                          shift and go to state 25
    hashmap                        shift and go to state 26
    linkedlist                     shift and go to state 27
    let_initialization             shift and go to state 29
    const_initialization           shift and go to state 30
    input_init                     shift and go to state 31
    label                          shift and go to state 33

state 245

    (132) function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS . GT data_type LBRACE return RBRACE

    GT              shift and go to state 272


state 246

    (104) for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule . RBRACE

    RBRACE          shift and go to state 273


state 247

    (107) range -> VARIABLE DOT DOT . VARIABLE

    VARIABLE        shift and go to state 274


state 248

    (103) for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule . RBRACE

    RBRACE          shift and go to state 275


state 249

    (106) range -> INTEGER DOT DOT . INTEGER

    INTEGER         shift and go to state 276


state 250

    (66) conditional -> LPAREN lvariable RPAREN comparator data .

    LBRACE          reduce using rule 66 (conditional -> LPAREN lvariable RPAREN comparator data .)


state 251

    (131) else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .

    KW_PRINT        reduce using rule 131 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    KW_LET          reduce using rule 131 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    KW_FN           reduce using rule 131 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    LBRACKET        reduce using rule 131 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    VARIABLE        reduce using rule 131 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    KW_FOR          reduce using rule 131 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    KW_IF           reduce using rule 131 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    KW_ELSE         reduce using rule 131 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    KW_WHILE        reduce using rule 131 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    KW_CONST        reduce using rule 131 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    QUOTE           reduce using rule 131 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    $end            reduce using rule 131 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    RBRACE          reduce using rule 131 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    KW_RETURN       reduce using rule 131 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)


state 252

    (93) const_initialization -> KW_CONST VARIABLE COLON data_type EQUALS data .

    SEMI            reduce using rule 93 (const_initialization -> KW_CONST VARIABLE COLON data_type EQUALS data .)


state 253

    (70) print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN . SEMI

    SEMI            shift and go to state 277


state 254

    (139) input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE . RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI

    RPAREN          shift and go to state 278


state 255

    (127) linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .

    KW_PRINT        reduce using rule 127 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    KW_LET          reduce using rule 127 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    KW_FN           reduce using rule 127 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    LBRACKET        reduce using rule 127 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    VARIABLE        reduce using rule 127 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    KW_FOR          reduce using rule 127 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    KW_IF           reduce using rule 127 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    KW_ELSE         reduce using rule 127 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    KW_WHILE        reduce using rule 127 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    KW_CONST        reduce using rule 127 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    QUOTE           reduce using rule 127 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    $end            reduce using rule 127 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    RBRACE          reduce using rule 127 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    KW_RETURN       reduce using rule 127 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)


state 256

    (128) linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .

    KW_PRINT        reduce using rule 128 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    KW_LET          reduce using rule 128 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    KW_FN           reduce using rule 128 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    LBRACKET        reduce using rule 128 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    VARIABLE        reduce using rule 128 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    KW_FOR          reduce using rule 128 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    KW_IF           reduce using rule 128 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    KW_ELSE         reduce using rule 128 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    KW_WHILE        reduce using rule 128 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    KW_CONST        reduce using rule 128 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    QUOTE           reduce using rule 128 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    $end            reduce using rule 128 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    RBRACE          reduce using rule 128 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    KW_RETURN       reduce using rule 128 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)


state 257

    (119) hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN . SEMI

    SEMI            shift and go to state 279


state 258

    (118) hashmap_insert -> DOT KW_INSERT LPAREN mdata RPAREN SEMI .

    KW_PRINT        reduce using rule 118 (hashmap_insert -> DOT KW_INSERT LPAREN mdata RPAREN SEMI .)
    KW_LET          reduce using rule 118 (hashmap_insert -> DOT KW_INSERT LPAREN mdata RPAREN SEMI .)
    KW_FN           reduce using rule 118 (hashmap_insert -> DOT KW_INSERT LPAREN mdata RPAREN SEMI .)
    LBRACKET        reduce using rule 118 (hashmap_insert -> DOT KW_INSERT LPAREN mdata RPAREN SEMI .)
    VARIABLE        reduce using rule 118 (hashmap_insert -> DOT KW_INSERT LPAREN mdata RPAREN SEMI .)
    KW_FOR          reduce using rule 118 (hashmap_insert -> DOT KW_INSERT LPAREN mdata RPAREN SEMI .)
    KW_IF           reduce using rule 118 (hashmap_insert -> DOT KW_INSERT LPAREN mdata RPAREN SEMI .)
    KW_ELSE         reduce using rule 118 (hashmap_insert -> DOT KW_INSERT LPAREN mdata RPAREN SEMI .)
    KW_WHILE        reduce using rule 118 (hashmap_insert -> DOT KW_INSERT LPAREN mdata RPAREN SEMI .)
    KW_CONST        reduce using rule 118 (hashmap_insert -> DOT KW_INSERT LPAREN mdata RPAREN SEMI .)
    QUOTE           reduce using rule 118 (hashmap_insert -> DOT KW_INSERT LPAREN mdata RPAREN SEMI .)
    $end            reduce using rule 118 (hashmap_insert -> DOT KW_INSERT LPAREN mdata RPAREN SEMI .)
    RBRACE          reduce using rule 118 (hashmap_insert -> DOT KW_INSERT LPAREN mdata RPAREN SEMI .)
    KW_RETURN       reduce using rule 118 (hashmap_insert -> DOT KW_INSERT LPAREN mdata RPAREN SEMI .)


state 259

    (72) array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .

    KW_PRINT        reduce using rule 72 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_LET          reduce using rule 72 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_FN           reduce using rule 72 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    LBRACKET        reduce using rule 72 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    VARIABLE        reduce using rule 72 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_FOR          reduce using rule 72 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_IF           reduce using rule 72 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_ELSE         reduce using rule 72 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_WHILE        reduce using rule 72 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_CONST        reduce using rule 72 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    QUOTE           reduce using rule 72 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    $end            reduce using rule 72 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    SEMI            reduce using rule 72 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    RBRACE          reduce using rule 72 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_RETURN       reduce using rule 72 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    RPAREN          reduce using rule 72 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)


state 260

    (112) hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW . LPAREN RPAREN

    LPAREN          shift and go to state 280


state 261

    (114) hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM . LPAREN array RPAREN

    LPAREN          shift and go to state 281


state 262

    (123) linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM . LPAREN array RPAREN

    LPAREN          shift and go to state 282


state 263

    (138) input_init -> KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN . LPAREN RPAREN

    LPAREN          shift and go to state 283


state 264

    (121) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT . EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN

    EQUALS          shift and go to state 284


state 265

    (75) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI . data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI . data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (48) data -> . CADENA
    (49) data -> . INTEGER
    (50) data -> . CHAR
    (51) data -> . FLOAT
    (52) data -> . KW_FALSE
    (53) data -> . KW_TRUE
    (54) data -> . tuple
    (80) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 59
    INTEGER         shift and go to state 60
    CHAR            shift and go to state 61
    FLOAT           shift and go to state 62
    KW_FALSE        shift and go to state 63
    KW_TRUE         shift and go to state 64
    LPAREN          shift and go to state 66

    data                           shift and go to state 285
    tuple                          shift and go to state 65

state 266

    (88) let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS data .
    (134) expression_var -> data .

  ! reduce/reduce conflict for SEMI resolved using rule 88 (let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS data .)
    SEMI            reduce using rule 88 (let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS data .)

  ! SEMI            [ reduce using rule 134 (expression_var -> data .) ]


state 267

    (92) let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var .

    SEMI            reduce using rule 92 (let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var .)


state 268

    (122) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type . GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN

    GT              shift and go to state 286


state 269

    (113) hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON . KW_NEW LPAREN RPAREN
    (115) hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON . KW_FROM LPAREN array RPAREN

    KW_NEW          shift and go to state 287
    KW_FROM         shift and go to state 288


state 270

    (124) linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON . KW_FROM LPAREN array RPAREN

    KW_FROM         shift and go to state 289


state 271

    (96) function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule . RBRACE

    RBRACE          shift and go to state 290


state 272

    (132) function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT . data_type LBRACE return RBRACE
    (25) data_type -> . UNSIG_INT_8
    (26) data_type -> . UNSIG_INT_16
    (27) data_type -> . UNSIG_INT_32
    (28) data_type -> . UNSIG_INT_64
    (29) data_type -> . UNSIG_INT_128
    (30) data_type -> . SIG_INT_8
    (31) data_type -> . SIG_INT_16
    (32) data_type -> . SIG_INT_32
    (33) data_type -> . SIG_INT_64
    (34) data_type -> . SIG_INT_128
    (35) data_type -> . FLOAT_32
    (36) data_type -> . FLOAT_64
    (37) data_type -> . KW_BOOLEAN
    (38) data_type -> . KW_STRING
    (39) data_type -> . KW_CHARACTER

    UNSIG_INT_8     shift and go to state 144
    UNSIG_INT_16    shift and go to state 145
    UNSIG_INT_32    shift and go to state 146
    UNSIG_INT_64    shift and go to state 147
    UNSIG_INT_128   shift and go to state 148
    SIG_INT_8       shift and go to state 149
    SIG_INT_16      shift and go to state 150
    SIG_INT_32      shift and go to state 151
    SIG_INT_64      shift and go to state 152
    SIG_INT_128     shift and go to state 153
    FLOAT_32        shift and go to state 154
    FLOAT_64        shift and go to state 155
    KW_BOOLEAN      shift and go to state 156
    KW_STRING       shift and go to state 157
    KW_CHARACTER    shift and go to state 158

    data_type                      shift and go to state 291

state 273

    (104) for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .

    KW_PRINT        reduce using rule 104 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    KW_LET          reduce using rule 104 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    KW_FN           reduce using rule 104 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    LBRACKET        reduce using rule 104 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    VARIABLE        reduce using rule 104 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    KW_FOR          reduce using rule 104 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    KW_IF           reduce using rule 104 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    KW_ELSE         reduce using rule 104 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    KW_WHILE        reduce using rule 104 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    KW_CONST        reduce using rule 104 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    QUOTE           reduce using rule 104 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    $end            reduce using rule 104 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    RBRACE          reduce using rule 104 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    KW_RETURN       reduce using rule 104 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)


state 274

    (107) range -> VARIABLE DOT DOT VARIABLE .

    LBRACE          reduce using rule 107 (range -> VARIABLE DOT DOT VARIABLE .)


state 275

    (103) for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .

    KW_PRINT        reduce using rule 103 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    KW_LET          reduce using rule 103 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    KW_FN           reduce using rule 103 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    LBRACKET        reduce using rule 103 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    VARIABLE        reduce using rule 103 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    KW_FOR          reduce using rule 103 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    KW_IF           reduce using rule 103 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    KW_ELSE         reduce using rule 103 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    KW_WHILE        reduce using rule 103 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    KW_CONST        reduce using rule 103 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    QUOTE           reduce using rule 103 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    $end            reduce using rule 103 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    RBRACE          reduce using rule 103 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    KW_RETURN       reduce using rule 103 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)


state 276

    (106) range -> INTEGER DOT DOT INTEGER .

    LBRACE          reduce using rule 106 (range -> INTEGER DOT DOT INTEGER .)


state 277

    (70) print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .

    KW_PRINT        reduce using rule 70 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    KW_LET          reduce using rule 70 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    KW_FN           reduce using rule 70 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    LBRACKET        reduce using rule 70 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    VARIABLE        reduce using rule 70 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    KW_FOR          reduce using rule 70 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    KW_IF           reduce using rule 70 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    KW_ELSE         reduce using rule 70 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    KW_WHILE        reduce using rule 70 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    KW_CONST        reduce using rule 70 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    QUOTE           reduce using rule 70 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    $end            reduce using rule 70 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    RBRACE          reduce using rule 70 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    KW_RETURN       reduce using rule 70 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)


state 278

    (139) input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN . DOT KW_EXPECT LPAREN CADENA RPAREN SEMI

    DOT             shift and go to state 292


state 279

    (119) hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .

    KW_PRINT        reduce using rule 119 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    KW_LET          reduce using rule 119 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    KW_FN           reduce using rule 119 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    LBRACKET        reduce using rule 119 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    VARIABLE        reduce using rule 119 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    KW_FOR          reduce using rule 119 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    KW_IF           reduce using rule 119 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    KW_ELSE         reduce using rule 119 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    KW_WHILE        reduce using rule 119 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    KW_CONST        reduce using rule 119 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    QUOTE           reduce using rule 119 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    $end            reduce using rule 119 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    RBRACE          reduce using rule 119 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    KW_RETURN       reduce using rule 119 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)


state 280

    (112) hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN . RPAREN

    RPAREN          shift and go to state 293


state 281

    (114) hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN . array RPAREN
    (72) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (73) array -> . LBRACKET mdata RBRACKET
    (74) array -> . LBRACKET data SEMI data RBRACKET
    (75) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI

    KW_LET          shift and go to state 294
    LBRACKET        shift and go to state 28

    array                          shift and go to state 295

state 282

    (123) linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN . array RPAREN
    (72) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (73) array -> . LBRACKET mdata RBRACKET
    (74) array -> . LBRACKET data SEMI data RBRACKET
    (75) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI

    KW_LET          shift and go to state 294
    LBRACKET        shift and go to state 28

    array                          shift and go to state 296

state 283

    (138) input_init -> KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN . RPAREN

    RPAREN          shift and go to state 297


state 284

    (121) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS . KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN

    KW_LINKEDLIST   shift and go to state 298


state 285

    (75) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data . RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data . RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI

    RBRACKET        shift and go to state 299


state 286

    (122) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT . EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN

    EQUALS          shift and go to state 300


state 287

    (113) hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW . LPAREN RPAREN

    LPAREN          shift and go to state 301


state 288

    (115) hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM . LPAREN array RPAREN

    LPAREN          shift and go to state 302


state 289

    (124) linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM . LPAREN array RPAREN

    LPAREN          shift and go to state 303


state 290

    (96) function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .

    KW_PRINT        reduce using rule 96 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    KW_LET          reduce using rule 96 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    KW_FN           reduce using rule 96 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    LBRACKET        reduce using rule 96 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    VARIABLE        reduce using rule 96 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    KW_FOR          reduce using rule 96 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    KW_IF           reduce using rule 96 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    KW_ELSE         reduce using rule 96 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    KW_WHILE        reduce using rule 96 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    KW_CONST        reduce using rule 96 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    QUOTE           reduce using rule 96 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    $end            reduce using rule 96 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    RBRACE          reduce using rule 96 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    KW_RETURN       reduce using rule 96 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)


state 291

    (132) function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type . LBRACE return RBRACE

    LBRACE          shift and go to state 304


state 292

    (139) input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT . KW_EXPECT LPAREN CADENA RPAREN SEMI

    KW_EXPECT       shift and go to state 305


state 293

    (112) hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .

    SEMI            reduce using rule 112 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    KW_PRINT        reduce using rule 112 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    KW_LET          reduce using rule 112 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    KW_FN           reduce using rule 112 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    LBRACKET        reduce using rule 112 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    VARIABLE        reduce using rule 112 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    KW_FOR          reduce using rule 112 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    KW_IF           reduce using rule 112 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    KW_ELSE         reduce using rule 112 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    KW_WHILE        reduce using rule 112 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    KW_CONST        reduce using rule 112 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    QUOTE           reduce using rule 112 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    $end            reduce using rule 112 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    RBRACE          reduce using rule 112 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    KW_RETURN       reduce using rule 112 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)


state 294

    (72) array -> KW_LET . VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (75) array -> KW_LET . KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> KW_LET . KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI

    VARIABLE        shift and go to state 306
    KW_MUT          shift and go to state 307


state 295

    (114) hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array . RPAREN

    RPAREN          shift and go to state 308


state 296

    (123) linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array . RPAREN

    RPAREN          shift and go to state 309


state 297

    (138) input_init -> KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN .

    SEMI            reduce using rule 138 (input_init -> KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN .)


state 298

    (121) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST . COLON COLON KW_NEW LPAREN RPAREN

    COLON           shift and go to state 310


state 299

    (75) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET . EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET . EQUALS LBRACKET data SEMI data RBRACKET SEMI

    EQUALS          shift and go to state 311


state 300

    (122) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS . KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN

    KW_LINKEDLIST   shift and go to state 312


state 301

    (113) hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN . RPAREN

    RPAREN          shift and go to state 313


state 302

    (115) hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN . array RPAREN
    (72) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (73) array -> . LBRACKET mdata RBRACKET
    (74) array -> . LBRACKET data SEMI data RBRACKET
    (75) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI

    KW_LET          shift and go to state 294
    LBRACKET        shift and go to state 28

    array                          shift and go to state 314

state 303

    (124) linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN . array RPAREN
    (72) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (73) array -> . LBRACKET mdata RBRACKET
    (74) array -> . LBRACKET data SEMI data RBRACKET
    (75) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI

    KW_LET          shift and go to state 294
    LBRACKET        shift and go to state 28

    array                          shift and go to state 315

state 304

    (132) function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE . return RBRACE
    (135) return -> . main_rule
    (136) return -> . KW_RETURN expression_var SEMI
    (137) return -> . main_rule KW_RETURN expression_var SEMI
    (1) main_rule -> . father_rule
    (2) main_rule -> . father_rule main_rule
    (3) father_rule -> . print
    (4) father_rule -> . dvariable
    (5) father_rule -> . function
    (6) father_rule -> . control_str
    (7) father_rule -> . void
    (8) father_rule -> . data_str
    (9) father_rule -> . array
    (10) father_rule -> . linkedlist_methods
    (11) father_rule -> . hashmap_methods
    (12) father_rule -> . initialization
    (13) father_rule -> . input
    (14) father_rule -> . assignation
    (15) father_rule -> . declare_data_type
    (69) print -> . KW_PRINT LNOT LPAREN CADENA RPAREN SEMI
    (70) print -> . KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI
    (71) dvariable -> . KW_LET VARIABLE SEMI
    (96) function -> . KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE
    (132) function -> . KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE
    (97) control_str -> . for_str
    (98) control_str -> . for_str_tagged
    (99) control_str -> . if
    (100) control_str -> . else
    (101) control_str -> . else_if
    (102) control_str -> . while
    (120) void -> .
    (109) data_str -> . array
    (110) data_str -> . hashmap
    (111) data_str -> . linkedlist
    (72) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (73) array -> . LBRACKET mdata RBRACKET
    (74) array -> . LBRACKET data SEMI data RBRACKET
    (75) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (125) linkedlist_methods -> . VARIABLE linkedlist_push
    (126) linkedlist_methods -> . VARIABLE linkedlist_remove
    (116) hashmap_methods -> . VARIABLE hashmap_insert
    (117) hashmap_methods -> . VARIABLE hashmap_remove
    (81) initialization -> . let_initialization SEMI
    (82) initialization -> . const_initialization SEMI
    (83) initialization -> . data_str SEMI
    (84) initialization -> . input_init SEMI
    (139) input -> . VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI
    (140) assignation -> . VARIABLE assign_operators number SEMI
    (141) assignation -> . VARIABLE assign_operators expression SEMI
    (142) assignation -> . VARIABLE assign_operators number
    (143) assignation -> . VARIABLE assign_operators expression
    (144) declare_data_type -> . KW_LET VARIABLE COLON data_type SEMI
    (103) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE
    (104) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE
    (105) for_str_tagged -> . label COLON for_str
    (129) if -> . KW_IF conditional LBRACE main_rule RBRACE
    (130) else -> . KW_ELSE LBRACE main_rule RBRACE
    (131) else_if -> . KW_ELSE KW_IF conditional LBRACE main_rule RBRACE
    (79) while -> . KW_WHILE conditional LBRACE main_rule RBRACE
    (112) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (113) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (114) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (115) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (121) linkedlist -> . KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (122) linkedlist -> . KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (123) linkedlist -> . KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (124) linkedlist -> . KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (85) let_initialization -> . KW_LET VARIABLE EQUALS data
    (86) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS data
    (87) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS data
    (88) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS data
    (89) let_initialization -> . KW_LET VARIABLE EQUALS expression_var
    (90) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS expression_var
    (91) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS expression_var
    (92) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var
    (93) const_initialization -> . KW_CONST VARIABLE COLON data_type EQUALS data
    (138) input_init -> . KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN
    (108) label -> . QUOTE VARIABLE

  ! shift/reduce conflict for KW_PRINT resolved as shift
  ! shift/reduce conflict for KW_LET resolved as shift
  ! shift/reduce conflict for KW_FN resolved as shift
  ! shift/reduce conflict for KW_RETURN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for KW_FOR resolved as shift
  ! shift/reduce conflict for KW_IF resolved as shift
  ! shift/reduce conflict for KW_ELSE resolved as shift
  ! shift/reduce conflict for KW_WHILE resolved as shift
  ! shift/reduce conflict for KW_CONST resolved as shift
  ! shift/reduce conflict for QUOTE resolved as shift
    KW_RETURN       shift and go to state 318
    KW_PRINT        shift and go to state 16
    KW_LET          shift and go to state 18
    KW_FN           shift and go to state 19
    RBRACE          reduce using rule 120 (void -> .)
    LBRACKET        shift and go to state 28
    VARIABLE        shift and go to state 17
    KW_FOR          shift and go to state 32
    KW_IF           shift and go to state 34
    KW_ELSE         shift and go to state 35
    KW_WHILE        shift and go to state 36
    KW_CONST        shift and go to state 37
    QUOTE           shift and go to state 38

  ! KW_PRINT        [ reduce using rule 120 (void -> .) ]
  ! KW_LET          [ reduce using rule 120 (void -> .) ]
  ! KW_FN           [ reduce using rule 120 (void -> .) ]
  ! LBRACKET        [ reduce using rule 120 (void -> .) ]
  ! VARIABLE        [ reduce using rule 120 (void -> .) ]
  ! KW_FOR          [ reduce using rule 120 (void -> .) ]
  ! KW_IF           [ reduce using rule 120 (void -> .) ]
  ! KW_ELSE         [ reduce using rule 120 (void -> .) ]
  ! KW_WHILE        [ reduce using rule 120 (void -> .) ]
  ! KW_CONST        [ reduce using rule 120 (void -> .) ]
  ! QUOTE           [ reduce using rule 120 (void -> .) ]
  ! KW_RETURN       [ reduce using rule 120 (void -> .) ]

    return                         shift and go to state 316
    main_rule                      shift and go to state 317
    father_rule                    shift and go to state 2
    print                          shift and go to state 3
    dvariable                      shift and go to state 4
    function                       shift and go to state 5
    control_str                    shift and go to state 6
    void                           shift and go to state 7
    data_str                       shift and go to state 8
    array                          shift and go to state 9
    linkedlist_methods             shift and go to state 10
    hashmap_methods                shift and go to state 11
    initialization                 shift and go to state 12
    input                          shift and go to state 13
    assignation                    shift and go to state 14
    declare_data_type              shift and go to state 15
    for_str                        shift and go to state 20
    for_str_tagged                 shift and go to state 21
    if                             shift and go to state 22
    else                           shift and go to state 23
    else_if                        shift and go to state 24
    while                          shift and go to state 25
    hashmap                        shift and go to state 26
    linkedlist                     shift and go to state 27
    let_initialization             shift and go to state 29
    const_initialization           shift and go to state 30
    input_init                     shift and go to state 31
    label                          shift and go to state 33

state 305

    (139) input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT . LPAREN CADENA RPAREN SEMI

    LPAREN          shift and go to state 319


state 306

    (72) array -> KW_LET VARIABLE . EQUALS LBRACKET mdata RBRACKET SEMI

    EQUALS          shift and go to state 320


state 307

    (75) array -> KW_LET KW_MUT . VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> KW_LET KW_MUT . VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI

    VARIABLE        shift and go to state 321


state 308

    (114) hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .

    SEMI            reduce using rule 114 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_PRINT        reduce using rule 114 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_LET          reduce using rule 114 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_FN           reduce using rule 114 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    LBRACKET        reduce using rule 114 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    VARIABLE        reduce using rule 114 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_FOR          reduce using rule 114 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_IF           reduce using rule 114 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_ELSE         reduce using rule 114 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_WHILE        reduce using rule 114 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_CONST        reduce using rule 114 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    QUOTE           reduce using rule 114 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    $end            reduce using rule 114 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    RBRACE          reduce using rule 114 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_RETURN       reduce using rule 114 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)


state 309

    (123) linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .

    SEMI            reduce using rule 123 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_PRINT        reduce using rule 123 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_LET          reduce using rule 123 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_FN           reduce using rule 123 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    LBRACKET        reduce using rule 123 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    VARIABLE        reduce using rule 123 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_FOR          reduce using rule 123 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_IF           reduce using rule 123 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_ELSE         reduce using rule 123 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_WHILE        reduce using rule 123 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_CONST        reduce using rule 123 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    QUOTE           reduce using rule 123 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    $end            reduce using rule 123 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    RBRACE          reduce using rule 123 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_RETURN       reduce using rule 123 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)


state 310

    (121) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON . COLON KW_NEW LPAREN RPAREN

    COLON           shift and go to state 322


state 311

    (75) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS . LBRACKET mdata RBRACKET SEMI
    (76) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS . LBRACKET data SEMI data RBRACKET SEMI

    LBRACKET        shift and go to state 323


state 312

    (122) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST . COLON COLON KW_NEW LPAREN RPAREN

    COLON           shift and go to state 324


state 313

    (113) hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .

    SEMI            reduce using rule 113 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    KW_PRINT        reduce using rule 113 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    KW_LET          reduce using rule 113 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    KW_FN           reduce using rule 113 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    LBRACKET        reduce using rule 113 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    VARIABLE        reduce using rule 113 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    KW_FOR          reduce using rule 113 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    KW_IF           reduce using rule 113 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    KW_ELSE         reduce using rule 113 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    KW_WHILE        reduce using rule 113 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    KW_CONST        reduce using rule 113 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    QUOTE           reduce using rule 113 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    $end            reduce using rule 113 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    RBRACE          reduce using rule 113 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    KW_RETURN       reduce using rule 113 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)


state 314

    (115) hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array . RPAREN

    RPAREN          shift and go to state 325


state 315

    (124) linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array . RPAREN

    RPAREN          shift and go to state 326


state 316

    (132) function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return . RBRACE

    RBRACE          shift and go to state 327


state 317

    (135) return -> main_rule .
    (137) return -> main_rule . KW_RETURN expression_var SEMI

    RBRACE          reduce using rule 135 (return -> main_rule .)
    KW_RETURN       shift and go to state 328


state 318

    (136) return -> KW_RETURN . expression_var SEMI
    (133) expression_var -> . expression
    (134) expression_var -> . data
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . number
    (21) expression -> . division
    (48) data -> . CADENA
    (49) data -> . INTEGER
    (50) data -> . CHAR
    (51) data -> . FLOAT
    (52) data -> . KW_FALSE
    (53) data -> . KW_TRUE
    (54) data -> . tuple
    (22) number -> . INTEGER
    (23) number -> . FLOAT
    (24) number -> . VARIABLE
    (46) division -> . INTEGER DIVIDE INTEGER
    (47) division -> . FLOAT DIVIDE FLOAT
    (80) tuple -> . LPAREN mdata RPAREN

    LPAREN          shift and go to state 196
    CADENA          shift and go to state 59
    INTEGER         shift and go to state 139
    CHAR            shift and go to state 61
    FLOAT           shift and go to state 140
    KW_FALSE        shift and go to state 63
    KW_TRUE         shift and go to state 64
    VARIABLE        shift and go to state 85

    expression_var                 shift and go to state 329
    expression                     shift and go to state 141
    data                           shift and go to state 330
    number                         shift and go to state 131
    division                       shift and go to state 91
    tuple                          shift and go to state 65

state 319

    (139) input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN . CADENA RPAREN SEMI

    CADENA          shift and go to state 331


state 320

    (72) array -> KW_LET VARIABLE EQUALS . LBRACKET mdata RBRACKET SEMI

    LBRACKET        shift and go to state 132


state 321

    (75) array -> KW_LET KW_MUT VARIABLE . COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> KW_LET KW_MUT VARIABLE . COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI

    COLON           shift and go to state 332


state 322

    (121) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON . KW_NEW LPAREN RPAREN

    KW_NEW          shift and go to state 333


state 323

    (75) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET . mdata RBRACKET SEMI
    (76) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET . data SEMI data RBRACKET SEMI
    (67) mdata -> . data
    (68) mdata -> . data COMMA mdata
    (48) data -> . CADENA
    (49) data -> . INTEGER
    (50) data -> . CHAR
    (51) data -> . FLOAT
    (52) data -> . KW_FALSE
    (53) data -> . KW_TRUE
    (54) data -> . tuple
    (80) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 59
    INTEGER         shift and go to state 60
    CHAR            shift and go to state 61
    FLOAT           shift and go to state 62
    KW_FALSE        shift and go to state 63
    KW_TRUE         shift and go to state 64
    LPAREN          shift and go to state 66

    data                           shift and go to state 334
    mdata                          shift and go to state 335
    tuple                          shift and go to state 65

state 324

    (122) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON . COLON KW_NEW LPAREN RPAREN

    COLON           shift and go to state 336


state 325

    (115) hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .

    SEMI            reduce using rule 115 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_PRINT        reduce using rule 115 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_LET          reduce using rule 115 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_FN           reduce using rule 115 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    LBRACKET        reduce using rule 115 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    VARIABLE        reduce using rule 115 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_FOR          reduce using rule 115 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_IF           reduce using rule 115 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_ELSE         reduce using rule 115 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_WHILE        reduce using rule 115 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_CONST        reduce using rule 115 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    QUOTE           reduce using rule 115 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    $end            reduce using rule 115 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    RBRACE          reduce using rule 115 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_RETURN       reduce using rule 115 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)


state 326

    (124) linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .

    SEMI            reduce using rule 124 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_PRINT        reduce using rule 124 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_LET          reduce using rule 124 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_FN           reduce using rule 124 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    LBRACKET        reduce using rule 124 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    VARIABLE        reduce using rule 124 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_FOR          reduce using rule 124 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_IF           reduce using rule 124 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_ELSE         reduce using rule 124 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_WHILE        reduce using rule 124 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_CONST        reduce using rule 124 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    QUOTE           reduce using rule 124 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    $end            reduce using rule 124 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    RBRACE          reduce using rule 124 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_RETURN       reduce using rule 124 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)


state 327

    (132) function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .

    KW_PRINT        reduce using rule 132 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    KW_LET          reduce using rule 132 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    KW_FN           reduce using rule 132 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    LBRACKET        reduce using rule 132 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    VARIABLE        reduce using rule 132 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    KW_FOR          reduce using rule 132 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    KW_IF           reduce using rule 132 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    KW_ELSE         reduce using rule 132 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    KW_WHILE        reduce using rule 132 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    KW_CONST        reduce using rule 132 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    QUOTE           reduce using rule 132 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    $end            reduce using rule 132 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    RBRACE          reduce using rule 132 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    KW_RETURN       reduce using rule 132 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)


state 328

    (137) return -> main_rule KW_RETURN . expression_var SEMI
    (133) expression_var -> . expression
    (134) expression_var -> . data
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . number
    (21) expression -> . division
    (48) data -> . CADENA
    (49) data -> . INTEGER
    (50) data -> . CHAR
    (51) data -> . FLOAT
    (52) data -> . KW_FALSE
    (53) data -> . KW_TRUE
    (54) data -> . tuple
    (22) number -> . INTEGER
    (23) number -> . FLOAT
    (24) number -> . VARIABLE
    (46) division -> . INTEGER DIVIDE INTEGER
    (47) division -> . FLOAT DIVIDE FLOAT
    (80) tuple -> . LPAREN mdata RPAREN

    LPAREN          shift and go to state 196
    CADENA          shift and go to state 59
    INTEGER         shift and go to state 139
    CHAR            shift and go to state 61
    FLOAT           shift and go to state 140
    KW_FALSE        shift and go to state 63
    KW_TRUE         shift and go to state 64
    VARIABLE        shift and go to state 85

    expression_var                 shift and go to state 337
    expression                     shift and go to state 141
    data                           shift and go to state 330
    number                         shift and go to state 131
    division                       shift and go to state 91
    tuple                          shift and go to state 65

state 329

    (136) return -> KW_RETURN expression_var . SEMI

    SEMI            shift and go to state 338


state 330

    (134) expression_var -> data .

    SEMI            reduce using rule 134 (expression_var -> data .)


state 331

    (139) input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA . RPAREN SEMI

    RPAREN          shift and go to state 339


state 332

    (75) array -> KW_LET KW_MUT VARIABLE COLON . LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> KW_LET KW_MUT VARIABLE COLON . LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI

    LBRACKET        shift and go to state 202


state 333

    (121) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW . LPAREN RPAREN

    LPAREN          shift and go to state 340


state 334

    (76) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data . SEMI data RBRACKET SEMI
    (67) mdata -> data .
    (68) mdata -> data . COMMA mdata

    SEMI            shift and go to state 341
    RBRACKET        reduce using rule 67 (mdata -> data .)
    COMMA           shift and go to state 99


state 335

    (75) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata . RBRACKET SEMI

    RBRACKET        shift and go to state 342


state 336

    (122) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON . KW_NEW LPAREN RPAREN

    KW_NEW          shift and go to state 343


state 337

    (137) return -> main_rule KW_RETURN expression_var . SEMI

    SEMI            shift and go to state 344


state 338

    (136) return -> KW_RETURN expression_var SEMI .

    RBRACE          reduce using rule 136 (return -> KW_RETURN expression_var SEMI .)


state 339

    (139) input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN . SEMI

    SEMI            shift and go to state 345


state 340

    (121) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN . RPAREN

    RPAREN          shift and go to state 346


state 341

    (76) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI . data RBRACKET SEMI
    (48) data -> . CADENA
    (49) data -> . INTEGER
    (50) data -> . CHAR
    (51) data -> . FLOAT
    (52) data -> . KW_FALSE
    (53) data -> . KW_TRUE
    (54) data -> . tuple
    (80) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 59
    INTEGER         shift and go to state 60
    CHAR            shift and go to state 61
    FLOAT           shift and go to state 62
    KW_FALSE        shift and go to state 63
    KW_TRUE         shift and go to state 64
    LPAREN          shift and go to state 66

    data                           shift and go to state 347
    tuple                          shift and go to state 65

state 342

    (75) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET . SEMI

    SEMI            shift and go to state 348


state 343

    (122) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW . LPAREN RPAREN

    LPAREN          shift and go to state 349


state 344

    (137) return -> main_rule KW_RETURN expression_var SEMI .

    RBRACE          reduce using rule 137 (return -> main_rule KW_RETURN expression_var SEMI .)


state 345

    (139) input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .

    KW_PRINT        reduce using rule 139 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    KW_LET          reduce using rule 139 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    KW_FN           reduce using rule 139 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    LBRACKET        reduce using rule 139 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    VARIABLE        reduce using rule 139 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    KW_FOR          reduce using rule 139 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    KW_IF           reduce using rule 139 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    KW_ELSE         reduce using rule 139 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    KW_WHILE        reduce using rule 139 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    KW_CONST        reduce using rule 139 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    QUOTE           reduce using rule 139 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    $end            reduce using rule 139 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    RBRACE          reduce using rule 139 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    KW_RETURN       reduce using rule 139 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)


state 346

    (121) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .

    SEMI            reduce using rule 121 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    KW_PRINT        reduce using rule 121 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    KW_LET          reduce using rule 121 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    KW_FN           reduce using rule 121 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    LBRACKET        reduce using rule 121 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    VARIABLE        reduce using rule 121 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    KW_FOR          reduce using rule 121 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    KW_IF           reduce using rule 121 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    KW_ELSE         reduce using rule 121 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    KW_WHILE        reduce using rule 121 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    KW_CONST        reduce using rule 121 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    QUOTE           reduce using rule 121 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    $end            reduce using rule 121 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    RBRACE          reduce using rule 121 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    KW_RETURN       reduce using rule 121 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)


state 347

    (76) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data . RBRACKET SEMI

    RBRACKET        shift and go to state 350


state 348

    (75) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .

    KW_PRINT        reduce using rule 75 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_LET          reduce using rule 75 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_FN           reduce using rule 75 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    LBRACKET        reduce using rule 75 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    VARIABLE        reduce using rule 75 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_FOR          reduce using rule 75 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_IF           reduce using rule 75 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_ELSE         reduce using rule 75 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_WHILE        reduce using rule 75 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_CONST        reduce using rule 75 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    QUOTE           reduce using rule 75 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    $end            reduce using rule 75 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    SEMI            reduce using rule 75 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    RBRACE          reduce using rule 75 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_RETURN       reduce using rule 75 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    RPAREN          reduce using rule 75 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)


state 349

    (122) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN . RPAREN

    RPAREN          shift and go to state 351


state 350

    (76) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET . SEMI

    SEMI            shift and go to state 352


state 351

    (122) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .

    SEMI            reduce using rule 122 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    KW_PRINT        reduce using rule 122 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    KW_LET          reduce using rule 122 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    KW_FN           reduce using rule 122 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    LBRACKET        reduce using rule 122 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    VARIABLE        reduce using rule 122 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    KW_FOR          reduce using rule 122 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    KW_IF           reduce using rule 122 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    KW_ELSE         reduce using rule 122 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    KW_WHILE        reduce using rule 122 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    KW_CONST        reduce using rule 122 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    QUOTE           reduce using rule 122 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    $end            reduce using rule 122 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    RBRACE          reduce using rule 122 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    KW_RETURN       reduce using rule 122 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)


state 352

    (76) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .

    KW_PRINT        reduce using rule 76 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    KW_LET          reduce using rule 76 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    KW_FN           reduce using rule 76 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    LBRACKET        reduce using rule 76 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    VARIABLE        reduce using rule 76 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    KW_FOR          reduce using rule 76 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    KW_IF           reduce using rule 76 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    KW_ELSE         reduce using rule 76 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    KW_WHILE        reduce using rule 76 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    KW_CONST        reduce using rule 76 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    QUOTE           reduce using rule 76 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    $end            reduce using rule 76 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    SEMI            reduce using rule 76 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    RBRACE          reduce using rule 76 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    KW_RETURN       reduce using rule 76 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    RPAREN          reduce using rule 76 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for KW_PRINT in state 0 resolved as shift
WARNING: shift/reduce conflict for KW_LET in state 0 resolved as shift
WARNING: shift/reduce conflict for KW_FN in state 0 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 0 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 0 resolved as shift
WARNING: shift/reduce conflict for KW_FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for KW_IF in state 0 resolved as shift
WARNING: shift/reduce conflict for KW_ELSE in state 0 resolved as shift
WARNING: shift/reduce conflict for KW_WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for KW_CONST in state 0 resolved as shift
WARNING: shift/reduce conflict for QUOTE in state 0 resolved as shift
WARNING: shift/reduce conflict for KW_PRINT in state 2 resolved as shift
WARNING: shift/reduce conflict for KW_LET in state 2 resolved as shift
WARNING: shift/reduce conflict for KW_FN in state 2 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 2 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 2 resolved as shift
WARNING: shift/reduce conflict for KW_FOR in state 2 resolved as shift
WARNING: shift/reduce conflict for KW_IF in state 2 resolved as shift
WARNING: shift/reduce conflict for KW_ELSE in state 2 resolved as shift
WARNING: shift/reduce conflict for KW_WHILE in state 2 resolved as shift
WARNING: shift/reduce conflict for KW_CONST in state 2 resolved as shift
WARNING: shift/reduce conflict for QUOTE in state 2 resolved as shift
WARNING: shift/reduce conflict for KW_PRINT in state 75 resolved as shift
WARNING: shift/reduce conflict for KW_LET in state 75 resolved as shift
WARNING: shift/reduce conflict for KW_FN in state 75 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 75 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 75 resolved as shift
WARNING: shift/reduce conflict for KW_FOR in state 75 resolved as shift
WARNING: shift/reduce conflict for KW_IF in state 75 resolved as shift
WARNING: shift/reduce conflict for KW_ELSE in state 75 resolved as shift
WARNING: shift/reduce conflict for KW_WHILE in state 75 resolved as shift
WARNING: shift/reduce conflict for KW_CONST in state 75 resolved as shift
WARNING: shift/reduce conflict for QUOTE in state 75 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 86 resolved as shift
WARNING: shift/reduce conflict for KW_PRINT in state 104 resolved as shift
WARNING: shift/reduce conflict for KW_LET in state 104 resolved as shift
WARNING: shift/reduce conflict for KW_FN in state 104 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 104 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 104 resolved as shift
WARNING: shift/reduce conflict for KW_FOR in state 104 resolved as shift
WARNING: shift/reduce conflict for KW_IF in state 104 resolved as shift
WARNING: shift/reduce conflict for KW_ELSE in state 104 resolved as shift
WARNING: shift/reduce conflict for KW_WHILE in state 104 resolved as shift
WARNING: shift/reduce conflict for KW_CONST in state 104 resolved as shift
WARNING: shift/reduce conflict for QUOTE in state 104 resolved as shift
WARNING: shift/reduce conflict for KW_PRINT in state 116 resolved as shift
WARNING: shift/reduce conflict for KW_LET in state 116 resolved as shift
WARNING: shift/reduce conflict for KW_FN in state 116 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 116 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 116 resolved as shift
WARNING: shift/reduce conflict for KW_FOR in state 116 resolved as shift
WARNING: shift/reduce conflict for KW_IF in state 116 resolved as shift
WARNING: shift/reduce conflict for KW_ELSE in state 116 resolved as shift
WARNING: shift/reduce conflict for KW_WHILE in state 116 resolved as shift
WARNING: shift/reduce conflict for KW_CONST in state 116 resolved as shift
WARNING: shift/reduce conflict for QUOTE in state 116 resolved as shift
WARNING: shift/reduce conflict for KW_PRINT in state 178 resolved as shift
WARNING: shift/reduce conflict for KW_LET in state 178 resolved as shift
WARNING: shift/reduce conflict for KW_FN in state 178 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 178 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 178 resolved as shift
WARNING: shift/reduce conflict for KW_FOR in state 178 resolved as shift
WARNING: shift/reduce conflict for KW_IF in state 178 resolved as shift
WARNING: shift/reduce conflict for KW_ELSE in state 178 resolved as shift
WARNING: shift/reduce conflict for KW_WHILE in state 178 resolved as shift
WARNING: shift/reduce conflict for KW_CONST in state 178 resolved as shift
WARNING: shift/reduce conflict for QUOTE in state 178 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 188 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 188 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 188 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 189 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 189 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 189 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 190 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 190 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 190 resolved as shift
WARNING: shift/reduce conflict for KW_PRINT in state 212 resolved as shift
WARNING: shift/reduce conflict for KW_LET in state 212 resolved as shift
WARNING: shift/reduce conflict for KW_FN in state 212 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 212 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 212 resolved as shift
WARNING: shift/reduce conflict for KW_FOR in state 212 resolved as shift
WARNING: shift/reduce conflict for KW_IF in state 212 resolved as shift
WARNING: shift/reduce conflict for KW_ELSE in state 212 resolved as shift
WARNING: shift/reduce conflict for KW_WHILE in state 212 resolved as shift
WARNING: shift/reduce conflict for KW_CONST in state 212 resolved as shift
WARNING: shift/reduce conflict for QUOTE in state 212 resolved as shift
WARNING: shift/reduce conflict for KW_PRINT in state 214 resolved as shift
WARNING: shift/reduce conflict for KW_LET in state 214 resolved as shift
WARNING: shift/reduce conflict for KW_FN in state 214 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 214 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 214 resolved as shift
WARNING: shift/reduce conflict for KW_FOR in state 214 resolved as shift
WARNING: shift/reduce conflict for KW_IF in state 214 resolved as shift
WARNING: shift/reduce conflict for KW_ELSE in state 214 resolved as shift
WARNING: shift/reduce conflict for KW_WHILE in state 214 resolved as shift
WARNING: shift/reduce conflict for KW_CONST in state 214 resolved as shift
WARNING: shift/reduce conflict for QUOTE in state 214 resolved as shift
WARNING: shift/reduce conflict for KW_PRINT in state 244 resolved as shift
WARNING: shift/reduce conflict for KW_LET in state 244 resolved as shift
WARNING: shift/reduce conflict for KW_FN in state 244 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 244 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 244 resolved as shift
WARNING: shift/reduce conflict for KW_FOR in state 244 resolved as shift
WARNING: shift/reduce conflict for KW_IF in state 244 resolved as shift
WARNING: shift/reduce conflict for KW_ELSE in state 244 resolved as shift
WARNING: shift/reduce conflict for KW_WHILE in state 244 resolved as shift
WARNING: shift/reduce conflict for KW_CONST in state 244 resolved as shift
WARNING: shift/reduce conflict for QUOTE in state 244 resolved as shift
WARNING: shift/reduce conflict for KW_PRINT in state 304 resolved as shift
WARNING: shift/reduce conflict for KW_LET in state 304 resolved as shift
WARNING: shift/reduce conflict for KW_FN in state 304 resolved as shift
WARNING: shift/reduce conflict for KW_RETURN in state 304 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 304 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 304 resolved as shift
WARNING: shift/reduce conflict for KW_FOR in state 304 resolved as shift
WARNING: shift/reduce conflict for KW_IF in state 304 resolved as shift
WARNING: shift/reduce conflict for KW_ELSE in state 304 resolved as shift
WARNING: shift/reduce conflict for KW_WHILE in state 304 resolved as shift
WARNING: shift/reduce conflict for KW_CONST in state 304 resolved as shift
WARNING: shift/reduce conflict for QUOTE in state 304 resolved as shift
WARNING: reduce/reduce conflict in state 2 resolved using rule (main_rule -> father_rule)
WARNING: rejected rule (void -> <empty>) in state 2
WARNING: reduce/reduce conflict in state 9 resolved using rule (father_rule -> array)
WARNING: rejected rule (data_str -> array) in state 9
WARNING: reduce/reduce conflict in state 86 resolved using rule (expression -> number)
WARNING: rejected rule (assignation -> VARIABLE assign_operators number) in state 86
WARNING: reduce/reduce conflict in state 136 resolved using rule (let_initialization -> KW_LET VARIABLE EQUALS data)
WARNING: rejected rule (expression_var -> data) in state 136
WARNING: reduce/reduce conflict in state 139 resolved using rule (number -> INTEGER)
WARNING: rejected rule (data -> INTEGER) in state 139
WARNING: reduce/reduce conflict in state 140 resolved using rule (number -> FLOAT)
WARNING: rejected rule (data -> FLOAT) in state 140
WARNING: reduce/reduce conflict in state 207 resolved using rule (let_initialization -> KW_LET KW_MUT VARIABLE EQUALS data)
WARNING: rejected rule (expression_var -> data) in state 207
WARNING: reduce/reduce conflict in state 231 resolved using rule (number -> INTEGER)
WARNING: rejected rule (data -> INTEGER) in state 231
WARNING: reduce/reduce conflict in state 232 resolved using rule (number -> FLOAT)
WARNING: rejected rule (data -> FLOAT) in state 232
WARNING: reduce/reduce conflict in state 235 resolved using rule (let_initialization -> KW_LET VARIABLE COLON data_type EQUALS data)
WARNING: rejected rule (expression_var -> data) in state 235
WARNING: reduce/reduce conflict in state 266 resolved using rule (let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS data)
WARNING: rejected rule (expression_var -> data) in state 266
WARNING: Rule (assignation -> VARIABLE assign_operators number) is never reduced
