Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    SPACETAB

Grammar

Rule 0     S' -> main_rule
Rule 1     main_rule -> father_rule
Rule 2     main_rule -> father_rule main_rule
Rule 3     father_rule -> print
Rule 4     father_rule -> dvariable
Rule 5     father_rule -> function
Rule 6     father_rule -> control_str
Rule 7     father_rule -> void
Rule 8     father_rule -> array
Rule 9     father_rule -> linkedlist_methods
Rule 10    father_rule -> hashmap_methods
Rule 11    father_rule -> initialization
Rule 12    father_rule -> input
Rule 13    father_rule -> assignation
Rule 14    father_rule -> declare_data_type
Rule 15    father_rule -> casting
Rule 16    expression -> expression PLUS expression
Rule 17    expression -> expression MINUS expression
Rule 18    expression -> expression TIMES expression
Rule 19    expression -> LPAREN expression RPAREN
Rule 20    expression -> number
Rule 21    expression -> division
Rule 22    expression -> variable
Rule 23    number -> INTEGER
Rule 24    number -> FLOAT
Rule 25    variable -> VARIABLE
Rule 26    data_type -> UNSIG_INT_8
Rule 27    data_type -> UNSIG_INT_16
Rule 28    data_type -> UNSIG_INT_32
Rule 29    data_type -> UNSIG_INT_64
Rule 30    data_type -> UNSIG_INT_128
Rule 31    data_type -> SIG_INT_8
Rule 32    data_type -> SIG_INT_16
Rule 33    data_type -> SIG_INT_32
Rule 34    data_type -> SIG_INT_64
Rule 35    data_type -> SIG_INT_128
Rule 36    data_type -> FLOAT_32
Rule 37    data_type -> FLOAT_64
Rule 38    data_type -> KW_BOOLEAN
Rule 39    data_type -> KW_STRING
Rule 40    data_type -> KW_CHARACTER
Rule 41    assign_operators -> EQUALS
Rule 42    assign_operators -> TIMESEQUAL
Rule 43    assign_operators -> DIVEQUAL
Rule 44    assign_operators -> MODULUSEQUAL
Rule 45    assign_operators -> PLUSEQUAL
Rule 46    assign_operators -> MINUSEQUAL
Rule 47    sigint -> SIG_INT_8
Rule 48    sigint -> SIG_INT_16
Rule 49    sigint -> SIG_INT_32
Rule 50    sigint -> SIG_INT_64
Rule 51    sigint -> SIG_INT_128
Rule 52    unsigint -> UNSIG_INT_8
Rule 53    unsigint -> UNSIG_INT_16
Rule 54    unsigint -> UNSIG_INT_32
Rule 55    unsigint -> UNSIG_INT_64
Rule 56    unsigint -> UNSIG_INT_128
Rule 57    flotante -> FLOAT_32
Rule 58    flotante -> FLOAT_64
Rule 59    casting -> flotante KW_AS sigint
Rule 60    casting -> flotante KW_AS unsigint
Rule 61    casting -> sigint KW_AS flotante
Rule 62    casting -> unsigint KW_AS flotante
Rule 63    casting -> flotante KW_AS flotante
Rule 64    division -> INTEGER DIVIDE INTEGER
Rule 65    division -> FLOAT DIVIDE FLOAT
Rule 66    data -> CADENA
Rule 67    data -> INTEGER
Rule 68    data -> CHAR
Rule 69    data -> FLOAT
Rule 70    data -> KW_FALSE
Rule 71    data -> KW_TRUE
Rule 72    data -> tuple
Rule 73    comparator -> <empty>
Rule 74    comparator -> EQ
Rule 75    comparator -> NE
Rule 76    comparator -> GE
Rule 77    comparator -> LE
Rule 78    comparator -> GT
Rule 79    comparator -> LT
Rule 80    logic -> LOR
Rule 81    logic -> LAND
Rule 82    lvariable -> VARIABLE logic VARIABLE
Rule 83    conditional -> VARIABLE comparator data
Rule 84    conditional -> LPAREN lvariable RPAREN comparator data
Rule 85    mdata -> data
Rule 86    mdata -> data COMMA mdata
Rule 87    print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI
Rule 88    print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI
Rule 89    dvariable -> KW_LET VARIABLE COLON data_type SEMI
Rule 90    array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
Rule 91    array -> LBRACKET mdata RBRACKET
Rule 92    array -> LBRACKET data SEMI data RBRACKET
Rule 93    array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
Rule 94    array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
Rule 95    array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
Rule 96    array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
Rule 97    variables -> VARIABLE
Rule 98    variables -> VARIABLE COMMA variables
Rule 99    while -> KW_WHILE conditional LBRACE main_rule RBRACE
Rule 100   tuple -> LPAREN mdata RPAREN
Rule 101   initialization -> let_initialization SEMI
Rule 102   initialization -> const_initialization SEMI
Rule 103   initialization -> data_str SEMI
Rule 104   initialization -> input_init SEMI
Rule 105   let_initialization -> KW_LET VARIABLE EQUALS data
Rule 106   let_initialization -> KW_LET VARIABLE COLON data_type EQUALS data
Rule 107   let_initialization -> KW_LET KW_MUT VARIABLE EQUALS data
Rule 108   let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS data
Rule 109   let_initialization -> KW_LET VARIABLE EQUALS expression_var
Rule 110   let_initialization -> KW_LET VARIABLE COLON data_type EQUALS expression_var
Rule 111   let_initialization -> KW_LET KW_MUT VARIABLE EQUALS expression_var
Rule 112   let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var
Rule 113   const_initialization -> KW_CONST VARIABLE COLON data_type EQUALS data
Rule 114   arguments -> void
Rule 115   arguments -> variables
Rule 116   function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE
Rule 117   control_str -> for_str
Rule 118   control_str -> for_str_tagged
Rule 119   control_str -> if
Rule 120   control_str -> else
Rule 121   control_str -> else_if
Rule 122   control_str -> while
Rule 123   for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE
Rule 124   for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE
Rule 125   for_str_tagged -> label COLON for_str
Rule 126   range -> INTEGER DOT DOT INTEGER
Rule 127   range -> VARIABLE DOT DOT VARIABLE
Rule 128   label -> QUOTE VARIABLE
Rule 129   data_str -> array
Rule 130   data_str -> hashmap
Rule 131   data_str -> linkedlist
Rule 132   hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
Rule 133   hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
Rule 134   hashmap_methods -> VARIABLE hashmap_insert
Rule 135   hashmap_methods -> VARIABLE hashmap_remove
Rule 136   hashmap_insert -> DOT KW_INSERT LPAREN data COMMA data RPAREN SEMI
Rule 137   hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI
Rule 138   void -> <empty>
Rule 139   linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
Rule 140   linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
Rule 141   linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
Rule 142   linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
Rule 143   linkedlist_methods -> VARIABLE linkedlist_push
Rule 144   linkedlist_methods -> VARIABLE linkedlist_remove
Rule 145   linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI
Rule 146   linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI
Rule 147   if -> KW_IF conditional LBRACE main_rule RBRACE
Rule 148   else -> KW_ELSE LBRACE main_rule RBRACE
Rule 149   else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE
Rule 150   function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE
Rule 151   expression_var -> expression
Rule 152   expression_var -> data
Rule 153   return -> main_rule
Rule 154   return -> KW_RETURN expression_var SEMI
Rule 155   return -> main_rule KW_RETURN expression_var SEMI
Rule 156   input_init -> KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN
Rule 157   input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI
Rule 158   assignation -> VARIABLE assign_operators number SEMI
Rule 159   assignation -> VARIABLE assign_operators expression SEMI
Rule 160   assignation -> VARIABLE assign_operators number
Rule 161   assignation -> VARIABLE assign_operators expression
Rule 162   declare_data_type -> KW_LET VARIABLE COLON data_type SEMI

Terminals, with rules where they appear

AND                  : 137 157
CADENA               : 66 87 88 157
CHAR                 : 68
COLON                : 89 93 94 95 96 106 108 110 112 113 125 132 132 133 133 139 139 139 140 140 140 141 141 142 142 156 156 162
COMMA                : 86 88 98 136
COMMENT              : 
DIVEQUAL             : 43
DIVIDE               : 64 65
DOT                  : 126 126 127 127 136 137 145 146 157 157
EQ                   : 74
EQUALS               : 41 90 93 94 95 96 105 106 107 108 109 110 111 112 113 132 133 139 140 141 142 156
FLOAT                : 24 65 65 69
FLOAT_32             : 36 57
FLOAT_64             : 37 58
GE                   : 76
GT                   : 78 139 140 150
INTEGER              : 23 64 64 67 126 126 146
KW_AS                : 59 60 61 62 63
KW_BOOLEAN           : 38
KW_CHARACTER         : 40
KW_CONST             : 113
KW_ELSE              : 148 149
KW_EXPECT            : 157
KW_FALSE             : 70
KW_FN                : 116 150
KW_FOR               : 123 124
KW_FROM              : 141 142
KW_HASHMAP           : 132 133
KW_IF                : 147 149
KW_IN                : 123 124
KW_INSERT            : 136
KW_IO                : 156
KW_LET               : 89 90 93 94 95 96 105 106 107 108 109 110 111 112 132 133 139 140 141 142 156 162
KW_LINKEDLIST        : 139 139 140 140 141 142
KW_MUT               : 95 96 107 108 111 112 133 140 142 157
KW_NEW               : 132 133 139 140
KW_PRINT             : 87 88
KW_PUSH_BACK         : 145
KW_READ_LINE         : 157
KW_REMOVE            : 137 146
KW_RETURN            : 154 155
KW_STDIN             : 156
KW_STRING            : 39
KW_TRUE              : 71
KW_WHILE             : 99
LAND                 : 81
LBRACE               : 99 116 123 124 147 148 149 150
LBRACKET             : 90 91 92 93 93 94 94 95 95 96 96
LE                   : 77
LNOT                 : 87 88
LOR                  : 80
LPAREN               : 19 84 87 88 100 116 132 133 136 137 139 140 141 142 145 146 150 156 157 157
LT                   : 79 139 140
MINUS                : 17 150
MINUSEQUAL           : 46
MODULUSEQUAL         : 44
NE                   : 75
PLUS                 : 16
PLUSEQUAL            : 45
QUOTE                : 128
RBRACE               : 99 116 123 124 147 148 149 150
RBRACKET             : 90 91 92 93 93 94 94 95 95 96 96
RPAREN               : 19 84 87 88 100 116 132 133 136 137 139 140 141 142 145 146 150 156 157 157
SEMI                 : 87 88 89 90 92 93 93 94 94 94 95 95 96 96 96 101 102 103 104 136 137 145 146 154 155 157 158 159 162
SIG_INT_128          : 35 51
SIG_INT_16           : 32 48
SIG_INT_32           : 33 49
SIG_INT_64           : 34 50
SIG_INT_8            : 31 47
SPACETAB             : 
TIMES                : 18
TIMESEQUAL           : 42
UNSIG_INT_128        : 30 56
UNSIG_INT_16         : 27 53
UNSIG_INT_32         : 28 54
UNSIG_INT_64         : 29 55
UNSIG_INT_8          : 26 52
VARIABLE             : 25 82 82 83 88 89 90 93 94 95 96 97 98 105 106 107 108 109 110 111 112 113 116 123 124 124 127 127 128 132 133 134 135 139 140 141 142 143 144 150 156 157 157 158 159 160 161 162
error                : 

Nonterminals, with rules where they appear

arguments            : 116 150
array                : 8 129 141 142
assign_operators     : 158 159 160 161
assignation          : 13
casting              : 15
comparator           : 83 84
conditional          : 99 147 149
const_initialization : 102
control_str          : 6
data                 : 83 84 85 86 92 92 93 94 94 94 95 96 96 96 105 106 107 108 113 136 136 137 145 152
data_str             : 103
data_type            : 89 93 94 95 96 106 108 110 112 113 139 140 150 162
declare_data_type    : 14
division             : 21
dvariable            : 4
else                 : 120
else_if              : 121
expression           : 16 16 17 17 18 18 19 151 159 161
expression_var       : 109 110 111 112 154 155
father_rule          : 1 2
flotante             : 59 60 61 62 63 63
for_str              : 117 125
for_str_tagged       : 118
function             : 5
hashmap              : 130
hashmap_insert       : 134
hashmap_methods      : 10
hashmap_remove       : 135
if                   : 119
initialization       : 11
input                : 12
input_init           : 104
label                : 125
let_initialization   : 101
linkedlist           : 131
linkedlist_methods   : 9
linkedlist_push      : 143
linkedlist_remove    : 144
logic                : 82
lvariable            : 84
main_rule            : 2 99 116 123 124 147 148 149 153 155 0
mdata                : 86 90 91 93 95 100
number               : 20 158 160
print                : 3
range                : 123
return               : 150
sigint               : 59 61
tuple                : 72
unsigint             : 60 62
variable             : 22
variables            : 98 115
void                 : 7 114
while                : 122

Parsing method: LALR

state 0

    (0) S' -> . main_rule
    (1) main_rule -> . father_rule
    (2) main_rule -> . father_rule main_rule
    (3) father_rule -> . print
    (4) father_rule -> . dvariable
    (5) father_rule -> . function
    (6) father_rule -> . control_str
    (7) father_rule -> . void
    (8) father_rule -> . array
    (9) father_rule -> . linkedlist_methods
    (10) father_rule -> . hashmap_methods
    (11) father_rule -> . initialization
    (12) father_rule -> . input
    (13) father_rule -> . assignation
    (14) father_rule -> . declare_data_type
    (15) father_rule -> . casting
    (87) print -> . KW_PRINT LNOT LPAREN CADENA RPAREN SEMI
    (88) print -> . KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI
    (89) dvariable -> . KW_LET VARIABLE COLON data_type SEMI
    (116) function -> . KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE
    (150) function -> . KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE
    (117) control_str -> . for_str
    (118) control_str -> . for_str_tagged
    (119) control_str -> . if
    (120) control_str -> . else
    (121) control_str -> . else_if
    (122) control_str -> . while
    (138) void -> .
    (90) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (91) array -> . LBRACKET mdata RBRACKET
    (92) array -> . LBRACKET data SEMI data RBRACKET
    (93) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (94) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (95) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (96) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (143) linkedlist_methods -> . VARIABLE linkedlist_push
    (144) linkedlist_methods -> . VARIABLE linkedlist_remove
    (134) hashmap_methods -> . VARIABLE hashmap_insert
    (135) hashmap_methods -> . VARIABLE hashmap_remove
    (101) initialization -> . let_initialization SEMI
    (102) initialization -> . const_initialization SEMI
    (103) initialization -> . data_str SEMI
    (104) initialization -> . input_init SEMI
    (157) input -> . VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI
    (158) assignation -> . VARIABLE assign_operators number SEMI
    (159) assignation -> . VARIABLE assign_operators expression SEMI
    (160) assignation -> . VARIABLE assign_operators number
    (161) assignation -> . VARIABLE assign_operators expression
    (162) declare_data_type -> . KW_LET VARIABLE COLON data_type SEMI
    (59) casting -> . flotante KW_AS sigint
    (60) casting -> . flotante KW_AS unsigint
    (61) casting -> . sigint KW_AS flotante
    (62) casting -> . unsigint KW_AS flotante
    (63) casting -> . flotante KW_AS flotante
    (123) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE
    (124) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE
    (125) for_str_tagged -> . label COLON for_str
    (147) if -> . KW_IF conditional LBRACE main_rule RBRACE
    (148) else -> . KW_ELSE LBRACE main_rule RBRACE
    (149) else_if -> . KW_ELSE KW_IF conditional LBRACE main_rule RBRACE
    (99) while -> . KW_WHILE conditional LBRACE main_rule RBRACE
    (105) let_initialization -> . KW_LET VARIABLE EQUALS data
    (106) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS data
    (107) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS data
    (108) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS data
    (109) let_initialization -> . KW_LET VARIABLE EQUALS expression_var
    (110) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS expression_var
    (111) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS expression_var
    (112) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var
    (113) const_initialization -> . KW_CONST VARIABLE COLON data_type EQUALS data
    (129) data_str -> . array
    (130) data_str -> . hashmap
    (131) data_str -> . linkedlist
    (156) input_init -> . KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN
    (57) flotante -> . FLOAT_32
    (58) flotante -> . FLOAT_64
    (47) sigint -> . SIG_INT_8
    (48) sigint -> . SIG_INT_16
    (49) sigint -> . SIG_INT_32
    (50) sigint -> . SIG_INT_64
    (51) sigint -> . SIG_INT_128
    (52) unsigint -> . UNSIG_INT_8
    (53) unsigint -> . UNSIG_INT_16
    (54) unsigint -> . UNSIG_INT_32
    (55) unsigint -> . UNSIG_INT_64
    (56) unsigint -> . UNSIG_INT_128
    (128) label -> . QUOTE VARIABLE
    (132) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (133) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (139) linkedlist -> . KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (140) linkedlist -> . KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (141) linkedlist -> . KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (142) linkedlist -> . KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN

  ! shift/reduce conflict for KW_PRINT resolved as shift
  ! shift/reduce conflict for KW_LET resolved as shift
  ! shift/reduce conflict for KW_FN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for KW_FOR resolved as shift
  ! shift/reduce conflict for KW_IF resolved as shift
  ! shift/reduce conflict for KW_ELSE resolved as shift
  ! shift/reduce conflict for KW_WHILE resolved as shift
  ! shift/reduce conflict for KW_CONST resolved as shift
  ! shift/reduce conflict for FLOAT_32 resolved as shift
  ! shift/reduce conflict for FLOAT_64 resolved as shift
  ! shift/reduce conflict for SIG_INT_8 resolved as shift
  ! shift/reduce conflict for SIG_INT_16 resolved as shift
  ! shift/reduce conflict for SIG_INT_32 resolved as shift
  ! shift/reduce conflict for SIG_INT_64 resolved as shift
  ! shift/reduce conflict for SIG_INT_128 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_8 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_16 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_32 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_64 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_128 resolved as shift
  ! shift/reduce conflict for QUOTE resolved as shift
    KW_PRINT        shift and go to state 16
    KW_LET          shift and go to state 18
    KW_FN           shift and go to state 19
    $end            reduce using rule 138 (void -> .)
    LBRACKET        shift and go to state 26
    VARIABLE        shift and go to state 17
    KW_FOR          shift and go to state 34
    KW_IF           shift and go to state 36
    KW_ELSE         shift and go to state 37
    KW_WHILE        shift and go to state 38
    KW_CONST        shift and go to state 39
    FLOAT_32        shift and go to state 42
    FLOAT_64        shift and go to state 43
    SIG_INT_8       shift and go to state 44
    SIG_INT_16      shift and go to state 45
    SIG_INT_32      shift and go to state 46
    SIG_INT_64      shift and go to state 47
    SIG_INT_128     shift and go to state 48
    UNSIG_INT_8     shift and go to state 49
    UNSIG_INT_16    shift and go to state 50
    UNSIG_INT_32    shift and go to state 51
    UNSIG_INT_64    shift and go to state 52
    UNSIG_INT_128   shift and go to state 53
    QUOTE           shift and go to state 54

  ! KW_PRINT        [ reduce using rule 138 (void -> .) ]
  ! KW_LET          [ reduce using rule 138 (void -> .) ]
  ! KW_FN           [ reduce using rule 138 (void -> .) ]
  ! LBRACKET        [ reduce using rule 138 (void -> .) ]
  ! VARIABLE        [ reduce using rule 138 (void -> .) ]
  ! KW_FOR          [ reduce using rule 138 (void -> .) ]
  ! KW_IF           [ reduce using rule 138 (void -> .) ]
  ! KW_ELSE         [ reduce using rule 138 (void -> .) ]
  ! KW_WHILE        [ reduce using rule 138 (void -> .) ]
  ! KW_CONST        [ reduce using rule 138 (void -> .) ]
  ! FLOAT_32        [ reduce using rule 138 (void -> .) ]
  ! FLOAT_64        [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_8       [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_16      [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_32      [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_64      [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_128     [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_8     [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_16    [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_32    [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_64    [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_128   [ reduce using rule 138 (void -> .) ]
  ! QUOTE           [ reduce using rule 138 (void -> .) ]

    main_rule                      shift and go to state 1
    father_rule                    shift and go to state 2
    print                          shift and go to state 3
    dvariable                      shift and go to state 4
    function                       shift and go to state 5
    control_str                    shift and go to state 6
    void                           shift and go to state 7
    array                          shift and go to state 8
    linkedlist_methods             shift and go to state 9
    hashmap_methods                shift and go to state 10
    initialization                 shift and go to state 11
    input                          shift and go to state 12
    assignation                    shift and go to state 13
    declare_data_type              shift and go to state 14
    casting                        shift and go to state 15
    for_str                        shift and go to state 20
    for_str_tagged                 shift and go to state 21
    if                             shift and go to state 22
    else                           shift and go to state 23
    else_if                        shift and go to state 24
    while                          shift and go to state 25
    let_initialization             shift and go to state 27
    const_initialization           shift and go to state 28
    data_str                       shift and go to state 29
    input_init                     shift and go to state 30
    flotante                       shift and go to state 31
    sigint                         shift and go to state 32
    unsigint                       shift and go to state 33
    label                          shift and go to state 35
    hashmap                        shift and go to state 40
    linkedlist                     shift and go to state 41

state 1

    (0) S' -> main_rule .



state 2

    (1) main_rule -> father_rule .
    (2) main_rule -> father_rule . main_rule
    (1) main_rule -> . father_rule
    (2) main_rule -> . father_rule main_rule
    (3) father_rule -> . print
    (4) father_rule -> . dvariable
    (5) father_rule -> . function
    (6) father_rule -> . control_str
    (7) father_rule -> . void
    (8) father_rule -> . array
    (9) father_rule -> . linkedlist_methods
    (10) father_rule -> . hashmap_methods
    (11) father_rule -> . initialization
    (12) father_rule -> . input
    (13) father_rule -> . assignation
    (14) father_rule -> . declare_data_type
    (15) father_rule -> . casting
    (87) print -> . KW_PRINT LNOT LPAREN CADENA RPAREN SEMI
    (88) print -> . KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI
    (89) dvariable -> . KW_LET VARIABLE COLON data_type SEMI
    (116) function -> . KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE
    (150) function -> . KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE
    (117) control_str -> . for_str
    (118) control_str -> . for_str_tagged
    (119) control_str -> . if
    (120) control_str -> . else
    (121) control_str -> . else_if
    (122) control_str -> . while
    (138) void -> .
    (90) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (91) array -> . LBRACKET mdata RBRACKET
    (92) array -> . LBRACKET data SEMI data RBRACKET
    (93) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (94) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (95) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (96) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (143) linkedlist_methods -> . VARIABLE linkedlist_push
    (144) linkedlist_methods -> . VARIABLE linkedlist_remove
    (134) hashmap_methods -> . VARIABLE hashmap_insert
    (135) hashmap_methods -> . VARIABLE hashmap_remove
    (101) initialization -> . let_initialization SEMI
    (102) initialization -> . const_initialization SEMI
    (103) initialization -> . data_str SEMI
    (104) initialization -> . input_init SEMI
    (157) input -> . VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI
    (158) assignation -> . VARIABLE assign_operators number SEMI
    (159) assignation -> . VARIABLE assign_operators expression SEMI
    (160) assignation -> . VARIABLE assign_operators number
    (161) assignation -> . VARIABLE assign_operators expression
    (162) declare_data_type -> . KW_LET VARIABLE COLON data_type SEMI
    (59) casting -> . flotante KW_AS sigint
    (60) casting -> . flotante KW_AS unsigint
    (61) casting -> . sigint KW_AS flotante
    (62) casting -> . unsigint KW_AS flotante
    (63) casting -> . flotante KW_AS flotante
    (123) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE
    (124) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE
    (125) for_str_tagged -> . label COLON for_str
    (147) if -> . KW_IF conditional LBRACE main_rule RBRACE
    (148) else -> . KW_ELSE LBRACE main_rule RBRACE
    (149) else_if -> . KW_ELSE KW_IF conditional LBRACE main_rule RBRACE
    (99) while -> . KW_WHILE conditional LBRACE main_rule RBRACE
    (105) let_initialization -> . KW_LET VARIABLE EQUALS data
    (106) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS data
    (107) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS data
    (108) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS data
    (109) let_initialization -> . KW_LET VARIABLE EQUALS expression_var
    (110) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS expression_var
    (111) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS expression_var
    (112) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var
    (113) const_initialization -> . KW_CONST VARIABLE COLON data_type EQUALS data
    (129) data_str -> . array
    (130) data_str -> . hashmap
    (131) data_str -> . linkedlist
    (156) input_init -> . KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN
    (57) flotante -> . FLOAT_32
    (58) flotante -> . FLOAT_64
    (47) sigint -> . SIG_INT_8
    (48) sigint -> . SIG_INT_16
    (49) sigint -> . SIG_INT_32
    (50) sigint -> . SIG_INT_64
    (51) sigint -> . SIG_INT_128
    (52) unsigint -> . UNSIG_INT_8
    (53) unsigint -> . UNSIG_INT_16
    (54) unsigint -> . UNSIG_INT_32
    (55) unsigint -> . UNSIG_INT_64
    (56) unsigint -> . UNSIG_INT_128
    (128) label -> . QUOTE VARIABLE
    (132) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (133) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (139) linkedlist -> . KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (140) linkedlist -> . KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (141) linkedlist -> . KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (142) linkedlist -> . KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN

  ! shift/reduce conflict for KW_PRINT resolved as shift
  ! shift/reduce conflict for KW_LET resolved as shift
  ! shift/reduce conflict for KW_FN resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 1 (main_rule -> father_rule .)
  ! reduce/reduce conflict for RBRACE resolved using rule 1 (main_rule -> father_rule .)
  ! reduce/reduce conflict for KW_RETURN resolved using rule 1 (main_rule -> father_rule .)
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for KW_FOR resolved as shift
  ! shift/reduce conflict for KW_IF resolved as shift
  ! shift/reduce conflict for KW_ELSE resolved as shift
  ! shift/reduce conflict for KW_WHILE resolved as shift
  ! shift/reduce conflict for KW_CONST resolved as shift
  ! shift/reduce conflict for FLOAT_32 resolved as shift
  ! shift/reduce conflict for FLOAT_64 resolved as shift
  ! shift/reduce conflict for SIG_INT_8 resolved as shift
  ! shift/reduce conflict for SIG_INT_16 resolved as shift
  ! shift/reduce conflict for SIG_INT_32 resolved as shift
  ! shift/reduce conflict for SIG_INT_64 resolved as shift
  ! shift/reduce conflict for SIG_INT_128 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_8 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_16 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_32 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_64 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_128 resolved as shift
  ! shift/reduce conflict for QUOTE resolved as shift
    $end            reduce using rule 1 (main_rule -> father_rule .)
    RBRACE          reduce using rule 1 (main_rule -> father_rule .)
    KW_RETURN       reduce using rule 1 (main_rule -> father_rule .)
    KW_PRINT        shift and go to state 16
    KW_LET          shift and go to state 18
    KW_FN           shift and go to state 19
    LBRACKET        shift and go to state 26
    VARIABLE        shift and go to state 17
    KW_FOR          shift and go to state 34
    KW_IF           shift and go to state 36
    KW_ELSE         shift and go to state 37
    KW_WHILE        shift and go to state 38
    KW_CONST        shift and go to state 39
    FLOAT_32        shift and go to state 42
    FLOAT_64        shift and go to state 43
    SIG_INT_8       shift and go to state 44
    SIG_INT_16      shift and go to state 45
    SIG_INT_32      shift and go to state 46
    SIG_INT_64      shift and go to state 47
    SIG_INT_128     shift and go to state 48
    UNSIG_INT_8     shift and go to state 49
    UNSIG_INT_16    shift and go to state 50
    UNSIG_INT_32    shift and go to state 51
    UNSIG_INT_64    shift and go to state 52
    UNSIG_INT_128   shift and go to state 53
    QUOTE           shift and go to state 54

  ! KW_PRINT        [ reduce using rule 138 (void -> .) ]
  ! KW_LET          [ reduce using rule 138 (void -> .) ]
  ! KW_FN           [ reduce using rule 138 (void -> .) ]
  ! LBRACKET        [ reduce using rule 138 (void -> .) ]
  ! VARIABLE        [ reduce using rule 138 (void -> .) ]
  ! KW_FOR          [ reduce using rule 138 (void -> .) ]
  ! KW_IF           [ reduce using rule 138 (void -> .) ]
  ! KW_ELSE         [ reduce using rule 138 (void -> .) ]
  ! KW_WHILE        [ reduce using rule 138 (void -> .) ]
  ! KW_CONST        [ reduce using rule 138 (void -> .) ]
  ! FLOAT_32        [ reduce using rule 138 (void -> .) ]
  ! FLOAT_64        [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_8       [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_16      [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_32      [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_64      [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_128     [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_8     [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_16    [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_32    [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_64    [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_128   [ reduce using rule 138 (void -> .) ]
  ! QUOTE           [ reduce using rule 138 (void -> .) ]
  ! $end            [ reduce using rule 138 (void -> .) ]
  ! RBRACE          [ reduce using rule 138 (void -> .) ]
  ! KW_RETURN       [ reduce using rule 138 (void -> .) ]

    father_rule                    shift and go to state 2
    main_rule                      shift and go to state 55
    print                          shift and go to state 3
    dvariable                      shift and go to state 4
    function                       shift and go to state 5
    control_str                    shift and go to state 6
    void                           shift and go to state 7
    array                          shift and go to state 8
    linkedlist_methods             shift and go to state 9
    hashmap_methods                shift and go to state 10
    initialization                 shift and go to state 11
    input                          shift and go to state 12
    assignation                    shift and go to state 13
    declare_data_type              shift and go to state 14
    casting                        shift and go to state 15
    for_str                        shift and go to state 20
    for_str_tagged                 shift and go to state 21
    if                             shift and go to state 22
    else                           shift and go to state 23
    else_if                        shift and go to state 24
    while                          shift and go to state 25
    let_initialization             shift and go to state 27
    const_initialization           shift and go to state 28
    data_str                       shift and go to state 29
    input_init                     shift and go to state 30
    flotante                       shift and go to state 31
    sigint                         shift and go to state 32
    unsigint                       shift and go to state 33
    label                          shift and go to state 35
    hashmap                        shift and go to state 40
    linkedlist                     shift and go to state 41

state 3

    (3) father_rule -> print .

    KW_PRINT        reduce using rule 3 (father_rule -> print .)
    KW_LET          reduce using rule 3 (father_rule -> print .)
    KW_FN           reduce using rule 3 (father_rule -> print .)
    LBRACKET        reduce using rule 3 (father_rule -> print .)
    VARIABLE        reduce using rule 3 (father_rule -> print .)
    KW_FOR          reduce using rule 3 (father_rule -> print .)
    KW_IF           reduce using rule 3 (father_rule -> print .)
    KW_ELSE         reduce using rule 3 (father_rule -> print .)
    KW_WHILE        reduce using rule 3 (father_rule -> print .)
    KW_CONST        reduce using rule 3 (father_rule -> print .)
    FLOAT_32        reduce using rule 3 (father_rule -> print .)
    FLOAT_64        reduce using rule 3 (father_rule -> print .)
    SIG_INT_8       reduce using rule 3 (father_rule -> print .)
    SIG_INT_16      reduce using rule 3 (father_rule -> print .)
    SIG_INT_32      reduce using rule 3 (father_rule -> print .)
    SIG_INT_64      reduce using rule 3 (father_rule -> print .)
    SIG_INT_128     reduce using rule 3 (father_rule -> print .)
    UNSIG_INT_8     reduce using rule 3 (father_rule -> print .)
    UNSIG_INT_16    reduce using rule 3 (father_rule -> print .)
    UNSIG_INT_32    reduce using rule 3 (father_rule -> print .)
    UNSIG_INT_64    reduce using rule 3 (father_rule -> print .)
    UNSIG_INT_128   reduce using rule 3 (father_rule -> print .)
    QUOTE           reduce using rule 3 (father_rule -> print .)
    $end            reduce using rule 3 (father_rule -> print .)
    RBRACE          reduce using rule 3 (father_rule -> print .)
    KW_RETURN       reduce using rule 3 (father_rule -> print .)


state 4

    (4) father_rule -> dvariable .

    KW_PRINT        reduce using rule 4 (father_rule -> dvariable .)
    KW_LET          reduce using rule 4 (father_rule -> dvariable .)
    KW_FN           reduce using rule 4 (father_rule -> dvariable .)
    LBRACKET        reduce using rule 4 (father_rule -> dvariable .)
    VARIABLE        reduce using rule 4 (father_rule -> dvariable .)
    KW_FOR          reduce using rule 4 (father_rule -> dvariable .)
    KW_IF           reduce using rule 4 (father_rule -> dvariable .)
    KW_ELSE         reduce using rule 4 (father_rule -> dvariable .)
    KW_WHILE        reduce using rule 4 (father_rule -> dvariable .)
    KW_CONST        reduce using rule 4 (father_rule -> dvariable .)
    FLOAT_32        reduce using rule 4 (father_rule -> dvariable .)
    FLOAT_64        reduce using rule 4 (father_rule -> dvariable .)
    SIG_INT_8       reduce using rule 4 (father_rule -> dvariable .)
    SIG_INT_16      reduce using rule 4 (father_rule -> dvariable .)
    SIG_INT_32      reduce using rule 4 (father_rule -> dvariable .)
    SIG_INT_64      reduce using rule 4 (father_rule -> dvariable .)
    SIG_INT_128     reduce using rule 4 (father_rule -> dvariable .)
    UNSIG_INT_8     reduce using rule 4 (father_rule -> dvariable .)
    UNSIG_INT_16    reduce using rule 4 (father_rule -> dvariable .)
    UNSIG_INT_32    reduce using rule 4 (father_rule -> dvariable .)
    UNSIG_INT_64    reduce using rule 4 (father_rule -> dvariable .)
    UNSIG_INT_128   reduce using rule 4 (father_rule -> dvariable .)
    QUOTE           reduce using rule 4 (father_rule -> dvariable .)
    $end            reduce using rule 4 (father_rule -> dvariable .)
    RBRACE          reduce using rule 4 (father_rule -> dvariable .)
    KW_RETURN       reduce using rule 4 (father_rule -> dvariable .)


state 5

    (5) father_rule -> function .

    KW_PRINT        reduce using rule 5 (father_rule -> function .)
    KW_LET          reduce using rule 5 (father_rule -> function .)
    KW_FN           reduce using rule 5 (father_rule -> function .)
    LBRACKET        reduce using rule 5 (father_rule -> function .)
    VARIABLE        reduce using rule 5 (father_rule -> function .)
    KW_FOR          reduce using rule 5 (father_rule -> function .)
    KW_IF           reduce using rule 5 (father_rule -> function .)
    KW_ELSE         reduce using rule 5 (father_rule -> function .)
    KW_WHILE        reduce using rule 5 (father_rule -> function .)
    KW_CONST        reduce using rule 5 (father_rule -> function .)
    FLOAT_32        reduce using rule 5 (father_rule -> function .)
    FLOAT_64        reduce using rule 5 (father_rule -> function .)
    SIG_INT_8       reduce using rule 5 (father_rule -> function .)
    SIG_INT_16      reduce using rule 5 (father_rule -> function .)
    SIG_INT_32      reduce using rule 5 (father_rule -> function .)
    SIG_INT_64      reduce using rule 5 (father_rule -> function .)
    SIG_INT_128     reduce using rule 5 (father_rule -> function .)
    UNSIG_INT_8     reduce using rule 5 (father_rule -> function .)
    UNSIG_INT_16    reduce using rule 5 (father_rule -> function .)
    UNSIG_INT_32    reduce using rule 5 (father_rule -> function .)
    UNSIG_INT_64    reduce using rule 5 (father_rule -> function .)
    UNSIG_INT_128   reduce using rule 5 (father_rule -> function .)
    QUOTE           reduce using rule 5 (father_rule -> function .)
    $end            reduce using rule 5 (father_rule -> function .)
    RBRACE          reduce using rule 5 (father_rule -> function .)
    KW_RETURN       reduce using rule 5 (father_rule -> function .)


state 6

    (6) father_rule -> control_str .

    KW_PRINT        reduce using rule 6 (father_rule -> control_str .)
    KW_LET          reduce using rule 6 (father_rule -> control_str .)
    KW_FN           reduce using rule 6 (father_rule -> control_str .)
    LBRACKET        reduce using rule 6 (father_rule -> control_str .)
    VARIABLE        reduce using rule 6 (father_rule -> control_str .)
    KW_FOR          reduce using rule 6 (father_rule -> control_str .)
    KW_IF           reduce using rule 6 (father_rule -> control_str .)
    KW_ELSE         reduce using rule 6 (father_rule -> control_str .)
    KW_WHILE        reduce using rule 6 (father_rule -> control_str .)
    KW_CONST        reduce using rule 6 (father_rule -> control_str .)
    FLOAT_32        reduce using rule 6 (father_rule -> control_str .)
    FLOAT_64        reduce using rule 6 (father_rule -> control_str .)
    SIG_INT_8       reduce using rule 6 (father_rule -> control_str .)
    SIG_INT_16      reduce using rule 6 (father_rule -> control_str .)
    SIG_INT_32      reduce using rule 6 (father_rule -> control_str .)
    SIG_INT_64      reduce using rule 6 (father_rule -> control_str .)
    SIG_INT_128     reduce using rule 6 (father_rule -> control_str .)
    UNSIG_INT_8     reduce using rule 6 (father_rule -> control_str .)
    UNSIG_INT_16    reduce using rule 6 (father_rule -> control_str .)
    UNSIG_INT_32    reduce using rule 6 (father_rule -> control_str .)
    UNSIG_INT_64    reduce using rule 6 (father_rule -> control_str .)
    UNSIG_INT_128   reduce using rule 6 (father_rule -> control_str .)
    QUOTE           reduce using rule 6 (father_rule -> control_str .)
    $end            reduce using rule 6 (father_rule -> control_str .)
    RBRACE          reduce using rule 6 (father_rule -> control_str .)
    KW_RETURN       reduce using rule 6 (father_rule -> control_str .)


state 7

    (7) father_rule -> void .

    KW_PRINT        reduce using rule 7 (father_rule -> void .)
    KW_LET          reduce using rule 7 (father_rule -> void .)
    KW_FN           reduce using rule 7 (father_rule -> void .)
    LBRACKET        reduce using rule 7 (father_rule -> void .)
    VARIABLE        reduce using rule 7 (father_rule -> void .)
    KW_FOR          reduce using rule 7 (father_rule -> void .)
    KW_IF           reduce using rule 7 (father_rule -> void .)
    KW_ELSE         reduce using rule 7 (father_rule -> void .)
    KW_WHILE        reduce using rule 7 (father_rule -> void .)
    KW_CONST        reduce using rule 7 (father_rule -> void .)
    FLOAT_32        reduce using rule 7 (father_rule -> void .)
    FLOAT_64        reduce using rule 7 (father_rule -> void .)
    SIG_INT_8       reduce using rule 7 (father_rule -> void .)
    SIG_INT_16      reduce using rule 7 (father_rule -> void .)
    SIG_INT_32      reduce using rule 7 (father_rule -> void .)
    SIG_INT_64      reduce using rule 7 (father_rule -> void .)
    SIG_INT_128     reduce using rule 7 (father_rule -> void .)
    UNSIG_INT_8     reduce using rule 7 (father_rule -> void .)
    UNSIG_INT_16    reduce using rule 7 (father_rule -> void .)
    UNSIG_INT_32    reduce using rule 7 (father_rule -> void .)
    UNSIG_INT_64    reduce using rule 7 (father_rule -> void .)
    UNSIG_INT_128   reduce using rule 7 (father_rule -> void .)
    QUOTE           reduce using rule 7 (father_rule -> void .)
    $end            reduce using rule 7 (father_rule -> void .)
    RBRACE          reduce using rule 7 (father_rule -> void .)
    KW_RETURN       reduce using rule 7 (father_rule -> void .)


state 8

    (8) father_rule -> array .
    (129) data_str -> array .

    KW_PRINT        reduce using rule 8 (father_rule -> array .)
    KW_LET          reduce using rule 8 (father_rule -> array .)
    KW_FN           reduce using rule 8 (father_rule -> array .)
    LBRACKET        reduce using rule 8 (father_rule -> array .)
    VARIABLE        reduce using rule 8 (father_rule -> array .)
    KW_FOR          reduce using rule 8 (father_rule -> array .)
    KW_IF           reduce using rule 8 (father_rule -> array .)
    KW_ELSE         reduce using rule 8 (father_rule -> array .)
    KW_WHILE        reduce using rule 8 (father_rule -> array .)
    KW_CONST        reduce using rule 8 (father_rule -> array .)
    FLOAT_32        reduce using rule 8 (father_rule -> array .)
    FLOAT_64        reduce using rule 8 (father_rule -> array .)
    SIG_INT_8       reduce using rule 8 (father_rule -> array .)
    SIG_INT_16      reduce using rule 8 (father_rule -> array .)
    SIG_INT_32      reduce using rule 8 (father_rule -> array .)
    SIG_INT_64      reduce using rule 8 (father_rule -> array .)
    SIG_INT_128     reduce using rule 8 (father_rule -> array .)
    UNSIG_INT_8     reduce using rule 8 (father_rule -> array .)
    UNSIG_INT_16    reduce using rule 8 (father_rule -> array .)
    UNSIG_INT_32    reduce using rule 8 (father_rule -> array .)
    UNSIG_INT_64    reduce using rule 8 (father_rule -> array .)
    UNSIG_INT_128   reduce using rule 8 (father_rule -> array .)
    QUOTE           reduce using rule 8 (father_rule -> array .)
    $end            reduce using rule 8 (father_rule -> array .)
    RBRACE          reduce using rule 8 (father_rule -> array .)
    KW_RETURN       reduce using rule 8 (father_rule -> array .)
    SEMI            reduce using rule 129 (data_str -> array .)


state 9

    (9) father_rule -> linkedlist_methods .

    KW_PRINT        reduce using rule 9 (father_rule -> linkedlist_methods .)
    KW_LET          reduce using rule 9 (father_rule -> linkedlist_methods .)
    KW_FN           reduce using rule 9 (father_rule -> linkedlist_methods .)
    LBRACKET        reduce using rule 9 (father_rule -> linkedlist_methods .)
    VARIABLE        reduce using rule 9 (father_rule -> linkedlist_methods .)
    KW_FOR          reduce using rule 9 (father_rule -> linkedlist_methods .)
    KW_IF           reduce using rule 9 (father_rule -> linkedlist_methods .)
    KW_ELSE         reduce using rule 9 (father_rule -> linkedlist_methods .)
    KW_WHILE        reduce using rule 9 (father_rule -> linkedlist_methods .)
    KW_CONST        reduce using rule 9 (father_rule -> linkedlist_methods .)
    FLOAT_32        reduce using rule 9 (father_rule -> linkedlist_methods .)
    FLOAT_64        reduce using rule 9 (father_rule -> linkedlist_methods .)
    SIG_INT_8       reduce using rule 9 (father_rule -> linkedlist_methods .)
    SIG_INT_16      reduce using rule 9 (father_rule -> linkedlist_methods .)
    SIG_INT_32      reduce using rule 9 (father_rule -> linkedlist_methods .)
    SIG_INT_64      reduce using rule 9 (father_rule -> linkedlist_methods .)
    SIG_INT_128     reduce using rule 9 (father_rule -> linkedlist_methods .)
    UNSIG_INT_8     reduce using rule 9 (father_rule -> linkedlist_methods .)
    UNSIG_INT_16    reduce using rule 9 (father_rule -> linkedlist_methods .)
    UNSIG_INT_32    reduce using rule 9 (father_rule -> linkedlist_methods .)
    UNSIG_INT_64    reduce using rule 9 (father_rule -> linkedlist_methods .)
    UNSIG_INT_128   reduce using rule 9 (father_rule -> linkedlist_methods .)
    QUOTE           reduce using rule 9 (father_rule -> linkedlist_methods .)
    $end            reduce using rule 9 (father_rule -> linkedlist_methods .)
    RBRACE          reduce using rule 9 (father_rule -> linkedlist_methods .)
    KW_RETURN       reduce using rule 9 (father_rule -> linkedlist_methods .)


state 10

    (10) father_rule -> hashmap_methods .

    KW_PRINT        reduce using rule 10 (father_rule -> hashmap_methods .)
    KW_LET          reduce using rule 10 (father_rule -> hashmap_methods .)
    KW_FN           reduce using rule 10 (father_rule -> hashmap_methods .)
    LBRACKET        reduce using rule 10 (father_rule -> hashmap_methods .)
    VARIABLE        reduce using rule 10 (father_rule -> hashmap_methods .)
    KW_FOR          reduce using rule 10 (father_rule -> hashmap_methods .)
    KW_IF           reduce using rule 10 (father_rule -> hashmap_methods .)
    KW_ELSE         reduce using rule 10 (father_rule -> hashmap_methods .)
    KW_WHILE        reduce using rule 10 (father_rule -> hashmap_methods .)
    KW_CONST        reduce using rule 10 (father_rule -> hashmap_methods .)
    FLOAT_32        reduce using rule 10 (father_rule -> hashmap_methods .)
    FLOAT_64        reduce using rule 10 (father_rule -> hashmap_methods .)
    SIG_INT_8       reduce using rule 10 (father_rule -> hashmap_methods .)
    SIG_INT_16      reduce using rule 10 (father_rule -> hashmap_methods .)
    SIG_INT_32      reduce using rule 10 (father_rule -> hashmap_methods .)
    SIG_INT_64      reduce using rule 10 (father_rule -> hashmap_methods .)
    SIG_INT_128     reduce using rule 10 (father_rule -> hashmap_methods .)
    UNSIG_INT_8     reduce using rule 10 (father_rule -> hashmap_methods .)
    UNSIG_INT_16    reduce using rule 10 (father_rule -> hashmap_methods .)
    UNSIG_INT_32    reduce using rule 10 (father_rule -> hashmap_methods .)
    UNSIG_INT_64    reduce using rule 10 (father_rule -> hashmap_methods .)
    UNSIG_INT_128   reduce using rule 10 (father_rule -> hashmap_methods .)
    QUOTE           reduce using rule 10 (father_rule -> hashmap_methods .)
    $end            reduce using rule 10 (father_rule -> hashmap_methods .)
    RBRACE          reduce using rule 10 (father_rule -> hashmap_methods .)
    KW_RETURN       reduce using rule 10 (father_rule -> hashmap_methods .)


state 11

    (11) father_rule -> initialization .

    KW_PRINT        reduce using rule 11 (father_rule -> initialization .)
    KW_LET          reduce using rule 11 (father_rule -> initialization .)
    KW_FN           reduce using rule 11 (father_rule -> initialization .)
    LBRACKET        reduce using rule 11 (father_rule -> initialization .)
    VARIABLE        reduce using rule 11 (father_rule -> initialization .)
    KW_FOR          reduce using rule 11 (father_rule -> initialization .)
    KW_IF           reduce using rule 11 (father_rule -> initialization .)
    KW_ELSE         reduce using rule 11 (father_rule -> initialization .)
    KW_WHILE        reduce using rule 11 (father_rule -> initialization .)
    KW_CONST        reduce using rule 11 (father_rule -> initialization .)
    FLOAT_32        reduce using rule 11 (father_rule -> initialization .)
    FLOAT_64        reduce using rule 11 (father_rule -> initialization .)
    SIG_INT_8       reduce using rule 11 (father_rule -> initialization .)
    SIG_INT_16      reduce using rule 11 (father_rule -> initialization .)
    SIG_INT_32      reduce using rule 11 (father_rule -> initialization .)
    SIG_INT_64      reduce using rule 11 (father_rule -> initialization .)
    SIG_INT_128     reduce using rule 11 (father_rule -> initialization .)
    UNSIG_INT_8     reduce using rule 11 (father_rule -> initialization .)
    UNSIG_INT_16    reduce using rule 11 (father_rule -> initialization .)
    UNSIG_INT_32    reduce using rule 11 (father_rule -> initialization .)
    UNSIG_INT_64    reduce using rule 11 (father_rule -> initialization .)
    UNSIG_INT_128   reduce using rule 11 (father_rule -> initialization .)
    QUOTE           reduce using rule 11 (father_rule -> initialization .)
    $end            reduce using rule 11 (father_rule -> initialization .)
    RBRACE          reduce using rule 11 (father_rule -> initialization .)
    KW_RETURN       reduce using rule 11 (father_rule -> initialization .)


state 12

    (12) father_rule -> input .

    KW_PRINT        reduce using rule 12 (father_rule -> input .)
    KW_LET          reduce using rule 12 (father_rule -> input .)
    KW_FN           reduce using rule 12 (father_rule -> input .)
    LBRACKET        reduce using rule 12 (father_rule -> input .)
    VARIABLE        reduce using rule 12 (father_rule -> input .)
    KW_FOR          reduce using rule 12 (father_rule -> input .)
    KW_IF           reduce using rule 12 (father_rule -> input .)
    KW_ELSE         reduce using rule 12 (father_rule -> input .)
    KW_WHILE        reduce using rule 12 (father_rule -> input .)
    KW_CONST        reduce using rule 12 (father_rule -> input .)
    FLOAT_32        reduce using rule 12 (father_rule -> input .)
    FLOAT_64        reduce using rule 12 (father_rule -> input .)
    SIG_INT_8       reduce using rule 12 (father_rule -> input .)
    SIG_INT_16      reduce using rule 12 (father_rule -> input .)
    SIG_INT_32      reduce using rule 12 (father_rule -> input .)
    SIG_INT_64      reduce using rule 12 (father_rule -> input .)
    SIG_INT_128     reduce using rule 12 (father_rule -> input .)
    UNSIG_INT_8     reduce using rule 12 (father_rule -> input .)
    UNSIG_INT_16    reduce using rule 12 (father_rule -> input .)
    UNSIG_INT_32    reduce using rule 12 (father_rule -> input .)
    UNSIG_INT_64    reduce using rule 12 (father_rule -> input .)
    UNSIG_INT_128   reduce using rule 12 (father_rule -> input .)
    QUOTE           reduce using rule 12 (father_rule -> input .)
    $end            reduce using rule 12 (father_rule -> input .)
    RBRACE          reduce using rule 12 (father_rule -> input .)
    KW_RETURN       reduce using rule 12 (father_rule -> input .)


state 13

    (13) father_rule -> assignation .

    KW_PRINT        reduce using rule 13 (father_rule -> assignation .)
    KW_LET          reduce using rule 13 (father_rule -> assignation .)
    KW_FN           reduce using rule 13 (father_rule -> assignation .)
    LBRACKET        reduce using rule 13 (father_rule -> assignation .)
    VARIABLE        reduce using rule 13 (father_rule -> assignation .)
    KW_FOR          reduce using rule 13 (father_rule -> assignation .)
    KW_IF           reduce using rule 13 (father_rule -> assignation .)
    KW_ELSE         reduce using rule 13 (father_rule -> assignation .)
    KW_WHILE        reduce using rule 13 (father_rule -> assignation .)
    KW_CONST        reduce using rule 13 (father_rule -> assignation .)
    FLOAT_32        reduce using rule 13 (father_rule -> assignation .)
    FLOAT_64        reduce using rule 13 (father_rule -> assignation .)
    SIG_INT_8       reduce using rule 13 (father_rule -> assignation .)
    SIG_INT_16      reduce using rule 13 (father_rule -> assignation .)
    SIG_INT_32      reduce using rule 13 (father_rule -> assignation .)
    SIG_INT_64      reduce using rule 13 (father_rule -> assignation .)
    SIG_INT_128     reduce using rule 13 (father_rule -> assignation .)
    UNSIG_INT_8     reduce using rule 13 (father_rule -> assignation .)
    UNSIG_INT_16    reduce using rule 13 (father_rule -> assignation .)
    UNSIG_INT_32    reduce using rule 13 (father_rule -> assignation .)
    UNSIG_INT_64    reduce using rule 13 (father_rule -> assignation .)
    UNSIG_INT_128   reduce using rule 13 (father_rule -> assignation .)
    QUOTE           reduce using rule 13 (father_rule -> assignation .)
    $end            reduce using rule 13 (father_rule -> assignation .)
    RBRACE          reduce using rule 13 (father_rule -> assignation .)
    KW_RETURN       reduce using rule 13 (father_rule -> assignation .)


state 14

    (14) father_rule -> declare_data_type .

    KW_PRINT        reduce using rule 14 (father_rule -> declare_data_type .)
    KW_LET          reduce using rule 14 (father_rule -> declare_data_type .)
    KW_FN           reduce using rule 14 (father_rule -> declare_data_type .)
    LBRACKET        reduce using rule 14 (father_rule -> declare_data_type .)
    VARIABLE        reduce using rule 14 (father_rule -> declare_data_type .)
    KW_FOR          reduce using rule 14 (father_rule -> declare_data_type .)
    KW_IF           reduce using rule 14 (father_rule -> declare_data_type .)
    KW_ELSE         reduce using rule 14 (father_rule -> declare_data_type .)
    KW_WHILE        reduce using rule 14 (father_rule -> declare_data_type .)
    KW_CONST        reduce using rule 14 (father_rule -> declare_data_type .)
    FLOAT_32        reduce using rule 14 (father_rule -> declare_data_type .)
    FLOAT_64        reduce using rule 14 (father_rule -> declare_data_type .)
    SIG_INT_8       reduce using rule 14 (father_rule -> declare_data_type .)
    SIG_INT_16      reduce using rule 14 (father_rule -> declare_data_type .)
    SIG_INT_32      reduce using rule 14 (father_rule -> declare_data_type .)
    SIG_INT_64      reduce using rule 14 (father_rule -> declare_data_type .)
    SIG_INT_128     reduce using rule 14 (father_rule -> declare_data_type .)
    UNSIG_INT_8     reduce using rule 14 (father_rule -> declare_data_type .)
    UNSIG_INT_16    reduce using rule 14 (father_rule -> declare_data_type .)
    UNSIG_INT_32    reduce using rule 14 (father_rule -> declare_data_type .)
    UNSIG_INT_64    reduce using rule 14 (father_rule -> declare_data_type .)
    UNSIG_INT_128   reduce using rule 14 (father_rule -> declare_data_type .)
    QUOTE           reduce using rule 14 (father_rule -> declare_data_type .)
    $end            reduce using rule 14 (father_rule -> declare_data_type .)
    RBRACE          reduce using rule 14 (father_rule -> declare_data_type .)
    KW_RETURN       reduce using rule 14 (father_rule -> declare_data_type .)


state 15

    (15) father_rule -> casting .

    KW_PRINT        reduce using rule 15 (father_rule -> casting .)
    KW_LET          reduce using rule 15 (father_rule -> casting .)
    KW_FN           reduce using rule 15 (father_rule -> casting .)
    LBRACKET        reduce using rule 15 (father_rule -> casting .)
    VARIABLE        reduce using rule 15 (father_rule -> casting .)
    KW_FOR          reduce using rule 15 (father_rule -> casting .)
    KW_IF           reduce using rule 15 (father_rule -> casting .)
    KW_ELSE         reduce using rule 15 (father_rule -> casting .)
    KW_WHILE        reduce using rule 15 (father_rule -> casting .)
    KW_CONST        reduce using rule 15 (father_rule -> casting .)
    FLOAT_32        reduce using rule 15 (father_rule -> casting .)
    FLOAT_64        reduce using rule 15 (father_rule -> casting .)
    SIG_INT_8       reduce using rule 15 (father_rule -> casting .)
    SIG_INT_16      reduce using rule 15 (father_rule -> casting .)
    SIG_INT_32      reduce using rule 15 (father_rule -> casting .)
    SIG_INT_64      reduce using rule 15 (father_rule -> casting .)
    SIG_INT_128     reduce using rule 15 (father_rule -> casting .)
    UNSIG_INT_8     reduce using rule 15 (father_rule -> casting .)
    UNSIG_INT_16    reduce using rule 15 (father_rule -> casting .)
    UNSIG_INT_32    reduce using rule 15 (father_rule -> casting .)
    UNSIG_INT_64    reduce using rule 15 (father_rule -> casting .)
    UNSIG_INT_128   reduce using rule 15 (father_rule -> casting .)
    QUOTE           reduce using rule 15 (father_rule -> casting .)
    $end            reduce using rule 15 (father_rule -> casting .)
    RBRACE          reduce using rule 15 (father_rule -> casting .)
    KW_RETURN       reduce using rule 15 (father_rule -> casting .)


state 16

    (87) print -> KW_PRINT . LNOT LPAREN CADENA RPAREN SEMI
    (88) print -> KW_PRINT . LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI

    LNOT            shift and go to state 56


state 17

    (143) linkedlist_methods -> VARIABLE . linkedlist_push
    (144) linkedlist_methods -> VARIABLE . linkedlist_remove
    (134) hashmap_methods -> VARIABLE . hashmap_insert
    (135) hashmap_methods -> VARIABLE . hashmap_remove
    (157) input -> VARIABLE . DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI
    (158) assignation -> VARIABLE . assign_operators number SEMI
    (159) assignation -> VARIABLE . assign_operators expression SEMI
    (160) assignation -> VARIABLE . assign_operators number
    (161) assignation -> VARIABLE . assign_operators expression
    (145) linkedlist_push -> . DOT KW_PUSH_BACK LPAREN data RPAREN SEMI
    (146) linkedlist_remove -> . DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI
    (136) hashmap_insert -> . DOT KW_INSERT LPAREN data COMMA data RPAREN SEMI
    (137) hashmap_remove -> . DOT KW_REMOVE LPAREN AND data RPAREN SEMI
    (41) assign_operators -> . EQUALS
    (42) assign_operators -> . TIMESEQUAL
    (43) assign_operators -> . DIVEQUAL
    (44) assign_operators -> . MODULUSEQUAL
    (45) assign_operators -> . PLUSEQUAL
    (46) assign_operators -> . MINUSEQUAL

    DOT             shift and go to state 61
    EQUALS          shift and go to state 63
    TIMESEQUAL      shift and go to state 64
    DIVEQUAL        shift and go to state 65
    MODULUSEQUAL    shift and go to state 66
    PLUSEQUAL       shift and go to state 67
    MINUSEQUAL      shift and go to state 68

    linkedlist_push                shift and go to state 57
    linkedlist_remove              shift and go to state 58
    hashmap_insert                 shift and go to state 59
    hashmap_remove                 shift and go to state 60
    assign_operators               shift and go to state 62

state 18

    (89) dvariable -> KW_LET . VARIABLE COLON data_type SEMI
    (90) array -> KW_LET . VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (93) array -> KW_LET . VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (94) array -> KW_LET . VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (95) array -> KW_LET . KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (96) array -> KW_LET . KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (162) declare_data_type -> KW_LET . VARIABLE COLON data_type SEMI
    (105) let_initialization -> KW_LET . VARIABLE EQUALS data
    (106) let_initialization -> KW_LET . VARIABLE COLON data_type EQUALS data
    (107) let_initialization -> KW_LET . KW_MUT VARIABLE EQUALS data
    (108) let_initialization -> KW_LET . KW_MUT VARIABLE COLON data_type EQUALS data
    (109) let_initialization -> KW_LET . VARIABLE EQUALS expression_var
    (110) let_initialization -> KW_LET . VARIABLE COLON data_type EQUALS expression_var
    (111) let_initialization -> KW_LET . KW_MUT VARIABLE EQUALS expression_var
    (112) let_initialization -> KW_LET . KW_MUT VARIABLE COLON data_type EQUALS expression_var
    (156) input_init -> KW_LET . VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN
    (132) hashmap -> KW_LET . VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (133) hashmap -> KW_LET . KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (139) linkedlist -> KW_LET . VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (140) linkedlist -> KW_LET . KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (141) linkedlist -> KW_LET . VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (142) linkedlist -> KW_LET . KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN

    VARIABLE        shift and go to state 69
    KW_MUT          shift and go to state 70


state 19

    (116) function -> KW_FN . VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE
    (150) function -> KW_FN . VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE

    VARIABLE        shift and go to state 71


state 20

    (117) control_str -> for_str .

    KW_PRINT        reduce using rule 117 (control_str -> for_str .)
    KW_LET          reduce using rule 117 (control_str -> for_str .)
    KW_FN           reduce using rule 117 (control_str -> for_str .)
    LBRACKET        reduce using rule 117 (control_str -> for_str .)
    VARIABLE        reduce using rule 117 (control_str -> for_str .)
    KW_FOR          reduce using rule 117 (control_str -> for_str .)
    KW_IF           reduce using rule 117 (control_str -> for_str .)
    KW_ELSE         reduce using rule 117 (control_str -> for_str .)
    KW_WHILE        reduce using rule 117 (control_str -> for_str .)
    KW_CONST        reduce using rule 117 (control_str -> for_str .)
    FLOAT_32        reduce using rule 117 (control_str -> for_str .)
    FLOAT_64        reduce using rule 117 (control_str -> for_str .)
    SIG_INT_8       reduce using rule 117 (control_str -> for_str .)
    SIG_INT_16      reduce using rule 117 (control_str -> for_str .)
    SIG_INT_32      reduce using rule 117 (control_str -> for_str .)
    SIG_INT_64      reduce using rule 117 (control_str -> for_str .)
    SIG_INT_128     reduce using rule 117 (control_str -> for_str .)
    UNSIG_INT_8     reduce using rule 117 (control_str -> for_str .)
    UNSIG_INT_16    reduce using rule 117 (control_str -> for_str .)
    UNSIG_INT_32    reduce using rule 117 (control_str -> for_str .)
    UNSIG_INT_64    reduce using rule 117 (control_str -> for_str .)
    UNSIG_INT_128   reduce using rule 117 (control_str -> for_str .)
    QUOTE           reduce using rule 117 (control_str -> for_str .)
    $end            reduce using rule 117 (control_str -> for_str .)
    RBRACE          reduce using rule 117 (control_str -> for_str .)
    KW_RETURN       reduce using rule 117 (control_str -> for_str .)


state 21

    (118) control_str -> for_str_tagged .

    KW_PRINT        reduce using rule 118 (control_str -> for_str_tagged .)
    KW_LET          reduce using rule 118 (control_str -> for_str_tagged .)
    KW_FN           reduce using rule 118 (control_str -> for_str_tagged .)
    LBRACKET        reduce using rule 118 (control_str -> for_str_tagged .)
    VARIABLE        reduce using rule 118 (control_str -> for_str_tagged .)
    KW_FOR          reduce using rule 118 (control_str -> for_str_tagged .)
    KW_IF           reduce using rule 118 (control_str -> for_str_tagged .)
    KW_ELSE         reduce using rule 118 (control_str -> for_str_tagged .)
    KW_WHILE        reduce using rule 118 (control_str -> for_str_tagged .)
    KW_CONST        reduce using rule 118 (control_str -> for_str_tagged .)
    FLOAT_32        reduce using rule 118 (control_str -> for_str_tagged .)
    FLOAT_64        reduce using rule 118 (control_str -> for_str_tagged .)
    SIG_INT_8       reduce using rule 118 (control_str -> for_str_tagged .)
    SIG_INT_16      reduce using rule 118 (control_str -> for_str_tagged .)
    SIG_INT_32      reduce using rule 118 (control_str -> for_str_tagged .)
    SIG_INT_64      reduce using rule 118 (control_str -> for_str_tagged .)
    SIG_INT_128     reduce using rule 118 (control_str -> for_str_tagged .)
    UNSIG_INT_8     reduce using rule 118 (control_str -> for_str_tagged .)
    UNSIG_INT_16    reduce using rule 118 (control_str -> for_str_tagged .)
    UNSIG_INT_32    reduce using rule 118 (control_str -> for_str_tagged .)
    UNSIG_INT_64    reduce using rule 118 (control_str -> for_str_tagged .)
    UNSIG_INT_128   reduce using rule 118 (control_str -> for_str_tagged .)
    QUOTE           reduce using rule 118 (control_str -> for_str_tagged .)
    $end            reduce using rule 118 (control_str -> for_str_tagged .)
    RBRACE          reduce using rule 118 (control_str -> for_str_tagged .)
    KW_RETURN       reduce using rule 118 (control_str -> for_str_tagged .)


state 22

    (119) control_str -> if .

    KW_PRINT        reduce using rule 119 (control_str -> if .)
    KW_LET          reduce using rule 119 (control_str -> if .)
    KW_FN           reduce using rule 119 (control_str -> if .)
    LBRACKET        reduce using rule 119 (control_str -> if .)
    VARIABLE        reduce using rule 119 (control_str -> if .)
    KW_FOR          reduce using rule 119 (control_str -> if .)
    KW_IF           reduce using rule 119 (control_str -> if .)
    KW_ELSE         reduce using rule 119 (control_str -> if .)
    KW_WHILE        reduce using rule 119 (control_str -> if .)
    KW_CONST        reduce using rule 119 (control_str -> if .)
    FLOAT_32        reduce using rule 119 (control_str -> if .)
    FLOAT_64        reduce using rule 119 (control_str -> if .)
    SIG_INT_8       reduce using rule 119 (control_str -> if .)
    SIG_INT_16      reduce using rule 119 (control_str -> if .)
    SIG_INT_32      reduce using rule 119 (control_str -> if .)
    SIG_INT_64      reduce using rule 119 (control_str -> if .)
    SIG_INT_128     reduce using rule 119 (control_str -> if .)
    UNSIG_INT_8     reduce using rule 119 (control_str -> if .)
    UNSIG_INT_16    reduce using rule 119 (control_str -> if .)
    UNSIG_INT_32    reduce using rule 119 (control_str -> if .)
    UNSIG_INT_64    reduce using rule 119 (control_str -> if .)
    UNSIG_INT_128   reduce using rule 119 (control_str -> if .)
    QUOTE           reduce using rule 119 (control_str -> if .)
    $end            reduce using rule 119 (control_str -> if .)
    RBRACE          reduce using rule 119 (control_str -> if .)
    KW_RETURN       reduce using rule 119 (control_str -> if .)


state 23

    (120) control_str -> else .

    KW_PRINT        reduce using rule 120 (control_str -> else .)
    KW_LET          reduce using rule 120 (control_str -> else .)
    KW_FN           reduce using rule 120 (control_str -> else .)
    LBRACKET        reduce using rule 120 (control_str -> else .)
    VARIABLE        reduce using rule 120 (control_str -> else .)
    KW_FOR          reduce using rule 120 (control_str -> else .)
    KW_IF           reduce using rule 120 (control_str -> else .)
    KW_ELSE         reduce using rule 120 (control_str -> else .)
    KW_WHILE        reduce using rule 120 (control_str -> else .)
    KW_CONST        reduce using rule 120 (control_str -> else .)
    FLOAT_32        reduce using rule 120 (control_str -> else .)
    FLOAT_64        reduce using rule 120 (control_str -> else .)
    SIG_INT_8       reduce using rule 120 (control_str -> else .)
    SIG_INT_16      reduce using rule 120 (control_str -> else .)
    SIG_INT_32      reduce using rule 120 (control_str -> else .)
    SIG_INT_64      reduce using rule 120 (control_str -> else .)
    SIG_INT_128     reduce using rule 120 (control_str -> else .)
    UNSIG_INT_8     reduce using rule 120 (control_str -> else .)
    UNSIG_INT_16    reduce using rule 120 (control_str -> else .)
    UNSIG_INT_32    reduce using rule 120 (control_str -> else .)
    UNSIG_INT_64    reduce using rule 120 (control_str -> else .)
    UNSIG_INT_128   reduce using rule 120 (control_str -> else .)
    QUOTE           reduce using rule 120 (control_str -> else .)
    $end            reduce using rule 120 (control_str -> else .)
    RBRACE          reduce using rule 120 (control_str -> else .)
    KW_RETURN       reduce using rule 120 (control_str -> else .)


state 24

    (121) control_str -> else_if .

    KW_PRINT        reduce using rule 121 (control_str -> else_if .)
    KW_LET          reduce using rule 121 (control_str -> else_if .)
    KW_FN           reduce using rule 121 (control_str -> else_if .)
    LBRACKET        reduce using rule 121 (control_str -> else_if .)
    VARIABLE        reduce using rule 121 (control_str -> else_if .)
    KW_FOR          reduce using rule 121 (control_str -> else_if .)
    KW_IF           reduce using rule 121 (control_str -> else_if .)
    KW_ELSE         reduce using rule 121 (control_str -> else_if .)
    KW_WHILE        reduce using rule 121 (control_str -> else_if .)
    KW_CONST        reduce using rule 121 (control_str -> else_if .)
    FLOAT_32        reduce using rule 121 (control_str -> else_if .)
    FLOAT_64        reduce using rule 121 (control_str -> else_if .)
    SIG_INT_8       reduce using rule 121 (control_str -> else_if .)
    SIG_INT_16      reduce using rule 121 (control_str -> else_if .)
    SIG_INT_32      reduce using rule 121 (control_str -> else_if .)
    SIG_INT_64      reduce using rule 121 (control_str -> else_if .)
    SIG_INT_128     reduce using rule 121 (control_str -> else_if .)
    UNSIG_INT_8     reduce using rule 121 (control_str -> else_if .)
    UNSIG_INT_16    reduce using rule 121 (control_str -> else_if .)
    UNSIG_INT_32    reduce using rule 121 (control_str -> else_if .)
    UNSIG_INT_64    reduce using rule 121 (control_str -> else_if .)
    UNSIG_INT_128   reduce using rule 121 (control_str -> else_if .)
    QUOTE           reduce using rule 121 (control_str -> else_if .)
    $end            reduce using rule 121 (control_str -> else_if .)
    RBRACE          reduce using rule 121 (control_str -> else_if .)
    KW_RETURN       reduce using rule 121 (control_str -> else_if .)


state 25

    (122) control_str -> while .

    KW_PRINT        reduce using rule 122 (control_str -> while .)
    KW_LET          reduce using rule 122 (control_str -> while .)
    KW_FN           reduce using rule 122 (control_str -> while .)
    LBRACKET        reduce using rule 122 (control_str -> while .)
    VARIABLE        reduce using rule 122 (control_str -> while .)
    KW_FOR          reduce using rule 122 (control_str -> while .)
    KW_IF           reduce using rule 122 (control_str -> while .)
    KW_ELSE         reduce using rule 122 (control_str -> while .)
    KW_WHILE        reduce using rule 122 (control_str -> while .)
    KW_CONST        reduce using rule 122 (control_str -> while .)
    FLOAT_32        reduce using rule 122 (control_str -> while .)
    FLOAT_64        reduce using rule 122 (control_str -> while .)
    SIG_INT_8       reduce using rule 122 (control_str -> while .)
    SIG_INT_16      reduce using rule 122 (control_str -> while .)
    SIG_INT_32      reduce using rule 122 (control_str -> while .)
    SIG_INT_64      reduce using rule 122 (control_str -> while .)
    SIG_INT_128     reduce using rule 122 (control_str -> while .)
    UNSIG_INT_8     reduce using rule 122 (control_str -> while .)
    UNSIG_INT_16    reduce using rule 122 (control_str -> while .)
    UNSIG_INT_32    reduce using rule 122 (control_str -> while .)
    UNSIG_INT_64    reduce using rule 122 (control_str -> while .)
    UNSIG_INT_128   reduce using rule 122 (control_str -> while .)
    QUOTE           reduce using rule 122 (control_str -> while .)
    $end            reduce using rule 122 (control_str -> while .)
    RBRACE          reduce using rule 122 (control_str -> while .)
    KW_RETURN       reduce using rule 122 (control_str -> while .)


state 26

    (91) array -> LBRACKET . mdata RBRACKET
    (92) array -> LBRACKET . data SEMI data RBRACKET
    (85) mdata -> . data
    (86) mdata -> . data COMMA mdata
    (66) data -> . CADENA
    (67) data -> . INTEGER
    (68) data -> . CHAR
    (69) data -> . FLOAT
    (70) data -> . KW_FALSE
    (71) data -> . KW_TRUE
    (72) data -> . tuple
    (100) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 74
    INTEGER         shift and go to state 75
    CHAR            shift and go to state 76
    FLOAT           shift and go to state 77
    KW_FALSE        shift and go to state 78
    KW_TRUE         shift and go to state 79
    LPAREN          shift and go to state 81

    mdata                          shift and go to state 72
    data                           shift and go to state 73
    tuple                          shift and go to state 80

state 27

    (101) initialization -> let_initialization . SEMI

    SEMI            shift and go to state 82


state 28

    (102) initialization -> const_initialization . SEMI

    SEMI            shift and go to state 83


state 29

    (103) initialization -> data_str . SEMI

    SEMI            shift and go to state 84


state 30

    (104) initialization -> input_init . SEMI

    SEMI            shift and go to state 85


state 31

    (59) casting -> flotante . KW_AS sigint
    (60) casting -> flotante . KW_AS unsigint
    (63) casting -> flotante . KW_AS flotante

    KW_AS           shift and go to state 86


state 32

    (61) casting -> sigint . KW_AS flotante

    KW_AS           shift and go to state 87


state 33

    (62) casting -> unsigint . KW_AS flotante

    KW_AS           shift and go to state 88


state 34

    (123) for_str -> KW_FOR . VARIABLE KW_IN range LBRACE main_rule RBRACE
    (124) for_str -> KW_FOR . VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE

    VARIABLE        shift and go to state 89


state 35

    (125) for_str_tagged -> label . COLON for_str

    COLON           shift and go to state 90


state 36

    (147) if -> KW_IF . conditional LBRACE main_rule RBRACE
    (83) conditional -> . VARIABLE comparator data
    (84) conditional -> . LPAREN lvariable RPAREN comparator data

    VARIABLE        shift and go to state 92
    LPAREN          shift and go to state 93

    conditional                    shift and go to state 91

state 37

    (148) else -> KW_ELSE . LBRACE main_rule RBRACE
    (149) else_if -> KW_ELSE . KW_IF conditional LBRACE main_rule RBRACE

    LBRACE          shift and go to state 94
    KW_IF           shift and go to state 95


state 38

    (99) while -> KW_WHILE . conditional LBRACE main_rule RBRACE
    (83) conditional -> . VARIABLE comparator data
    (84) conditional -> . LPAREN lvariable RPAREN comparator data

    VARIABLE        shift and go to state 92
    LPAREN          shift and go to state 93

    conditional                    shift and go to state 96

state 39

    (113) const_initialization -> KW_CONST . VARIABLE COLON data_type EQUALS data

    VARIABLE        shift and go to state 97


state 40

    (130) data_str -> hashmap .

    SEMI            reduce using rule 130 (data_str -> hashmap .)


state 41

    (131) data_str -> linkedlist .

    SEMI            reduce using rule 131 (data_str -> linkedlist .)


state 42

    (57) flotante -> FLOAT_32 .

    KW_AS           reduce using rule 57 (flotante -> FLOAT_32 .)
    KW_PRINT        reduce using rule 57 (flotante -> FLOAT_32 .)
    KW_LET          reduce using rule 57 (flotante -> FLOAT_32 .)
    KW_FN           reduce using rule 57 (flotante -> FLOAT_32 .)
    LBRACKET        reduce using rule 57 (flotante -> FLOAT_32 .)
    VARIABLE        reduce using rule 57 (flotante -> FLOAT_32 .)
    KW_FOR          reduce using rule 57 (flotante -> FLOAT_32 .)
    KW_IF           reduce using rule 57 (flotante -> FLOAT_32 .)
    KW_ELSE         reduce using rule 57 (flotante -> FLOAT_32 .)
    KW_WHILE        reduce using rule 57 (flotante -> FLOAT_32 .)
    KW_CONST        reduce using rule 57 (flotante -> FLOAT_32 .)
    FLOAT_32        reduce using rule 57 (flotante -> FLOAT_32 .)
    FLOAT_64        reduce using rule 57 (flotante -> FLOAT_32 .)
    SIG_INT_8       reduce using rule 57 (flotante -> FLOAT_32 .)
    SIG_INT_16      reduce using rule 57 (flotante -> FLOAT_32 .)
    SIG_INT_32      reduce using rule 57 (flotante -> FLOAT_32 .)
    SIG_INT_64      reduce using rule 57 (flotante -> FLOAT_32 .)
    SIG_INT_128     reduce using rule 57 (flotante -> FLOAT_32 .)
    UNSIG_INT_8     reduce using rule 57 (flotante -> FLOAT_32 .)
    UNSIG_INT_16    reduce using rule 57 (flotante -> FLOAT_32 .)
    UNSIG_INT_32    reduce using rule 57 (flotante -> FLOAT_32 .)
    UNSIG_INT_64    reduce using rule 57 (flotante -> FLOAT_32 .)
    UNSIG_INT_128   reduce using rule 57 (flotante -> FLOAT_32 .)
    QUOTE           reduce using rule 57 (flotante -> FLOAT_32 .)
    $end            reduce using rule 57 (flotante -> FLOAT_32 .)
    RBRACE          reduce using rule 57 (flotante -> FLOAT_32 .)
    KW_RETURN       reduce using rule 57 (flotante -> FLOAT_32 .)


state 43

    (58) flotante -> FLOAT_64 .

    KW_AS           reduce using rule 58 (flotante -> FLOAT_64 .)
    KW_PRINT        reduce using rule 58 (flotante -> FLOAT_64 .)
    KW_LET          reduce using rule 58 (flotante -> FLOAT_64 .)
    KW_FN           reduce using rule 58 (flotante -> FLOAT_64 .)
    LBRACKET        reduce using rule 58 (flotante -> FLOAT_64 .)
    VARIABLE        reduce using rule 58 (flotante -> FLOAT_64 .)
    KW_FOR          reduce using rule 58 (flotante -> FLOAT_64 .)
    KW_IF           reduce using rule 58 (flotante -> FLOAT_64 .)
    KW_ELSE         reduce using rule 58 (flotante -> FLOAT_64 .)
    KW_WHILE        reduce using rule 58 (flotante -> FLOAT_64 .)
    KW_CONST        reduce using rule 58 (flotante -> FLOAT_64 .)
    FLOAT_32        reduce using rule 58 (flotante -> FLOAT_64 .)
    FLOAT_64        reduce using rule 58 (flotante -> FLOAT_64 .)
    SIG_INT_8       reduce using rule 58 (flotante -> FLOAT_64 .)
    SIG_INT_16      reduce using rule 58 (flotante -> FLOAT_64 .)
    SIG_INT_32      reduce using rule 58 (flotante -> FLOAT_64 .)
    SIG_INT_64      reduce using rule 58 (flotante -> FLOAT_64 .)
    SIG_INT_128     reduce using rule 58 (flotante -> FLOAT_64 .)
    UNSIG_INT_8     reduce using rule 58 (flotante -> FLOAT_64 .)
    UNSIG_INT_16    reduce using rule 58 (flotante -> FLOAT_64 .)
    UNSIG_INT_32    reduce using rule 58 (flotante -> FLOAT_64 .)
    UNSIG_INT_64    reduce using rule 58 (flotante -> FLOAT_64 .)
    UNSIG_INT_128   reduce using rule 58 (flotante -> FLOAT_64 .)
    QUOTE           reduce using rule 58 (flotante -> FLOAT_64 .)
    $end            reduce using rule 58 (flotante -> FLOAT_64 .)
    RBRACE          reduce using rule 58 (flotante -> FLOAT_64 .)
    KW_RETURN       reduce using rule 58 (flotante -> FLOAT_64 .)


state 44

    (47) sigint -> SIG_INT_8 .

    KW_AS           reduce using rule 47 (sigint -> SIG_INT_8 .)
    KW_PRINT        reduce using rule 47 (sigint -> SIG_INT_8 .)
    KW_LET          reduce using rule 47 (sigint -> SIG_INT_8 .)
    KW_FN           reduce using rule 47 (sigint -> SIG_INT_8 .)
    LBRACKET        reduce using rule 47 (sigint -> SIG_INT_8 .)
    VARIABLE        reduce using rule 47 (sigint -> SIG_INT_8 .)
    KW_FOR          reduce using rule 47 (sigint -> SIG_INT_8 .)
    KW_IF           reduce using rule 47 (sigint -> SIG_INT_8 .)
    KW_ELSE         reduce using rule 47 (sigint -> SIG_INT_8 .)
    KW_WHILE        reduce using rule 47 (sigint -> SIG_INT_8 .)
    KW_CONST        reduce using rule 47 (sigint -> SIG_INT_8 .)
    FLOAT_32        reduce using rule 47 (sigint -> SIG_INT_8 .)
    FLOAT_64        reduce using rule 47 (sigint -> SIG_INT_8 .)
    SIG_INT_8       reduce using rule 47 (sigint -> SIG_INT_8 .)
    SIG_INT_16      reduce using rule 47 (sigint -> SIG_INT_8 .)
    SIG_INT_32      reduce using rule 47 (sigint -> SIG_INT_8 .)
    SIG_INT_64      reduce using rule 47 (sigint -> SIG_INT_8 .)
    SIG_INT_128     reduce using rule 47 (sigint -> SIG_INT_8 .)
    UNSIG_INT_8     reduce using rule 47 (sigint -> SIG_INT_8 .)
    UNSIG_INT_16    reduce using rule 47 (sigint -> SIG_INT_8 .)
    UNSIG_INT_32    reduce using rule 47 (sigint -> SIG_INT_8 .)
    UNSIG_INT_64    reduce using rule 47 (sigint -> SIG_INT_8 .)
    UNSIG_INT_128   reduce using rule 47 (sigint -> SIG_INT_8 .)
    QUOTE           reduce using rule 47 (sigint -> SIG_INT_8 .)
    $end            reduce using rule 47 (sigint -> SIG_INT_8 .)
    RBRACE          reduce using rule 47 (sigint -> SIG_INT_8 .)
    KW_RETURN       reduce using rule 47 (sigint -> SIG_INT_8 .)


state 45

    (48) sigint -> SIG_INT_16 .

    KW_AS           reduce using rule 48 (sigint -> SIG_INT_16 .)
    KW_PRINT        reduce using rule 48 (sigint -> SIG_INT_16 .)
    KW_LET          reduce using rule 48 (sigint -> SIG_INT_16 .)
    KW_FN           reduce using rule 48 (sigint -> SIG_INT_16 .)
    LBRACKET        reduce using rule 48 (sigint -> SIG_INT_16 .)
    VARIABLE        reduce using rule 48 (sigint -> SIG_INT_16 .)
    KW_FOR          reduce using rule 48 (sigint -> SIG_INT_16 .)
    KW_IF           reduce using rule 48 (sigint -> SIG_INT_16 .)
    KW_ELSE         reduce using rule 48 (sigint -> SIG_INT_16 .)
    KW_WHILE        reduce using rule 48 (sigint -> SIG_INT_16 .)
    KW_CONST        reduce using rule 48 (sigint -> SIG_INT_16 .)
    FLOAT_32        reduce using rule 48 (sigint -> SIG_INT_16 .)
    FLOAT_64        reduce using rule 48 (sigint -> SIG_INT_16 .)
    SIG_INT_8       reduce using rule 48 (sigint -> SIG_INT_16 .)
    SIG_INT_16      reduce using rule 48 (sigint -> SIG_INT_16 .)
    SIG_INT_32      reduce using rule 48 (sigint -> SIG_INT_16 .)
    SIG_INT_64      reduce using rule 48 (sigint -> SIG_INT_16 .)
    SIG_INT_128     reduce using rule 48 (sigint -> SIG_INT_16 .)
    UNSIG_INT_8     reduce using rule 48 (sigint -> SIG_INT_16 .)
    UNSIG_INT_16    reduce using rule 48 (sigint -> SIG_INT_16 .)
    UNSIG_INT_32    reduce using rule 48 (sigint -> SIG_INT_16 .)
    UNSIG_INT_64    reduce using rule 48 (sigint -> SIG_INT_16 .)
    UNSIG_INT_128   reduce using rule 48 (sigint -> SIG_INT_16 .)
    QUOTE           reduce using rule 48 (sigint -> SIG_INT_16 .)
    $end            reduce using rule 48 (sigint -> SIG_INT_16 .)
    RBRACE          reduce using rule 48 (sigint -> SIG_INT_16 .)
    KW_RETURN       reduce using rule 48 (sigint -> SIG_INT_16 .)


state 46

    (49) sigint -> SIG_INT_32 .

    KW_AS           reduce using rule 49 (sigint -> SIG_INT_32 .)
    KW_PRINT        reduce using rule 49 (sigint -> SIG_INT_32 .)
    KW_LET          reduce using rule 49 (sigint -> SIG_INT_32 .)
    KW_FN           reduce using rule 49 (sigint -> SIG_INT_32 .)
    LBRACKET        reduce using rule 49 (sigint -> SIG_INT_32 .)
    VARIABLE        reduce using rule 49 (sigint -> SIG_INT_32 .)
    KW_FOR          reduce using rule 49 (sigint -> SIG_INT_32 .)
    KW_IF           reduce using rule 49 (sigint -> SIG_INT_32 .)
    KW_ELSE         reduce using rule 49 (sigint -> SIG_INT_32 .)
    KW_WHILE        reduce using rule 49 (sigint -> SIG_INT_32 .)
    KW_CONST        reduce using rule 49 (sigint -> SIG_INT_32 .)
    FLOAT_32        reduce using rule 49 (sigint -> SIG_INT_32 .)
    FLOAT_64        reduce using rule 49 (sigint -> SIG_INT_32 .)
    SIG_INT_8       reduce using rule 49 (sigint -> SIG_INT_32 .)
    SIG_INT_16      reduce using rule 49 (sigint -> SIG_INT_32 .)
    SIG_INT_32      reduce using rule 49 (sigint -> SIG_INT_32 .)
    SIG_INT_64      reduce using rule 49 (sigint -> SIG_INT_32 .)
    SIG_INT_128     reduce using rule 49 (sigint -> SIG_INT_32 .)
    UNSIG_INT_8     reduce using rule 49 (sigint -> SIG_INT_32 .)
    UNSIG_INT_16    reduce using rule 49 (sigint -> SIG_INT_32 .)
    UNSIG_INT_32    reduce using rule 49 (sigint -> SIG_INT_32 .)
    UNSIG_INT_64    reduce using rule 49 (sigint -> SIG_INT_32 .)
    UNSIG_INT_128   reduce using rule 49 (sigint -> SIG_INT_32 .)
    QUOTE           reduce using rule 49 (sigint -> SIG_INT_32 .)
    $end            reduce using rule 49 (sigint -> SIG_INT_32 .)
    RBRACE          reduce using rule 49 (sigint -> SIG_INT_32 .)
    KW_RETURN       reduce using rule 49 (sigint -> SIG_INT_32 .)


state 47

    (50) sigint -> SIG_INT_64 .

    KW_AS           reduce using rule 50 (sigint -> SIG_INT_64 .)
    KW_PRINT        reduce using rule 50 (sigint -> SIG_INT_64 .)
    KW_LET          reduce using rule 50 (sigint -> SIG_INT_64 .)
    KW_FN           reduce using rule 50 (sigint -> SIG_INT_64 .)
    LBRACKET        reduce using rule 50 (sigint -> SIG_INT_64 .)
    VARIABLE        reduce using rule 50 (sigint -> SIG_INT_64 .)
    KW_FOR          reduce using rule 50 (sigint -> SIG_INT_64 .)
    KW_IF           reduce using rule 50 (sigint -> SIG_INT_64 .)
    KW_ELSE         reduce using rule 50 (sigint -> SIG_INT_64 .)
    KW_WHILE        reduce using rule 50 (sigint -> SIG_INT_64 .)
    KW_CONST        reduce using rule 50 (sigint -> SIG_INT_64 .)
    FLOAT_32        reduce using rule 50 (sigint -> SIG_INT_64 .)
    FLOAT_64        reduce using rule 50 (sigint -> SIG_INT_64 .)
    SIG_INT_8       reduce using rule 50 (sigint -> SIG_INT_64 .)
    SIG_INT_16      reduce using rule 50 (sigint -> SIG_INT_64 .)
    SIG_INT_32      reduce using rule 50 (sigint -> SIG_INT_64 .)
    SIG_INT_64      reduce using rule 50 (sigint -> SIG_INT_64 .)
    SIG_INT_128     reduce using rule 50 (sigint -> SIG_INT_64 .)
    UNSIG_INT_8     reduce using rule 50 (sigint -> SIG_INT_64 .)
    UNSIG_INT_16    reduce using rule 50 (sigint -> SIG_INT_64 .)
    UNSIG_INT_32    reduce using rule 50 (sigint -> SIG_INT_64 .)
    UNSIG_INT_64    reduce using rule 50 (sigint -> SIG_INT_64 .)
    UNSIG_INT_128   reduce using rule 50 (sigint -> SIG_INT_64 .)
    QUOTE           reduce using rule 50 (sigint -> SIG_INT_64 .)
    $end            reduce using rule 50 (sigint -> SIG_INT_64 .)
    RBRACE          reduce using rule 50 (sigint -> SIG_INT_64 .)
    KW_RETURN       reduce using rule 50 (sigint -> SIG_INT_64 .)


state 48

    (51) sigint -> SIG_INT_128 .

    KW_AS           reduce using rule 51 (sigint -> SIG_INT_128 .)
    KW_PRINT        reduce using rule 51 (sigint -> SIG_INT_128 .)
    KW_LET          reduce using rule 51 (sigint -> SIG_INT_128 .)
    KW_FN           reduce using rule 51 (sigint -> SIG_INT_128 .)
    LBRACKET        reduce using rule 51 (sigint -> SIG_INT_128 .)
    VARIABLE        reduce using rule 51 (sigint -> SIG_INT_128 .)
    KW_FOR          reduce using rule 51 (sigint -> SIG_INT_128 .)
    KW_IF           reduce using rule 51 (sigint -> SIG_INT_128 .)
    KW_ELSE         reduce using rule 51 (sigint -> SIG_INT_128 .)
    KW_WHILE        reduce using rule 51 (sigint -> SIG_INT_128 .)
    KW_CONST        reduce using rule 51 (sigint -> SIG_INT_128 .)
    FLOAT_32        reduce using rule 51 (sigint -> SIG_INT_128 .)
    FLOAT_64        reduce using rule 51 (sigint -> SIG_INT_128 .)
    SIG_INT_8       reduce using rule 51 (sigint -> SIG_INT_128 .)
    SIG_INT_16      reduce using rule 51 (sigint -> SIG_INT_128 .)
    SIG_INT_32      reduce using rule 51 (sigint -> SIG_INT_128 .)
    SIG_INT_64      reduce using rule 51 (sigint -> SIG_INT_128 .)
    SIG_INT_128     reduce using rule 51 (sigint -> SIG_INT_128 .)
    UNSIG_INT_8     reduce using rule 51 (sigint -> SIG_INT_128 .)
    UNSIG_INT_16    reduce using rule 51 (sigint -> SIG_INT_128 .)
    UNSIG_INT_32    reduce using rule 51 (sigint -> SIG_INT_128 .)
    UNSIG_INT_64    reduce using rule 51 (sigint -> SIG_INT_128 .)
    UNSIG_INT_128   reduce using rule 51 (sigint -> SIG_INT_128 .)
    QUOTE           reduce using rule 51 (sigint -> SIG_INT_128 .)
    $end            reduce using rule 51 (sigint -> SIG_INT_128 .)
    RBRACE          reduce using rule 51 (sigint -> SIG_INT_128 .)
    KW_RETURN       reduce using rule 51 (sigint -> SIG_INT_128 .)


state 49

    (52) unsigint -> UNSIG_INT_8 .

    KW_AS           reduce using rule 52 (unsigint -> UNSIG_INT_8 .)
    KW_PRINT        reduce using rule 52 (unsigint -> UNSIG_INT_8 .)
    KW_LET          reduce using rule 52 (unsigint -> UNSIG_INT_8 .)
    KW_FN           reduce using rule 52 (unsigint -> UNSIG_INT_8 .)
    LBRACKET        reduce using rule 52 (unsigint -> UNSIG_INT_8 .)
    VARIABLE        reduce using rule 52 (unsigint -> UNSIG_INT_8 .)
    KW_FOR          reduce using rule 52 (unsigint -> UNSIG_INT_8 .)
    KW_IF           reduce using rule 52 (unsigint -> UNSIG_INT_8 .)
    KW_ELSE         reduce using rule 52 (unsigint -> UNSIG_INT_8 .)
    KW_WHILE        reduce using rule 52 (unsigint -> UNSIG_INT_8 .)
    KW_CONST        reduce using rule 52 (unsigint -> UNSIG_INT_8 .)
    FLOAT_32        reduce using rule 52 (unsigint -> UNSIG_INT_8 .)
    FLOAT_64        reduce using rule 52 (unsigint -> UNSIG_INT_8 .)
    SIG_INT_8       reduce using rule 52 (unsigint -> UNSIG_INT_8 .)
    SIG_INT_16      reduce using rule 52 (unsigint -> UNSIG_INT_8 .)
    SIG_INT_32      reduce using rule 52 (unsigint -> UNSIG_INT_8 .)
    SIG_INT_64      reduce using rule 52 (unsigint -> UNSIG_INT_8 .)
    SIG_INT_128     reduce using rule 52 (unsigint -> UNSIG_INT_8 .)
    UNSIG_INT_8     reduce using rule 52 (unsigint -> UNSIG_INT_8 .)
    UNSIG_INT_16    reduce using rule 52 (unsigint -> UNSIG_INT_8 .)
    UNSIG_INT_32    reduce using rule 52 (unsigint -> UNSIG_INT_8 .)
    UNSIG_INT_64    reduce using rule 52 (unsigint -> UNSIG_INT_8 .)
    UNSIG_INT_128   reduce using rule 52 (unsigint -> UNSIG_INT_8 .)
    QUOTE           reduce using rule 52 (unsigint -> UNSIG_INT_8 .)
    $end            reduce using rule 52 (unsigint -> UNSIG_INT_8 .)
    RBRACE          reduce using rule 52 (unsigint -> UNSIG_INT_8 .)
    KW_RETURN       reduce using rule 52 (unsigint -> UNSIG_INT_8 .)


state 50

    (53) unsigint -> UNSIG_INT_16 .

    KW_AS           reduce using rule 53 (unsigint -> UNSIG_INT_16 .)
    KW_PRINT        reduce using rule 53 (unsigint -> UNSIG_INT_16 .)
    KW_LET          reduce using rule 53 (unsigint -> UNSIG_INT_16 .)
    KW_FN           reduce using rule 53 (unsigint -> UNSIG_INT_16 .)
    LBRACKET        reduce using rule 53 (unsigint -> UNSIG_INT_16 .)
    VARIABLE        reduce using rule 53 (unsigint -> UNSIG_INT_16 .)
    KW_FOR          reduce using rule 53 (unsigint -> UNSIG_INT_16 .)
    KW_IF           reduce using rule 53 (unsigint -> UNSIG_INT_16 .)
    KW_ELSE         reduce using rule 53 (unsigint -> UNSIG_INT_16 .)
    KW_WHILE        reduce using rule 53 (unsigint -> UNSIG_INT_16 .)
    KW_CONST        reduce using rule 53 (unsigint -> UNSIG_INT_16 .)
    FLOAT_32        reduce using rule 53 (unsigint -> UNSIG_INT_16 .)
    FLOAT_64        reduce using rule 53 (unsigint -> UNSIG_INT_16 .)
    SIG_INT_8       reduce using rule 53 (unsigint -> UNSIG_INT_16 .)
    SIG_INT_16      reduce using rule 53 (unsigint -> UNSIG_INT_16 .)
    SIG_INT_32      reduce using rule 53 (unsigint -> UNSIG_INT_16 .)
    SIG_INT_64      reduce using rule 53 (unsigint -> UNSIG_INT_16 .)
    SIG_INT_128     reduce using rule 53 (unsigint -> UNSIG_INT_16 .)
    UNSIG_INT_8     reduce using rule 53 (unsigint -> UNSIG_INT_16 .)
    UNSIG_INT_16    reduce using rule 53 (unsigint -> UNSIG_INT_16 .)
    UNSIG_INT_32    reduce using rule 53 (unsigint -> UNSIG_INT_16 .)
    UNSIG_INT_64    reduce using rule 53 (unsigint -> UNSIG_INT_16 .)
    UNSIG_INT_128   reduce using rule 53 (unsigint -> UNSIG_INT_16 .)
    QUOTE           reduce using rule 53 (unsigint -> UNSIG_INT_16 .)
    $end            reduce using rule 53 (unsigint -> UNSIG_INT_16 .)
    RBRACE          reduce using rule 53 (unsigint -> UNSIG_INT_16 .)
    KW_RETURN       reduce using rule 53 (unsigint -> UNSIG_INT_16 .)


state 51

    (54) unsigint -> UNSIG_INT_32 .

    KW_AS           reduce using rule 54 (unsigint -> UNSIG_INT_32 .)
    KW_PRINT        reduce using rule 54 (unsigint -> UNSIG_INT_32 .)
    KW_LET          reduce using rule 54 (unsigint -> UNSIG_INT_32 .)
    KW_FN           reduce using rule 54 (unsigint -> UNSIG_INT_32 .)
    LBRACKET        reduce using rule 54 (unsigint -> UNSIG_INT_32 .)
    VARIABLE        reduce using rule 54 (unsigint -> UNSIG_INT_32 .)
    KW_FOR          reduce using rule 54 (unsigint -> UNSIG_INT_32 .)
    KW_IF           reduce using rule 54 (unsigint -> UNSIG_INT_32 .)
    KW_ELSE         reduce using rule 54 (unsigint -> UNSIG_INT_32 .)
    KW_WHILE        reduce using rule 54 (unsigint -> UNSIG_INT_32 .)
    KW_CONST        reduce using rule 54 (unsigint -> UNSIG_INT_32 .)
    FLOAT_32        reduce using rule 54 (unsigint -> UNSIG_INT_32 .)
    FLOAT_64        reduce using rule 54 (unsigint -> UNSIG_INT_32 .)
    SIG_INT_8       reduce using rule 54 (unsigint -> UNSIG_INT_32 .)
    SIG_INT_16      reduce using rule 54 (unsigint -> UNSIG_INT_32 .)
    SIG_INT_32      reduce using rule 54 (unsigint -> UNSIG_INT_32 .)
    SIG_INT_64      reduce using rule 54 (unsigint -> UNSIG_INT_32 .)
    SIG_INT_128     reduce using rule 54 (unsigint -> UNSIG_INT_32 .)
    UNSIG_INT_8     reduce using rule 54 (unsigint -> UNSIG_INT_32 .)
    UNSIG_INT_16    reduce using rule 54 (unsigint -> UNSIG_INT_32 .)
    UNSIG_INT_32    reduce using rule 54 (unsigint -> UNSIG_INT_32 .)
    UNSIG_INT_64    reduce using rule 54 (unsigint -> UNSIG_INT_32 .)
    UNSIG_INT_128   reduce using rule 54 (unsigint -> UNSIG_INT_32 .)
    QUOTE           reduce using rule 54 (unsigint -> UNSIG_INT_32 .)
    $end            reduce using rule 54 (unsigint -> UNSIG_INT_32 .)
    RBRACE          reduce using rule 54 (unsigint -> UNSIG_INT_32 .)
    KW_RETURN       reduce using rule 54 (unsigint -> UNSIG_INT_32 .)


state 52

    (55) unsigint -> UNSIG_INT_64 .

    KW_AS           reduce using rule 55 (unsigint -> UNSIG_INT_64 .)
    KW_PRINT        reduce using rule 55 (unsigint -> UNSIG_INT_64 .)
    KW_LET          reduce using rule 55 (unsigint -> UNSIG_INT_64 .)
    KW_FN           reduce using rule 55 (unsigint -> UNSIG_INT_64 .)
    LBRACKET        reduce using rule 55 (unsigint -> UNSIG_INT_64 .)
    VARIABLE        reduce using rule 55 (unsigint -> UNSIG_INT_64 .)
    KW_FOR          reduce using rule 55 (unsigint -> UNSIG_INT_64 .)
    KW_IF           reduce using rule 55 (unsigint -> UNSIG_INT_64 .)
    KW_ELSE         reduce using rule 55 (unsigint -> UNSIG_INT_64 .)
    KW_WHILE        reduce using rule 55 (unsigint -> UNSIG_INT_64 .)
    KW_CONST        reduce using rule 55 (unsigint -> UNSIG_INT_64 .)
    FLOAT_32        reduce using rule 55 (unsigint -> UNSIG_INT_64 .)
    FLOAT_64        reduce using rule 55 (unsigint -> UNSIG_INT_64 .)
    SIG_INT_8       reduce using rule 55 (unsigint -> UNSIG_INT_64 .)
    SIG_INT_16      reduce using rule 55 (unsigint -> UNSIG_INT_64 .)
    SIG_INT_32      reduce using rule 55 (unsigint -> UNSIG_INT_64 .)
    SIG_INT_64      reduce using rule 55 (unsigint -> UNSIG_INT_64 .)
    SIG_INT_128     reduce using rule 55 (unsigint -> UNSIG_INT_64 .)
    UNSIG_INT_8     reduce using rule 55 (unsigint -> UNSIG_INT_64 .)
    UNSIG_INT_16    reduce using rule 55 (unsigint -> UNSIG_INT_64 .)
    UNSIG_INT_32    reduce using rule 55 (unsigint -> UNSIG_INT_64 .)
    UNSIG_INT_64    reduce using rule 55 (unsigint -> UNSIG_INT_64 .)
    UNSIG_INT_128   reduce using rule 55 (unsigint -> UNSIG_INT_64 .)
    QUOTE           reduce using rule 55 (unsigint -> UNSIG_INT_64 .)
    $end            reduce using rule 55 (unsigint -> UNSIG_INT_64 .)
    RBRACE          reduce using rule 55 (unsigint -> UNSIG_INT_64 .)
    KW_RETURN       reduce using rule 55 (unsigint -> UNSIG_INT_64 .)


state 53

    (56) unsigint -> UNSIG_INT_128 .

    KW_AS           reduce using rule 56 (unsigint -> UNSIG_INT_128 .)
    KW_PRINT        reduce using rule 56 (unsigint -> UNSIG_INT_128 .)
    KW_LET          reduce using rule 56 (unsigint -> UNSIG_INT_128 .)
    KW_FN           reduce using rule 56 (unsigint -> UNSIG_INT_128 .)
    LBRACKET        reduce using rule 56 (unsigint -> UNSIG_INT_128 .)
    VARIABLE        reduce using rule 56 (unsigint -> UNSIG_INT_128 .)
    KW_FOR          reduce using rule 56 (unsigint -> UNSIG_INT_128 .)
    KW_IF           reduce using rule 56 (unsigint -> UNSIG_INT_128 .)
    KW_ELSE         reduce using rule 56 (unsigint -> UNSIG_INT_128 .)
    KW_WHILE        reduce using rule 56 (unsigint -> UNSIG_INT_128 .)
    KW_CONST        reduce using rule 56 (unsigint -> UNSIG_INT_128 .)
    FLOAT_32        reduce using rule 56 (unsigint -> UNSIG_INT_128 .)
    FLOAT_64        reduce using rule 56 (unsigint -> UNSIG_INT_128 .)
    SIG_INT_8       reduce using rule 56 (unsigint -> UNSIG_INT_128 .)
    SIG_INT_16      reduce using rule 56 (unsigint -> UNSIG_INT_128 .)
    SIG_INT_32      reduce using rule 56 (unsigint -> UNSIG_INT_128 .)
    SIG_INT_64      reduce using rule 56 (unsigint -> UNSIG_INT_128 .)
    SIG_INT_128     reduce using rule 56 (unsigint -> UNSIG_INT_128 .)
    UNSIG_INT_8     reduce using rule 56 (unsigint -> UNSIG_INT_128 .)
    UNSIG_INT_16    reduce using rule 56 (unsigint -> UNSIG_INT_128 .)
    UNSIG_INT_32    reduce using rule 56 (unsigint -> UNSIG_INT_128 .)
    UNSIG_INT_64    reduce using rule 56 (unsigint -> UNSIG_INT_128 .)
    UNSIG_INT_128   reduce using rule 56 (unsigint -> UNSIG_INT_128 .)
    QUOTE           reduce using rule 56 (unsigint -> UNSIG_INT_128 .)
    $end            reduce using rule 56 (unsigint -> UNSIG_INT_128 .)
    RBRACE          reduce using rule 56 (unsigint -> UNSIG_INT_128 .)
    KW_RETURN       reduce using rule 56 (unsigint -> UNSIG_INT_128 .)


state 54

    (128) label -> QUOTE . VARIABLE

    VARIABLE        shift and go to state 98


state 55

    (2) main_rule -> father_rule main_rule .

    $end            reduce using rule 2 (main_rule -> father_rule main_rule .)
    RBRACE          reduce using rule 2 (main_rule -> father_rule main_rule .)
    KW_RETURN       reduce using rule 2 (main_rule -> father_rule main_rule .)


state 56

    (87) print -> KW_PRINT LNOT . LPAREN CADENA RPAREN SEMI
    (88) print -> KW_PRINT LNOT . LPAREN CADENA COMMA VARIABLE RPAREN SEMI

    LPAREN          shift and go to state 99


state 57

    (143) linkedlist_methods -> VARIABLE linkedlist_push .

    KW_PRINT        reduce using rule 143 (linkedlist_methods -> VARIABLE linkedlist_push .)
    KW_LET          reduce using rule 143 (linkedlist_methods -> VARIABLE linkedlist_push .)
    KW_FN           reduce using rule 143 (linkedlist_methods -> VARIABLE linkedlist_push .)
    LBRACKET        reduce using rule 143 (linkedlist_methods -> VARIABLE linkedlist_push .)
    VARIABLE        reduce using rule 143 (linkedlist_methods -> VARIABLE linkedlist_push .)
    KW_FOR          reduce using rule 143 (linkedlist_methods -> VARIABLE linkedlist_push .)
    KW_IF           reduce using rule 143 (linkedlist_methods -> VARIABLE linkedlist_push .)
    KW_ELSE         reduce using rule 143 (linkedlist_methods -> VARIABLE linkedlist_push .)
    KW_WHILE        reduce using rule 143 (linkedlist_methods -> VARIABLE linkedlist_push .)
    KW_CONST        reduce using rule 143 (linkedlist_methods -> VARIABLE linkedlist_push .)
    FLOAT_32        reduce using rule 143 (linkedlist_methods -> VARIABLE linkedlist_push .)
    FLOAT_64        reduce using rule 143 (linkedlist_methods -> VARIABLE linkedlist_push .)
    SIG_INT_8       reduce using rule 143 (linkedlist_methods -> VARIABLE linkedlist_push .)
    SIG_INT_16      reduce using rule 143 (linkedlist_methods -> VARIABLE linkedlist_push .)
    SIG_INT_32      reduce using rule 143 (linkedlist_methods -> VARIABLE linkedlist_push .)
    SIG_INT_64      reduce using rule 143 (linkedlist_methods -> VARIABLE linkedlist_push .)
    SIG_INT_128     reduce using rule 143 (linkedlist_methods -> VARIABLE linkedlist_push .)
    UNSIG_INT_8     reduce using rule 143 (linkedlist_methods -> VARIABLE linkedlist_push .)
    UNSIG_INT_16    reduce using rule 143 (linkedlist_methods -> VARIABLE linkedlist_push .)
    UNSIG_INT_32    reduce using rule 143 (linkedlist_methods -> VARIABLE linkedlist_push .)
    UNSIG_INT_64    reduce using rule 143 (linkedlist_methods -> VARIABLE linkedlist_push .)
    UNSIG_INT_128   reduce using rule 143 (linkedlist_methods -> VARIABLE linkedlist_push .)
    QUOTE           reduce using rule 143 (linkedlist_methods -> VARIABLE linkedlist_push .)
    $end            reduce using rule 143 (linkedlist_methods -> VARIABLE linkedlist_push .)
    RBRACE          reduce using rule 143 (linkedlist_methods -> VARIABLE linkedlist_push .)
    KW_RETURN       reduce using rule 143 (linkedlist_methods -> VARIABLE linkedlist_push .)


state 58

    (144) linkedlist_methods -> VARIABLE linkedlist_remove .

    KW_PRINT        reduce using rule 144 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    KW_LET          reduce using rule 144 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    KW_FN           reduce using rule 144 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    LBRACKET        reduce using rule 144 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    VARIABLE        reduce using rule 144 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    KW_FOR          reduce using rule 144 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    KW_IF           reduce using rule 144 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    KW_ELSE         reduce using rule 144 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    KW_WHILE        reduce using rule 144 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    KW_CONST        reduce using rule 144 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    FLOAT_32        reduce using rule 144 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    FLOAT_64        reduce using rule 144 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    SIG_INT_8       reduce using rule 144 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    SIG_INT_16      reduce using rule 144 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    SIG_INT_32      reduce using rule 144 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    SIG_INT_64      reduce using rule 144 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    SIG_INT_128     reduce using rule 144 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    UNSIG_INT_8     reduce using rule 144 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    UNSIG_INT_16    reduce using rule 144 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    UNSIG_INT_32    reduce using rule 144 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    UNSIG_INT_64    reduce using rule 144 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    UNSIG_INT_128   reduce using rule 144 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    QUOTE           reduce using rule 144 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    $end            reduce using rule 144 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    RBRACE          reduce using rule 144 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    KW_RETURN       reduce using rule 144 (linkedlist_methods -> VARIABLE linkedlist_remove .)


state 59

    (134) hashmap_methods -> VARIABLE hashmap_insert .

    KW_PRINT        reduce using rule 134 (hashmap_methods -> VARIABLE hashmap_insert .)
    KW_LET          reduce using rule 134 (hashmap_methods -> VARIABLE hashmap_insert .)
    KW_FN           reduce using rule 134 (hashmap_methods -> VARIABLE hashmap_insert .)
    LBRACKET        reduce using rule 134 (hashmap_methods -> VARIABLE hashmap_insert .)
    VARIABLE        reduce using rule 134 (hashmap_methods -> VARIABLE hashmap_insert .)
    KW_FOR          reduce using rule 134 (hashmap_methods -> VARIABLE hashmap_insert .)
    KW_IF           reduce using rule 134 (hashmap_methods -> VARIABLE hashmap_insert .)
    KW_ELSE         reduce using rule 134 (hashmap_methods -> VARIABLE hashmap_insert .)
    KW_WHILE        reduce using rule 134 (hashmap_methods -> VARIABLE hashmap_insert .)
    KW_CONST        reduce using rule 134 (hashmap_methods -> VARIABLE hashmap_insert .)
    FLOAT_32        reduce using rule 134 (hashmap_methods -> VARIABLE hashmap_insert .)
    FLOAT_64        reduce using rule 134 (hashmap_methods -> VARIABLE hashmap_insert .)
    SIG_INT_8       reduce using rule 134 (hashmap_methods -> VARIABLE hashmap_insert .)
    SIG_INT_16      reduce using rule 134 (hashmap_methods -> VARIABLE hashmap_insert .)
    SIG_INT_32      reduce using rule 134 (hashmap_methods -> VARIABLE hashmap_insert .)
    SIG_INT_64      reduce using rule 134 (hashmap_methods -> VARIABLE hashmap_insert .)
    SIG_INT_128     reduce using rule 134 (hashmap_methods -> VARIABLE hashmap_insert .)
    UNSIG_INT_8     reduce using rule 134 (hashmap_methods -> VARIABLE hashmap_insert .)
    UNSIG_INT_16    reduce using rule 134 (hashmap_methods -> VARIABLE hashmap_insert .)
    UNSIG_INT_32    reduce using rule 134 (hashmap_methods -> VARIABLE hashmap_insert .)
    UNSIG_INT_64    reduce using rule 134 (hashmap_methods -> VARIABLE hashmap_insert .)
    UNSIG_INT_128   reduce using rule 134 (hashmap_methods -> VARIABLE hashmap_insert .)
    QUOTE           reduce using rule 134 (hashmap_methods -> VARIABLE hashmap_insert .)
    $end            reduce using rule 134 (hashmap_methods -> VARIABLE hashmap_insert .)
    RBRACE          reduce using rule 134 (hashmap_methods -> VARIABLE hashmap_insert .)
    KW_RETURN       reduce using rule 134 (hashmap_methods -> VARIABLE hashmap_insert .)


state 60

    (135) hashmap_methods -> VARIABLE hashmap_remove .

    KW_PRINT        reduce using rule 135 (hashmap_methods -> VARIABLE hashmap_remove .)
    KW_LET          reduce using rule 135 (hashmap_methods -> VARIABLE hashmap_remove .)
    KW_FN           reduce using rule 135 (hashmap_methods -> VARIABLE hashmap_remove .)
    LBRACKET        reduce using rule 135 (hashmap_methods -> VARIABLE hashmap_remove .)
    VARIABLE        reduce using rule 135 (hashmap_methods -> VARIABLE hashmap_remove .)
    KW_FOR          reduce using rule 135 (hashmap_methods -> VARIABLE hashmap_remove .)
    KW_IF           reduce using rule 135 (hashmap_methods -> VARIABLE hashmap_remove .)
    KW_ELSE         reduce using rule 135 (hashmap_methods -> VARIABLE hashmap_remove .)
    KW_WHILE        reduce using rule 135 (hashmap_methods -> VARIABLE hashmap_remove .)
    KW_CONST        reduce using rule 135 (hashmap_methods -> VARIABLE hashmap_remove .)
    FLOAT_32        reduce using rule 135 (hashmap_methods -> VARIABLE hashmap_remove .)
    FLOAT_64        reduce using rule 135 (hashmap_methods -> VARIABLE hashmap_remove .)
    SIG_INT_8       reduce using rule 135 (hashmap_methods -> VARIABLE hashmap_remove .)
    SIG_INT_16      reduce using rule 135 (hashmap_methods -> VARIABLE hashmap_remove .)
    SIG_INT_32      reduce using rule 135 (hashmap_methods -> VARIABLE hashmap_remove .)
    SIG_INT_64      reduce using rule 135 (hashmap_methods -> VARIABLE hashmap_remove .)
    SIG_INT_128     reduce using rule 135 (hashmap_methods -> VARIABLE hashmap_remove .)
    UNSIG_INT_8     reduce using rule 135 (hashmap_methods -> VARIABLE hashmap_remove .)
    UNSIG_INT_16    reduce using rule 135 (hashmap_methods -> VARIABLE hashmap_remove .)
    UNSIG_INT_32    reduce using rule 135 (hashmap_methods -> VARIABLE hashmap_remove .)
    UNSIG_INT_64    reduce using rule 135 (hashmap_methods -> VARIABLE hashmap_remove .)
    UNSIG_INT_128   reduce using rule 135 (hashmap_methods -> VARIABLE hashmap_remove .)
    QUOTE           reduce using rule 135 (hashmap_methods -> VARIABLE hashmap_remove .)
    $end            reduce using rule 135 (hashmap_methods -> VARIABLE hashmap_remove .)
    RBRACE          reduce using rule 135 (hashmap_methods -> VARIABLE hashmap_remove .)
    KW_RETURN       reduce using rule 135 (hashmap_methods -> VARIABLE hashmap_remove .)


state 61

    (157) input -> VARIABLE DOT . KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI
    (145) linkedlist_push -> DOT . KW_PUSH_BACK LPAREN data RPAREN SEMI
    (146) linkedlist_remove -> DOT . KW_REMOVE LPAREN INTEGER RPAREN SEMI
    (136) hashmap_insert -> DOT . KW_INSERT LPAREN data COMMA data RPAREN SEMI
    (137) hashmap_remove -> DOT . KW_REMOVE LPAREN AND data RPAREN SEMI

    KW_READ_LINE    shift and go to state 100
    KW_PUSH_BACK    shift and go to state 101
    KW_REMOVE       shift and go to state 102
    KW_INSERT       shift and go to state 103


state 62

    (158) assignation -> VARIABLE assign_operators . number SEMI
    (159) assignation -> VARIABLE assign_operators . expression SEMI
    (160) assignation -> VARIABLE assign_operators . number
    (161) assignation -> VARIABLE assign_operators . expression
    (23) number -> . INTEGER
    (24) number -> . FLOAT
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . number
    (21) expression -> . division
    (22) expression -> . variable
    (64) division -> . INTEGER DIVIDE INTEGER
    (65) division -> . FLOAT DIVIDE FLOAT
    (25) variable -> . VARIABLE

    INTEGER         shift and go to state 107
    FLOAT           shift and go to state 108
    LPAREN          shift and go to state 109
    VARIABLE        shift and go to state 104

    number                         shift and go to state 105
    expression                     shift and go to state 106
    division                       shift and go to state 110
    variable                       shift and go to state 111

state 63

    (41) assign_operators -> EQUALS .

    INTEGER         reduce using rule 41 (assign_operators -> EQUALS .)
    FLOAT           reduce using rule 41 (assign_operators -> EQUALS .)
    LPAREN          reduce using rule 41 (assign_operators -> EQUALS .)
    VARIABLE        reduce using rule 41 (assign_operators -> EQUALS .)


state 64

    (42) assign_operators -> TIMESEQUAL .

    INTEGER         reduce using rule 42 (assign_operators -> TIMESEQUAL .)
    FLOAT           reduce using rule 42 (assign_operators -> TIMESEQUAL .)
    LPAREN          reduce using rule 42 (assign_operators -> TIMESEQUAL .)
    VARIABLE        reduce using rule 42 (assign_operators -> TIMESEQUAL .)


state 65

    (43) assign_operators -> DIVEQUAL .

    INTEGER         reduce using rule 43 (assign_operators -> DIVEQUAL .)
    FLOAT           reduce using rule 43 (assign_operators -> DIVEQUAL .)
    LPAREN          reduce using rule 43 (assign_operators -> DIVEQUAL .)
    VARIABLE        reduce using rule 43 (assign_operators -> DIVEQUAL .)


state 66

    (44) assign_operators -> MODULUSEQUAL .

    INTEGER         reduce using rule 44 (assign_operators -> MODULUSEQUAL .)
    FLOAT           reduce using rule 44 (assign_operators -> MODULUSEQUAL .)
    LPAREN          reduce using rule 44 (assign_operators -> MODULUSEQUAL .)
    VARIABLE        reduce using rule 44 (assign_operators -> MODULUSEQUAL .)


state 67

    (45) assign_operators -> PLUSEQUAL .

    INTEGER         reduce using rule 45 (assign_operators -> PLUSEQUAL .)
    FLOAT           reduce using rule 45 (assign_operators -> PLUSEQUAL .)
    LPAREN          reduce using rule 45 (assign_operators -> PLUSEQUAL .)
    VARIABLE        reduce using rule 45 (assign_operators -> PLUSEQUAL .)


state 68

    (46) assign_operators -> MINUSEQUAL .

    INTEGER         reduce using rule 46 (assign_operators -> MINUSEQUAL .)
    FLOAT           reduce using rule 46 (assign_operators -> MINUSEQUAL .)
    LPAREN          reduce using rule 46 (assign_operators -> MINUSEQUAL .)
    VARIABLE        reduce using rule 46 (assign_operators -> MINUSEQUAL .)


state 69

    (89) dvariable -> KW_LET VARIABLE . COLON data_type SEMI
    (90) array -> KW_LET VARIABLE . EQUALS LBRACKET mdata RBRACKET SEMI
    (93) array -> KW_LET VARIABLE . COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (94) array -> KW_LET VARIABLE . COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (162) declare_data_type -> KW_LET VARIABLE . COLON data_type SEMI
    (105) let_initialization -> KW_LET VARIABLE . EQUALS data
    (106) let_initialization -> KW_LET VARIABLE . COLON data_type EQUALS data
    (109) let_initialization -> KW_LET VARIABLE . EQUALS expression_var
    (110) let_initialization -> KW_LET VARIABLE . COLON data_type EQUALS expression_var
    (156) input_init -> KW_LET VARIABLE . EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN
    (132) hashmap -> KW_LET VARIABLE . EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (139) linkedlist -> KW_LET VARIABLE . COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (141) linkedlist -> KW_LET VARIABLE . EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN

    COLON           shift and go to state 112
    EQUALS          shift and go to state 113


state 70

    (95) array -> KW_LET KW_MUT . VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (96) array -> KW_LET KW_MUT . VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (107) let_initialization -> KW_LET KW_MUT . VARIABLE EQUALS data
    (108) let_initialization -> KW_LET KW_MUT . VARIABLE COLON data_type EQUALS data
    (111) let_initialization -> KW_LET KW_MUT . VARIABLE EQUALS expression_var
    (112) let_initialization -> KW_LET KW_MUT . VARIABLE COLON data_type EQUALS expression_var
    (133) hashmap -> KW_LET KW_MUT . VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (140) linkedlist -> KW_LET KW_MUT . VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (142) linkedlist -> KW_LET KW_MUT . VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN

    VARIABLE        shift and go to state 114


state 71

    (116) function -> KW_FN VARIABLE . LPAREN arguments RPAREN LBRACE main_rule RBRACE
    (150) function -> KW_FN VARIABLE . LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE

    LPAREN          shift and go to state 115


state 72

    (91) array -> LBRACKET mdata . RBRACKET

    RBRACKET        shift and go to state 116


state 73

    (92) array -> LBRACKET data . SEMI data RBRACKET
    (85) mdata -> data .
    (86) mdata -> data . COMMA mdata

    SEMI            shift and go to state 117
    RBRACKET        reduce using rule 85 (mdata -> data .)
    COMMA           shift and go to state 118


state 74

    (66) data -> CADENA .

    SEMI            reduce using rule 66 (data -> CADENA .)
    COMMA           reduce using rule 66 (data -> CADENA .)
    RBRACKET        reduce using rule 66 (data -> CADENA .)
    RPAREN          reduce using rule 66 (data -> CADENA .)
    LBRACE          reduce using rule 66 (data -> CADENA .)


state 75

    (67) data -> INTEGER .

    SEMI            reduce using rule 67 (data -> INTEGER .)
    COMMA           reduce using rule 67 (data -> INTEGER .)
    RBRACKET        reduce using rule 67 (data -> INTEGER .)
    RPAREN          reduce using rule 67 (data -> INTEGER .)
    LBRACE          reduce using rule 67 (data -> INTEGER .)


state 76

    (68) data -> CHAR .

    SEMI            reduce using rule 68 (data -> CHAR .)
    COMMA           reduce using rule 68 (data -> CHAR .)
    RBRACKET        reduce using rule 68 (data -> CHAR .)
    RPAREN          reduce using rule 68 (data -> CHAR .)
    LBRACE          reduce using rule 68 (data -> CHAR .)


state 77

    (69) data -> FLOAT .

    SEMI            reduce using rule 69 (data -> FLOAT .)
    COMMA           reduce using rule 69 (data -> FLOAT .)
    RBRACKET        reduce using rule 69 (data -> FLOAT .)
    RPAREN          reduce using rule 69 (data -> FLOAT .)
    LBRACE          reduce using rule 69 (data -> FLOAT .)


state 78

    (70) data -> KW_FALSE .

    SEMI            reduce using rule 70 (data -> KW_FALSE .)
    COMMA           reduce using rule 70 (data -> KW_FALSE .)
    RBRACKET        reduce using rule 70 (data -> KW_FALSE .)
    RPAREN          reduce using rule 70 (data -> KW_FALSE .)
    LBRACE          reduce using rule 70 (data -> KW_FALSE .)


state 79

    (71) data -> KW_TRUE .

    SEMI            reduce using rule 71 (data -> KW_TRUE .)
    COMMA           reduce using rule 71 (data -> KW_TRUE .)
    RBRACKET        reduce using rule 71 (data -> KW_TRUE .)
    RPAREN          reduce using rule 71 (data -> KW_TRUE .)
    LBRACE          reduce using rule 71 (data -> KW_TRUE .)


state 80

    (72) data -> tuple .

    SEMI            reduce using rule 72 (data -> tuple .)
    COMMA           reduce using rule 72 (data -> tuple .)
    RBRACKET        reduce using rule 72 (data -> tuple .)
    RPAREN          reduce using rule 72 (data -> tuple .)
    LBRACE          reduce using rule 72 (data -> tuple .)


state 81

    (100) tuple -> LPAREN . mdata RPAREN
    (85) mdata -> . data
    (86) mdata -> . data COMMA mdata
    (66) data -> . CADENA
    (67) data -> . INTEGER
    (68) data -> . CHAR
    (69) data -> . FLOAT
    (70) data -> . KW_FALSE
    (71) data -> . KW_TRUE
    (72) data -> . tuple
    (100) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 74
    INTEGER         shift and go to state 75
    CHAR            shift and go to state 76
    FLOAT           shift and go to state 77
    KW_FALSE        shift and go to state 78
    KW_TRUE         shift and go to state 79
    LPAREN          shift and go to state 81

    mdata                          shift and go to state 119
    data                           shift and go to state 120
    tuple                          shift and go to state 80

state 82

    (101) initialization -> let_initialization SEMI .

    KW_PRINT        reduce using rule 101 (initialization -> let_initialization SEMI .)
    KW_LET          reduce using rule 101 (initialization -> let_initialization SEMI .)
    KW_FN           reduce using rule 101 (initialization -> let_initialization SEMI .)
    LBRACKET        reduce using rule 101 (initialization -> let_initialization SEMI .)
    VARIABLE        reduce using rule 101 (initialization -> let_initialization SEMI .)
    KW_FOR          reduce using rule 101 (initialization -> let_initialization SEMI .)
    KW_IF           reduce using rule 101 (initialization -> let_initialization SEMI .)
    KW_ELSE         reduce using rule 101 (initialization -> let_initialization SEMI .)
    KW_WHILE        reduce using rule 101 (initialization -> let_initialization SEMI .)
    KW_CONST        reduce using rule 101 (initialization -> let_initialization SEMI .)
    FLOAT_32        reduce using rule 101 (initialization -> let_initialization SEMI .)
    FLOAT_64        reduce using rule 101 (initialization -> let_initialization SEMI .)
    SIG_INT_8       reduce using rule 101 (initialization -> let_initialization SEMI .)
    SIG_INT_16      reduce using rule 101 (initialization -> let_initialization SEMI .)
    SIG_INT_32      reduce using rule 101 (initialization -> let_initialization SEMI .)
    SIG_INT_64      reduce using rule 101 (initialization -> let_initialization SEMI .)
    SIG_INT_128     reduce using rule 101 (initialization -> let_initialization SEMI .)
    UNSIG_INT_8     reduce using rule 101 (initialization -> let_initialization SEMI .)
    UNSIG_INT_16    reduce using rule 101 (initialization -> let_initialization SEMI .)
    UNSIG_INT_32    reduce using rule 101 (initialization -> let_initialization SEMI .)
    UNSIG_INT_64    reduce using rule 101 (initialization -> let_initialization SEMI .)
    UNSIG_INT_128   reduce using rule 101 (initialization -> let_initialization SEMI .)
    QUOTE           reduce using rule 101 (initialization -> let_initialization SEMI .)
    $end            reduce using rule 101 (initialization -> let_initialization SEMI .)
    RBRACE          reduce using rule 101 (initialization -> let_initialization SEMI .)
    KW_RETURN       reduce using rule 101 (initialization -> let_initialization SEMI .)


state 83

    (102) initialization -> const_initialization SEMI .

    KW_PRINT        reduce using rule 102 (initialization -> const_initialization SEMI .)
    KW_LET          reduce using rule 102 (initialization -> const_initialization SEMI .)
    KW_FN           reduce using rule 102 (initialization -> const_initialization SEMI .)
    LBRACKET        reduce using rule 102 (initialization -> const_initialization SEMI .)
    VARIABLE        reduce using rule 102 (initialization -> const_initialization SEMI .)
    KW_FOR          reduce using rule 102 (initialization -> const_initialization SEMI .)
    KW_IF           reduce using rule 102 (initialization -> const_initialization SEMI .)
    KW_ELSE         reduce using rule 102 (initialization -> const_initialization SEMI .)
    KW_WHILE        reduce using rule 102 (initialization -> const_initialization SEMI .)
    KW_CONST        reduce using rule 102 (initialization -> const_initialization SEMI .)
    FLOAT_32        reduce using rule 102 (initialization -> const_initialization SEMI .)
    FLOAT_64        reduce using rule 102 (initialization -> const_initialization SEMI .)
    SIG_INT_8       reduce using rule 102 (initialization -> const_initialization SEMI .)
    SIG_INT_16      reduce using rule 102 (initialization -> const_initialization SEMI .)
    SIG_INT_32      reduce using rule 102 (initialization -> const_initialization SEMI .)
    SIG_INT_64      reduce using rule 102 (initialization -> const_initialization SEMI .)
    SIG_INT_128     reduce using rule 102 (initialization -> const_initialization SEMI .)
    UNSIG_INT_8     reduce using rule 102 (initialization -> const_initialization SEMI .)
    UNSIG_INT_16    reduce using rule 102 (initialization -> const_initialization SEMI .)
    UNSIG_INT_32    reduce using rule 102 (initialization -> const_initialization SEMI .)
    UNSIG_INT_64    reduce using rule 102 (initialization -> const_initialization SEMI .)
    UNSIG_INT_128   reduce using rule 102 (initialization -> const_initialization SEMI .)
    QUOTE           reduce using rule 102 (initialization -> const_initialization SEMI .)
    $end            reduce using rule 102 (initialization -> const_initialization SEMI .)
    RBRACE          reduce using rule 102 (initialization -> const_initialization SEMI .)
    KW_RETURN       reduce using rule 102 (initialization -> const_initialization SEMI .)


state 84

    (103) initialization -> data_str SEMI .

    KW_PRINT        reduce using rule 103 (initialization -> data_str SEMI .)
    KW_LET          reduce using rule 103 (initialization -> data_str SEMI .)
    KW_FN           reduce using rule 103 (initialization -> data_str SEMI .)
    LBRACKET        reduce using rule 103 (initialization -> data_str SEMI .)
    VARIABLE        reduce using rule 103 (initialization -> data_str SEMI .)
    KW_FOR          reduce using rule 103 (initialization -> data_str SEMI .)
    KW_IF           reduce using rule 103 (initialization -> data_str SEMI .)
    KW_ELSE         reduce using rule 103 (initialization -> data_str SEMI .)
    KW_WHILE        reduce using rule 103 (initialization -> data_str SEMI .)
    KW_CONST        reduce using rule 103 (initialization -> data_str SEMI .)
    FLOAT_32        reduce using rule 103 (initialization -> data_str SEMI .)
    FLOAT_64        reduce using rule 103 (initialization -> data_str SEMI .)
    SIG_INT_8       reduce using rule 103 (initialization -> data_str SEMI .)
    SIG_INT_16      reduce using rule 103 (initialization -> data_str SEMI .)
    SIG_INT_32      reduce using rule 103 (initialization -> data_str SEMI .)
    SIG_INT_64      reduce using rule 103 (initialization -> data_str SEMI .)
    SIG_INT_128     reduce using rule 103 (initialization -> data_str SEMI .)
    UNSIG_INT_8     reduce using rule 103 (initialization -> data_str SEMI .)
    UNSIG_INT_16    reduce using rule 103 (initialization -> data_str SEMI .)
    UNSIG_INT_32    reduce using rule 103 (initialization -> data_str SEMI .)
    UNSIG_INT_64    reduce using rule 103 (initialization -> data_str SEMI .)
    UNSIG_INT_128   reduce using rule 103 (initialization -> data_str SEMI .)
    QUOTE           reduce using rule 103 (initialization -> data_str SEMI .)
    $end            reduce using rule 103 (initialization -> data_str SEMI .)
    RBRACE          reduce using rule 103 (initialization -> data_str SEMI .)
    KW_RETURN       reduce using rule 103 (initialization -> data_str SEMI .)


state 85

    (104) initialization -> input_init SEMI .

    KW_PRINT        reduce using rule 104 (initialization -> input_init SEMI .)
    KW_LET          reduce using rule 104 (initialization -> input_init SEMI .)
    KW_FN           reduce using rule 104 (initialization -> input_init SEMI .)
    LBRACKET        reduce using rule 104 (initialization -> input_init SEMI .)
    VARIABLE        reduce using rule 104 (initialization -> input_init SEMI .)
    KW_FOR          reduce using rule 104 (initialization -> input_init SEMI .)
    KW_IF           reduce using rule 104 (initialization -> input_init SEMI .)
    KW_ELSE         reduce using rule 104 (initialization -> input_init SEMI .)
    KW_WHILE        reduce using rule 104 (initialization -> input_init SEMI .)
    KW_CONST        reduce using rule 104 (initialization -> input_init SEMI .)
    FLOAT_32        reduce using rule 104 (initialization -> input_init SEMI .)
    FLOAT_64        reduce using rule 104 (initialization -> input_init SEMI .)
    SIG_INT_8       reduce using rule 104 (initialization -> input_init SEMI .)
    SIG_INT_16      reduce using rule 104 (initialization -> input_init SEMI .)
    SIG_INT_32      reduce using rule 104 (initialization -> input_init SEMI .)
    SIG_INT_64      reduce using rule 104 (initialization -> input_init SEMI .)
    SIG_INT_128     reduce using rule 104 (initialization -> input_init SEMI .)
    UNSIG_INT_8     reduce using rule 104 (initialization -> input_init SEMI .)
    UNSIG_INT_16    reduce using rule 104 (initialization -> input_init SEMI .)
    UNSIG_INT_32    reduce using rule 104 (initialization -> input_init SEMI .)
    UNSIG_INT_64    reduce using rule 104 (initialization -> input_init SEMI .)
    UNSIG_INT_128   reduce using rule 104 (initialization -> input_init SEMI .)
    QUOTE           reduce using rule 104 (initialization -> input_init SEMI .)
    $end            reduce using rule 104 (initialization -> input_init SEMI .)
    RBRACE          reduce using rule 104 (initialization -> input_init SEMI .)
    KW_RETURN       reduce using rule 104 (initialization -> input_init SEMI .)


state 86

    (59) casting -> flotante KW_AS . sigint
    (60) casting -> flotante KW_AS . unsigint
    (63) casting -> flotante KW_AS . flotante
    (47) sigint -> . SIG_INT_8
    (48) sigint -> . SIG_INT_16
    (49) sigint -> . SIG_INT_32
    (50) sigint -> . SIG_INT_64
    (51) sigint -> . SIG_INT_128
    (52) unsigint -> . UNSIG_INT_8
    (53) unsigint -> . UNSIG_INT_16
    (54) unsigint -> . UNSIG_INT_32
    (55) unsigint -> . UNSIG_INT_64
    (56) unsigint -> . UNSIG_INT_128
    (57) flotante -> . FLOAT_32
    (58) flotante -> . FLOAT_64

    SIG_INT_8       shift and go to state 44
    SIG_INT_16      shift and go to state 45
    SIG_INT_32      shift and go to state 46
    SIG_INT_64      shift and go to state 47
    SIG_INT_128     shift and go to state 48
    UNSIG_INT_8     shift and go to state 49
    UNSIG_INT_16    shift and go to state 50
    UNSIG_INT_32    shift and go to state 51
    UNSIG_INT_64    shift and go to state 52
    UNSIG_INT_128   shift and go to state 53
    FLOAT_32        shift and go to state 42
    FLOAT_64        shift and go to state 43

    flotante                       shift and go to state 121
    sigint                         shift and go to state 122
    unsigint                       shift and go to state 123

state 87

    (61) casting -> sigint KW_AS . flotante
    (57) flotante -> . FLOAT_32
    (58) flotante -> . FLOAT_64

    FLOAT_32        shift and go to state 42
    FLOAT_64        shift and go to state 43

    flotante                       shift and go to state 124

state 88

    (62) casting -> unsigint KW_AS . flotante
    (57) flotante -> . FLOAT_32
    (58) flotante -> . FLOAT_64

    FLOAT_32        shift and go to state 42
    FLOAT_64        shift and go to state 43

    flotante                       shift and go to state 125

state 89

    (123) for_str -> KW_FOR VARIABLE . KW_IN range LBRACE main_rule RBRACE
    (124) for_str -> KW_FOR VARIABLE . KW_IN VARIABLE LBRACE main_rule RBRACE

    KW_IN           shift and go to state 126


state 90

    (125) for_str_tagged -> label COLON . for_str
    (123) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE
    (124) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE

    KW_FOR          shift and go to state 34

    for_str                        shift and go to state 127

state 91

    (147) if -> KW_IF conditional . LBRACE main_rule RBRACE

    LBRACE          shift and go to state 128


state 92

    (83) conditional -> VARIABLE . comparator data
    (73) comparator -> .
    (74) comparator -> . EQ
    (75) comparator -> . NE
    (76) comparator -> . GE
    (77) comparator -> . LE
    (78) comparator -> . GT
    (79) comparator -> . LT

    CADENA          reduce using rule 73 (comparator -> .)
    INTEGER         reduce using rule 73 (comparator -> .)
    CHAR            reduce using rule 73 (comparator -> .)
    FLOAT           reduce using rule 73 (comparator -> .)
    KW_FALSE        reduce using rule 73 (comparator -> .)
    KW_TRUE         reduce using rule 73 (comparator -> .)
    LPAREN          reduce using rule 73 (comparator -> .)
    EQ              shift and go to state 130
    NE              shift and go to state 131
    GE              shift and go to state 132
    LE              shift and go to state 133
    GT              shift and go to state 134
    LT              shift and go to state 135

    comparator                     shift and go to state 129

state 93

    (84) conditional -> LPAREN . lvariable RPAREN comparator data
    (82) lvariable -> . VARIABLE logic VARIABLE

    VARIABLE        shift and go to state 137

    lvariable                      shift and go to state 136

state 94

    (148) else -> KW_ELSE LBRACE . main_rule RBRACE
    (1) main_rule -> . father_rule
    (2) main_rule -> . father_rule main_rule
    (3) father_rule -> . print
    (4) father_rule -> . dvariable
    (5) father_rule -> . function
    (6) father_rule -> . control_str
    (7) father_rule -> . void
    (8) father_rule -> . array
    (9) father_rule -> . linkedlist_methods
    (10) father_rule -> . hashmap_methods
    (11) father_rule -> . initialization
    (12) father_rule -> . input
    (13) father_rule -> . assignation
    (14) father_rule -> . declare_data_type
    (15) father_rule -> . casting
    (87) print -> . KW_PRINT LNOT LPAREN CADENA RPAREN SEMI
    (88) print -> . KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI
    (89) dvariable -> . KW_LET VARIABLE COLON data_type SEMI
    (116) function -> . KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE
    (150) function -> . KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE
    (117) control_str -> . for_str
    (118) control_str -> . for_str_tagged
    (119) control_str -> . if
    (120) control_str -> . else
    (121) control_str -> . else_if
    (122) control_str -> . while
    (138) void -> .
    (90) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (91) array -> . LBRACKET mdata RBRACKET
    (92) array -> . LBRACKET data SEMI data RBRACKET
    (93) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (94) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (95) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (96) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (143) linkedlist_methods -> . VARIABLE linkedlist_push
    (144) linkedlist_methods -> . VARIABLE linkedlist_remove
    (134) hashmap_methods -> . VARIABLE hashmap_insert
    (135) hashmap_methods -> . VARIABLE hashmap_remove
    (101) initialization -> . let_initialization SEMI
    (102) initialization -> . const_initialization SEMI
    (103) initialization -> . data_str SEMI
    (104) initialization -> . input_init SEMI
    (157) input -> . VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI
    (158) assignation -> . VARIABLE assign_operators number SEMI
    (159) assignation -> . VARIABLE assign_operators expression SEMI
    (160) assignation -> . VARIABLE assign_operators number
    (161) assignation -> . VARIABLE assign_operators expression
    (162) declare_data_type -> . KW_LET VARIABLE COLON data_type SEMI
    (59) casting -> . flotante KW_AS sigint
    (60) casting -> . flotante KW_AS unsigint
    (61) casting -> . sigint KW_AS flotante
    (62) casting -> . unsigint KW_AS flotante
    (63) casting -> . flotante KW_AS flotante
    (123) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE
    (124) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE
    (125) for_str_tagged -> . label COLON for_str
    (147) if -> . KW_IF conditional LBRACE main_rule RBRACE
    (148) else -> . KW_ELSE LBRACE main_rule RBRACE
    (149) else_if -> . KW_ELSE KW_IF conditional LBRACE main_rule RBRACE
    (99) while -> . KW_WHILE conditional LBRACE main_rule RBRACE
    (105) let_initialization -> . KW_LET VARIABLE EQUALS data
    (106) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS data
    (107) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS data
    (108) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS data
    (109) let_initialization -> . KW_LET VARIABLE EQUALS expression_var
    (110) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS expression_var
    (111) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS expression_var
    (112) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var
    (113) const_initialization -> . KW_CONST VARIABLE COLON data_type EQUALS data
    (129) data_str -> . array
    (130) data_str -> . hashmap
    (131) data_str -> . linkedlist
    (156) input_init -> . KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN
    (57) flotante -> . FLOAT_32
    (58) flotante -> . FLOAT_64
    (47) sigint -> . SIG_INT_8
    (48) sigint -> . SIG_INT_16
    (49) sigint -> . SIG_INT_32
    (50) sigint -> . SIG_INT_64
    (51) sigint -> . SIG_INT_128
    (52) unsigint -> . UNSIG_INT_8
    (53) unsigint -> . UNSIG_INT_16
    (54) unsigint -> . UNSIG_INT_32
    (55) unsigint -> . UNSIG_INT_64
    (56) unsigint -> . UNSIG_INT_128
    (128) label -> . QUOTE VARIABLE
    (132) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (133) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (139) linkedlist -> . KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (140) linkedlist -> . KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (141) linkedlist -> . KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (142) linkedlist -> . KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN

  ! shift/reduce conflict for KW_PRINT resolved as shift
  ! shift/reduce conflict for KW_LET resolved as shift
  ! shift/reduce conflict for KW_FN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for KW_FOR resolved as shift
  ! shift/reduce conflict for KW_IF resolved as shift
  ! shift/reduce conflict for KW_ELSE resolved as shift
  ! shift/reduce conflict for KW_WHILE resolved as shift
  ! shift/reduce conflict for KW_CONST resolved as shift
  ! shift/reduce conflict for FLOAT_32 resolved as shift
  ! shift/reduce conflict for FLOAT_64 resolved as shift
  ! shift/reduce conflict for SIG_INT_8 resolved as shift
  ! shift/reduce conflict for SIG_INT_16 resolved as shift
  ! shift/reduce conflict for SIG_INT_32 resolved as shift
  ! shift/reduce conflict for SIG_INT_64 resolved as shift
  ! shift/reduce conflict for SIG_INT_128 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_8 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_16 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_32 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_64 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_128 resolved as shift
  ! shift/reduce conflict for QUOTE resolved as shift
    KW_PRINT        shift and go to state 16
    KW_LET          shift and go to state 18
    KW_FN           shift and go to state 19
    RBRACE          reduce using rule 138 (void -> .)
    LBRACKET        shift and go to state 26
    VARIABLE        shift and go to state 17
    KW_FOR          shift and go to state 34
    KW_IF           shift and go to state 36
    KW_ELSE         shift and go to state 37
    KW_WHILE        shift and go to state 38
    KW_CONST        shift and go to state 39
    FLOAT_32        shift and go to state 42
    FLOAT_64        shift and go to state 43
    SIG_INT_8       shift and go to state 44
    SIG_INT_16      shift and go to state 45
    SIG_INT_32      shift and go to state 46
    SIG_INT_64      shift and go to state 47
    SIG_INT_128     shift and go to state 48
    UNSIG_INT_8     shift and go to state 49
    UNSIG_INT_16    shift and go to state 50
    UNSIG_INT_32    shift and go to state 51
    UNSIG_INT_64    shift and go to state 52
    UNSIG_INT_128   shift and go to state 53
    QUOTE           shift and go to state 54

  ! KW_PRINT        [ reduce using rule 138 (void -> .) ]
  ! KW_LET          [ reduce using rule 138 (void -> .) ]
  ! KW_FN           [ reduce using rule 138 (void -> .) ]
  ! LBRACKET        [ reduce using rule 138 (void -> .) ]
  ! VARIABLE        [ reduce using rule 138 (void -> .) ]
  ! KW_FOR          [ reduce using rule 138 (void -> .) ]
  ! KW_IF           [ reduce using rule 138 (void -> .) ]
  ! KW_ELSE         [ reduce using rule 138 (void -> .) ]
  ! KW_WHILE        [ reduce using rule 138 (void -> .) ]
  ! KW_CONST        [ reduce using rule 138 (void -> .) ]
  ! FLOAT_32        [ reduce using rule 138 (void -> .) ]
  ! FLOAT_64        [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_8       [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_16      [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_32      [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_64      [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_128     [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_8     [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_16    [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_32    [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_64    [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_128   [ reduce using rule 138 (void -> .) ]
  ! QUOTE           [ reduce using rule 138 (void -> .) ]

    main_rule                      shift and go to state 138
    father_rule                    shift and go to state 2
    print                          shift and go to state 3
    dvariable                      shift and go to state 4
    function                       shift and go to state 5
    control_str                    shift and go to state 6
    void                           shift and go to state 7
    array                          shift and go to state 8
    linkedlist_methods             shift and go to state 9
    hashmap_methods                shift and go to state 10
    initialization                 shift and go to state 11
    input                          shift and go to state 12
    assignation                    shift and go to state 13
    declare_data_type              shift and go to state 14
    casting                        shift and go to state 15
    for_str                        shift and go to state 20
    for_str_tagged                 shift and go to state 21
    if                             shift and go to state 22
    else                           shift and go to state 23
    else_if                        shift and go to state 24
    while                          shift and go to state 25
    let_initialization             shift and go to state 27
    const_initialization           shift and go to state 28
    data_str                       shift and go to state 29
    input_init                     shift and go to state 30
    flotante                       shift and go to state 31
    sigint                         shift and go to state 32
    unsigint                       shift and go to state 33
    label                          shift and go to state 35
    hashmap                        shift and go to state 40
    linkedlist                     shift and go to state 41

state 95

    (149) else_if -> KW_ELSE KW_IF . conditional LBRACE main_rule RBRACE
    (83) conditional -> . VARIABLE comparator data
    (84) conditional -> . LPAREN lvariable RPAREN comparator data

    VARIABLE        shift and go to state 92
    LPAREN          shift and go to state 93

    conditional                    shift and go to state 139

state 96

    (99) while -> KW_WHILE conditional . LBRACE main_rule RBRACE

    LBRACE          shift and go to state 140


state 97

    (113) const_initialization -> KW_CONST VARIABLE . COLON data_type EQUALS data

    COLON           shift and go to state 141


state 98

    (128) label -> QUOTE VARIABLE .

    COLON           reduce using rule 128 (label -> QUOTE VARIABLE .)


state 99

    (87) print -> KW_PRINT LNOT LPAREN . CADENA RPAREN SEMI
    (88) print -> KW_PRINT LNOT LPAREN . CADENA COMMA VARIABLE RPAREN SEMI

    CADENA          shift and go to state 142


state 100

    (157) input -> VARIABLE DOT KW_READ_LINE . LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI

    LPAREN          shift and go to state 143


state 101

    (145) linkedlist_push -> DOT KW_PUSH_BACK . LPAREN data RPAREN SEMI

    LPAREN          shift and go to state 144


state 102

    (146) linkedlist_remove -> DOT KW_REMOVE . LPAREN INTEGER RPAREN SEMI
    (137) hashmap_remove -> DOT KW_REMOVE . LPAREN AND data RPAREN SEMI

    LPAREN          shift and go to state 145


state 103

    (136) hashmap_insert -> DOT KW_INSERT . LPAREN data COMMA data RPAREN SEMI

    LPAREN          shift and go to state 146


state 104

    (25) variable -> VARIABLE .

    SEMI            reduce using rule 25 (variable -> VARIABLE .)
    PLUS            reduce using rule 25 (variable -> VARIABLE .)
    MINUS           reduce using rule 25 (variable -> VARIABLE .)
    TIMES           reduce using rule 25 (variable -> VARIABLE .)
    KW_PRINT        reduce using rule 25 (variable -> VARIABLE .)
    KW_LET          reduce using rule 25 (variable -> VARIABLE .)
    KW_FN           reduce using rule 25 (variable -> VARIABLE .)
    LBRACKET        reduce using rule 25 (variable -> VARIABLE .)
    VARIABLE        reduce using rule 25 (variable -> VARIABLE .)
    KW_FOR          reduce using rule 25 (variable -> VARIABLE .)
    KW_IF           reduce using rule 25 (variable -> VARIABLE .)
    KW_ELSE         reduce using rule 25 (variable -> VARIABLE .)
    KW_WHILE        reduce using rule 25 (variable -> VARIABLE .)
    KW_CONST        reduce using rule 25 (variable -> VARIABLE .)
    FLOAT_32        reduce using rule 25 (variable -> VARIABLE .)
    FLOAT_64        reduce using rule 25 (variable -> VARIABLE .)
    SIG_INT_8       reduce using rule 25 (variable -> VARIABLE .)
    SIG_INT_16      reduce using rule 25 (variable -> VARIABLE .)
    SIG_INT_32      reduce using rule 25 (variable -> VARIABLE .)
    SIG_INT_64      reduce using rule 25 (variable -> VARIABLE .)
    SIG_INT_128     reduce using rule 25 (variable -> VARIABLE .)
    UNSIG_INT_8     reduce using rule 25 (variable -> VARIABLE .)
    UNSIG_INT_16    reduce using rule 25 (variable -> VARIABLE .)
    UNSIG_INT_32    reduce using rule 25 (variable -> VARIABLE .)
    UNSIG_INT_64    reduce using rule 25 (variable -> VARIABLE .)
    UNSIG_INT_128   reduce using rule 25 (variable -> VARIABLE .)
    QUOTE           reduce using rule 25 (variable -> VARIABLE .)
    $end            reduce using rule 25 (variable -> VARIABLE .)
    RBRACE          reduce using rule 25 (variable -> VARIABLE .)
    KW_RETURN       reduce using rule 25 (variable -> VARIABLE .)
    RPAREN          reduce using rule 25 (variable -> VARIABLE .)


state 105

    (158) assignation -> VARIABLE assign_operators number . SEMI
    (160) assignation -> VARIABLE assign_operators number .
    (20) expression -> number .

  ! shift/reduce conflict for SEMI resolved as shift
  ! reduce/reduce conflict for KW_PRINT resolved using rule 20 (expression -> number .)
  ! reduce/reduce conflict for KW_LET resolved using rule 20 (expression -> number .)
  ! reduce/reduce conflict for KW_FN resolved using rule 20 (expression -> number .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 20 (expression -> number .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 20 (expression -> number .)
  ! reduce/reduce conflict for KW_FOR resolved using rule 20 (expression -> number .)
  ! reduce/reduce conflict for KW_IF resolved using rule 20 (expression -> number .)
  ! reduce/reduce conflict for KW_ELSE resolved using rule 20 (expression -> number .)
  ! reduce/reduce conflict for KW_WHILE resolved using rule 20 (expression -> number .)
  ! reduce/reduce conflict for KW_CONST resolved using rule 20 (expression -> number .)
  ! reduce/reduce conflict for FLOAT_32 resolved using rule 20 (expression -> number .)
  ! reduce/reduce conflict for FLOAT_64 resolved using rule 20 (expression -> number .)
  ! reduce/reduce conflict for SIG_INT_8 resolved using rule 20 (expression -> number .)
  ! reduce/reduce conflict for SIG_INT_16 resolved using rule 20 (expression -> number .)
  ! reduce/reduce conflict for SIG_INT_32 resolved using rule 20 (expression -> number .)
  ! reduce/reduce conflict for SIG_INT_64 resolved using rule 20 (expression -> number .)
  ! reduce/reduce conflict for SIG_INT_128 resolved using rule 20 (expression -> number .)
  ! reduce/reduce conflict for UNSIG_INT_8 resolved using rule 20 (expression -> number .)
  ! reduce/reduce conflict for UNSIG_INT_16 resolved using rule 20 (expression -> number .)
  ! reduce/reduce conflict for UNSIG_INT_32 resolved using rule 20 (expression -> number .)
  ! reduce/reduce conflict for UNSIG_INT_64 resolved using rule 20 (expression -> number .)
  ! reduce/reduce conflict for UNSIG_INT_128 resolved using rule 20 (expression -> number .)
  ! reduce/reduce conflict for QUOTE resolved using rule 20 (expression -> number .)
  ! reduce/reduce conflict for $end resolved using rule 20 (expression -> number .)
  ! reduce/reduce conflict for RBRACE resolved using rule 20 (expression -> number .)
  ! reduce/reduce conflict for KW_RETURN resolved using rule 20 (expression -> number .)
    SEMI            shift and go to state 147
    PLUS            reduce using rule 20 (expression -> number .)
    MINUS           reduce using rule 20 (expression -> number .)
    TIMES           reduce using rule 20 (expression -> number .)
    KW_PRINT        reduce using rule 20 (expression -> number .)
    KW_LET          reduce using rule 20 (expression -> number .)
    KW_FN           reduce using rule 20 (expression -> number .)
    LBRACKET        reduce using rule 20 (expression -> number .)
    VARIABLE        reduce using rule 20 (expression -> number .)
    KW_FOR          reduce using rule 20 (expression -> number .)
    KW_IF           reduce using rule 20 (expression -> number .)
    KW_ELSE         reduce using rule 20 (expression -> number .)
    KW_WHILE        reduce using rule 20 (expression -> number .)
    KW_CONST        reduce using rule 20 (expression -> number .)
    FLOAT_32        reduce using rule 20 (expression -> number .)
    FLOAT_64        reduce using rule 20 (expression -> number .)
    SIG_INT_8       reduce using rule 20 (expression -> number .)
    SIG_INT_16      reduce using rule 20 (expression -> number .)
    SIG_INT_32      reduce using rule 20 (expression -> number .)
    SIG_INT_64      reduce using rule 20 (expression -> number .)
    SIG_INT_128     reduce using rule 20 (expression -> number .)
    UNSIG_INT_8     reduce using rule 20 (expression -> number .)
    UNSIG_INT_16    reduce using rule 20 (expression -> number .)
    UNSIG_INT_32    reduce using rule 20 (expression -> number .)
    UNSIG_INT_64    reduce using rule 20 (expression -> number .)
    UNSIG_INT_128   reduce using rule 20 (expression -> number .)
    QUOTE           reduce using rule 20 (expression -> number .)
    $end            reduce using rule 20 (expression -> number .)
    RBRACE          reduce using rule 20 (expression -> number .)
    KW_RETURN       reduce using rule 20 (expression -> number .)

  ! KW_PRINT        [ reduce using rule 160 (assignation -> VARIABLE assign_operators number .) ]
  ! KW_LET          [ reduce using rule 160 (assignation -> VARIABLE assign_operators number .) ]
  ! KW_FN           [ reduce using rule 160 (assignation -> VARIABLE assign_operators number .) ]
  ! LBRACKET        [ reduce using rule 160 (assignation -> VARIABLE assign_operators number .) ]
  ! VARIABLE        [ reduce using rule 160 (assignation -> VARIABLE assign_operators number .) ]
  ! KW_FOR          [ reduce using rule 160 (assignation -> VARIABLE assign_operators number .) ]
  ! KW_IF           [ reduce using rule 160 (assignation -> VARIABLE assign_operators number .) ]
  ! KW_ELSE         [ reduce using rule 160 (assignation -> VARIABLE assign_operators number .) ]
  ! KW_WHILE        [ reduce using rule 160 (assignation -> VARIABLE assign_operators number .) ]
  ! KW_CONST        [ reduce using rule 160 (assignation -> VARIABLE assign_operators number .) ]
  ! FLOAT_32        [ reduce using rule 160 (assignation -> VARIABLE assign_operators number .) ]
  ! FLOAT_64        [ reduce using rule 160 (assignation -> VARIABLE assign_operators number .) ]
  ! SIG_INT_8       [ reduce using rule 160 (assignation -> VARIABLE assign_operators number .) ]
  ! SIG_INT_16      [ reduce using rule 160 (assignation -> VARIABLE assign_operators number .) ]
  ! SIG_INT_32      [ reduce using rule 160 (assignation -> VARIABLE assign_operators number .) ]
  ! SIG_INT_64      [ reduce using rule 160 (assignation -> VARIABLE assign_operators number .) ]
  ! SIG_INT_128     [ reduce using rule 160 (assignation -> VARIABLE assign_operators number .) ]
  ! UNSIG_INT_8     [ reduce using rule 160 (assignation -> VARIABLE assign_operators number .) ]
  ! UNSIG_INT_16    [ reduce using rule 160 (assignation -> VARIABLE assign_operators number .) ]
  ! UNSIG_INT_32    [ reduce using rule 160 (assignation -> VARIABLE assign_operators number .) ]
  ! UNSIG_INT_64    [ reduce using rule 160 (assignation -> VARIABLE assign_operators number .) ]
  ! UNSIG_INT_128   [ reduce using rule 160 (assignation -> VARIABLE assign_operators number .) ]
  ! QUOTE           [ reduce using rule 160 (assignation -> VARIABLE assign_operators number .) ]
  ! $end            [ reduce using rule 160 (assignation -> VARIABLE assign_operators number .) ]
  ! RBRACE          [ reduce using rule 160 (assignation -> VARIABLE assign_operators number .) ]
  ! KW_RETURN       [ reduce using rule 160 (assignation -> VARIABLE assign_operators number .) ]
  ! SEMI            [ reduce using rule 20 (expression -> number .) ]


state 106

    (159) assignation -> VARIABLE assign_operators expression . SEMI
    (161) assignation -> VARIABLE assign_operators expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . MINUS expression
    (18) expression -> expression . TIMES expression

    SEMI            shift and go to state 148
    KW_PRINT        reduce using rule 161 (assignation -> VARIABLE assign_operators expression .)
    KW_LET          reduce using rule 161 (assignation -> VARIABLE assign_operators expression .)
    KW_FN           reduce using rule 161 (assignation -> VARIABLE assign_operators expression .)
    LBRACKET        reduce using rule 161 (assignation -> VARIABLE assign_operators expression .)
    VARIABLE        reduce using rule 161 (assignation -> VARIABLE assign_operators expression .)
    KW_FOR          reduce using rule 161 (assignation -> VARIABLE assign_operators expression .)
    KW_IF           reduce using rule 161 (assignation -> VARIABLE assign_operators expression .)
    KW_ELSE         reduce using rule 161 (assignation -> VARIABLE assign_operators expression .)
    KW_WHILE        reduce using rule 161 (assignation -> VARIABLE assign_operators expression .)
    KW_CONST        reduce using rule 161 (assignation -> VARIABLE assign_operators expression .)
    FLOAT_32        reduce using rule 161 (assignation -> VARIABLE assign_operators expression .)
    FLOAT_64        reduce using rule 161 (assignation -> VARIABLE assign_operators expression .)
    SIG_INT_8       reduce using rule 161 (assignation -> VARIABLE assign_operators expression .)
    SIG_INT_16      reduce using rule 161 (assignation -> VARIABLE assign_operators expression .)
    SIG_INT_32      reduce using rule 161 (assignation -> VARIABLE assign_operators expression .)
    SIG_INT_64      reduce using rule 161 (assignation -> VARIABLE assign_operators expression .)
    SIG_INT_128     reduce using rule 161 (assignation -> VARIABLE assign_operators expression .)
    UNSIG_INT_8     reduce using rule 161 (assignation -> VARIABLE assign_operators expression .)
    UNSIG_INT_16    reduce using rule 161 (assignation -> VARIABLE assign_operators expression .)
    UNSIG_INT_32    reduce using rule 161 (assignation -> VARIABLE assign_operators expression .)
    UNSIG_INT_64    reduce using rule 161 (assignation -> VARIABLE assign_operators expression .)
    UNSIG_INT_128   reduce using rule 161 (assignation -> VARIABLE assign_operators expression .)
    QUOTE           reduce using rule 161 (assignation -> VARIABLE assign_operators expression .)
    $end            reduce using rule 161 (assignation -> VARIABLE assign_operators expression .)
    RBRACE          reduce using rule 161 (assignation -> VARIABLE assign_operators expression .)
    KW_RETURN       reduce using rule 161 (assignation -> VARIABLE assign_operators expression .)
    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    TIMES           shift and go to state 151


state 107

    (23) number -> INTEGER .
    (64) division -> INTEGER . DIVIDE INTEGER

    SEMI            reduce using rule 23 (number -> INTEGER .)
    KW_PRINT        reduce using rule 23 (number -> INTEGER .)
    KW_LET          reduce using rule 23 (number -> INTEGER .)
    KW_FN           reduce using rule 23 (number -> INTEGER .)
    LBRACKET        reduce using rule 23 (number -> INTEGER .)
    VARIABLE        reduce using rule 23 (number -> INTEGER .)
    KW_FOR          reduce using rule 23 (number -> INTEGER .)
    KW_IF           reduce using rule 23 (number -> INTEGER .)
    KW_ELSE         reduce using rule 23 (number -> INTEGER .)
    KW_WHILE        reduce using rule 23 (number -> INTEGER .)
    KW_CONST        reduce using rule 23 (number -> INTEGER .)
    FLOAT_32        reduce using rule 23 (number -> INTEGER .)
    FLOAT_64        reduce using rule 23 (number -> INTEGER .)
    SIG_INT_8       reduce using rule 23 (number -> INTEGER .)
    SIG_INT_16      reduce using rule 23 (number -> INTEGER .)
    SIG_INT_32      reduce using rule 23 (number -> INTEGER .)
    SIG_INT_64      reduce using rule 23 (number -> INTEGER .)
    SIG_INT_128     reduce using rule 23 (number -> INTEGER .)
    UNSIG_INT_8     reduce using rule 23 (number -> INTEGER .)
    UNSIG_INT_16    reduce using rule 23 (number -> INTEGER .)
    UNSIG_INT_32    reduce using rule 23 (number -> INTEGER .)
    UNSIG_INT_64    reduce using rule 23 (number -> INTEGER .)
    UNSIG_INT_128   reduce using rule 23 (number -> INTEGER .)
    QUOTE           reduce using rule 23 (number -> INTEGER .)
    $end            reduce using rule 23 (number -> INTEGER .)
    RBRACE          reduce using rule 23 (number -> INTEGER .)
    KW_RETURN       reduce using rule 23 (number -> INTEGER .)
    PLUS            reduce using rule 23 (number -> INTEGER .)
    MINUS           reduce using rule 23 (number -> INTEGER .)
    TIMES           reduce using rule 23 (number -> INTEGER .)
    RPAREN          reduce using rule 23 (number -> INTEGER .)
    DIVIDE          shift and go to state 152


state 108

    (24) number -> FLOAT .
    (65) division -> FLOAT . DIVIDE FLOAT

    SEMI            reduce using rule 24 (number -> FLOAT .)
    KW_PRINT        reduce using rule 24 (number -> FLOAT .)
    KW_LET          reduce using rule 24 (number -> FLOAT .)
    KW_FN           reduce using rule 24 (number -> FLOAT .)
    LBRACKET        reduce using rule 24 (number -> FLOAT .)
    VARIABLE        reduce using rule 24 (number -> FLOAT .)
    KW_FOR          reduce using rule 24 (number -> FLOAT .)
    KW_IF           reduce using rule 24 (number -> FLOAT .)
    KW_ELSE         reduce using rule 24 (number -> FLOAT .)
    KW_WHILE        reduce using rule 24 (number -> FLOAT .)
    KW_CONST        reduce using rule 24 (number -> FLOAT .)
    FLOAT_32        reduce using rule 24 (number -> FLOAT .)
    FLOAT_64        reduce using rule 24 (number -> FLOAT .)
    SIG_INT_8       reduce using rule 24 (number -> FLOAT .)
    SIG_INT_16      reduce using rule 24 (number -> FLOAT .)
    SIG_INT_32      reduce using rule 24 (number -> FLOAT .)
    SIG_INT_64      reduce using rule 24 (number -> FLOAT .)
    SIG_INT_128     reduce using rule 24 (number -> FLOAT .)
    UNSIG_INT_8     reduce using rule 24 (number -> FLOAT .)
    UNSIG_INT_16    reduce using rule 24 (number -> FLOAT .)
    UNSIG_INT_32    reduce using rule 24 (number -> FLOAT .)
    UNSIG_INT_64    reduce using rule 24 (number -> FLOAT .)
    UNSIG_INT_128   reduce using rule 24 (number -> FLOAT .)
    QUOTE           reduce using rule 24 (number -> FLOAT .)
    $end            reduce using rule 24 (number -> FLOAT .)
    RBRACE          reduce using rule 24 (number -> FLOAT .)
    KW_RETURN       reduce using rule 24 (number -> FLOAT .)
    PLUS            reduce using rule 24 (number -> FLOAT .)
    MINUS           reduce using rule 24 (number -> FLOAT .)
    TIMES           reduce using rule 24 (number -> FLOAT .)
    RPAREN          reduce using rule 24 (number -> FLOAT .)
    DIVIDE          shift and go to state 153


state 109

    (19) expression -> LPAREN . expression RPAREN
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . number
    (21) expression -> . division
    (22) expression -> . variable
    (23) number -> . INTEGER
    (24) number -> . FLOAT
    (64) division -> . INTEGER DIVIDE INTEGER
    (65) division -> . FLOAT DIVIDE FLOAT
    (25) variable -> . VARIABLE

    LPAREN          shift and go to state 109
    INTEGER         shift and go to state 107
    FLOAT           shift and go to state 108
    VARIABLE        shift and go to state 104

    expression                     shift and go to state 154
    number                         shift and go to state 155
    division                       shift and go to state 110
    variable                       shift and go to state 111

state 110

    (21) expression -> division .

    SEMI            reduce using rule 21 (expression -> division .)
    PLUS            reduce using rule 21 (expression -> division .)
    MINUS           reduce using rule 21 (expression -> division .)
    TIMES           reduce using rule 21 (expression -> division .)
    KW_PRINT        reduce using rule 21 (expression -> division .)
    KW_LET          reduce using rule 21 (expression -> division .)
    KW_FN           reduce using rule 21 (expression -> division .)
    LBRACKET        reduce using rule 21 (expression -> division .)
    VARIABLE        reduce using rule 21 (expression -> division .)
    KW_FOR          reduce using rule 21 (expression -> division .)
    KW_IF           reduce using rule 21 (expression -> division .)
    KW_ELSE         reduce using rule 21 (expression -> division .)
    KW_WHILE        reduce using rule 21 (expression -> division .)
    KW_CONST        reduce using rule 21 (expression -> division .)
    FLOAT_32        reduce using rule 21 (expression -> division .)
    FLOAT_64        reduce using rule 21 (expression -> division .)
    SIG_INT_8       reduce using rule 21 (expression -> division .)
    SIG_INT_16      reduce using rule 21 (expression -> division .)
    SIG_INT_32      reduce using rule 21 (expression -> division .)
    SIG_INT_64      reduce using rule 21 (expression -> division .)
    SIG_INT_128     reduce using rule 21 (expression -> division .)
    UNSIG_INT_8     reduce using rule 21 (expression -> division .)
    UNSIG_INT_16    reduce using rule 21 (expression -> division .)
    UNSIG_INT_32    reduce using rule 21 (expression -> division .)
    UNSIG_INT_64    reduce using rule 21 (expression -> division .)
    UNSIG_INT_128   reduce using rule 21 (expression -> division .)
    QUOTE           reduce using rule 21 (expression -> division .)
    $end            reduce using rule 21 (expression -> division .)
    RBRACE          reduce using rule 21 (expression -> division .)
    KW_RETURN       reduce using rule 21 (expression -> division .)
    RPAREN          reduce using rule 21 (expression -> division .)


state 111

    (22) expression -> variable .

    SEMI            reduce using rule 22 (expression -> variable .)
    PLUS            reduce using rule 22 (expression -> variable .)
    MINUS           reduce using rule 22 (expression -> variable .)
    TIMES           reduce using rule 22 (expression -> variable .)
    KW_PRINT        reduce using rule 22 (expression -> variable .)
    KW_LET          reduce using rule 22 (expression -> variable .)
    KW_FN           reduce using rule 22 (expression -> variable .)
    LBRACKET        reduce using rule 22 (expression -> variable .)
    VARIABLE        reduce using rule 22 (expression -> variable .)
    KW_FOR          reduce using rule 22 (expression -> variable .)
    KW_IF           reduce using rule 22 (expression -> variable .)
    KW_ELSE         reduce using rule 22 (expression -> variable .)
    KW_WHILE        reduce using rule 22 (expression -> variable .)
    KW_CONST        reduce using rule 22 (expression -> variable .)
    FLOAT_32        reduce using rule 22 (expression -> variable .)
    FLOAT_64        reduce using rule 22 (expression -> variable .)
    SIG_INT_8       reduce using rule 22 (expression -> variable .)
    SIG_INT_16      reduce using rule 22 (expression -> variable .)
    SIG_INT_32      reduce using rule 22 (expression -> variable .)
    SIG_INT_64      reduce using rule 22 (expression -> variable .)
    SIG_INT_128     reduce using rule 22 (expression -> variable .)
    UNSIG_INT_8     reduce using rule 22 (expression -> variable .)
    UNSIG_INT_16    reduce using rule 22 (expression -> variable .)
    UNSIG_INT_32    reduce using rule 22 (expression -> variable .)
    UNSIG_INT_64    reduce using rule 22 (expression -> variable .)
    UNSIG_INT_128   reduce using rule 22 (expression -> variable .)
    QUOTE           reduce using rule 22 (expression -> variable .)
    $end            reduce using rule 22 (expression -> variable .)
    RBRACE          reduce using rule 22 (expression -> variable .)
    KW_RETURN       reduce using rule 22 (expression -> variable .)
    RPAREN          reduce using rule 22 (expression -> variable .)


state 112

    (89) dvariable -> KW_LET VARIABLE COLON . data_type SEMI
    (93) array -> KW_LET VARIABLE COLON . LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (94) array -> KW_LET VARIABLE COLON . LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (162) declare_data_type -> KW_LET VARIABLE COLON . data_type SEMI
    (106) let_initialization -> KW_LET VARIABLE COLON . data_type EQUALS data
    (110) let_initialization -> KW_LET VARIABLE COLON . data_type EQUALS expression_var
    (139) linkedlist -> KW_LET VARIABLE COLON . KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (26) data_type -> . UNSIG_INT_8
    (27) data_type -> . UNSIG_INT_16
    (28) data_type -> . UNSIG_INT_32
    (29) data_type -> . UNSIG_INT_64
    (30) data_type -> . UNSIG_INT_128
    (31) data_type -> . SIG_INT_8
    (32) data_type -> . SIG_INT_16
    (33) data_type -> . SIG_INT_32
    (34) data_type -> . SIG_INT_64
    (35) data_type -> . SIG_INT_128
    (36) data_type -> . FLOAT_32
    (37) data_type -> . FLOAT_64
    (38) data_type -> . KW_BOOLEAN
    (39) data_type -> . KW_STRING
    (40) data_type -> . KW_CHARACTER

    LBRACKET        shift and go to state 157
    KW_LINKEDLIST   shift and go to state 158
    UNSIG_INT_8     shift and go to state 159
    UNSIG_INT_16    shift and go to state 160
    UNSIG_INT_32    shift and go to state 161
    UNSIG_INT_64    shift and go to state 162
    UNSIG_INT_128   shift and go to state 163
    SIG_INT_8       shift and go to state 164
    SIG_INT_16      shift and go to state 165
    SIG_INT_32      shift and go to state 166
    SIG_INT_64      shift and go to state 167
    SIG_INT_128     shift and go to state 168
    FLOAT_32        shift and go to state 169
    FLOAT_64        shift and go to state 170
    KW_BOOLEAN      shift and go to state 171
    KW_STRING       shift and go to state 172
    KW_CHARACTER    shift and go to state 173

    data_type                      shift and go to state 156

state 113

    (90) array -> KW_LET VARIABLE EQUALS . LBRACKET mdata RBRACKET SEMI
    (105) let_initialization -> KW_LET VARIABLE EQUALS . data
    (109) let_initialization -> KW_LET VARIABLE EQUALS . expression_var
    (156) input_init -> KW_LET VARIABLE EQUALS . KW_IO COLON COLON KW_STDIN LPAREN RPAREN
    (132) hashmap -> KW_LET VARIABLE EQUALS . KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (141) linkedlist -> KW_LET VARIABLE EQUALS . KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (66) data -> . CADENA
    (67) data -> . INTEGER
    (68) data -> . CHAR
    (69) data -> . FLOAT
    (70) data -> . KW_FALSE
    (71) data -> . KW_TRUE
    (72) data -> . tuple
    (151) expression_var -> . expression
    (152) expression_var -> . data
    (100) tuple -> . LPAREN mdata RPAREN
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . number
    (21) expression -> . division
    (22) expression -> . variable
    (23) number -> . INTEGER
    (24) number -> . FLOAT
    (64) division -> . INTEGER DIVIDE INTEGER
    (65) division -> . FLOAT DIVIDE FLOAT
    (25) variable -> . VARIABLE

    LBRACKET        shift and go to state 174
    KW_IO           shift and go to state 177
    KW_HASHMAP      shift and go to state 179
    KW_LINKEDLIST   shift and go to state 180
    CADENA          shift and go to state 74
    INTEGER         shift and go to state 181
    CHAR            shift and go to state 76
    FLOAT           shift and go to state 182
    KW_FALSE        shift and go to state 78
    KW_TRUE         shift and go to state 79
    LPAREN          shift and go to state 178
    VARIABLE        shift and go to state 104

    data                           shift and go to state 175
    expression_var                 shift and go to state 176
    tuple                          shift and go to state 80
    expression                     shift and go to state 183
    number                         shift and go to state 155
    division                       shift and go to state 110
    variable                       shift and go to state 111

state 114

    (95) array -> KW_LET KW_MUT VARIABLE . COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (96) array -> KW_LET KW_MUT VARIABLE . COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (107) let_initialization -> KW_LET KW_MUT VARIABLE . EQUALS data
    (108) let_initialization -> KW_LET KW_MUT VARIABLE . COLON data_type EQUALS data
    (111) let_initialization -> KW_LET KW_MUT VARIABLE . EQUALS expression_var
    (112) let_initialization -> KW_LET KW_MUT VARIABLE . COLON data_type EQUALS expression_var
    (133) hashmap -> KW_LET KW_MUT VARIABLE . EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (140) linkedlist -> KW_LET KW_MUT VARIABLE . COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (142) linkedlist -> KW_LET KW_MUT VARIABLE . EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN

    COLON           shift and go to state 184
    EQUALS          shift and go to state 185


state 115

    (116) function -> KW_FN VARIABLE LPAREN . arguments RPAREN LBRACE main_rule RBRACE
    (150) function -> KW_FN VARIABLE LPAREN . arguments RPAREN MINUS GT data_type LBRACE return RBRACE
    (114) arguments -> . void
    (115) arguments -> . variables
    (138) void -> .
    (97) variables -> . VARIABLE
    (98) variables -> . VARIABLE COMMA variables

    RPAREN          reduce using rule 138 (void -> .)
    VARIABLE        shift and go to state 186

    arguments                      shift and go to state 187
    void                           shift and go to state 188
    variables                      shift and go to state 189

state 116

    (91) array -> LBRACKET mdata RBRACKET .

    KW_PRINT        reduce using rule 91 (array -> LBRACKET mdata RBRACKET .)
    KW_LET          reduce using rule 91 (array -> LBRACKET mdata RBRACKET .)
    KW_FN           reduce using rule 91 (array -> LBRACKET mdata RBRACKET .)
    LBRACKET        reduce using rule 91 (array -> LBRACKET mdata RBRACKET .)
    VARIABLE        reduce using rule 91 (array -> LBRACKET mdata RBRACKET .)
    KW_FOR          reduce using rule 91 (array -> LBRACKET mdata RBRACKET .)
    KW_IF           reduce using rule 91 (array -> LBRACKET mdata RBRACKET .)
    KW_ELSE         reduce using rule 91 (array -> LBRACKET mdata RBRACKET .)
    KW_WHILE        reduce using rule 91 (array -> LBRACKET mdata RBRACKET .)
    KW_CONST        reduce using rule 91 (array -> LBRACKET mdata RBRACKET .)
    FLOAT_32        reduce using rule 91 (array -> LBRACKET mdata RBRACKET .)
    FLOAT_64        reduce using rule 91 (array -> LBRACKET mdata RBRACKET .)
    SIG_INT_8       reduce using rule 91 (array -> LBRACKET mdata RBRACKET .)
    SIG_INT_16      reduce using rule 91 (array -> LBRACKET mdata RBRACKET .)
    SIG_INT_32      reduce using rule 91 (array -> LBRACKET mdata RBRACKET .)
    SIG_INT_64      reduce using rule 91 (array -> LBRACKET mdata RBRACKET .)
    SIG_INT_128     reduce using rule 91 (array -> LBRACKET mdata RBRACKET .)
    UNSIG_INT_8     reduce using rule 91 (array -> LBRACKET mdata RBRACKET .)
    UNSIG_INT_16    reduce using rule 91 (array -> LBRACKET mdata RBRACKET .)
    UNSIG_INT_32    reduce using rule 91 (array -> LBRACKET mdata RBRACKET .)
    UNSIG_INT_64    reduce using rule 91 (array -> LBRACKET mdata RBRACKET .)
    UNSIG_INT_128   reduce using rule 91 (array -> LBRACKET mdata RBRACKET .)
    QUOTE           reduce using rule 91 (array -> LBRACKET mdata RBRACKET .)
    $end            reduce using rule 91 (array -> LBRACKET mdata RBRACKET .)
    SEMI            reduce using rule 91 (array -> LBRACKET mdata RBRACKET .)
    RBRACE          reduce using rule 91 (array -> LBRACKET mdata RBRACKET .)
    KW_RETURN       reduce using rule 91 (array -> LBRACKET mdata RBRACKET .)
    RPAREN          reduce using rule 91 (array -> LBRACKET mdata RBRACKET .)


state 117

    (92) array -> LBRACKET data SEMI . data RBRACKET
    (66) data -> . CADENA
    (67) data -> . INTEGER
    (68) data -> . CHAR
    (69) data -> . FLOAT
    (70) data -> . KW_FALSE
    (71) data -> . KW_TRUE
    (72) data -> . tuple
    (100) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 74
    INTEGER         shift and go to state 75
    CHAR            shift and go to state 76
    FLOAT           shift and go to state 77
    KW_FALSE        shift and go to state 78
    KW_TRUE         shift and go to state 79
    LPAREN          shift and go to state 81

    data                           shift and go to state 190
    tuple                          shift and go to state 80

state 118

    (86) mdata -> data COMMA . mdata
    (85) mdata -> . data
    (86) mdata -> . data COMMA mdata
    (66) data -> . CADENA
    (67) data -> . INTEGER
    (68) data -> . CHAR
    (69) data -> . FLOAT
    (70) data -> . KW_FALSE
    (71) data -> . KW_TRUE
    (72) data -> . tuple
    (100) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 74
    INTEGER         shift and go to state 75
    CHAR            shift and go to state 76
    FLOAT           shift and go to state 77
    KW_FALSE        shift and go to state 78
    KW_TRUE         shift and go to state 79
    LPAREN          shift and go to state 81

    data                           shift and go to state 120
    mdata                          shift and go to state 191
    tuple                          shift and go to state 80

state 119

    (100) tuple -> LPAREN mdata . RPAREN

    RPAREN          shift and go to state 192


state 120

    (85) mdata -> data .
    (86) mdata -> data . COMMA mdata

    RPAREN          reduce using rule 85 (mdata -> data .)
    RBRACKET        reduce using rule 85 (mdata -> data .)
    COMMA           shift and go to state 118


state 121

    (63) casting -> flotante KW_AS flotante .

    KW_PRINT        reduce using rule 63 (casting -> flotante KW_AS flotante .)
    KW_LET          reduce using rule 63 (casting -> flotante KW_AS flotante .)
    KW_FN           reduce using rule 63 (casting -> flotante KW_AS flotante .)
    LBRACKET        reduce using rule 63 (casting -> flotante KW_AS flotante .)
    VARIABLE        reduce using rule 63 (casting -> flotante KW_AS flotante .)
    KW_FOR          reduce using rule 63 (casting -> flotante KW_AS flotante .)
    KW_IF           reduce using rule 63 (casting -> flotante KW_AS flotante .)
    KW_ELSE         reduce using rule 63 (casting -> flotante KW_AS flotante .)
    KW_WHILE        reduce using rule 63 (casting -> flotante KW_AS flotante .)
    KW_CONST        reduce using rule 63 (casting -> flotante KW_AS flotante .)
    FLOAT_32        reduce using rule 63 (casting -> flotante KW_AS flotante .)
    FLOAT_64        reduce using rule 63 (casting -> flotante KW_AS flotante .)
    SIG_INT_8       reduce using rule 63 (casting -> flotante KW_AS flotante .)
    SIG_INT_16      reduce using rule 63 (casting -> flotante KW_AS flotante .)
    SIG_INT_32      reduce using rule 63 (casting -> flotante KW_AS flotante .)
    SIG_INT_64      reduce using rule 63 (casting -> flotante KW_AS flotante .)
    SIG_INT_128     reduce using rule 63 (casting -> flotante KW_AS flotante .)
    UNSIG_INT_8     reduce using rule 63 (casting -> flotante KW_AS flotante .)
    UNSIG_INT_16    reduce using rule 63 (casting -> flotante KW_AS flotante .)
    UNSIG_INT_32    reduce using rule 63 (casting -> flotante KW_AS flotante .)
    UNSIG_INT_64    reduce using rule 63 (casting -> flotante KW_AS flotante .)
    UNSIG_INT_128   reduce using rule 63 (casting -> flotante KW_AS flotante .)
    QUOTE           reduce using rule 63 (casting -> flotante KW_AS flotante .)
    $end            reduce using rule 63 (casting -> flotante KW_AS flotante .)
    RBRACE          reduce using rule 63 (casting -> flotante KW_AS flotante .)
    KW_RETURN       reduce using rule 63 (casting -> flotante KW_AS flotante .)


state 122

    (59) casting -> flotante KW_AS sigint .

    KW_PRINT        reduce using rule 59 (casting -> flotante KW_AS sigint .)
    KW_LET          reduce using rule 59 (casting -> flotante KW_AS sigint .)
    KW_FN           reduce using rule 59 (casting -> flotante KW_AS sigint .)
    LBRACKET        reduce using rule 59 (casting -> flotante KW_AS sigint .)
    VARIABLE        reduce using rule 59 (casting -> flotante KW_AS sigint .)
    KW_FOR          reduce using rule 59 (casting -> flotante KW_AS sigint .)
    KW_IF           reduce using rule 59 (casting -> flotante KW_AS sigint .)
    KW_ELSE         reduce using rule 59 (casting -> flotante KW_AS sigint .)
    KW_WHILE        reduce using rule 59 (casting -> flotante KW_AS sigint .)
    KW_CONST        reduce using rule 59 (casting -> flotante KW_AS sigint .)
    FLOAT_32        reduce using rule 59 (casting -> flotante KW_AS sigint .)
    FLOAT_64        reduce using rule 59 (casting -> flotante KW_AS sigint .)
    SIG_INT_8       reduce using rule 59 (casting -> flotante KW_AS sigint .)
    SIG_INT_16      reduce using rule 59 (casting -> flotante KW_AS sigint .)
    SIG_INT_32      reduce using rule 59 (casting -> flotante KW_AS sigint .)
    SIG_INT_64      reduce using rule 59 (casting -> flotante KW_AS sigint .)
    SIG_INT_128     reduce using rule 59 (casting -> flotante KW_AS sigint .)
    UNSIG_INT_8     reduce using rule 59 (casting -> flotante KW_AS sigint .)
    UNSIG_INT_16    reduce using rule 59 (casting -> flotante KW_AS sigint .)
    UNSIG_INT_32    reduce using rule 59 (casting -> flotante KW_AS sigint .)
    UNSIG_INT_64    reduce using rule 59 (casting -> flotante KW_AS sigint .)
    UNSIG_INT_128   reduce using rule 59 (casting -> flotante KW_AS sigint .)
    QUOTE           reduce using rule 59 (casting -> flotante KW_AS sigint .)
    $end            reduce using rule 59 (casting -> flotante KW_AS sigint .)
    RBRACE          reduce using rule 59 (casting -> flotante KW_AS sigint .)
    KW_RETURN       reduce using rule 59 (casting -> flotante KW_AS sigint .)


state 123

    (60) casting -> flotante KW_AS unsigint .

    KW_PRINT        reduce using rule 60 (casting -> flotante KW_AS unsigint .)
    KW_LET          reduce using rule 60 (casting -> flotante KW_AS unsigint .)
    KW_FN           reduce using rule 60 (casting -> flotante KW_AS unsigint .)
    LBRACKET        reduce using rule 60 (casting -> flotante KW_AS unsigint .)
    VARIABLE        reduce using rule 60 (casting -> flotante KW_AS unsigint .)
    KW_FOR          reduce using rule 60 (casting -> flotante KW_AS unsigint .)
    KW_IF           reduce using rule 60 (casting -> flotante KW_AS unsigint .)
    KW_ELSE         reduce using rule 60 (casting -> flotante KW_AS unsigint .)
    KW_WHILE        reduce using rule 60 (casting -> flotante KW_AS unsigint .)
    KW_CONST        reduce using rule 60 (casting -> flotante KW_AS unsigint .)
    FLOAT_32        reduce using rule 60 (casting -> flotante KW_AS unsigint .)
    FLOAT_64        reduce using rule 60 (casting -> flotante KW_AS unsigint .)
    SIG_INT_8       reduce using rule 60 (casting -> flotante KW_AS unsigint .)
    SIG_INT_16      reduce using rule 60 (casting -> flotante KW_AS unsigint .)
    SIG_INT_32      reduce using rule 60 (casting -> flotante KW_AS unsigint .)
    SIG_INT_64      reduce using rule 60 (casting -> flotante KW_AS unsigint .)
    SIG_INT_128     reduce using rule 60 (casting -> flotante KW_AS unsigint .)
    UNSIG_INT_8     reduce using rule 60 (casting -> flotante KW_AS unsigint .)
    UNSIG_INT_16    reduce using rule 60 (casting -> flotante KW_AS unsigint .)
    UNSIG_INT_32    reduce using rule 60 (casting -> flotante KW_AS unsigint .)
    UNSIG_INT_64    reduce using rule 60 (casting -> flotante KW_AS unsigint .)
    UNSIG_INT_128   reduce using rule 60 (casting -> flotante KW_AS unsigint .)
    QUOTE           reduce using rule 60 (casting -> flotante KW_AS unsigint .)
    $end            reduce using rule 60 (casting -> flotante KW_AS unsigint .)
    RBRACE          reduce using rule 60 (casting -> flotante KW_AS unsigint .)
    KW_RETURN       reduce using rule 60 (casting -> flotante KW_AS unsigint .)


state 124

    (61) casting -> sigint KW_AS flotante .

    KW_PRINT        reduce using rule 61 (casting -> sigint KW_AS flotante .)
    KW_LET          reduce using rule 61 (casting -> sigint KW_AS flotante .)
    KW_FN           reduce using rule 61 (casting -> sigint KW_AS flotante .)
    LBRACKET        reduce using rule 61 (casting -> sigint KW_AS flotante .)
    VARIABLE        reduce using rule 61 (casting -> sigint KW_AS flotante .)
    KW_FOR          reduce using rule 61 (casting -> sigint KW_AS flotante .)
    KW_IF           reduce using rule 61 (casting -> sigint KW_AS flotante .)
    KW_ELSE         reduce using rule 61 (casting -> sigint KW_AS flotante .)
    KW_WHILE        reduce using rule 61 (casting -> sigint KW_AS flotante .)
    KW_CONST        reduce using rule 61 (casting -> sigint KW_AS flotante .)
    FLOAT_32        reduce using rule 61 (casting -> sigint KW_AS flotante .)
    FLOAT_64        reduce using rule 61 (casting -> sigint KW_AS flotante .)
    SIG_INT_8       reduce using rule 61 (casting -> sigint KW_AS flotante .)
    SIG_INT_16      reduce using rule 61 (casting -> sigint KW_AS flotante .)
    SIG_INT_32      reduce using rule 61 (casting -> sigint KW_AS flotante .)
    SIG_INT_64      reduce using rule 61 (casting -> sigint KW_AS flotante .)
    SIG_INT_128     reduce using rule 61 (casting -> sigint KW_AS flotante .)
    UNSIG_INT_8     reduce using rule 61 (casting -> sigint KW_AS flotante .)
    UNSIG_INT_16    reduce using rule 61 (casting -> sigint KW_AS flotante .)
    UNSIG_INT_32    reduce using rule 61 (casting -> sigint KW_AS flotante .)
    UNSIG_INT_64    reduce using rule 61 (casting -> sigint KW_AS flotante .)
    UNSIG_INT_128   reduce using rule 61 (casting -> sigint KW_AS flotante .)
    QUOTE           reduce using rule 61 (casting -> sigint KW_AS flotante .)
    $end            reduce using rule 61 (casting -> sigint KW_AS flotante .)
    RBRACE          reduce using rule 61 (casting -> sigint KW_AS flotante .)
    KW_RETURN       reduce using rule 61 (casting -> sigint KW_AS flotante .)


state 125

    (62) casting -> unsigint KW_AS flotante .

    KW_PRINT        reduce using rule 62 (casting -> unsigint KW_AS flotante .)
    KW_LET          reduce using rule 62 (casting -> unsigint KW_AS flotante .)
    KW_FN           reduce using rule 62 (casting -> unsigint KW_AS flotante .)
    LBRACKET        reduce using rule 62 (casting -> unsigint KW_AS flotante .)
    VARIABLE        reduce using rule 62 (casting -> unsigint KW_AS flotante .)
    KW_FOR          reduce using rule 62 (casting -> unsigint KW_AS flotante .)
    KW_IF           reduce using rule 62 (casting -> unsigint KW_AS flotante .)
    KW_ELSE         reduce using rule 62 (casting -> unsigint KW_AS flotante .)
    KW_WHILE        reduce using rule 62 (casting -> unsigint KW_AS flotante .)
    KW_CONST        reduce using rule 62 (casting -> unsigint KW_AS flotante .)
    FLOAT_32        reduce using rule 62 (casting -> unsigint KW_AS flotante .)
    FLOAT_64        reduce using rule 62 (casting -> unsigint KW_AS flotante .)
    SIG_INT_8       reduce using rule 62 (casting -> unsigint KW_AS flotante .)
    SIG_INT_16      reduce using rule 62 (casting -> unsigint KW_AS flotante .)
    SIG_INT_32      reduce using rule 62 (casting -> unsigint KW_AS flotante .)
    SIG_INT_64      reduce using rule 62 (casting -> unsigint KW_AS flotante .)
    SIG_INT_128     reduce using rule 62 (casting -> unsigint KW_AS flotante .)
    UNSIG_INT_8     reduce using rule 62 (casting -> unsigint KW_AS flotante .)
    UNSIG_INT_16    reduce using rule 62 (casting -> unsigint KW_AS flotante .)
    UNSIG_INT_32    reduce using rule 62 (casting -> unsigint KW_AS flotante .)
    UNSIG_INT_64    reduce using rule 62 (casting -> unsigint KW_AS flotante .)
    UNSIG_INT_128   reduce using rule 62 (casting -> unsigint KW_AS flotante .)
    QUOTE           reduce using rule 62 (casting -> unsigint KW_AS flotante .)
    $end            reduce using rule 62 (casting -> unsigint KW_AS flotante .)
    RBRACE          reduce using rule 62 (casting -> unsigint KW_AS flotante .)
    KW_RETURN       reduce using rule 62 (casting -> unsigint KW_AS flotante .)


state 126

    (123) for_str -> KW_FOR VARIABLE KW_IN . range LBRACE main_rule RBRACE
    (124) for_str -> KW_FOR VARIABLE KW_IN . VARIABLE LBRACE main_rule RBRACE
    (126) range -> . INTEGER DOT DOT INTEGER
    (127) range -> . VARIABLE DOT DOT VARIABLE

    VARIABLE        shift and go to state 193
    INTEGER         shift and go to state 195

    range                          shift and go to state 194

state 127

    (125) for_str_tagged -> label COLON for_str .

    KW_PRINT        reduce using rule 125 (for_str_tagged -> label COLON for_str .)
    KW_LET          reduce using rule 125 (for_str_tagged -> label COLON for_str .)
    KW_FN           reduce using rule 125 (for_str_tagged -> label COLON for_str .)
    LBRACKET        reduce using rule 125 (for_str_tagged -> label COLON for_str .)
    VARIABLE        reduce using rule 125 (for_str_tagged -> label COLON for_str .)
    KW_FOR          reduce using rule 125 (for_str_tagged -> label COLON for_str .)
    KW_IF           reduce using rule 125 (for_str_tagged -> label COLON for_str .)
    KW_ELSE         reduce using rule 125 (for_str_tagged -> label COLON for_str .)
    KW_WHILE        reduce using rule 125 (for_str_tagged -> label COLON for_str .)
    KW_CONST        reduce using rule 125 (for_str_tagged -> label COLON for_str .)
    FLOAT_32        reduce using rule 125 (for_str_tagged -> label COLON for_str .)
    FLOAT_64        reduce using rule 125 (for_str_tagged -> label COLON for_str .)
    SIG_INT_8       reduce using rule 125 (for_str_tagged -> label COLON for_str .)
    SIG_INT_16      reduce using rule 125 (for_str_tagged -> label COLON for_str .)
    SIG_INT_32      reduce using rule 125 (for_str_tagged -> label COLON for_str .)
    SIG_INT_64      reduce using rule 125 (for_str_tagged -> label COLON for_str .)
    SIG_INT_128     reduce using rule 125 (for_str_tagged -> label COLON for_str .)
    UNSIG_INT_8     reduce using rule 125 (for_str_tagged -> label COLON for_str .)
    UNSIG_INT_16    reduce using rule 125 (for_str_tagged -> label COLON for_str .)
    UNSIG_INT_32    reduce using rule 125 (for_str_tagged -> label COLON for_str .)
    UNSIG_INT_64    reduce using rule 125 (for_str_tagged -> label COLON for_str .)
    UNSIG_INT_128   reduce using rule 125 (for_str_tagged -> label COLON for_str .)
    QUOTE           reduce using rule 125 (for_str_tagged -> label COLON for_str .)
    $end            reduce using rule 125 (for_str_tagged -> label COLON for_str .)
    RBRACE          reduce using rule 125 (for_str_tagged -> label COLON for_str .)
    KW_RETURN       reduce using rule 125 (for_str_tagged -> label COLON for_str .)


state 128

    (147) if -> KW_IF conditional LBRACE . main_rule RBRACE
    (1) main_rule -> . father_rule
    (2) main_rule -> . father_rule main_rule
    (3) father_rule -> . print
    (4) father_rule -> . dvariable
    (5) father_rule -> . function
    (6) father_rule -> . control_str
    (7) father_rule -> . void
    (8) father_rule -> . array
    (9) father_rule -> . linkedlist_methods
    (10) father_rule -> . hashmap_methods
    (11) father_rule -> . initialization
    (12) father_rule -> . input
    (13) father_rule -> . assignation
    (14) father_rule -> . declare_data_type
    (15) father_rule -> . casting
    (87) print -> . KW_PRINT LNOT LPAREN CADENA RPAREN SEMI
    (88) print -> . KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI
    (89) dvariable -> . KW_LET VARIABLE COLON data_type SEMI
    (116) function -> . KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE
    (150) function -> . KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE
    (117) control_str -> . for_str
    (118) control_str -> . for_str_tagged
    (119) control_str -> . if
    (120) control_str -> . else
    (121) control_str -> . else_if
    (122) control_str -> . while
    (138) void -> .
    (90) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (91) array -> . LBRACKET mdata RBRACKET
    (92) array -> . LBRACKET data SEMI data RBRACKET
    (93) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (94) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (95) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (96) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (143) linkedlist_methods -> . VARIABLE linkedlist_push
    (144) linkedlist_methods -> . VARIABLE linkedlist_remove
    (134) hashmap_methods -> . VARIABLE hashmap_insert
    (135) hashmap_methods -> . VARIABLE hashmap_remove
    (101) initialization -> . let_initialization SEMI
    (102) initialization -> . const_initialization SEMI
    (103) initialization -> . data_str SEMI
    (104) initialization -> . input_init SEMI
    (157) input -> . VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI
    (158) assignation -> . VARIABLE assign_operators number SEMI
    (159) assignation -> . VARIABLE assign_operators expression SEMI
    (160) assignation -> . VARIABLE assign_operators number
    (161) assignation -> . VARIABLE assign_operators expression
    (162) declare_data_type -> . KW_LET VARIABLE COLON data_type SEMI
    (59) casting -> . flotante KW_AS sigint
    (60) casting -> . flotante KW_AS unsigint
    (61) casting -> . sigint KW_AS flotante
    (62) casting -> . unsigint KW_AS flotante
    (63) casting -> . flotante KW_AS flotante
    (123) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE
    (124) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE
    (125) for_str_tagged -> . label COLON for_str
    (147) if -> . KW_IF conditional LBRACE main_rule RBRACE
    (148) else -> . KW_ELSE LBRACE main_rule RBRACE
    (149) else_if -> . KW_ELSE KW_IF conditional LBRACE main_rule RBRACE
    (99) while -> . KW_WHILE conditional LBRACE main_rule RBRACE
    (105) let_initialization -> . KW_LET VARIABLE EQUALS data
    (106) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS data
    (107) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS data
    (108) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS data
    (109) let_initialization -> . KW_LET VARIABLE EQUALS expression_var
    (110) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS expression_var
    (111) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS expression_var
    (112) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var
    (113) const_initialization -> . KW_CONST VARIABLE COLON data_type EQUALS data
    (129) data_str -> . array
    (130) data_str -> . hashmap
    (131) data_str -> . linkedlist
    (156) input_init -> . KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN
    (57) flotante -> . FLOAT_32
    (58) flotante -> . FLOAT_64
    (47) sigint -> . SIG_INT_8
    (48) sigint -> . SIG_INT_16
    (49) sigint -> . SIG_INT_32
    (50) sigint -> . SIG_INT_64
    (51) sigint -> . SIG_INT_128
    (52) unsigint -> . UNSIG_INT_8
    (53) unsigint -> . UNSIG_INT_16
    (54) unsigint -> . UNSIG_INT_32
    (55) unsigint -> . UNSIG_INT_64
    (56) unsigint -> . UNSIG_INT_128
    (128) label -> . QUOTE VARIABLE
    (132) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (133) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (139) linkedlist -> . KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (140) linkedlist -> . KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (141) linkedlist -> . KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (142) linkedlist -> . KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN

  ! shift/reduce conflict for KW_PRINT resolved as shift
  ! shift/reduce conflict for KW_LET resolved as shift
  ! shift/reduce conflict for KW_FN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for KW_FOR resolved as shift
  ! shift/reduce conflict for KW_IF resolved as shift
  ! shift/reduce conflict for KW_ELSE resolved as shift
  ! shift/reduce conflict for KW_WHILE resolved as shift
  ! shift/reduce conflict for KW_CONST resolved as shift
  ! shift/reduce conflict for FLOAT_32 resolved as shift
  ! shift/reduce conflict for FLOAT_64 resolved as shift
  ! shift/reduce conflict for SIG_INT_8 resolved as shift
  ! shift/reduce conflict for SIG_INT_16 resolved as shift
  ! shift/reduce conflict for SIG_INT_32 resolved as shift
  ! shift/reduce conflict for SIG_INT_64 resolved as shift
  ! shift/reduce conflict for SIG_INT_128 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_8 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_16 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_32 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_64 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_128 resolved as shift
  ! shift/reduce conflict for QUOTE resolved as shift
    KW_PRINT        shift and go to state 16
    KW_LET          shift and go to state 18
    KW_FN           shift and go to state 19
    RBRACE          reduce using rule 138 (void -> .)
    LBRACKET        shift and go to state 26
    VARIABLE        shift and go to state 17
    KW_FOR          shift and go to state 34
    KW_IF           shift and go to state 36
    KW_ELSE         shift and go to state 37
    KW_WHILE        shift and go to state 38
    KW_CONST        shift and go to state 39
    FLOAT_32        shift and go to state 42
    FLOAT_64        shift and go to state 43
    SIG_INT_8       shift and go to state 44
    SIG_INT_16      shift and go to state 45
    SIG_INT_32      shift and go to state 46
    SIG_INT_64      shift and go to state 47
    SIG_INT_128     shift and go to state 48
    UNSIG_INT_8     shift and go to state 49
    UNSIG_INT_16    shift and go to state 50
    UNSIG_INT_32    shift and go to state 51
    UNSIG_INT_64    shift and go to state 52
    UNSIG_INT_128   shift and go to state 53
    QUOTE           shift and go to state 54

  ! KW_PRINT        [ reduce using rule 138 (void -> .) ]
  ! KW_LET          [ reduce using rule 138 (void -> .) ]
  ! KW_FN           [ reduce using rule 138 (void -> .) ]
  ! LBRACKET        [ reduce using rule 138 (void -> .) ]
  ! VARIABLE        [ reduce using rule 138 (void -> .) ]
  ! KW_FOR          [ reduce using rule 138 (void -> .) ]
  ! KW_IF           [ reduce using rule 138 (void -> .) ]
  ! KW_ELSE         [ reduce using rule 138 (void -> .) ]
  ! KW_WHILE        [ reduce using rule 138 (void -> .) ]
  ! KW_CONST        [ reduce using rule 138 (void -> .) ]
  ! FLOAT_32        [ reduce using rule 138 (void -> .) ]
  ! FLOAT_64        [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_8       [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_16      [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_32      [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_64      [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_128     [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_8     [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_16    [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_32    [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_64    [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_128   [ reduce using rule 138 (void -> .) ]
  ! QUOTE           [ reduce using rule 138 (void -> .) ]

    main_rule                      shift and go to state 196
    father_rule                    shift and go to state 2
    print                          shift and go to state 3
    dvariable                      shift and go to state 4
    function                       shift and go to state 5
    control_str                    shift and go to state 6
    void                           shift and go to state 7
    array                          shift and go to state 8
    linkedlist_methods             shift and go to state 9
    hashmap_methods                shift and go to state 10
    initialization                 shift and go to state 11
    input                          shift and go to state 12
    assignation                    shift and go to state 13
    declare_data_type              shift and go to state 14
    casting                        shift and go to state 15
    for_str                        shift and go to state 20
    for_str_tagged                 shift and go to state 21
    if                             shift and go to state 22
    else                           shift and go to state 23
    else_if                        shift and go to state 24
    while                          shift and go to state 25
    let_initialization             shift and go to state 27
    const_initialization           shift and go to state 28
    data_str                       shift and go to state 29
    input_init                     shift and go to state 30
    flotante                       shift and go to state 31
    sigint                         shift and go to state 32
    unsigint                       shift and go to state 33
    label                          shift and go to state 35
    hashmap                        shift and go to state 40
    linkedlist                     shift and go to state 41

state 129

    (83) conditional -> VARIABLE comparator . data
    (66) data -> . CADENA
    (67) data -> . INTEGER
    (68) data -> . CHAR
    (69) data -> . FLOAT
    (70) data -> . KW_FALSE
    (71) data -> . KW_TRUE
    (72) data -> . tuple
    (100) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 74
    INTEGER         shift and go to state 75
    CHAR            shift and go to state 76
    FLOAT           shift and go to state 77
    KW_FALSE        shift and go to state 78
    KW_TRUE         shift and go to state 79
    LPAREN          shift and go to state 81

    data                           shift and go to state 197
    tuple                          shift and go to state 80

state 130

    (74) comparator -> EQ .

    CADENA          reduce using rule 74 (comparator -> EQ .)
    INTEGER         reduce using rule 74 (comparator -> EQ .)
    CHAR            reduce using rule 74 (comparator -> EQ .)
    FLOAT           reduce using rule 74 (comparator -> EQ .)
    KW_FALSE        reduce using rule 74 (comparator -> EQ .)
    KW_TRUE         reduce using rule 74 (comparator -> EQ .)
    LPAREN          reduce using rule 74 (comparator -> EQ .)


state 131

    (75) comparator -> NE .

    CADENA          reduce using rule 75 (comparator -> NE .)
    INTEGER         reduce using rule 75 (comparator -> NE .)
    CHAR            reduce using rule 75 (comparator -> NE .)
    FLOAT           reduce using rule 75 (comparator -> NE .)
    KW_FALSE        reduce using rule 75 (comparator -> NE .)
    KW_TRUE         reduce using rule 75 (comparator -> NE .)
    LPAREN          reduce using rule 75 (comparator -> NE .)


state 132

    (76) comparator -> GE .

    CADENA          reduce using rule 76 (comparator -> GE .)
    INTEGER         reduce using rule 76 (comparator -> GE .)
    CHAR            reduce using rule 76 (comparator -> GE .)
    FLOAT           reduce using rule 76 (comparator -> GE .)
    KW_FALSE        reduce using rule 76 (comparator -> GE .)
    KW_TRUE         reduce using rule 76 (comparator -> GE .)
    LPAREN          reduce using rule 76 (comparator -> GE .)


state 133

    (77) comparator -> LE .

    CADENA          reduce using rule 77 (comparator -> LE .)
    INTEGER         reduce using rule 77 (comparator -> LE .)
    CHAR            reduce using rule 77 (comparator -> LE .)
    FLOAT           reduce using rule 77 (comparator -> LE .)
    KW_FALSE        reduce using rule 77 (comparator -> LE .)
    KW_TRUE         reduce using rule 77 (comparator -> LE .)
    LPAREN          reduce using rule 77 (comparator -> LE .)


state 134

    (78) comparator -> GT .

    CADENA          reduce using rule 78 (comparator -> GT .)
    INTEGER         reduce using rule 78 (comparator -> GT .)
    CHAR            reduce using rule 78 (comparator -> GT .)
    FLOAT           reduce using rule 78 (comparator -> GT .)
    KW_FALSE        reduce using rule 78 (comparator -> GT .)
    KW_TRUE         reduce using rule 78 (comparator -> GT .)
    LPAREN          reduce using rule 78 (comparator -> GT .)


state 135

    (79) comparator -> LT .

    CADENA          reduce using rule 79 (comparator -> LT .)
    INTEGER         reduce using rule 79 (comparator -> LT .)
    CHAR            reduce using rule 79 (comparator -> LT .)
    FLOAT           reduce using rule 79 (comparator -> LT .)
    KW_FALSE        reduce using rule 79 (comparator -> LT .)
    KW_TRUE         reduce using rule 79 (comparator -> LT .)
    LPAREN          reduce using rule 79 (comparator -> LT .)


state 136

    (84) conditional -> LPAREN lvariable . RPAREN comparator data

    RPAREN          shift and go to state 198


state 137

    (82) lvariable -> VARIABLE . logic VARIABLE
    (80) logic -> . LOR
    (81) logic -> . LAND

    LOR             shift and go to state 200
    LAND            shift and go to state 201

    logic                          shift and go to state 199

state 138

    (148) else -> KW_ELSE LBRACE main_rule . RBRACE

    RBRACE          shift and go to state 202


state 139

    (149) else_if -> KW_ELSE KW_IF conditional . LBRACE main_rule RBRACE

    LBRACE          shift and go to state 203


state 140

    (99) while -> KW_WHILE conditional LBRACE . main_rule RBRACE
    (1) main_rule -> . father_rule
    (2) main_rule -> . father_rule main_rule
    (3) father_rule -> . print
    (4) father_rule -> . dvariable
    (5) father_rule -> . function
    (6) father_rule -> . control_str
    (7) father_rule -> . void
    (8) father_rule -> . array
    (9) father_rule -> . linkedlist_methods
    (10) father_rule -> . hashmap_methods
    (11) father_rule -> . initialization
    (12) father_rule -> . input
    (13) father_rule -> . assignation
    (14) father_rule -> . declare_data_type
    (15) father_rule -> . casting
    (87) print -> . KW_PRINT LNOT LPAREN CADENA RPAREN SEMI
    (88) print -> . KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI
    (89) dvariable -> . KW_LET VARIABLE COLON data_type SEMI
    (116) function -> . KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE
    (150) function -> . KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE
    (117) control_str -> . for_str
    (118) control_str -> . for_str_tagged
    (119) control_str -> . if
    (120) control_str -> . else
    (121) control_str -> . else_if
    (122) control_str -> . while
    (138) void -> .
    (90) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (91) array -> . LBRACKET mdata RBRACKET
    (92) array -> . LBRACKET data SEMI data RBRACKET
    (93) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (94) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (95) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (96) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (143) linkedlist_methods -> . VARIABLE linkedlist_push
    (144) linkedlist_methods -> . VARIABLE linkedlist_remove
    (134) hashmap_methods -> . VARIABLE hashmap_insert
    (135) hashmap_methods -> . VARIABLE hashmap_remove
    (101) initialization -> . let_initialization SEMI
    (102) initialization -> . const_initialization SEMI
    (103) initialization -> . data_str SEMI
    (104) initialization -> . input_init SEMI
    (157) input -> . VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI
    (158) assignation -> . VARIABLE assign_operators number SEMI
    (159) assignation -> . VARIABLE assign_operators expression SEMI
    (160) assignation -> . VARIABLE assign_operators number
    (161) assignation -> . VARIABLE assign_operators expression
    (162) declare_data_type -> . KW_LET VARIABLE COLON data_type SEMI
    (59) casting -> . flotante KW_AS sigint
    (60) casting -> . flotante KW_AS unsigint
    (61) casting -> . sigint KW_AS flotante
    (62) casting -> . unsigint KW_AS flotante
    (63) casting -> . flotante KW_AS flotante
    (123) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE
    (124) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE
    (125) for_str_tagged -> . label COLON for_str
    (147) if -> . KW_IF conditional LBRACE main_rule RBRACE
    (148) else -> . KW_ELSE LBRACE main_rule RBRACE
    (149) else_if -> . KW_ELSE KW_IF conditional LBRACE main_rule RBRACE
    (99) while -> . KW_WHILE conditional LBRACE main_rule RBRACE
    (105) let_initialization -> . KW_LET VARIABLE EQUALS data
    (106) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS data
    (107) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS data
    (108) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS data
    (109) let_initialization -> . KW_LET VARIABLE EQUALS expression_var
    (110) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS expression_var
    (111) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS expression_var
    (112) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var
    (113) const_initialization -> . KW_CONST VARIABLE COLON data_type EQUALS data
    (129) data_str -> . array
    (130) data_str -> . hashmap
    (131) data_str -> . linkedlist
    (156) input_init -> . KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN
    (57) flotante -> . FLOAT_32
    (58) flotante -> . FLOAT_64
    (47) sigint -> . SIG_INT_8
    (48) sigint -> . SIG_INT_16
    (49) sigint -> . SIG_INT_32
    (50) sigint -> . SIG_INT_64
    (51) sigint -> . SIG_INT_128
    (52) unsigint -> . UNSIG_INT_8
    (53) unsigint -> . UNSIG_INT_16
    (54) unsigint -> . UNSIG_INT_32
    (55) unsigint -> . UNSIG_INT_64
    (56) unsigint -> . UNSIG_INT_128
    (128) label -> . QUOTE VARIABLE
    (132) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (133) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (139) linkedlist -> . KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (140) linkedlist -> . KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (141) linkedlist -> . KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (142) linkedlist -> . KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN

  ! shift/reduce conflict for KW_PRINT resolved as shift
  ! shift/reduce conflict for KW_LET resolved as shift
  ! shift/reduce conflict for KW_FN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for KW_FOR resolved as shift
  ! shift/reduce conflict for KW_IF resolved as shift
  ! shift/reduce conflict for KW_ELSE resolved as shift
  ! shift/reduce conflict for KW_WHILE resolved as shift
  ! shift/reduce conflict for KW_CONST resolved as shift
  ! shift/reduce conflict for FLOAT_32 resolved as shift
  ! shift/reduce conflict for FLOAT_64 resolved as shift
  ! shift/reduce conflict for SIG_INT_8 resolved as shift
  ! shift/reduce conflict for SIG_INT_16 resolved as shift
  ! shift/reduce conflict for SIG_INT_32 resolved as shift
  ! shift/reduce conflict for SIG_INT_64 resolved as shift
  ! shift/reduce conflict for SIG_INT_128 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_8 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_16 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_32 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_64 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_128 resolved as shift
  ! shift/reduce conflict for QUOTE resolved as shift
    KW_PRINT        shift and go to state 16
    KW_LET          shift and go to state 18
    KW_FN           shift and go to state 19
    RBRACE          reduce using rule 138 (void -> .)
    LBRACKET        shift and go to state 26
    VARIABLE        shift and go to state 17
    KW_FOR          shift and go to state 34
    KW_IF           shift and go to state 36
    KW_ELSE         shift and go to state 37
    KW_WHILE        shift and go to state 38
    KW_CONST        shift and go to state 39
    FLOAT_32        shift and go to state 42
    FLOAT_64        shift and go to state 43
    SIG_INT_8       shift and go to state 44
    SIG_INT_16      shift and go to state 45
    SIG_INT_32      shift and go to state 46
    SIG_INT_64      shift and go to state 47
    SIG_INT_128     shift and go to state 48
    UNSIG_INT_8     shift and go to state 49
    UNSIG_INT_16    shift and go to state 50
    UNSIG_INT_32    shift and go to state 51
    UNSIG_INT_64    shift and go to state 52
    UNSIG_INT_128   shift and go to state 53
    QUOTE           shift and go to state 54

  ! KW_PRINT        [ reduce using rule 138 (void -> .) ]
  ! KW_LET          [ reduce using rule 138 (void -> .) ]
  ! KW_FN           [ reduce using rule 138 (void -> .) ]
  ! LBRACKET        [ reduce using rule 138 (void -> .) ]
  ! VARIABLE        [ reduce using rule 138 (void -> .) ]
  ! KW_FOR          [ reduce using rule 138 (void -> .) ]
  ! KW_IF           [ reduce using rule 138 (void -> .) ]
  ! KW_ELSE         [ reduce using rule 138 (void -> .) ]
  ! KW_WHILE        [ reduce using rule 138 (void -> .) ]
  ! KW_CONST        [ reduce using rule 138 (void -> .) ]
  ! FLOAT_32        [ reduce using rule 138 (void -> .) ]
  ! FLOAT_64        [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_8       [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_16      [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_32      [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_64      [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_128     [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_8     [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_16    [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_32    [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_64    [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_128   [ reduce using rule 138 (void -> .) ]
  ! QUOTE           [ reduce using rule 138 (void -> .) ]

    main_rule                      shift and go to state 204
    father_rule                    shift and go to state 2
    print                          shift and go to state 3
    dvariable                      shift and go to state 4
    function                       shift and go to state 5
    control_str                    shift and go to state 6
    void                           shift and go to state 7
    array                          shift and go to state 8
    linkedlist_methods             shift and go to state 9
    hashmap_methods                shift and go to state 10
    initialization                 shift and go to state 11
    input                          shift and go to state 12
    assignation                    shift and go to state 13
    declare_data_type              shift and go to state 14
    casting                        shift and go to state 15
    for_str                        shift and go to state 20
    for_str_tagged                 shift and go to state 21
    if                             shift and go to state 22
    else                           shift and go to state 23
    else_if                        shift and go to state 24
    while                          shift and go to state 25
    let_initialization             shift and go to state 27
    const_initialization           shift and go to state 28
    data_str                       shift and go to state 29
    input_init                     shift and go to state 30
    flotante                       shift and go to state 31
    sigint                         shift and go to state 32
    unsigint                       shift and go to state 33
    label                          shift and go to state 35
    hashmap                        shift and go to state 40
    linkedlist                     shift and go to state 41

state 141

    (113) const_initialization -> KW_CONST VARIABLE COLON . data_type EQUALS data
    (26) data_type -> . UNSIG_INT_8
    (27) data_type -> . UNSIG_INT_16
    (28) data_type -> . UNSIG_INT_32
    (29) data_type -> . UNSIG_INT_64
    (30) data_type -> . UNSIG_INT_128
    (31) data_type -> . SIG_INT_8
    (32) data_type -> . SIG_INT_16
    (33) data_type -> . SIG_INT_32
    (34) data_type -> . SIG_INT_64
    (35) data_type -> . SIG_INT_128
    (36) data_type -> . FLOAT_32
    (37) data_type -> . FLOAT_64
    (38) data_type -> . KW_BOOLEAN
    (39) data_type -> . KW_STRING
    (40) data_type -> . KW_CHARACTER

    UNSIG_INT_8     shift and go to state 159
    UNSIG_INT_16    shift and go to state 160
    UNSIG_INT_32    shift and go to state 161
    UNSIG_INT_64    shift and go to state 162
    UNSIG_INT_128   shift and go to state 163
    SIG_INT_8       shift and go to state 164
    SIG_INT_16      shift and go to state 165
    SIG_INT_32      shift and go to state 166
    SIG_INT_64      shift and go to state 167
    SIG_INT_128     shift and go to state 168
    FLOAT_32        shift and go to state 169
    FLOAT_64        shift and go to state 170
    KW_BOOLEAN      shift and go to state 171
    KW_STRING       shift and go to state 172
    KW_CHARACTER    shift and go to state 173

    data_type                      shift and go to state 205

state 142

    (87) print -> KW_PRINT LNOT LPAREN CADENA . RPAREN SEMI
    (88) print -> KW_PRINT LNOT LPAREN CADENA . COMMA VARIABLE RPAREN SEMI

    RPAREN          shift and go to state 206
    COMMA           shift and go to state 207


state 143

    (157) input -> VARIABLE DOT KW_READ_LINE LPAREN . AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI

    AND             shift and go to state 208


state 144

    (145) linkedlist_push -> DOT KW_PUSH_BACK LPAREN . data RPAREN SEMI
    (66) data -> . CADENA
    (67) data -> . INTEGER
    (68) data -> . CHAR
    (69) data -> . FLOAT
    (70) data -> . KW_FALSE
    (71) data -> . KW_TRUE
    (72) data -> . tuple
    (100) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 74
    INTEGER         shift and go to state 75
    CHAR            shift and go to state 76
    FLOAT           shift and go to state 77
    KW_FALSE        shift and go to state 78
    KW_TRUE         shift and go to state 79
    LPAREN          shift and go to state 81

    data                           shift and go to state 209
    tuple                          shift and go to state 80

state 145

    (146) linkedlist_remove -> DOT KW_REMOVE LPAREN . INTEGER RPAREN SEMI
    (137) hashmap_remove -> DOT KW_REMOVE LPAREN . AND data RPAREN SEMI

    INTEGER         shift and go to state 210
    AND             shift and go to state 211


state 146

    (136) hashmap_insert -> DOT KW_INSERT LPAREN . data COMMA data RPAREN SEMI
    (66) data -> . CADENA
    (67) data -> . INTEGER
    (68) data -> . CHAR
    (69) data -> . FLOAT
    (70) data -> . KW_FALSE
    (71) data -> . KW_TRUE
    (72) data -> . tuple
    (100) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 74
    INTEGER         shift and go to state 75
    CHAR            shift and go to state 76
    FLOAT           shift and go to state 77
    KW_FALSE        shift and go to state 78
    KW_TRUE         shift and go to state 79
    LPAREN          shift and go to state 81

    data                           shift and go to state 212
    tuple                          shift and go to state 80

state 147

    (158) assignation -> VARIABLE assign_operators number SEMI .

    KW_PRINT        reduce using rule 158 (assignation -> VARIABLE assign_operators number SEMI .)
    KW_LET          reduce using rule 158 (assignation -> VARIABLE assign_operators number SEMI .)
    KW_FN           reduce using rule 158 (assignation -> VARIABLE assign_operators number SEMI .)
    LBRACKET        reduce using rule 158 (assignation -> VARIABLE assign_operators number SEMI .)
    VARIABLE        reduce using rule 158 (assignation -> VARIABLE assign_operators number SEMI .)
    KW_FOR          reduce using rule 158 (assignation -> VARIABLE assign_operators number SEMI .)
    KW_IF           reduce using rule 158 (assignation -> VARIABLE assign_operators number SEMI .)
    KW_ELSE         reduce using rule 158 (assignation -> VARIABLE assign_operators number SEMI .)
    KW_WHILE        reduce using rule 158 (assignation -> VARIABLE assign_operators number SEMI .)
    KW_CONST        reduce using rule 158 (assignation -> VARIABLE assign_operators number SEMI .)
    FLOAT_32        reduce using rule 158 (assignation -> VARIABLE assign_operators number SEMI .)
    FLOAT_64        reduce using rule 158 (assignation -> VARIABLE assign_operators number SEMI .)
    SIG_INT_8       reduce using rule 158 (assignation -> VARIABLE assign_operators number SEMI .)
    SIG_INT_16      reduce using rule 158 (assignation -> VARIABLE assign_operators number SEMI .)
    SIG_INT_32      reduce using rule 158 (assignation -> VARIABLE assign_operators number SEMI .)
    SIG_INT_64      reduce using rule 158 (assignation -> VARIABLE assign_operators number SEMI .)
    SIG_INT_128     reduce using rule 158 (assignation -> VARIABLE assign_operators number SEMI .)
    UNSIG_INT_8     reduce using rule 158 (assignation -> VARIABLE assign_operators number SEMI .)
    UNSIG_INT_16    reduce using rule 158 (assignation -> VARIABLE assign_operators number SEMI .)
    UNSIG_INT_32    reduce using rule 158 (assignation -> VARIABLE assign_operators number SEMI .)
    UNSIG_INT_64    reduce using rule 158 (assignation -> VARIABLE assign_operators number SEMI .)
    UNSIG_INT_128   reduce using rule 158 (assignation -> VARIABLE assign_operators number SEMI .)
    QUOTE           reduce using rule 158 (assignation -> VARIABLE assign_operators number SEMI .)
    $end            reduce using rule 158 (assignation -> VARIABLE assign_operators number SEMI .)
    RBRACE          reduce using rule 158 (assignation -> VARIABLE assign_operators number SEMI .)
    KW_RETURN       reduce using rule 158 (assignation -> VARIABLE assign_operators number SEMI .)


state 148

    (159) assignation -> VARIABLE assign_operators expression SEMI .

    KW_PRINT        reduce using rule 159 (assignation -> VARIABLE assign_operators expression SEMI .)
    KW_LET          reduce using rule 159 (assignation -> VARIABLE assign_operators expression SEMI .)
    KW_FN           reduce using rule 159 (assignation -> VARIABLE assign_operators expression SEMI .)
    LBRACKET        reduce using rule 159 (assignation -> VARIABLE assign_operators expression SEMI .)
    VARIABLE        reduce using rule 159 (assignation -> VARIABLE assign_operators expression SEMI .)
    KW_FOR          reduce using rule 159 (assignation -> VARIABLE assign_operators expression SEMI .)
    KW_IF           reduce using rule 159 (assignation -> VARIABLE assign_operators expression SEMI .)
    KW_ELSE         reduce using rule 159 (assignation -> VARIABLE assign_operators expression SEMI .)
    KW_WHILE        reduce using rule 159 (assignation -> VARIABLE assign_operators expression SEMI .)
    KW_CONST        reduce using rule 159 (assignation -> VARIABLE assign_operators expression SEMI .)
    FLOAT_32        reduce using rule 159 (assignation -> VARIABLE assign_operators expression SEMI .)
    FLOAT_64        reduce using rule 159 (assignation -> VARIABLE assign_operators expression SEMI .)
    SIG_INT_8       reduce using rule 159 (assignation -> VARIABLE assign_operators expression SEMI .)
    SIG_INT_16      reduce using rule 159 (assignation -> VARIABLE assign_operators expression SEMI .)
    SIG_INT_32      reduce using rule 159 (assignation -> VARIABLE assign_operators expression SEMI .)
    SIG_INT_64      reduce using rule 159 (assignation -> VARIABLE assign_operators expression SEMI .)
    SIG_INT_128     reduce using rule 159 (assignation -> VARIABLE assign_operators expression SEMI .)
    UNSIG_INT_8     reduce using rule 159 (assignation -> VARIABLE assign_operators expression SEMI .)
    UNSIG_INT_16    reduce using rule 159 (assignation -> VARIABLE assign_operators expression SEMI .)
    UNSIG_INT_32    reduce using rule 159 (assignation -> VARIABLE assign_operators expression SEMI .)
    UNSIG_INT_64    reduce using rule 159 (assignation -> VARIABLE assign_operators expression SEMI .)
    UNSIG_INT_128   reduce using rule 159 (assignation -> VARIABLE assign_operators expression SEMI .)
    QUOTE           reduce using rule 159 (assignation -> VARIABLE assign_operators expression SEMI .)
    $end            reduce using rule 159 (assignation -> VARIABLE assign_operators expression SEMI .)
    RBRACE          reduce using rule 159 (assignation -> VARIABLE assign_operators expression SEMI .)
    KW_RETURN       reduce using rule 159 (assignation -> VARIABLE assign_operators expression SEMI .)


state 149

    (16) expression -> expression PLUS . expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . number
    (21) expression -> . division
    (22) expression -> . variable
    (23) number -> . INTEGER
    (24) number -> . FLOAT
    (64) division -> . INTEGER DIVIDE INTEGER
    (65) division -> . FLOAT DIVIDE FLOAT
    (25) variable -> . VARIABLE

    LPAREN          shift and go to state 109
    INTEGER         shift and go to state 107
    FLOAT           shift and go to state 108
    VARIABLE        shift and go to state 104

    expression                     shift and go to state 213
    number                         shift and go to state 155
    division                       shift and go to state 110
    variable                       shift and go to state 111

state 150

    (17) expression -> expression MINUS . expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . number
    (21) expression -> . division
    (22) expression -> . variable
    (23) number -> . INTEGER
    (24) number -> . FLOAT
    (64) division -> . INTEGER DIVIDE INTEGER
    (65) division -> . FLOAT DIVIDE FLOAT
    (25) variable -> . VARIABLE

    LPAREN          shift and go to state 109
    INTEGER         shift and go to state 107
    FLOAT           shift and go to state 108
    VARIABLE        shift and go to state 104

    expression                     shift and go to state 214
    number                         shift and go to state 155
    division                       shift and go to state 110
    variable                       shift and go to state 111

state 151

    (18) expression -> expression TIMES . expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . number
    (21) expression -> . division
    (22) expression -> . variable
    (23) number -> . INTEGER
    (24) number -> . FLOAT
    (64) division -> . INTEGER DIVIDE INTEGER
    (65) division -> . FLOAT DIVIDE FLOAT
    (25) variable -> . VARIABLE

    LPAREN          shift and go to state 109
    INTEGER         shift and go to state 107
    FLOAT           shift and go to state 108
    VARIABLE        shift and go to state 104

    expression                     shift and go to state 215
    number                         shift and go to state 155
    division                       shift and go to state 110
    variable                       shift and go to state 111

state 152

    (64) division -> INTEGER DIVIDE . INTEGER

    INTEGER         shift and go to state 216


state 153

    (65) division -> FLOAT DIVIDE . FLOAT

    FLOAT           shift and go to state 217


state 154

    (19) expression -> LPAREN expression . RPAREN
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . MINUS expression
    (18) expression -> expression . TIMES expression

    RPAREN          shift and go to state 218
    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    TIMES           shift and go to state 151


state 155

    (20) expression -> number .

    RPAREN          reduce using rule 20 (expression -> number .)
    PLUS            reduce using rule 20 (expression -> number .)
    MINUS           reduce using rule 20 (expression -> number .)
    TIMES           reduce using rule 20 (expression -> number .)
    SEMI            reduce using rule 20 (expression -> number .)
    KW_PRINT        reduce using rule 20 (expression -> number .)
    KW_LET          reduce using rule 20 (expression -> number .)
    KW_FN           reduce using rule 20 (expression -> number .)
    LBRACKET        reduce using rule 20 (expression -> number .)
    VARIABLE        reduce using rule 20 (expression -> number .)
    KW_FOR          reduce using rule 20 (expression -> number .)
    KW_IF           reduce using rule 20 (expression -> number .)
    KW_ELSE         reduce using rule 20 (expression -> number .)
    KW_WHILE        reduce using rule 20 (expression -> number .)
    KW_CONST        reduce using rule 20 (expression -> number .)
    FLOAT_32        reduce using rule 20 (expression -> number .)
    FLOAT_64        reduce using rule 20 (expression -> number .)
    SIG_INT_8       reduce using rule 20 (expression -> number .)
    SIG_INT_16      reduce using rule 20 (expression -> number .)
    SIG_INT_32      reduce using rule 20 (expression -> number .)
    SIG_INT_64      reduce using rule 20 (expression -> number .)
    SIG_INT_128     reduce using rule 20 (expression -> number .)
    UNSIG_INT_8     reduce using rule 20 (expression -> number .)
    UNSIG_INT_16    reduce using rule 20 (expression -> number .)
    UNSIG_INT_32    reduce using rule 20 (expression -> number .)
    UNSIG_INT_64    reduce using rule 20 (expression -> number .)
    UNSIG_INT_128   reduce using rule 20 (expression -> number .)
    QUOTE           reduce using rule 20 (expression -> number .)
    $end            reduce using rule 20 (expression -> number .)
    RBRACE          reduce using rule 20 (expression -> number .)
    KW_RETURN       reduce using rule 20 (expression -> number .)


state 156

    (89) dvariable -> KW_LET VARIABLE COLON data_type . SEMI
    (162) declare_data_type -> KW_LET VARIABLE COLON data_type . SEMI
    (106) let_initialization -> KW_LET VARIABLE COLON data_type . EQUALS data
    (110) let_initialization -> KW_LET VARIABLE COLON data_type . EQUALS expression_var

    SEMI            shift and go to state 219
    EQUALS          shift and go to state 220


state 157

    (93) array -> KW_LET VARIABLE COLON LBRACKET . data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (94) array -> KW_LET VARIABLE COLON LBRACKET . data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (26) data_type -> . UNSIG_INT_8
    (27) data_type -> . UNSIG_INT_16
    (28) data_type -> . UNSIG_INT_32
    (29) data_type -> . UNSIG_INT_64
    (30) data_type -> . UNSIG_INT_128
    (31) data_type -> . SIG_INT_8
    (32) data_type -> . SIG_INT_16
    (33) data_type -> . SIG_INT_32
    (34) data_type -> . SIG_INT_64
    (35) data_type -> . SIG_INT_128
    (36) data_type -> . FLOAT_32
    (37) data_type -> . FLOAT_64
    (38) data_type -> . KW_BOOLEAN
    (39) data_type -> . KW_STRING
    (40) data_type -> . KW_CHARACTER

    UNSIG_INT_8     shift and go to state 159
    UNSIG_INT_16    shift and go to state 160
    UNSIG_INT_32    shift and go to state 161
    UNSIG_INT_64    shift and go to state 162
    UNSIG_INT_128   shift and go to state 163
    SIG_INT_8       shift and go to state 164
    SIG_INT_16      shift and go to state 165
    SIG_INT_32      shift and go to state 166
    SIG_INT_64      shift and go to state 167
    SIG_INT_128     shift and go to state 168
    FLOAT_32        shift and go to state 169
    FLOAT_64        shift and go to state 170
    KW_BOOLEAN      shift and go to state 171
    KW_STRING       shift and go to state 172
    KW_CHARACTER    shift and go to state 173

    data_type                      shift and go to state 221

state 158

    (139) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST . LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN

    LT              shift and go to state 222


state 159

    (26) data_type -> UNSIG_INT_8 .

    SEMI            reduce using rule 26 (data_type -> UNSIG_INT_8 .)
    EQUALS          reduce using rule 26 (data_type -> UNSIG_INT_8 .)
    GT              reduce using rule 26 (data_type -> UNSIG_INT_8 .)
    LBRACE          reduce using rule 26 (data_type -> UNSIG_INT_8 .)


state 160

    (27) data_type -> UNSIG_INT_16 .

    SEMI            reduce using rule 27 (data_type -> UNSIG_INT_16 .)
    EQUALS          reduce using rule 27 (data_type -> UNSIG_INT_16 .)
    GT              reduce using rule 27 (data_type -> UNSIG_INT_16 .)
    LBRACE          reduce using rule 27 (data_type -> UNSIG_INT_16 .)


state 161

    (28) data_type -> UNSIG_INT_32 .

    SEMI            reduce using rule 28 (data_type -> UNSIG_INT_32 .)
    EQUALS          reduce using rule 28 (data_type -> UNSIG_INT_32 .)
    GT              reduce using rule 28 (data_type -> UNSIG_INT_32 .)
    LBRACE          reduce using rule 28 (data_type -> UNSIG_INT_32 .)


state 162

    (29) data_type -> UNSIG_INT_64 .

    SEMI            reduce using rule 29 (data_type -> UNSIG_INT_64 .)
    EQUALS          reduce using rule 29 (data_type -> UNSIG_INT_64 .)
    GT              reduce using rule 29 (data_type -> UNSIG_INT_64 .)
    LBRACE          reduce using rule 29 (data_type -> UNSIG_INT_64 .)


state 163

    (30) data_type -> UNSIG_INT_128 .

    SEMI            reduce using rule 30 (data_type -> UNSIG_INT_128 .)
    EQUALS          reduce using rule 30 (data_type -> UNSIG_INT_128 .)
    GT              reduce using rule 30 (data_type -> UNSIG_INT_128 .)
    LBRACE          reduce using rule 30 (data_type -> UNSIG_INT_128 .)


state 164

    (31) data_type -> SIG_INT_8 .

    SEMI            reduce using rule 31 (data_type -> SIG_INT_8 .)
    EQUALS          reduce using rule 31 (data_type -> SIG_INT_8 .)
    GT              reduce using rule 31 (data_type -> SIG_INT_8 .)
    LBRACE          reduce using rule 31 (data_type -> SIG_INT_8 .)


state 165

    (32) data_type -> SIG_INT_16 .

    SEMI            reduce using rule 32 (data_type -> SIG_INT_16 .)
    EQUALS          reduce using rule 32 (data_type -> SIG_INT_16 .)
    GT              reduce using rule 32 (data_type -> SIG_INT_16 .)
    LBRACE          reduce using rule 32 (data_type -> SIG_INT_16 .)


state 166

    (33) data_type -> SIG_INT_32 .

    SEMI            reduce using rule 33 (data_type -> SIG_INT_32 .)
    EQUALS          reduce using rule 33 (data_type -> SIG_INT_32 .)
    GT              reduce using rule 33 (data_type -> SIG_INT_32 .)
    LBRACE          reduce using rule 33 (data_type -> SIG_INT_32 .)


state 167

    (34) data_type -> SIG_INT_64 .

    SEMI            reduce using rule 34 (data_type -> SIG_INT_64 .)
    EQUALS          reduce using rule 34 (data_type -> SIG_INT_64 .)
    GT              reduce using rule 34 (data_type -> SIG_INT_64 .)
    LBRACE          reduce using rule 34 (data_type -> SIG_INT_64 .)


state 168

    (35) data_type -> SIG_INT_128 .

    SEMI            reduce using rule 35 (data_type -> SIG_INT_128 .)
    EQUALS          reduce using rule 35 (data_type -> SIG_INT_128 .)
    GT              reduce using rule 35 (data_type -> SIG_INT_128 .)
    LBRACE          reduce using rule 35 (data_type -> SIG_INT_128 .)


state 169

    (36) data_type -> FLOAT_32 .

    SEMI            reduce using rule 36 (data_type -> FLOAT_32 .)
    EQUALS          reduce using rule 36 (data_type -> FLOAT_32 .)
    GT              reduce using rule 36 (data_type -> FLOAT_32 .)
    LBRACE          reduce using rule 36 (data_type -> FLOAT_32 .)


state 170

    (37) data_type -> FLOAT_64 .

    SEMI            reduce using rule 37 (data_type -> FLOAT_64 .)
    EQUALS          reduce using rule 37 (data_type -> FLOAT_64 .)
    GT              reduce using rule 37 (data_type -> FLOAT_64 .)
    LBRACE          reduce using rule 37 (data_type -> FLOAT_64 .)


state 171

    (38) data_type -> KW_BOOLEAN .

    SEMI            reduce using rule 38 (data_type -> KW_BOOLEAN .)
    EQUALS          reduce using rule 38 (data_type -> KW_BOOLEAN .)
    GT              reduce using rule 38 (data_type -> KW_BOOLEAN .)
    LBRACE          reduce using rule 38 (data_type -> KW_BOOLEAN .)


state 172

    (39) data_type -> KW_STRING .

    SEMI            reduce using rule 39 (data_type -> KW_STRING .)
    EQUALS          reduce using rule 39 (data_type -> KW_STRING .)
    GT              reduce using rule 39 (data_type -> KW_STRING .)
    LBRACE          reduce using rule 39 (data_type -> KW_STRING .)


state 173

    (40) data_type -> KW_CHARACTER .

    SEMI            reduce using rule 40 (data_type -> KW_CHARACTER .)
    EQUALS          reduce using rule 40 (data_type -> KW_CHARACTER .)
    GT              reduce using rule 40 (data_type -> KW_CHARACTER .)
    LBRACE          reduce using rule 40 (data_type -> KW_CHARACTER .)


state 174

    (90) array -> KW_LET VARIABLE EQUALS LBRACKET . mdata RBRACKET SEMI
    (85) mdata -> . data
    (86) mdata -> . data COMMA mdata
    (66) data -> . CADENA
    (67) data -> . INTEGER
    (68) data -> . CHAR
    (69) data -> . FLOAT
    (70) data -> . KW_FALSE
    (71) data -> . KW_TRUE
    (72) data -> . tuple
    (100) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 74
    INTEGER         shift and go to state 75
    CHAR            shift and go to state 76
    FLOAT           shift and go to state 77
    KW_FALSE        shift and go to state 78
    KW_TRUE         shift and go to state 79
    LPAREN          shift and go to state 81

    mdata                          shift and go to state 223
    data                           shift and go to state 120
    tuple                          shift and go to state 80

state 175

    (105) let_initialization -> KW_LET VARIABLE EQUALS data .
    (152) expression_var -> data .

  ! reduce/reduce conflict for SEMI resolved using rule 105 (let_initialization -> KW_LET VARIABLE EQUALS data .)
    SEMI            reduce using rule 105 (let_initialization -> KW_LET VARIABLE EQUALS data .)

  ! SEMI            [ reduce using rule 152 (expression_var -> data .) ]


state 176

    (109) let_initialization -> KW_LET VARIABLE EQUALS expression_var .

    SEMI            reduce using rule 109 (let_initialization -> KW_LET VARIABLE EQUALS expression_var .)


state 177

    (156) input_init -> KW_LET VARIABLE EQUALS KW_IO . COLON COLON KW_STDIN LPAREN RPAREN

    COLON           shift and go to state 224


state 178

    (100) tuple -> LPAREN . mdata RPAREN
    (19) expression -> LPAREN . expression RPAREN
    (85) mdata -> . data
    (86) mdata -> . data COMMA mdata
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . number
    (21) expression -> . division
    (22) expression -> . variable
    (66) data -> . CADENA
    (67) data -> . INTEGER
    (68) data -> . CHAR
    (69) data -> . FLOAT
    (70) data -> . KW_FALSE
    (71) data -> . KW_TRUE
    (72) data -> . tuple
    (23) number -> . INTEGER
    (24) number -> . FLOAT
    (64) division -> . INTEGER DIVIDE INTEGER
    (65) division -> . FLOAT DIVIDE FLOAT
    (25) variable -> . VARIABLE
    (100) tuple -> . LPAREN mdata RPAREN

    LPAREN          shift and go to state 225
    CADENA          shift and go to state 74
    INTEGER         shift and go to state 181
    CHAR            shift and go to state 76
    FLOAT           shift and go to state 182
    KW_FALSE        shift and go to state 78
    KW_TRUE         shift and go to state 79
    VARIABLE        shift and go to state 104

    mdata                          shift and go to state 119
    expression                     shift and go to state 154
    data                           shift and go to state 120
    number                         shift and go to state 155
    division                       shift and go to state 110
    variable                       shift and go to state 111
    tuple                          shift and go to state 80

state 179

    (132) hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP . COLON COLON KW_NEW LPAREN RPAREN

    COLON           shift and go to state 226


state 180

    (141) linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST . COLON COLON KW_FROM LPAREN array RPAREN

    COLON           shift and go to state 227


state 181

    (67) data -> INTEGER .
    (23) number -> INTEGER .
    (64) division -> INTEGER . DIVIDE INTEGER

  ! reduce/reduce conflict for SEMI resolved using rule 23 (number -> INTEGER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 23 (number -> INTEGER .)
    COMMA           reduce using rule 67 (data -> INTEGER .)
    PLUS            reduce using rule 23 (number -> INTEGER .)
    MINUS           reduce using rule 23 (number -> INTEGER .)
    TIMES           reduce using rule 23 (number -> INTEGER .)
    SEMI            reduce using rule 23 (number -> INTEGER .)
    RPAREN          reduce using rule 23 (number -> INTEGER .)
    DIVIDE          shift and go to state 152

  ! SEMI            [ reduce using rule 67 (data -> INTEGER .) ]
  ! RPAREN          [ reduce using rule 67 (data -> INTEGER .) ]


state 182

    (69) data -> FLOAT .
    (24) number -> FLOAT .
    (65) division -> FLOAT . DIVIDE FLOAT

  ! reduce/reduce conflict for SEMI resolved using rule 24 (number -> FLOAT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 24 (number -> FLOAT .)
    COMMA           reduce using rule 69 (data -> FLOAT .)
    PLUS            reduce using rule 24 (number -> FLOAT .)
    MINUS           reduce using rule 24 (number -> FLOAT .)
    TIMES           reduce using rule 24 (number -> FLOAT .)
    SEMI            reduce using rule 24 (number -> FLOAT .)
    RPAREN          reduce using rule 24 (number -> FLOAT .)
    DIVIDE          shift and go to state 153

  ! SEMI            [ reduce using rule 69 (data -> FLOAT .) ]
  ! RPAREN          [ reduce using rule 69 (data -> FLOAT .) ]


state 183

    (151) expression_var -> expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . MINUS expression
    (18) expression -> expression . TIMES expression

    SEMI            reduce using rule 151 (expression_var -> expression .)
    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    TIMES           shift and go to state 151


state 184

    (95) array -> KW_LET KW_MUT VARIABLE COLON . LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (96) array -> KW_LET KW_MUT VARIABLE COLON . LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (108) let_initialization -> KW_LET KW_MUT VARIABLE COLON . data_type EQUALS data
    (112) let_initialization -> KW_LET KW_MUT VARIABLE COLON . data_type EQUALS expression_var
    (140) linkedlist -> KW_LET KW_MUT VARIABLE COLON . KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (26) data_type -> . UNSIG_INT_8
    (27) data_type -> . UNSIG_INT_16
    (28) data_type -> . UNSIG_INT_32
    (29) data_type -> . UNSIG_INT_64
    (30) data_type -> . UNSIG_INT_128
    (31) data_type -> . SIG_INT_8
    (32) data_type -> . SIG_INT_16
    (33) data_type -> . SIG_INT_32
    (34) data_type -> . SIG_INT_64
    (35) data_type -> . SIG_INT_128
    (36) data_type -> . FLOAT_32
    (37) data_type -> . FLOAT_64
    (38) data_type -> . KW_BOOLEAN
    (39) data_type -> . KW_STRING
    (40) data_type -> . KW_CHARACTER

    LBRACKET        shift and go to state 228
    KW_LINKEDLIST   shift and go to state 230
    UNSIG_INT_8     shift and go to state 159
    UNSIG_INT_16    shift and go to state 160
    UNSIG_INT_32    shift and go to state 161
    UNSIG_INT_64    shift and go to state 162
    UNSIG_INT_128   shift and go to state 163
    SIG_INT_8       shift and go to state 164
    SIG_INT_16      shift and go to state 165
    SIG_INT_32      shift and go to state 166
    SIG_INT_64      shift and go to state 167
    SIG_INT_128     shift and go to state 168
    FLOAT_32        shift and go to state 169
    FLOAT_64        shift and go to state 170
    KW_BOOLEAN      shift and go to state 171
    KW_STRING       shift and go to state 172
    KW_CHARACTER    shift and go to state 173

    data_type                      shift and go to state 229

state 185

    (107) let_initialization -> KW_LET KW_MUT VARIABLE EQUALS . data
    (111) let_initialization -> KW_LET KW_MUT VARIABLE EQUALS . expression_var
    (133) hashmap -> KW_LET KW_MUT VARIABLE EQUALS . KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (142) linkedlist -> KW_LET KW_MUT VARIABLE EQUALS . KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (66) data -> . CADENA
    (67) data -> . INTEGER
    (68) data -> . CHAR
    (69) data -> . FLOAT
    (70) data -> . KW_FALSE
    (71) data -> . KW_TRUE
    (72) data -> . tuple
    (151) expression_var -> . expression
    (152) expression_var -> . data
    (100) tuple -> . LPAREN mdata RPAREN
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . number
    (21) expression -> . division
    (22) expression -> . variable
    (23) number -> . INTEGER
    (24) number -> . FLOAT
    (64) division -> . INTEGER DIVIDE INTEGER
    (65) division -> . FLOAT DIVIDE FLOAT
    (25) variable -> . VARIABLE

    KW_HASHMAP      shift and go to state 233
    KW_LINKEDLIST   shift and go to state 234
    CADENA          shift and go to state 74
    INTEGER         shift and go to state 181
    CHAR            shift and go to state 76
    FLOAT           shift and go to state 182
    KW_FALSE        shift and go to state 78
    KW_TRUE         shift and go to state 79
    LPAREN          shift and go to state 178
    VARIABLE        shift and go to state 104

    data                           shift and go to state 231
    expression_var                 shift and go to state 232
    tuple                          shift and go to state 80
    expression                     shift and go to state 183
    number                         shift and go to state 155
    division                       shift and go to state 110
    variable                       shift and go to state 111

state 186

    (97) variables -> VARIABLE .
    (98) variables -> VARIABLE . COMMA variables

    RPAREN          reduce using rule 97 (variables -> VARIABLE .)
    COMMA           shift and go to state 235


state 187

    (116) function -> KW_FN VARIABLE LPAREN arguments . RPAREN LBRACE main_rule RBRACE
    (150) function -> KW_FN VARIABLE LPAREN arguments . RPAREN MINUS GT data_type LBRACE return RBRACE

    RPAREN          shift and go to state 236


state 188

    (114) arguments -> void .

    RPAREN          reduce using rule 114 (arguments -> void .)


state 189

    (115) arguments -> variables .

    RPAREN          reduce using rule 115 (arguments -> variables .)


state 190

    (92) array -> LBRACKET data SEMI data . RBRACKET

    RBRACKET        shift and go to state 237


state 191

    (86) mdata -> data COMMA mdata .

    RBRACKET        reduce using rule 86 (mdata -> data COMMA mdata .)
    RPAREN          reduce using rule 86 (mdata -> data COMMA mdata .)


state 192

    (100) tuple -> LPAREN mdata RPAREN .

    SEMI            reduce using rule 100 (tuple -> LPAREN mdata RPAREN .)
    COMMA           reduce using rule 100 (tuple -> LPAREN mdata RPAREN .)
    RBRACKET        reduce using rule 100 (tuple -> LPAREN mdata RPAREN .)
    RPAREN          reduce using rule 100 (tuple -> LPAREN mdata RPAREN .)
    LBRACE          reduce using rule 100 (tuple -> LPAREN mdata RPAREN .)


state 193

    (124) for_str -> KW_FOR VARIABLE KW_IN VARIABLE . LBRACE main_rule RBRACE
    (127) range -> VARIABLE . DOT DOT VARIABLE

    LBRACE          shift and go to state 238
    DOT             shift and go to state 239


state 194

    (123) for_str -> KW_FOR VARIABLE KW_IN range . LBRACE main_rule RBRACE

    LBRACE          shift and go to state 240


state 195

    (126) range -> INTEGER . DOT DOT INTEGER

    DOT             shift and go to state 241


state 196

    (147) if -> KW_IF conditional LBRACE main_rule . RBRACE

    RBRACE          shift and go to state 242


state 197

    (83) conditional -> VARIABLE comparator data .

    LBRACE          reduce using rule 83 (conditional -> VARIABLE comparator data .)


state 198

    (84) conditional -> LPAREN lvariable RPAREN . comparator data
    (73) comparator -> .
    (74) comparator -> . EQ
    (75) comparator -> . NE
    (76) comparator -> . GE
    (77) comparator -> . LE
    (78) comparator -> . GT
    (79) comparator -> . LT

    CADENA          reduce using rule 73 (comparator -> .)
    INTEGER         reduce using rule 73 (comparator -> .)
    CHAR            reduce using rule 73 (comparator -> .)
    FLOAT           reduce using rule 73 (comparator -> .)
    KW_FALSE        reduce using rule 73 (comparator -> .)
    KW_TRUE         reduce using rule 73 (comparator -> .)
    LPAREN          reduce using rule 73 (comparator -> .)
    EQ              shift and go to state 130
    NE              shift and go to state 131
    GE              shift and go to state 132
    LE              shift and go to state 133
    GT              shift and go to state 134
    LT              shift and go to state 135

    comparator                     shift and go to state 243

state 199

    (82) lvariable -> VARIABLE logic . VARIABLE

    VARIABLE        shift and go to state 244


state 200

    (80) logic -> LOR .

    VARIABLE        reduce using rule 80 (logic -> LOR .)


state 201

    (81) logic -> LAND .

    VARIABLE        reduce using rule 81 (logic -> LAND .)


state 202

    (148) else -> KW_ELSE LBRACE main_rule RBRACE .

    KW_PRINT        reduce using rule 148 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    KW_LET          reduce using rule 148 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    KW_FN           reduce using rule 148 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    LBRACKET        reduce using rule 148 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    VARIABLE        reduce using rule 148 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    KW_FOR          reduce using rule 148 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    KW_IF           reduce using rule 148 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    KW_ELSE         reduce using rule 148 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    KW_WHILE        reduce using rule 148 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    KW_CONST        reduce using rule 148 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    FLOAT_32        reduce using rule 148 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    FLOAT_64        reduce using rule 148 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    SIG_INT_8       reduce using rule 148 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    SIG_INT_16      reduce using rule 148 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    SIG_INT_32      reduce using rule 148 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    SIG_INT_64      reduce using rule 148 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    SIG_INT_128     reduce using rule 148 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    UNSIG_INT_8     reduce using rule 148 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    UNSIG_INT_16    reduce using rule 148 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    UNSIG_INT_32    reduce using rule 148 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    UNSIG_INT_64    reduce using rule 148 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    UNSIG_INT_128   reduce using rule 148 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    QUOTE           reduce using rule 148 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    $end            reduce using rule 148 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    RBRACE          reduce using rule 148 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    KW_RETURN       reduce using rule 148 (else -> KW_ELSE LBRACE main_rule RBRACE .)


state 203

    (149) else_if -> KW_ELSE KW_IF conditional LBRACE . main_rule RBRACE
    (1) main_rule -> . father_rule
    (2) main_rule -> . father_rule main_rule
    (3) father_rule -> . print
    (4) father_rule -> . dvariable
    (5) father_rule -> . function
    (6) father_rule -> . control_str
    (7) father_rule -> . void
    (8) father_rule -> . array
    (9) father_rule -> . linkedlist_methods
    (10) father_rule -> . hashmap_methods
    (11) father_rule -> . initialization
    (12) father_rule -> . input
    (13) father_rule -> . assignation
    (14) father_rule -> . declare_data_type
    (15) father_rule -> . casting
    (87) print -> . KW_PRINT LNOT LPAREN CADENA RPAREN SEMI
    (88) print -> . KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI
    (89) dvariable -> . KW_LET VARIABLE COLON data_type SEMI
    (116) function -> . KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE
    (150) function -> . KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE
    (117) control_str -> . for_str
    (118) control_str -> . for_str_tagged
    (119) control_str -> . if
    (120) control_str -> . else
    (121) control_str -> . else_if
    (122) control_str -> . while
    (138) void -> .
    (90) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (91) array -> . LBRACKET mdata RBRACKET
    (92) array -> . LBRACKET data SEMI data RBRACKET
    (93) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (94) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (95) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (96) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (143) linkedlist_methods -> . VARIABLE linkedlist_push
    (144) linkedlist_methods -> . VARIABLE linkedlist_remove
    (134) hashmap_methods -> . VARIABLE hashmap_insert
    (135) hashmap_methods -> . VARIABLE hashmap_remove
    (101) initialization -> . let_initialization SEMI
    (102) initialization -> . const_initialization SEMI
    (103) initialization -> . data_str SEMI
    (104) initialization -> . input_init SEMI
    (157) input -> . VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI
    (158) assignation -> . VARIABLE assign_operators number SEMI
    (159) assignation -> . VARIABLE assign_operators expression SEMI
    (160) assignation -> . VARIABLE assign_operators number
    (161) assignation -> . VARIABLE assign_operators expression
    (162) declare_data_type -> . KW_LET VARIABLE COLON data_type SEMI
    (59) casting -> . flotante KW_AS sigint
    (60) casting -> . flotante KW_AS unsigint
    (61) casting -> . sigint KW_AS flotante
    (62) casting -> . unsigint KW_AS flotante
    (63) casting -> . flotante KW_AS flotante
    (123) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE
    (124) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE
    (125) for_str_tagged -> . label COLON for_str
    (147) if -> . KW_IF conditional LBRACE main_rule RBRACE
    (148) else -> . KW_ELSE LBRACE main_rule RBRACE
    (149) else_if -> . KW_ELSE KW_IF conditional LBRACE main_rule RBRACE
    (99) while -> . KW_WHILE conditional LBRACE main_rule RBRACE
    (105) let_initialization -> . KW_LET VARIABLE EQUALS data
    (106) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS data
    (107) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS data
    (108) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS data
    (109) let_initialization -> . KW_LET VARIABLE EQUALS expression_var
    (110) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS expression_var
    (111) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS expression_var
    (112) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var
    (113) const_initialization -> . KW_CONST VARIABLE COLON data_type EQUALS data
    (129) data_str -> . array
    (130) data_str -> . hashmap
    (131) data_str -> . linkedlist
    (156) input_init -> . KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN
    (57) flotante -> . FLOAT_32
    (58) flotante -> . FLOAT_64
    (47) sigint -> . SIG_INT_8
    (48) sigint -> . SIG_INT_16
    (49) sigint -> . SIG_INT_32
    (50) sigint -> . SIG_INT_64
    (51) sigint -> . SIG_INT_128
    (52) unsigint -> . UNSIG_INT_8
    (53) unsigint -> . UNSIG_INT_16
    (54) unsigint -> . UNSIG_INT_32
    (55) unsigint -> . UNSIG_INT_64
    (56) unsigint -> . UNSIG_INT_128
    (128) label -> . QUOTE VARIABLE
    (132) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (133) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (139) linkedlist -> . KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (140) linkedlist -> . KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (141) linkedlist -> . KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (142) linkedlist -> . KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN

  ! shift/reduce conflict for KW_PRINT resolved as shift
  ! shift/reduce conflict for KW_LET resolved as shift
  ! shift/reduce conflict for KW_FN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for KW_FOR resolved as shift
  ! shift/reduce conflict for KW_IF resolved as shift
  ! shift/reduce conflict for KW_ELSE resolved as shift
  ! shift/reduce conflict for KW_WHILE resolved as shift
  ! shift/reduce conflict for KW_CONST resolved as shift
  ! shift/reduce conflict for FLOAT_32 resolved as shift
  ! shift/reduce conflict for FLOAT_64 resolved as shift
  ! shift/reduce conflict for SIG_INT_8 resolved as shift
  ! shift/reduce conflict for SIG_INT_16 resolved as shift
  ! shift/reduce conflict for SIG_INT_32 resolved as shift
  ! shift/reduce conflict for SIG_INT_64 resolved as shift
  ! shift/reduce conflict for SIG_INT_128 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_8 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_16 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_32 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_64 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_128 resolved as shift
  ! shift/reduce conflict for QUOTE resolved as shift
    KW_PRINT        shift and go to state 16
    KW_LET          shift and go to state 18
    KW_FN           shift and go to state 19
    RBRACE          reduce using rule 138 (void -> .)
    LBRACKET        shift and go to state 26
    VARIABLE        shift and go to state 17
    KW_FOR          shift and go to state 34
    KW_IF           shift and go to state 36
    KW_ELSE         shift and go to state 37
    KW_WHILE        shift and go to state 38
    KW_CONST        shift and go to state 39
    FLOAT_32        shift and go to state 42
    FLOAT_64        shift and go to state 43
    SIG_INT_8       shift and go to state 44
    SIG_INT_16      shift and go to state 45
    SIG_INT_32      shift and go to state 46
    SIG_INT_64      shift and go to state 47
    SIG_INT_128     shift and go to state 48
    UNSIG_INT_8     shift and go to state 49
    UNSIG_INT_16    shift and go to state 50
    UNSIG_INT_32    shift and go to state 51
    UNSIG_INT_64    shift and go to state 52
    UNSIG_INT_128   shift and go to state 53
    QUOTE           shift and go to state 54

  ! KW_PRINT        [ reduce using rule 138 (void -> .) ]
  ! KW_LET          [ reduce using rule 138 (void -> .) ]
  ! KW_FN           [ reduce using rule 138 (void -> .) ]
  ! LBRACKET        [ reduce using rule 138 (void -> .) ]
  ! VARIABLE        [ reduce using rule 138 (void -> .) ]
  ! KW_FOR          [ reduce using rule 138 (void -> .) ]
  ! KW_IF           [ reduce using rule 138 (void -> .) ]
  ! KW_ELSE         [ reduce using rule 138 (void -> .) ]
  ! KW_WHILE        [ reduce using rule 138 (void -> .) ]
  ! KW_CONST        [ reduce using rule 138 (void -> .) ]
  ! FLOAT_32        [ reduce using rule 138 (void -> .) ]
  ! FLOAT_64        [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_8       [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_16      [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_32      [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_64      [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_128     [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_8     [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_16    [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_32    [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_64    [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_128   [ reduce using rule 138 (void -> .) ]
  ! QUOTE           [ reduce using rule 138 (void -> .) ]

    main_rule                      shift and go to state 245
    father_rule                    shift and go to state 2
    print                          shift and go to state 3
    dvariable                      shift and go to state 4
    function                       shift and go to state 5
    control_str                    shift and go to state 6
    void                           shift and go to state 7
    array                          shift and go to state 8
    linkedlist_methods             shift and go to state 9
    hashmap_methods                shift and go to state 10
    initialization                 shift and go to state 11
    input                          shift and go to state 12
    assignation                    shift and go to state 13
    declare_data_type              shift and go to state 14
    casting                        shift and go to state 15
    for_str                        shift and go to state 20
    for_str_tagged                 shift and go to state 21
    if                             shift and go to state 22
    else                           shift and go to state 23
    else_if                        shift and go to state 24
    while                          shift and go to state 25
    let_initialization             shift and go to state 27
    const_initialization           shift and go to state 28
    data_str                       shift and go to state 29
    input_init                     shift and go to state 30
    flotante                       shift and go to state 31
    sigint                         shift and go to state 32
    unsigint                       shift and go to state 33
    label                          shift and go to state 35
    hashmap                        shift and go to state 40
    linkedlist                     shift and go to state 41

state 204

    (99) while -> KW_WHILE conditional LBRACE main_rule . RBRACE

    RBRACE          shift and go to state 246


state 205

    (113) const_initialization -> KW_CONST VARIABLE COLON data_type . EQUALS data

    EQUALS          shift and go to state 247


state 206

    (87) print -> KW_PRINT LNOT LPAREN CADENA RPAREN . SEMI

    SEMI            shift and go to state 248


state 207

    (88) print -> KW_PRINT LNOT LPAREN CADENA COMMA . VARIABLE RPAREN SEMI

    VARIABLE        shift and go to state 249


state 208

    (157) input -> VARIABLE DOT KW_READ_LINE LPAREN AND . KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI

    KW_MUT          shift and go to state 250


state 209

    (145) linkedlist_push -> DOT KW_PUSH_BACK LPAREN data . RPAREN SEMI

    RPAREN          shift and go to state 251


state 210

    (146) linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER . RPAREN SEMI

    RPAREN          shift and go to state 252


state 211

    (137) hashmap_remove -> DOT KW_REMOVE LPAREN AND . data RPAREN SEMI
    (66) data -> . CADENA
    (67) data -> . INTEGER
    (68) data -> . CHAR
    (69) data -> . FLOAT
    (70) data -> . KW_FALSE
    (71) data -> . KW_TRUE
    (72) data -> . tuple
    (100) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 74
    INTEGER         shift and go to state 75
    CHAR            shift and go to state 76
    FLOAT           shift and go to state 77
    KW_FALSE        shift and go to state 78
    KW_TRUE         shift and go to state 79
    LPAREN          shift and go to state 81

    data                           shift and go to state 253
    tuple                          shift and go to state 80

state 212

    (136) hashmap_insert -> DOT KW_INSERT LPAREN data . COMMA data RPAREN SEMI

    COMMA           shift and go to state 254


state 213

    (16) expression -> expression PLUS expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . MINUS expression
    (18) expression -> expression . TIMES expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
    SEMI            reduce using rule 16 (expression -> expression PLUS expression .)
    KW_PRINT        reduce using rule 16 (expression -> expression PLUS expression .)
    KW_LET          reduce using rule 16 (expression -> expression PLUS expression .)
    KW_FN           reduce using rule 16 (expression -> expression PLUS expression .)
    LBRACKET        reduce using rule 16 (expression -> expression PLUS expression .)
    VARIABLE        reduce using rule 16 (expression -> expression PLUS expression .)
    KW_FOR          reduce using rule 16 (expression -> expression PLUS expression .)
    KW_IF           reduce using rule 16 (expression -> expression PLUS expression .)
    KW_ELSE         reduce using rule 16 (expression -> expression PLUS expression .)
    KW_WHILE        reduce using rule 16 (expression -> expression PLUS expression .)
    KW_CONST        reduce using rule 16 (expression -> expression PLUS expression .)
    FLOAT_32        reduce using rule 16 (expression -> expression PLUS expression .)
    FLOAT_64        reduce using rule 16 (expression -> expression PLUS expression .)
    SIG_INT_8       reduce using rule 16 (expression -> expression PLUS expression .)
    SIG_INT_16      reduce using rule 16 (expression -> expression PLUS expression .)
    SIG_INT_32      reduce using rule 16 (expression -> expression PLUS expression .)
    SIG_INT_64      reduce using rule 16 (expression -> expression PLUS expression .)
    SIG_INT_128     reduce using rule 16 (expression -> expression PLUS expression .)
    UNSIG_INT_8     reduce using rule 16 (expression -> expression PLUS expression .)
    UNSIG_INT_16    reduce using rule 16 (expression -> expression PLUS expression .)
    UNSIG_INT_32    reduce using rule 16 (expression -> expression PLUS expression .)
    UNSIG_INT_64    reduce using rule 16 (expression -> expression PLUS expression .)
    UNSIG_INT_128   reduce using rule 16 (expression -> expression PLUS expression .)
    QUOTE           reduce using rule 16 (expression -> expression PLUS expression .)
    $end            reduce using rule 16 (expression -> expression PLUS expression .)
    RBRACE          reduce using rule 16 (expression -> expression PLUS expression .)
    KW_RETURN       reduce using rule 16 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 16 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    TIMES           shift and go to state 151

  ! PLUS            [ reduce using rule 16 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 16 (expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 16 (expression -> expression PLUS expression .) ]


state 214

    (17) expression -> expression MINUS expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . MINUS expression
    (18) expression -> expression . TIMES expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
    SEMI            reduce using rule 17 (expression -> expression MINUS expression .)
    KW_PRINT        reduce using rule 17 (expression -> expression MINUS expression .)
    KW_LET          reduce using rule 17 (expression -> expression MINUS expression .)
    KW_FN           reduce using rule 17 (expression -> expression MINUS expression .)
    LBRACKET        reduce using rule 17 (expression -> expression MINUS expression .)
    VARIABLE        reduce using rule 17 (expression -> expression MINUS expression .)
    KW_FOR          reduce using rule 17 (expression -> expression MINUS expression .)
    KW_IF           reduce using rule 17 (expression -> expression MINUS expression .)
    KW_ELSE         reduce using rule 17 (expression -> expression MINUS expression .)
    KW_WHILE        reduce using rule 17 (expression -> expression MINUS expression .)
    KW_CONST        reduce using rule 17 (expression -> expression MINUS expression .)
    FLOAT_32        reduce using rule 17 (expression -> expression MINUS expression .)
    FLOAT_64        reduce using rule 17 (expression -> expression MINUS expression .)
    SIG_INT_8       reduce using rule 17 (expression -> expression MINUS expression .)
    SIG_INT_16      reduce using rule 17 (expression -> expression MINUS expression .)
    SIG_INT_32      reduce using rule 17 (expression -> expression MINUS expression .)
    SIG_INT_64      reduce using rule 17 (expression -> expression MINUS expression .)
    SIG_INT_128     reduce using rule 17 (expression -> expression MINUS expression .)
    UNSIG_INT_8     reduce using rule 17 (expression -> expression MINUS expression .)
    UNSIG_INT_16    reduce using rule 17 (expression -> expression MINUS expression .)
    UNSIG_INT_32    reduce using rule 17 (expression -> expression MINUS expression .)
    UNSIG_INT_64    reduce using rule 17 (expression -> expression MINUS expression .)
    UNSIG_INT_128   reduce using rule 17 (expression -> expression MINUS expression .)
    QUOTE           reduce using rule 17 (expression -> expression MINUS expression .)
    $end            reduce using rule 17 (expression -> expression MINUS expression .)
    RBRACE          reduce using rule 17 (expression -> expression MINUS expression .)
    KW_RETURN       reduce using rule 17 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 17 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    TIMES           shift and go to state 151

  ! PLUS            [ reduce using rule 17 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 17 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 17 (expression -> expression MINUS expression .) ]


state 215

    (18) expression -> expression TIMES expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . MINUS expression
    (18) expression -> expression . TIMES expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
    SEMI            reduce using rule 18 (expression -> expression TIMES expression .)
    KW_PRINT        reduce using rule 18 (expression -> expression TIMES expression .)
    KW_LET          reduce using rule 18 (expression -> expression TIMES expression .)
    KW_FN           reduce using rule 18 (expression -> expression TIMES expression .)
    LBRACKET        reduce using rule 18 (expression -> expression TIMES expression .)
    VARIABLE        reduce using rule 18 (expression -> expression TIMES expression .)
    KW_FOR          reduce using rule 18 (expression -> expression TIMES expression .)
    KW_IF           reduce using rule 18 (expression -> expression TIMES expression .)
    KW_ELSE         reduce using rule 18 (expression -> expression TIMES expression .)
    KW_WHILE        reduce using rule 18 (expression -> expression TIMES expression .)
    KW_CONST        reduce using rule 18 (expression -> expression TIMES expression .)
    FLOAT_32        reduce using rule 18 (expression -> expression TIMES expression .)
    FLOAT_64        reduce using rule 18 (expression -> expression TIMES expression .)
    SIG_INT_8       reduce using rule 18 (expression -> expression TIMES expression .)
    SIG_INT_16      reduce using rule 18 (expression -> expression TIMES expression .)
    SIG_INT_32      reduce using rule 18 (expression -> expression TIMES expression .)
    SIG_INT_64      reduce using rule 18 (expression -> expression TIMES expression .)
    SIG_INT_128     reduce using rule 18 (expression -> expression TIMES expression .)
    UNSIG_INT_8     reduce using rule 18 (expression -> expression TIMES expression .)
    UNSIG_INT_16    reduce using rule 18 (expression -> expression TIMES expression .)
    UNSIG_INT_32    reduce using rule 18 (expression -> expression TIMES expression .)
    UNSIG_INT_64    reduce using rule 18 (expression -> expression TIMES expression .)
    UNSIG_INT_128   reduce using rule 18 (expression -> expression TIMES expression .)
    QUOTE           reduce using rule 18 (expression -> expression TIMES expression .)
    $end            reduce using rule 18 (expression -> expression TIMES expression .)
    RBRACE          reduce using rule 18 (expression -> expression TIMES expression .)
    KW_RETURN       reduce using rule 18 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 18 (expression -> expression TIMES expression .)
    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    TIMES           shift and go to state 151

  ! PLUS            [ reduce using rule 18 (expression -> expression TIMES expression .) ]
  ! MINUS           [ reduce using rule 18 (expression -> expression TIMES expression .) ]
  ! TIMES           [ reduce using rule 18 (expression -> expression TIMES expression .) ]


state 216

    (64) division -> INTEGER DIVIDE INTEGER .

    SEMI            reduce using rule 64 (division -> INTEGER DIVIDE INTEGER .)
    PLUS            reduce using rule 64 (division -> INTEGER DIVIDE INTEGER .)
    MINUS           reduce using rule 64 (division -> INTEGER DIVIDE INTEGER .)
    TIMES           reduce using rule 64 (division -> INTEGER DIVIDE INTEGER .)
    KW_PRINT        reduce using rule 64 (division -> INTEGER DIVIDE INTEGER .)
    KW_LET          reduce using rule 64 (division -> INTEGER DIVIDE INTEGER .)
    KW_FN           reduce using rule 64 (division -> INTEGER DIVIDE INTEGER .)
    LBRACKET        reduce using rule 64 (division -> INTEGER DIVIDE INTEGER .)
    VARIABLE        reduce using rule 64 (division -> INTEGER DIVIDE INTEGER .)
    KW_FOR          reduce using rule 64 (division -> INTEGER DIVIDE INTEGER .)
    KW_IF           reduce using rule 64 (division -> INTEGER DIVIDE INTEGER .)
    KW_ELSE         reduce using rule 64 (division -> INTEGER DIVIDE INTEGER .)
    KW_WHILE        reduce using rule 64 (division -> INTEGER DIVIDE INTEGER .)
    KW_CONST        reduce using rule 64 (division -> INTEGER DIVIDE INTEGER .)
    FLOAT_32        reduce using rule 64 (division -> INTEGER DIVIDE INTEGER .)
    FLOAT_64        reduce using rule 64 (division -> INTEGER DIVIDE INTEGER .)
    SIG_INT_8       reduce using rule 64 (division -> INTEGER DIVIDE INTEGER .)
    SIG_INT_16      reduce using rule 64 (division -> INTEGER DIVIDE INTEGER .)
    SIG_INT_32      reduce using rule 64 (division -> INTEGER DIVIDE INTEGER .)
    SIG_INT_64      reduce using rule 64 (division -> INTEGER DIVIDE INTEGER .)
    SIG_INT_128     reduce using rule 64 (division -> INTEGER DIVIDE INTEGER .)
    UNSIG_INT_8     reduce using rule 64 (division -> INTEGER DIVIDE INTEGER .)
    UNSIG_INT_16    reduce using rule 64 (division -> INTEGER DIVIDE INTEGER .)
    UNSIG_INT_32    reduce using rule 64 (division -> INTEGER DIVIDE INTEGER .)
    UNSIG_INT_64    reduce using rule 64 (division -> INTEGER DIVIDE INTEGER .)
    UNSIG_INT_128   reduce using rule 64 (division -> INTEGER DIVIDE INTEGER .)
    QUOTE           reduce using rule 64 (division -> INTEGER DIVIDE INTEGER .)
    $end            reduce using rule 64 (division -> INTEGER DIVIDE INTEGER .)
    RBRACE          reduce using rule 64 (division -> INTEGER DIVIDE INTEGER .)
    KW_RETURN       reduce using rule 64 (division -> INTEGER DIVIDE INTEGER .)
    RPAREN          reduce using rule 64 (division -> INTEGER DIVIDE INTEGER .)


state 217

    (65) division -> FLOAT DIVIDE FLOAT .

    SEMI            reduce using rule 65 (division -> FLOAT DIVIDE FLOAT .)
    PLUS            reduce using rule 65 (division -> FLOAT DIVIDE FLOAT .)
    MINUS           reduce using rule 65 (division -> FLOAT DIVIDE FLOAT .)
    TIMES           reduce using rule 65 (division -> FLOAT DIVIDE FLOAT .)
    KW_PRINT        reduce using rule 65 (division -> FLOAT DIVIDE FLOAT .)
    KW_LET          reduce using rule 65 (division -> FLOAT DIVIDE FLOAT .)
    KW_FN           reduce using rule 65 (division -> FLOAT DIVIDE FLOAT .)
    LBRACKET        reduce using rule 65 (division -> FLOAT DIVIDE FLOAT .)
    VARIABLE        reduce using rule 65 (division -> FLOAT DIVIDE FLOAT .)
    KW_FOR          reduce using rule 65 (division -> FLOAT DIVIDE FLOAT .)
    KW_IF           reduce using rule 65 (division -> FLOAT DIVIDE FLOAT .)
    KW_ELSE         reduce using rule 65 (division -> FLOAT DIVIDE FLOAT .)
    KW_WHILE        reduce using rule 65 (division -> FLOAT DIVIDE FLOAT .)
    KW_CONST        reduce using rule 65 (division -> FLOAT DIVIDE FLOAT .)
    FLOAT_32        reduce using rule 65 (division -> FLOAT DIVIDE FLOAT .)
    FLOAT_64        reduce using rule 65 (division -> FLOAT DIVIDE FLOAT .)
    SIG_INT_8       reduce using rule 65 (division -> FLOAT DIVIDE FLOAT .)
    SIG_INT_16      reduce using rule 65 (division -> FLOAT DIVIDE FLOAT .)
    SIG_INT_32      reduce using rule 65 (division -> FLOAT DIVIDE FLOAT .)
    SIG_INT_64      reduce using rule 65 (division -> FLOAT DIVIDE FLOAT .)
    SIG_INT_128     reduce using rule 65 (division -> FLOAT DIVIDE FLOAT .)
    UNSIG_INT_8     reduce using rule 65 (division -> FLOAT DIVIDE FLOAT .)
    UNSIG_INT_16    reduce using rule 65 (division -> FLOAT DIVIDE FLOAT .)
    UNSIG_INT_32    reduce using rule 65 (division -> FLOAT DIVIDE FLOAT .)
    UNSIG_INT_64    reduce using rule 65 (division -> FLOAT DIVIDE FLOAT .)
    UNSIG_INT_128   reduce using rule 65 (division -> FLOAT DIVIDE FLOAT .)
    QUOTE           reduce using rule 65 (division -> FLOAT DIVIDE FLOAT .)
    $end            reduce using rule 65 (division -> FLOAT DIVIDE FLOAT .)
    RBRACE          reduce using rule 65 (division -> FLOAT DIVIDE FLOAT .)
    KW_RETURN       reduce using rule 65 (division -> FLOAT DIVIDE FLOAT .)
    RPAREN          reduce using rule 65 (division -> FLOAT DIVIDE FLOAT .)


state 218

    (19) expression -> LPAREN expression RPAREN .

    SEMI            reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    KW_PRINT        reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    KW_LET          reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    KW_FN           reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    VARIABLE        reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    KW_FOR          reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    KW_IF           reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    KW_ELSE         reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    KW_WHILE        reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    KW_CONST        reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    FLOAT_32        reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    FLOAT_64        reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    SIG_INT_8       reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    SIG_INT_16      reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    SIG_INT_32      reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    SIG_INT_64      reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    SIG_INT_128     reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    UNSIG_INT_8     reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    UNSIG_INT_16    reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    UNSIG_INT_32    reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    UNSIG_INT_64    reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    UNSIG_INT_128   reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    QUOTE           reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    KW_RETURN       reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 19 (expression -> LPAREN expression RPAREN .)


state 219

    (89) dvariable -> KW_LET VARIABLE COLON data_type SEMI .
    (162) declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .

  ! reduce/reduce conflict for KW_PRINT resolved using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
  ! reduce/reduce conflict for KW_LET resolved using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
  ! reduce/reduce conflict for KW_FN resolved using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
  ! reduce/reduce conflict for KW_FOR resolved using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
  ! reduce/reduce conflict for KW_IF resolved using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
  ! reduce/reduce conflict for KW_ELSE resolved using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
  ! reduce/reduce conflict for KW_WHILE resolved using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
  ! reduce/reduce conflict for KW_CONST resolved using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
  ! reduce/reduce conflict for FLOAT_32 resolved using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
  ! reduce/reduce conflict for FLOAT_64 resolved using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
  ! reduce/reduce conflict for SIG_INT_8 resolved using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
  ! reduce/reduce conflict for SIG_INT_16 resolved using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
  ! reduce/reduce conflict for SIG_INT_32 resolved using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
  ! reduce/reduce conflict for SIG_INT_64 resolved using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
  ! reduce/reduce conflict for SIG_INT_128 resolved using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
  ! reduce/reduce conflict for UNSIG_INT_8 resolved using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
  ! reduce/reduce conflict for UNSIG_INT_16 resolved using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
  ! reduce/reduce conflict for UNSIG_INT_32 resolved using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
  ! reduce/reduce conflict for UNSIG_INT_64 resolved using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
  ! reduce/reduce conflict for UNSIG_INT_128 resolved using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
  ! reduce/reduce conflict for QUOTE resolved using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
  ! reduce/reduce conflict for $end resolved using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
  ! reduce/reduce conflict for RBRACE resolved using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
  ! reduce/reduce conflict for KW_RETURN resolved using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
    KW_PRINT        reduce using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
    KW_LET          reduce using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
    KW_FN           reduce using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
    LBRACKET        reduce using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
    VARIABLE        reduce using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
    KW_FOR          reduce using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
    KW_IF           reduce using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
    KW_ELSE         reduce using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
    KW_WHILE        reduce using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
    KW_CONST        reduce using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
    FLOAT_32        reduce using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
    FLOAT_64        reduce using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
    SIG_INT_8       reduce using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
    SIG_INT_16      reduce using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
    SIG_INT_32      reduce using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
    SIG_INT_64      reduce using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
    SIG_INT_128     reduce using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
    UNSIG_INT_8     reduce using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
    UNSIG_INT_16    reduce using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
    UNSIG_INT_32    reduce using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
    UNSIG_INT_64    reduce using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
    UNSIG_INT_128   reduce using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
    QUOTE           reduce using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
    $end            reduce using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
    RBRACE          reduce using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)
    KW_RETURN       reduce using rule 89 (dvariable -> KW_LET VARIABLE COLON data_type SEMI .)

  ! KW_PRINT        [ reduce using rule 162 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .) ]
  ! KW_LET          [ reduce using rule 162 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .) ]
  ! KW_FN           [ reduce using rule 162 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .) ]
  ! LBRACKET        [ reduce using rule 162 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .) ]
  ! VARIABLE        [ reduce using rule 162 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .) ]
  ! KW_FOR          [ reduce using rule 162 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .) ]
  ! KW_IF           [ reduce using rule 162 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .) ]
  ! KW_ELSE         [ reduce using rule 162 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .) ]
  ! KW_WHILE        [ reduce using rule 162 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .) ]
  ! KW_CONST        [ reduce using rule 162 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .) ]
  ! FLOAT_32        [ reduce using rule 162 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .) ]
  ! FLOAT_64        [ reduce using rule 162 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .) ]
  ! SIG_INT_8       [ reduce using rule 162 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .) ]
  ! SIG_INT_16      [ reduce using rule 162 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .) ]
  ! SIG_INT_32      [ reduce using rule 162 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .) ]
  ! SIG_INT_64      [ reduce using rule 162 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .) ]
  ! SIG_INT_128     [ reduce using rule 162 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .) ]
  ! UNSIG_INT_8     [ reduce using rule 162 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .) ]
  ! UNSIG_INT_16    [ reduce using rule 162 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .) ]
  ! UNSIG_INT_32    [ reduce using rule 162 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .) ]
  ! UNSIG_INT_64    [ reduce using rule 162 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .) ]
  ! UNSIG_INT_128   [ reduce using rule 162 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .) ]
  ! QUOTE           [ reduce using rule 162 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .) ]
  ! $end            [ reduce using rule 162 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .) ]
  ! RBRACE          [ reduce using rule 162 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .) ]
  ! KW_RETURN       [ reduce using rule 162 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .) ]


state 220

    (106) let_initialization -> KW_LET VARIABLE COLON data_type EQUALS . data
    (110) let_initialization -> KW_LET VARIABLE COLON data_type EQUALS . expression_var
    (66) data -> . CADENA
    (67) data -> . INTEGER
    (68) data -> . CHAR
    (69) data -> . FLOAT
    (70) data -> . KW_FALSE
    (71) data -> . KW_TRUE
    (72) data -> . tuple
    (151) expression_var -> . expression
    (152) expression_var -> . data
    (100) tuple -> . LPAREN mdata RPAREN
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . number
    (21) expression -> . division
    (22) expression -> . variable
    (23) number -> . INTEGER
    (24) number -> . FLOAT
    (64) division -> . INTEGER DIVIDE INTEGER
    (65) division -> . FLOAT DIVIDE FLOAT
    (25) variable -> . VARIABLE

    CADENA          shift and go to state 74
    INTEGER         shift and go to state 181
    CHAR            shift and go to state 76
    FLOAT           shift and go to state 182
    KW_FALSE        shift and go to state 78
    KW_TRUE         shift and go to state 79
    LPAREN          shift and go to state 178
    VARIABLE        shift and go to state 104

    data                           shift and go to state 255
    expression_var                 shift and go to state 256
    tuple                          shift and go to state 80
    expression                     shift and go to state 183
    number                         shift and go to state 155
    division                       shift and go to state 110
    variable                       shift and go to state 111

state 221

    (93) array -> KW_LET VARIABLE COLON LBRACKET data_type . SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (94) array -> KW_LET VARIABLE COLON LBRACKET data_type . SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI

    SEMI            shift and go to state 257


state 222

    (139) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT . data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (26) data_type -> . UNSIG_INT_8
    (27) data_type -> . UNSIG_INT_16
    (28) data_type -> . UNSIG_INT_32
    (29) data_type -> . UNSIG_INT_64
    (30) data_type -> . UNSIG_INT_128
    (31) data_type -> . SIG_INT_8
    (32) data_type -> . SIG_INT_16
    (33) data_type -> . SIG_INT_32
    (34) data_type -> . SIG_INT_64
    (35) data_type -> . SIG_INT_128
    (36) data_type -> . FLOAT_32
    (37) data_type -> . FLOAT_64
    (38) data_type -> . KW_BOOLEAN
    (39) data_type -> . KW_STRING
    (40) data_type -> . KW_CHARACTER

    UNSIG_INT_8     shift and go to state 159
    UNSIG_INT_16    shift and go to state 160
    UNSIG_INT_32    shift and go to state 161
    UNSIG_INT_64    shift and go to state 162
    UNSIG_INT_128   shift and go to state 163
    SIG_INT_8       shift and go to state 164
    SIG_INT_16      shift and go to state 165
    SIG_INT_32      shift and go to state 166
    SIG_INT_64      shift and go to state 167
    SIG_INT_128     shift and go to state 168
    FLOAT_32        shift and go to state 169
    FLOAT_64        shift and go to state 170
    KW_BOOLEAN      shift and go to state 171
    KW_STRING       shift and go to state 172
    KW_CHARACTER    shift and go to state 173

    data_type                      shift and go to state 258

state 223

    (90) array -> KW_LET VARIABLE EQUALS LBRACKET mdata . RBRACKET SEMI

    RBRACKET        shift and go to state 259


state 224

    (156) input_init -> KW_LET VARIABLE EQUALS KW_IO COLON . COLON KW_STDIN LPAREN RPAREN

    COLON           shift and go to state 260


state 225

    (19) expression -> LPAREN . expression RPAREN
    (100) tuple -> LPAREN . mdata RPAREN
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . number
    (21) expression -> . division
    (22) expression -> . variable
    (85) mdata -> . data
    (86) mdata -> . data COMMA mdata
    (23) number -> . INTEGER
    (24) number -> . FLOAT
    (64) division -> . INTEGER DIVIDE INTEGER
    (65) division -> . FLOAT DIVIDE FLOAT
    (25) variable -> . VARIABLE
    (66) data -> . CADENA
    (67) data -> . INTEGER
    (68) data -> . CHAR
    (69) data -> . FLOAT
    (70) data -> . KW_FALSE
    (71) data -> . KW_TRUE
    (72) data -> . tuple
    (100) tuple -> . LPAREN mdata RPAREN

    LPAREN          shift and go to state 225
    INTEGER         shift and go to state 261
    FLOAT           shift and go to state 262
    VARIABLE        shift and go to state 104
    CADENA          shift and go to state 74
    CHAR            shift and go to state 76
    KW_FALSE        shift and go to state 78
    KW_TRUE         shift and go to state 79

    expression                     shift and go to state 154
    mdata                          shift and go to state 119
    number                         shift and go to state 155
    division                       shift and go to state 110
    variable                       shift and go to state 111
    data                           shift and go to state 120
    tuple                          shift and go to state 80

state 226

    (132) hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON . COLON KW_NEW LPAREN RPAREN

    COLON           shift and go to state 263


state 227

    (141) linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON . COLON KW_FROM LPAREN array RPAREN

    COLON           shift and go to state 264


state 228

    (95) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET . data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (96) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET . data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (26) data_type -> . UNSIG_INT_8
    (27) data_type -> . UNSIG_INT_16
    (28) data_type -> . UNSIG_INT_32
    (29) data_type -> . UNSIG_INT_64
    (30) data_type -> . UNSIG_INT_128
    (31) data_type -> . SIG_INT_8
    (32) data_type -> . SIG_INT_16
    (33) data_type -> . SIG_INT_32
    (34) data_type -> . SIG_INT_64
    (35) data_type -> . SIG_INT_128
    (36) data_type -> . FLOAT_32
    (37) data_type -> . FLOAT_64
    (38) data_type -> . KW_BOOLEAN
    (39) data_type -> . KW_STRING
    (40) data_type -> . KW_CHARACTER

    UNSIG_INT_8     shift and go to state 159
    UNSIG_INT_16    shift and go to state 160
    UNSIG_INT_32    shift and go to state 161
    UNSIG_INT_64    shift and go to state 162
    UNSIG_INT_128   shift and go to state 163
    SIG_INT_8       shift and go to state 164
    SIG_INT_16      shift and go to state 165
    SIG_INT_32      shift and go to state 166
    SIG_INT_64      shift and go to state 167
    SIG_INT_128     shift and go to state 168
    FLOAT_32        shift and go to state 169
    FLOAT_64        shift and go to state 170
    KW_BOOLEAN      shift and go to state 171
    KW_STRING       shift and go to state 172
    KW_CHARACTER    shift and go to state 173

    data_type                      shift and go to state 265

state 229

    (108) let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type . EQUALS data
    (112) let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type . EQUALS expression_var

    EQUALS          shift and go to state 266


state 230

    (140) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST . LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN

    LT              shift and go to state 267


state 231

    (107) let_initialization -> KW_LET KW_MUT VARIABLE EQUALS data .
    (152) expression_var -> data .

  ! reduce/reduce conflict for SEMI resolved using rule 107 (let_initialization -> KW_LET KW_MUT VARIABLE EQUALS data .)
    SEMI            reduce using rule 107 (let_initialization -> KW_LET KW_MUT VARIABLE EQUALS data .)

  ! SEMI            [ reduce using rule 152 (expression_var -> data .) ]


state 232

    (111) let_initialization -> KW_LET KW_MUT VARIABLE EQUALS expression_var .

    SEMI            reduce using rule 111 (let_initialization -> KW_LET KW_MUT VARIABLE EQUALS expression_var .)


state 233

    (133) hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP . COLON COLON KW_NEW LPAREN RPAREN

    COLON           shift and go to state 268


state 234

    (142) linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST . COLON COLON KW_FROM LPAREN array RPAREN

    COLON           shift and go to state 269


state 235

    (98) variables -> VARIABLE COMMA . variables
    (97) variables -> . VARIABLE
    (98) variables -> . VARIABLE COMMA variables

    VARIABLE        shift and go to state 186

    variables                      shift and go to state 270

state 236

    (116) function -> KW_FN VARIABLE LPAREN arguments RPAREN . LBRACE main_rule RBRACE
    (150) function -> KW_FN VARIABLE LPAREN arguments RPAREN . MINUS GT data_type LBRACE return RBRACE

    LBRACE          shift and go to state 271
    MINUS           shift and go to state 272


state 237

    (92) array -> LBRACKET data SEMI data RBRACKET .

    KW_PRINT        reduce using rule 92 (array -> LBRACKET data SEMI data RBRACKET .)
    KW_LET          reduce using rule 92 (array -> LBRACKET data SEMI data RBRACKET .)
    KW_FN           reduce using rule 92 (array -> LBRACKET data SEMI data RBRACKET .)
    LBRACKET        reduce using rule 92 (array -> LBRACKET data SEMI data RBRACKET .)
    VARIABLE        reduce using rule 92 (array -> LBRACKET data SEMI data RBRACKET .)
    KW_FOR          reduce using rule 92 (array -> LBRACKET data SEMI data RBRACKET .)
    KW_IF           reduce using rule 92 (array -> LBRACKET data SEMI data RBRACKET .)
    KW_ELSE         reduce using rule 92 (array -> LBRACKET data SEMI data RBRACKET .)
    KW_WHILE        reduce using rule 92 (array -> LBRACKET data SEMI data RBRACKET .)
    KW_CONST        reduce using rule 92 (array -> LBRACKET data SEMI data RBRACKET .)
    FLOAT_32        reduce using rule 92 (array -> LBRACKET data SEMI data RBRACKET .)
    FLOAT_64        reduce using rule 92 (array -> LBRACKET data SEMI data RBRACKET .)
    SIG_INT_8       reduce using rule 92 (array -> LBRACKET data SEMI data RBRACKET .)
    SIG_INT_16      reduce using rule 92 (array -> LBRACKET data SEMI data RBRACKET .)
    SIG_INT_32      reduce using rule 92 (array -> LBRACKET data SEMI data RBRACKET .)
    SIG_INT_64      reduce using rule 92 (array -> LBRACKET data SEMI data RBRACKET .)
    SIG_INT_128     reduce using rule 92 (array -> LBRACKET data SEMI data RBRACKET .)
    UNSIG_INT_8     reduce using rule 92 (array -> LBRACKET data SEMI data RBRACKET .)
    UNSIG_INT_16    reduce using rule 92 (array -> LBRACKET data SEMI data RBRACKET .)
    UNSIG_INT_32    reduce using rule 92 (array -> LBRACKET data SEMI data RBRACKET .)
    UNSIG_INT_64    reduce using rule 92 (array -> LBRACKET data SEMI data RBRACKET .)
    UNSIG_INT_128   reduce using rule 92 (array -> LBRACKET data SEMI data RBRACKET .)
    QUOTE           reduce using rule 92 (array -> LBRACKET data SEMI data RBRACKET .)
    $end            reduce using rule 92 (array -> LBRACKET data SEMI data RBRACKET .)
    SEMI            reduce using rule 92 (array -> LBRACKET data SEMI data RBRACKET .)
    RBRACE          reduce using rule 92 (array -> LBRACKET data SEMI data RBRACKET .)
    KW_RETURN       reduce using rule 92 (array -> LBRACKET data SEMI data RBRACKET .)
    RPAREN          reduce using rule 92 (array -> LBRACKET data SEMI data RBRACKET .)


state 238

    (124) for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE . main_rule RBRACE
    (1) main_rule -> . father_rule
    (2) main_rule -> . father_rule main_rule
    (3) father_rule -> . print
    (4) father_rule -> . dvariable
    (5) father_rule -> . function
    (6) father_rule -> . control_str
    (7) father_rule -> . void
    (8) father_rule -> . array
    (9) father_rule -> . linkedlist_methods
    (10) father_rule -> . hashmap_methods
    (11) father_rule -> . initialization
    (12) father_rule -> . input
    (13) father_rule -> . assignation
    (14) father_rule -> . declare_data_type
    (15) father_rule -> . casting
    (87) print -> . KW_PRINT LNOT LPAREN CADENA RPAREN SEMI
    (88) print -> . KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI
    (89) dvariable -> . KW_LET VARIABLE COLON data_type SEMI
    (116) function -> . KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE
    (150) function -> . KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE
    (117) control_str -> . for_str
    (118) control_str -> . for_str_tagged
    (119) control_str -> . if
    (120) control_str -> . else
    (121) control_str -> . else_if
    (122) control_str -> . while
    (138) void -> .
    (90) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (91) array -> . LBRACKET mdata RBRACKET
    (92) array -> . LBRACKET data SEMI data RBRACKET
    (93) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (94) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (95) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (96) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (143) linkedlist_methods -> . VARIABLE linkedlist_push
    (144) linkedlist_methods -> . VARIABLE linkedlist_remove
    (134) hashmap_methods -> . VARIABLE hashmap_insert
    (135) hashmap_methods -> . VARIABLE hashmap_remove
    (101) initialization -> . let_initialization SEMI
    (102) initialization -> . const_initialization SEMI
    (103) initialization -> . data_str SEMI
    (104) initialization -> . input_init SEMI
    (157) input -> . VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI
    (158) assignation -> . VARIABLE assign_operators number SEMI
    (159) assignation -> . VARIABLE assign_operators expression SEMI
    (160) assignation -> . VARIABLE assign_operators number
    (161) assignation -> . VARIABLE assign_operators expression
    (162) declare_data_type -> . KW_LET VARIABLE COLON data_type SEMI
    (59) casting -> . flotante KW_AS sigint
    (60) casting -> . flotante KW_AS unsigint
    (61) casting -> . sigint KW_AS flotante
    (62) casting -> . unsigint KW_AS flotante
    (63) casting -> . flotante KW_AS flotante
    (123) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE
    (124) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE
    (125) for_str_tagged -> . label COLON for_str
    (147) if -> . KW_IF conditional LBRACE main_rule RBRACE
    (148) else -> . KW_ELSE LBRACE main_rule RBRACE
    (149) else_if -> . KW_ELSE KW_IF conditional LBRACE main_rule RBRACE
    (99) while -> . KW_WHILE conditional LBRACE main_rule RBRACE
    (105) let_initialization -> . KW_LET VARIABLE EQUALS data
    (106) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS data
    (107) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS data
    (108) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS data
    (109) let_initialization -> . KW_LET VARIABLE EQUALS expression_var
    (110) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS expression_var
    (111) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS expression_var
    (112) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var
    (113) const_initialization -> . KW_CONST VARIABLE COLON data_type EQUALS data
    (129) data_str -> . array
    (130) data_str -> . hashmap
    (131) data_str -> . linkedlist
    (156) input_init -> . KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN
    (57) flotante -> . FLOAT_32
    (58) flotante -> . FLOAT_64
    (47) sigint -> . SIG_INT_8
    (48) sigint -> . SIG_INT_16
    (49) sigint -> . SIG_INT_32
    (50) sigint -> . SIG_INT_64
    (51) sigint -> . SIG_INT_128
    (52) unsigint -> . UNSIG_INT_8
    (53) unsigint -> . UNSIG_INT_16
    (54) unsigint -> . UNSIG_INT_32
    (55) unsigint -> . UNSIG_INT_64
    (56) unsigint -> . UNSIG_INT_128
    (128) label -> . QUOTE VARIABLE
    (132) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (133) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (139) linkedlist -> . KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (140) linkedlist -> . KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (141) linkedlist -> . KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (142) linkedlist -> . KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN

  ! shift/reduce conflict for KW_PRINT resolved as shift
  ! shift/reduce conflict for KW_LET resolved as shift
  ! shift/reduce conflict for KW_FN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for KW_FOR resolved as shift
  ! shift/reduce conflict for KW_IF resolved as shift
  ! shift/reduce conflict for KW_ELSE resolved as shift
  ! shift/reduce conflict for KW_WHILE resolved as shift
  ! shift/reduce conflict for KW_CONST resolved as shift
  ! shift/reduce conflict for FLOAT_32 resolved as shift
  ! shift/reduce conflict for FLOAT_64 resolved as shift
  ! shift/reduce conflict for SIG_INT_8 resolved as shift
  ! shift/reduce conflict for SIG_INT_16 resolved as shift
  ! shift/reduce conflict for SIG_INT_32 resolved as shift
  ! shift/reduce conflict for SIG_INT_64 resolved as shift
  ! shift/reduce conflict for SIG_INT_128 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_8 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_16 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_32 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_64 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_128 resolved as shift
  ! shift/reduce conflict for QUOTE resolved as shift
    KW_PRINT        shift and go to state 16
    KW_LET          shift and go to state 18
    KW_FN           shift and go to state 19
    RBRACE          reduce using rule 138 (void -> .)
    LBRACKET        shift and go to state 26
    VARIABLE        shift and go to state 17
    KW_FOR          shift and go to state 34
    KW_IF           shift and go to state 36
    KW_ELSE         shift and go to state 37
    KW_WHILE        shift and go to state 38
    KW_CONST        shift and go to state 39
    FLOAT_32        shift and go to state 42
    FLOAT_64        shift and go to state 43
    SIG_INT_8       shift and go to state 44
    SIG_INT_16      shift and go to state 45
    SIG_INT_32      shift and go to state 46
    SIG_INT_64      shift and go to state 47
    SIG_INT_128     shift and go to state 48
    UNSIG_INT_8     shift and go to state 49
    UNSIG_INT_16    shift and go to state 50
    UNSIG_INT_32    shift and go to state 51
    UNSIG_INT_64    shift and go to state 52
    UNSIG_INT_128   shift and go to state 53
    QUOTE           shift and go to state 54

  ! KW_PRINT        [ reduce using rule 138 (void -> .) ]
  ! KW_LET          [ reduce using rule 138 (void -> .) ]
  ! KW_FN           [ reduce using rule 138 (void -> .) ]
  ! LBRACKET        [ reduce using rule 138 (void -> .) ]
  ! VARIABLE        [ reduce using rule 138 (void -> .) ]
  ! KW_FOR          [ reduce using rule 138 (void -> .) ]
  ! KW_IF           [ reduce using rule 138 (void -> .) ]
  ! KW_ELSE         [ reduce using rule 138 (void -> .) ]
  ! KW_WHILE        [ reduce using rule 138 (void -> .) ]
  ! KW_CONST        [ reduce using rule 138 (void -> .) ]
  ! FLOAT_32        [ reduce using rule 138 (void -> .) ]
  ! FLOAT_64        [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_8       [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_16      [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_32      [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_64      [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_128     [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_8     [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_16    [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_32    [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_64    [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_128   [ reduce using rule 138 (void -> .) ]
  ! QUOTE           [ reduce using rule 138 (void -> .) ]

    main_rule                      shift and go to state 273
    father_rule                    shift and go to state 2
    print                          shift and go to state 3
    dvariable                      shift and go to state 4
    function                       shift and go to state 5
    control_str                    shift and go to state 6
    void                           shift and go to state 7
    array                          shift and go to state 8
    linkedlist_methods             shift and go to state 9
    hashmap_methods                shift and go to state 10
    initialization                 shift and go to state 11
    input                          shift and go to state 12
    assignation                    shift and go to state 13
    declare_data_type              shift and go to state 14
    casting                        shift and go to state 15
    for_str                        shift and go to state 20
    for_str_tagged                 shift and go to state 21
    if                             shift and go to state 22
    else                           shift and go to state 23
    else_if                        shift and go to state 24
    while                          shift and go to state 25
    let_initialization             shift and go to state 27
    const_initialization           shift and go to state 28
    data_str                       shift and go to state 29
    input_init                     shift and go to state 30
    flotante                       shift and go to state 31
    sigint                         shift and go to state 32
    unsigint                       shift and go to state 33
    label                          shift and go to state 35
    hashmap                        shift and go to state 40
    linkedlist                     shift and go to state 41

state 239

    (127) range -> VARIABLE DOT . DOT VARIABLE

    DOT             shift and go to state 274


state 240

    (123) for_str -> KW_FOR VARIABLE KW_IN range LBRACE . main_rule RBRACE
    (1) main_rule -> . father_rule
    (2) main_rule -> . father_rule main_rule
    (3) father_rule -> . print
    (4) father_rule -> . dvariable
    (5) father_rule -> . function
    (6) father_rule -> . control_str
    (7) father_rule -> . void
    (8) father_rule -> . array
    (9) father_rule -> . linkedlist_methods
    (10) father_rule -> . hashmap_methods
    (11) father_rule -> . initialization
    (12) father_rule -> . input
    (13) father_rule -> . assignation
    (14) father_rule -> . declare_data_type
    (15) father_rule -> . casting
    (87) print -> . KW_PRINT LNOT LPAREN CADENA RPAREN SEMI
    (88) print -> . KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI
    (89) dvariable -> . KW_LET VARIABLE COLON data_type SEMI
    (116) function -> . KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE
    (150) function -> . KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE
    (117) control_str -> . for_str
    (118) control_str -> . for_str_tagged
    (119) control_str -> . if
    (120) control_str -> . else
    (121) control_str -> . else_if
    (122) control_str -> . while
    (138) void -> .
    (90) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (91) array -> . LBRACKET mdata RBRACKET
    (92) array -> . LBRACKET data SEMI data RBRACKET
    (93) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (94) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (95) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (96) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (143) linkedlist_methods -> . VARIABLE linkedlist_push
    (144) linkedlist_methods -> . VARIABLE linkedlist_remove
    (134) hashmap_methods -> . VARIABLE hashmap_insert
    (135) hashmap_methods -> . VARIABLE hashmap_remove
    (101) initialization -> . let_initialization SEMI
    (102) initialization -> . const_initialization SEMI
    (103) initialization -> . data_str SEMI
    (104) initialization -> . input_init SEMI
    (157) input -> . VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI
    (158) assignation -> . VARIABLE assign_operators number SEMI
    (159) assignation -> . VARIABLE assign_operators expression SEMI
    (160) assignation -> . VARIABLE assign_operators number
    (161) assignation -> . VARIABLE assign_operators expression
    (162) declare_data_type -> . KW_LET VARIABLE COLON data_type SEMI
    (59) casting -> . flotante KW_AS sigint
    (60) casting -> . flotante KW_AS unsigint
    (61) casting -> . sigint KW_AS flotante
    (62) casting -> . unsigint KW_AS flotante
    (63) casting -> . flotante KW_AS flotante
    (123) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE
    (124) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE
    (125) for_str_tagged -> . label COLON for_str
    (147) if -> . KW_IF conditional LBRACE main_rule RBRACE
    (148) else -> . KW_ELSE LBRACE main_rule RBRACE
    (149) else_if -> . KW_ELSE KW_IF conditional LBRACE main_rule RBRACE
    (99) while -> . KW_WHILE conditional LBRACE main_rule RBRACE
    (105) let_initialization -> . KW_LET VARIABLE EQUALS data
    (106) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS data
    (107) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS data
    (108) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS data
    (109) let_initialization -> . KW_LET VARIABLE EQUALS expression_var
    (110) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS expression_var
    (111) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS expression_var
    (112) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var
    (113) const_initialization -> . KW_CONST VARIABLE COLON data_type EQUALS data
    (129) data_str -> . array
    (130) data_str -> . hashmap
    (131) data_str -> . linkedlist
    (156) input_init -> . KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN
    (57) flotante -> . FLOAT_32
    (58) flotante -> . FLOAT_64
    (47) sigint -> . SIG_INT_8
    (48) sigint -> . SIG_INT_16
    (49) sigint -> . SIG_INT_32
    (50) sigint -> . SIG_INT_64
    (51) sigint -> . SIG_INT_128
    (52) unsigint -> . UNSIG_INT_8
    (53) unsigint -> . UNSIG_INT_16
    (54) unsigint -> . UNSIG_INT_32
    (55) unsigint -> . UNSIG_INT_64
    (56) unsigint -> . UNSIG_INT_128
    (128) label -> . QUOTE VARIABLE
    (132) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (133) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (139) linkedlist -> . KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (140) linkedlist -> . KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (141) linkedlist -> . KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (142) linkedlist -> . KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN

  ! shift/reduce conflict for KW_PRINT resolved as shift
  ! shift/reduce conflict for KW_LET resolved as shift
  ! shift/reduce conflict for KW_FN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for KW_FOR resolved as shift
  ! shift/reduce conflict for KW_IF resolved as shift
  ! shift/reduce conflict for KW_ELSE resolved as shift
  ! shift/reduce conflict for KW_WHILE resolved as shift
  ! shift/reduce conflict for KW_CONST resolved as shift
  ! shift/reduce conflict for FLOAT_32 resolved as shift
  ! shift/reduce conflict for FLOAT_64 resolved as shift
  ! shift/reduce conflict for SIG_INT_8 resolved as shift
  ! shift/reduce conflict for SIG_INT_16 resolved as shift
  ! shift/reduce conflict for SIG_INT_32 resolved as shift
  ! shift/reduce conflict for SIG_INT_64 resolved as shift
  ! shift/reduce conflict for SIG_INT_128 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_8 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_16 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_32 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_64 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_128 resolved as shift
  ! shift/reduce conflict for QUOTE resolved as shift
    KW_PRINT        shift and go to state 16
    KW_LET          shift and go to state 18
    KW_FN           shift and go to state 19
    RBRACE          reduce using rule 138 (void -> .)
    LBRACKET        shift and go to state 26
    VARIABLE        shift and go to state 17
    KW_FOR          shift and go to state 34
    KW_IF           shift and go to state 36
    KW_ELSE         shift and go to state 37
    KW_WHILE        shift and go to state 38
    KW_CONST        shift and go to state 39
    FLOAT_32        shift and go to state 42
    FLOAT_64        shift and go to state 43
    SIG_INT_8       shift and go to state 44
    SIG_INT_16      shift and go to state 45
    SIG_INT_32      shift and go to state 46
    SIG_INT_64      shift and go to state 47
    SIG_INT_128     shift and go to state 48
    UNSIG_INT_8     shift and go to state 49
    UNSIG_INT_16    shift and go to state 50
    UNSIG_INT_32    shift and go to state 51
    UNSIG_INT_64    shift and go to state 52
    UNSIG_INT_128   shift and go to state 53
    QUOTE           shift and go to state 54

  ! KW_PRINT        [ reduce using rule 138 (void -> .) ]
  ! KW_LET          [ reduce using rule 138 (void -> .) ]
  ! KW_FN           [ reduce using rule 138 (void -> .) ]
  ! LBRACKET        [ reduce using rule 138 (void -> .) ]
  ! VARIABLE        [ reduce using rule 138 (void -> .) ]
  ! KW_FOR          [ reduce using rule 138 (void -> .) ]
  ! KW_IF           [ reduce using rule 138 (void -> .) ]
  ! KW_ELSE         [ reduce using rule 138 (void -> .) ]
  ! KW_WHILE        [ reduce using rule 138 (void -> .) ]
  ! KW_CONST        [ reduce using rule 138 (void -> .) ]
  ! FLOAT_32        [ reduce using rule 138 (void -> .) ]
  ! FLOAT_64        [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_8       [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_16      [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_32      [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_64      [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_128     [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_8     [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_16    [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_32    [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_64    [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_128   [ reduce using rule 138 (void -> .) ]
  ! QUOTE           [ reduce using rule 138 (void -> .) ]

    main_rule                      shift and go to state 275
    father_rule                    shift and go to state 2
    print                          shift and go to state 3
    dvariable                      shift and go to state 4
    function                       shift and go to state 5
    control_str                    shift and go to state 6
    void                           shift and go to state 7
    array                          shift and go to state 8
    linkedlist_methods             shift and go to state 9
    hashmap_methods                shift and go to state 10
    initialization                 shift and go to state 11
    input                          shift and go to state 12
    assignation                    shift and go to state 13
    declare_data_type              shift and go to state 14
    casting                        shift and go to state 15
    for_str                        shift and go to state 20
    for_str_tagged                 shift and go to state 21
    if                             shift and go to state 22
    else                           shift and go to state 23
    else_if                        shift and go to state 24
    while                          shift and go to state 25
    let_initialization             shift and go to state 27
    const_initialization           shift and go to state 28
    data_str                       shift and go to state 29
    input_init                     shift and go to state 30
    flotante                       shift and go to state 31
    sigint                         shift and go to state 32
    unsigint                       shift and go to state 33
    label                          shift and go to state 35
    hashmap                        shift and go to state 40
    linkedlist                     shift and go to state 41

state 241

    (126) range -> INTEGER DOT . DOT INTEGER

    DOT             shift and go to state 276


state 242

    (147) if -> KW_IF conditional LBRACE main_rule RBRACE .

    KW_PRINT        reduce using rule 147 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    KW_LET          reduce using rule 147 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    KW_FN           reduce using rule 147 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    LBRACKET        reduce using rule 147 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    VARIABLE        reduce using rule 147 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    KW_FOR          reduce using rule 147 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    KW_IF           reduce using rule 147 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    KW_ELSE         reduce using rule 147 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    KW_WHILE        reduce using rule 147 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    KW_CONST        reduce using rule 147 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    FLOAT_32        reduce using rule 147 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    FLOAT_64        reduce using rule 147 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    SIG_INT_8       reduce using rule 147 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    SIG_INT_16      reduce using rule 147 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    SIG_INT_32      reduce using rule 147 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    SIG_INT_64      reduce using rule 147 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    SIG_INT_128     reduce using rule 147 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    UNSIG_INT_8     reduce using rule 147 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    UNSIG_INT_16    reduce using rule 147 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    UNSIG_INT_32    reduce using rule 147 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    UNSIG_INT_64    reduce using rule 147 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    UNSIG_INT_128   reduce using rule 147 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    QUOTE           reduce using rule 147 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    $end            reduce using rule 147 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    RBRACE          reduce using rule 147 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    KW_RETURN       reduce using rule 147 (if -> KW_IF conditional LBRACE main_rule RBRACE .)


state 243

    (84) conditional -> LPAREN lvariable RPAREN comparator . data
    (66) data -> . CADENA
    (67) data -> . INTEGER
    (68) data -> . CHAR
    (69) data -> . FLOAT
    (70) data -> . KW_FALSE
    (71) data -> . KW_TRUE
    (72) data -> . tuple
    (100) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 74
    INTEGER         shift and go to state 75
    CHAR            shift and go to state 76
    FLOAT           shift and go to state 77
    KW_FALSE        shift and go to state 78
    KW_TRUE         shift and go to state 79
    LPAREN          shift and go to state 81

    data                           shift and go to state 277
    tuple                          shift and go to state 80

state 244

    (82) lvariable -> VARIABLE logic VARIABLE .

    RPAREN          reduce using rule 82 (lvariable -> VARIABLE logic VARIABLE .)


state 245

    (149) else_if -> KW_ELSE KW_IF conditional LBRACE main_rule . RBRACE

    RBRACE          shift and go to state 278


state 246

    (99) while -> KW_WHILE conditional LBRACE main_rule RBRACE .

    KW_PRINT        reduce using rule 99 (while -> KW_WHILE conditional LBRACE main_rule RBRACE .)
    KW_LET          reduce using rule 99 (while -> KW_WHILE conditional LBRACE main_rule RBRACE .)
    KW_FN           reduce using rule 99 (while -> KW_WHILE conditional LBRACE main_rule RBRACE .)
    LBRACKET        reduce using rule 99 (while -> KW_WHILE conditional LBRACE main_rule RBRACE .)
    VARIABLE        reduce using rule 99 (while -> KW_WHILE conditional LBRACE main_rule RBRACE .)
    KW_FOR          reduce using rule 99 (while -> KW_WHILE conditional LBRACE main_rule RBRACE .)
    KW_IF           reduce using rule 99 (while -> KW_WHILE conditional LBRACE main_rule RBRACE .)
    KW_ELSE         reduce using rule 99 (while -> KW_WHILE conditional LBRACE main_rule RBRACE .)
    KW_WHILE        reduce using rule 99 (while -> KW_WHILE conditional LBRACE main_rule RBRACE .)
    KW_CONST        reduce using rule 99 (while -> KW_WHILE conditional LBRACE main_rule RBRACE .)
    FLOAT_32        reduce using rule 99 (while -> KW_WHILE conditional LBRACE main_rule RBRACE .)
    FLOAT_64        reduce using rule 99 (while -> KW_WHILE conditional LBRACE main_rule RBRACE .)
    SIG_INT_8       reduce using rule 99 (while -> KW_WHILE conditional LBRACE main_rule RBRACE .)
    SIG_INT_16      reduce using rule 99 (while -> KW_WHILE conditional LBRACE main_rule RBRACE .)
    SIG_INT_32      reduce using rule 99 (while -> KW_WHILE conditional LBRACE main_rule RBRACE .)
    SIG_INT_64      reduce using rule 99 (while -> KW_WHILE conditional LBRACE main_rule RBRACE .)
    SIG_INT_128     reduce using rule 99 (while -> KW_WHILE conditional LBRACE main_rule RBRACE .)
    UNSIG_INT_8     reduce using rule 99 (while -> KW_WHILE conditional LBRACE main_rule RBRACE .)
    UNSIG_INT_16    reduce using rule 99 (while -> KW_WHILE conditional LBRACE main_rule RBRACE .)
    UNSIG_INT_32    reduce using rule 99 (while -> KW_WHILE conditional LBRACE main_rule RBRACE .)
    UNSIG_INT_64    reduce using rule 99 (while -> KW_WHILE conditional LBRACE main_rule RBRACE .)
    UNSIG_INT_128   reduce using rule 99 (while -> KW_WHILE conditional LBRACE main_rule RBRACE .)
    QUOTE           reduce using rule 99 (while -> KW_WHILE conditional LBRACE main_rule RBRACE .)
    $end            reduce using rule 99 (while -> KW_WHILE conditional LBRACE main_rule RBRACE .)
    RBRACE          reduce using rule 99 (while -> KW_WHILE conditional LBRACE main_rule RBRACE .)
    KW_RETURN       reduce using rule 99 (while -> KW_WHILE conditional LBRACE main_rule RBRACE .)


state 247

    (113) const_initialization -> KW_CONST VARIABLE COLON data_type EQUALS . data
    (66) data -> . CADENA
    (67) data -> . INTEGER
    (68) data -> . CHAR
    (69) data -> . FLOAT
    (70) data -> . KW_FALSE
    (71) data -> . KW_TRUE
    (72) data -> . tuple
    (100) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 74
    INTEGER         shift and go to state 75
    CHAR            shift and go to state 76
    FLOAT           shift and go to state 77
    KW_FALSE        shift and go to state 78
    KW_TRUE         shift and go to state 79
    LPAREN          shift and go to state 81

    data                           shift and go to state 279
    tuple                          shift and go to state 80

state 248

    (87) print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .

    KW_PRINT        reduce using rule 87 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    KW_LET          reduce using rule 87 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    KW_FN           reduce using rule 87 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    LBRACKET        reduce using rule 87 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    VARIABLE        reduce using rule 87 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    KW_FOR          reduce using rule 87 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    KW_IF           reduce using rule 87 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    KW_ELSE         reduce using rule 87 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    KW_WHILE        reduce using rule 87 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    KW_CONST        reduce using rule 87 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    FLOAT_32        reduce using rule 87 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    FLOAT_64        reduce using rule 87 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    SIG_INT_8       reduce using rule 87 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    SIG_INT_16      reduce using rule 87 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    SIG_INT_32      reduce using rule 87 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    SIG_INT_64      reduce using rule 87 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    SIG_INT_128     reduce using rule 87 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    UNSIG_INT_8     reduce using rule 87 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    UNSIG_INT_16    reduce using rule 87 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    UNSIG_INT_32    reduce using rule 87 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    UNSIG_INT_64    reduce using rule 87 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    UNSIG_INT_128   reduce using rule 87 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    QUOTE           reduce using rule 87 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    $end            reduce using rule 87 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    RBRACE          reduce using rule 87 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    KW_RETURN       reduce using rule 87 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)


state 249

    (88) print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE . RPAREN SEMI

    RPAREN          shift and go to state 280


state 250

    (157) input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT . VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI

    VARIABLE        shift and go to state 281


state 251

    (145) linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN . SEMI

    SEMI            shift and go to state 282


state 252

    (146) linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN . SEMI

    SEMI            shift and go to state 283


state 253

    (137) hashmap_remove -> DOT KW_REMOVE LPAREN AND data . RPAREN SEMI

    RPAREN          shift and go to state 284


state 254

    (136) hashmap_insert -> DOT KW_INSERT LPAREN data COMMA . data RPAREN SEMI
    (66) data -> . CADENA
    (67) data -> . INTEGER
    (68) data -> . CHAR
    (69) data -> . FLOAT
    (70) data -> . KW_FALSE
    (71) data -> . KW_TRUE
    (72) data -> . tuple
    (100) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 74
    INTEGER         shift and go to state 75
    CHAR            shift and go to state 76
    FLOAT           shift and go to state 77
    KW_FALSE        shift and go to state 78
    KW_TRUE         shift and go to state 79
    LPAREN          shift and go to state 81

    data                           shift and go to state 285
    tuple                          shift and go to state 80

state 255

    (106) let_initialization -> KW_LET VARIABLE COLON data_type EQUALS data .
    (152) expression_var -> data .

  ! reduce/reduce conflict for SEMI resolved using rule 106 (let_initialization -> KW_LET VARIABLE COLON data_type EQUALS data .)
    SEMI            reduce using rule 106 (let_initialization -> KW_LET VARIABLE COLON data_type EQUALS data .)

  ! SEMI            [ reduce using rule 152 (expression_var -> data .) ]


state 256

    (110) let_initialization -> KW_LET VARIABLE COLON data_type EQUALS expression_var .

    SEMI            reduce using rule 110 (let_initialization -> KW_LET VARIABLE COLON data_type EQUALS expression_var .)


state 257

    (93) array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI . data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (94) array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI . data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (66) data -> . CADENA
    (67) data -> . INTEGER
    (68) data -> . CHAR
    (69) data -> . FLOAT
    (70) data -> . KW_FALSE
    (71) data -> . KW_TRUE
    (72) data -> . tuple
    (100) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 74
    INTEGER         shift and go to state 75
    CHAR            shift and go to state 76
    FLOAT           shift and go to state 77
    KW_FALSE        shift and go to state 78
    KW_TRUE         shift and go to state 79
    LPAREN          shift and go to state 81

    data                           shift and go to state 286
    tuple                          shift and go to state 80

state 258

    (139) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type . GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN

    GT              shift and go to state 287


state 259

    (90) array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET . SEMI

    SEMI            shift and go to state 288


state 260

    (156) input_init -> KW_LET VARIABLE EQUALS KW_IO COLON COLON . KW_STDIN LPAREN RPAREN

    KW_STDIN        shift and go to state 289


state 261

    (23) number -> INTEGER .
    (64) division -> INTEGER . DIVIDE INTEGER
    (67) data -> INTEGER .

  ! reduce/reduce conflict for RPAREN resolved using rule 23 (number -> INTEGER .)
    RPAREN          reduce using rule 23 (number -> INTEGER .)
    PLUS            reduce using rule 23 (number -> INTEGER .)
    MINUS           reduce using rule 23 (number -> INTEGER .)
    TIMES           reduce using rule 23 (number -> INTEGER .)
    DIVIDE          shift and go to state 152
    COMMA           reduce using rule 67 (data -> INTEGER .)

  ! RPAREN          [ reduce using rule 67 (data -> INTEGER .) ]


state 262

    (24) number -> FLOAT .
    (65) division -> FLOAT . DIVIDE FLOAT
    (69) data -> FLOAT .

  ! reduce/reduce conflict for RPAREN resolved using rule 24 (number -> FLOAT .)
    RPAREN          reduce using rule 24 (number -> FLOAT .)
    PLUS            reduce using rule 24 (number -> FLOAT .)
    MINUS           reduce using rule 24 (number -> FLOAT .)
    TIMES           reduce using rule 24 (number -> FLOAT .)
    DIVIDE          shift and go to state 153
    COMMA           reduce using rule 69 (data -> FLOAT .)

  ! RPAREN          [ reduce using rule 69 (data -> FLOAT .) ]


state 263

    (132) hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON . KW_NEW LPAREN RPAREN

    KW_NEW          shift and go to state 290


state 264

    (141) linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON . KW_FROM LPAREN array RPAREN

    KW_FROM         shift and go to state 291


state 265

    (95) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type . SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (96) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type . SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI

    SEMI            shift and go to state 292


state 266

    (108) let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS . data
    (112) let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS . expression_var
    (66) data -> . CADENA
    (67) data -> . INTEGER
    (68) data -> . CHAR
    (69) data -> . FLOAT
    (70) data -> . KW_FALSE
    (71) data -> . KW_TRUE
    (72) data -> . tuple
    (151) expression_var -> . expression
    (152) expression_var -> . data
    (100) tuple -> . LPAREN mdata RPAREN
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . number
    (21) expression -> . division
    (22) expression -> . variable
    (23) number -> . INTEGER
    (24) number -> . FLOAT
    (64) division -> . INTEGER DIVIDE INTEGER
    (65) division -> . FLOAT DIVIDE FLOAT
    (25) variable -> . VARIABLE

    CADENA          shift and go to state 74
    INTEGER         shift and go to state 181
    CHAR            shift and go to state 76
    FLOAT           shift and go to state 182
    KW_FALSE        shift and go to state 78
    KW_TRUE         shift and go to state 79
    LPAREN          shift and go to state 178
    VARIABLE        shift and go to state 104

    data                           shift and go to state 293
    expression_var                 shift and go to state 294
    tuple                          shift and go to state 80
    expression                     shift and go to state 183
    number                         shift and go to state 155
    division                       shift and go to state 110
    variable                       shift and go to state 111

state 267

    (140) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT . data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (26) data_type -> . UNSIG_INT_8
    (27) data_type -> . UNSIG_INT_16
    (28) data_type -> . UNSIG_INT_32
    (29) data_type -> . UNSIG_INT_64
    (30) data_type -> . UNSIG_INT_128
    (31) data_type -> . SIG_INT_8
    (32) data_type -> . SIG_INT_16
    (33) data_type -> . SIG_INT_32
    (34) data_type -> . SIG_INT_64
    (35) data_type -> . SIG_INT_128
    (36) data_type -> . FLOAT_32
    (37) data_type -> . FLOAT_64
    (38) data_type -> . KW_BOOLEAN
    (39) data_type -> . KW_STRING
    (40) data_type -> . KW_CHARACTER

    UNSIG_INT_8     shift and go to state 159
    UNSIG_INT_16    shift and go to state 160
    UNSIG_INT_32    shift and go to state 161
    UNSIG_INT_64    shift and go to state 162
    UNSIG_INT_128   shift and go to state 163
    SIG_INT_8       shift and go to state 164
    SIG_INT_16      shift and go to state 165
    SIG_INT_32      shift and go to state 166
    SIG_INT_64      shift and go to state 167
    SIG_INT_128     shift and go to state 168
    FLOAT_32        shift and go to state 169
    FLOAT_64        shift and go to state 170
    KW_BOOLEAN      shift and go to state 171
    KW_STRING       shift and go to state 172
    KW_CHARACTER    shift and go to state 173

    data_type                      shift and go to state 295

state 268

    (133) hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON . COLON KW_NEW LPAREN RPAREN

    COLON           shift and go to state 296


state 269

    (142) linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON . COLON KW_FROM LPAREN array RPAREN

    COLON           shift and go to state 297


state 270

    (98) variables -> VARIABLE COMMA variables .

    RPAREN          reduce using rule 98 (variables -> VARIABLE COMMA variables .)


state 271

    (116) function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE . main_rule RBRACE
    (1) main_rule -> . father_rule
    (2) main_rule -> . father_rule main_rule
    (3) father_rule -> . print
    (4) father_rule -> . dvariable
    (5) father_rule -> . function
    (6) father_rule -> . control_str
    (7) father_rule -> . void
    (8) father_rule -> . array
    (9) father_rule -> . linkedlist_methods
    (10) father_rule -> . hashmap_methods
    (11) father_rule -> . initialization
    (12) father_rule -> . input
    (13) father_rule -> . assignation
    (14) father_rule -> . declare_data_type
    (15) father_rule -> . casting
    (87) print -> . KW_PRINT LNOT LPAREN CADENA RPAREN SEMI
    (88) print -> . KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI
    (89) dvariable -> . KW_LET VARIABLE COLON data_type SEMI
    (116) function -> . KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE
    (150) function -> . KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE
    (117) control_str -> . for_str
    (118) control_str -> . for_str_tagged
    (119) control_str -> . if
    (120) control_str -> . else
    (121) control_str -> . else_if
    (122) control_str -> . while
    (138) void -> .
    (90) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (91) array -> . LBRACKET mdata RBRACKET
    (92) array -> . LBRACKET data SEMI data RBRACKET
    (93) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (94) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (95) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (96) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (143) linkedlist_methods -> . VARIABLE linkedlist_push
    (144) linkedlist_methods -> . VARIABLE linkedlist_remove
    (134) hashmap_methods -> . VARIABLE hashmap_insert
    (135) hashmap_methods -> . VARIABLE hashmap_remove
    (101) initialization -> . let_initialization SEMI
    (102) initialization -> . const_initialization SEMI
    (103) initialization -> . data_str SEMI
    (104) initialization -> . input_init SEMI
    (157) input -> . VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI
    (158) assignation -> . VARIABLE assign_operators number SEMI
    (159) assignation -> . VARIABLE assign_operators expression SEMI
    (160) assignation -> . VARIABLE assign_operators number
    (161) assignation -> . VARIABLE assign_operators expression
    (162) declare_data_type -> . KW_LET VARIABLE COLON data_type SEMI
    (59) casting -> . flotante KW_AS sigint
    (60) casting -> . flotante KW_AS unsigint
    (61) casting -> . sigint KW_AS flotante
    (62) casting -> . unsigint KW_AS flotante
    (63) casting -> . flotante KW_AS flotante
    (123) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE
    (124) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE
    (125) for_str_tagged -> . label COLON for_str
    (147) if -> . KW_IF conditional LBRACE main_rule RBRACE
    (148) else -> . KW_ELSE LBRACE main_rule RBRACE
    (149) else_if -> . KW_ELSE KW_IF conditional LBRACE main_rule RBRACE
    (99) while -> . KW_WHILE conditional LBRACE main_rule RBRACE
    (105) let_initialization -> . KW_LET VARIABLE EQUALS data
    (106) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS data
    (107) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS data
    (108) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS data
    (109) let_initialization -> . KW_LET VARIABLE EQUALS expression_var
    (110) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS expression_var
    (111) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS expression_var
    (112) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var
    (113) const_initialization -> . KW_CONST VARIABLE COLON data_type EQUALS data
    (129) data_str -> . array
    (130) data_str -> . hashmap
    (131) data_str -> . linkedlist
    (156) input_init -> . KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN
    (57) flotante -> . FLOAT_32
    (58) flotante -> . FLOAT_64
    (47) sigint -> . SIG_INT_8
    (48) sigint -> . SIG_INT_16
    (49) sigint -> . SIG_INT_32
    (50) sigint -> . SIG_INT_64
    (51) sigint -> . SIG_INT_128
    (52) unsigint -> . UNSIG_INT_8
    (53) unsigint -> . UNSIG_INT_16
    (54) unsigint -> . UNSIG_INT_32
    (55) unsigint -> . UNSIG_INT_64
    (56) unsigint -> . UNSIG_INT_128
    (128) label -> . QUOTE VARIABLE
    (132) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (133) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (139) linkedlist -> . KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (140) linkedlist -> . KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (141) linkedlist -> . KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (142) linkedlist -> . KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN

  ! shift/reduce conflict for KW_PRINT resolved as shift
  ! shift/reduce conflict for KW_LET resolved as shift
  ! shift/reduce conflict for KW_FN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for KW_FOR resolved as shift
  ! shift/reduce conflict for KW_IF resolved as shift
  ! shift/reduce conflict for KW_ELSE resolved as shift
  ! shift/reduce conflict for KW_WHILE resolved as shift
  ! shift/reduce conflict for KW_CONST resolved as shift
  ! shift/reduce conflict for FLOAT_32 resolved as shift
  ! shift/reduce conflict for FLOAT_64 resolved as shift
  ! shift/reduce conflict for SIG_INT_8 resolved as shift
  ! shift/reduce conflict for SIG_INT_16 resolved as shift
  ! shift/reduce conflict for SIG_INT_32 resolved as shift
  ! shift/reduce conflict for SIG_INT_64 resolved as shift
  ! shift/reduce conflict for SIG_INT_128 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_8 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_16 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_32 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_64 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_128 resolved as shift
  ! shift/reduce conflict for QUOTE resolved as shift
    KW_PRINT        shift and go to state 16
    KW_LET          shift and go to state 18
    KW_FN           shift and go to state 19
    RBRACE          reduce using rule 138 (void -> .)
    LBRACKET        shift and go to state 26
    VARIABLE        shift and go to state 17
    KW_FOR          shift and go to state 34
    KW_IF           shift and go to state 36
    KW_ELSE         shift and go to state 37
    KW_WHILE        shift and go to state 38
    KW_CONST        shift and go to state 39
    FLOAT_32        shift and go to state 42
    FLOAT_64        shift and go to state 43
    SIG_INT_8       shift and go to state 44
    SIG_INT_16      shift and go to state 45
    SIG_INT_32      shift and go to state 46
    SIG_INT_64      shift and go to state 47
    SIG_INT_128     shift and go to state 48
    UNSIG_INT_8     shift and go to state 49
    UNSIG_INT_16    shift and go to state 50
    UNSIG_INT_32    shift and go to state 51
    UNSIG_INT_64    shift and go to state 52
    UNSIG_INT_128   shift and go to state 53
    QUOTE           shift and go to state 54

  ! KW_PRINT        [ reduce using rule 138 (void -> .) ]
  ! KW_LET          [ reduce using rule 138 (void -> .) ]
  ! KW_FN           [ reduce using rule 138 (void -> .) ]
  ! LBRACKET        [ reduce using rule 138 (void -> .) ]
  ! VARIABLE        [ reduce using rule 138 (void -> .) ]
  ! KW_FOR          [ reduce using rule 138 (void -> .) ]
  ! KW_IF           [ reduce using rule 138 (void -> .) ]
  ! KW_ELSE         [ reduce using rule 138 (void -> .) ]
  ! KW_WHILE        [ reduce using rule 138 (void -> .) ]
  ! KW_CONST        [ reduce using rule 138 (void -> .) ]
  ! FLOAT_32        [ reduce using rule 138 (void -> .) ]
  ! FLOAT_64        [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_8       [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_16      [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_32      [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_64      [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_128     [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_8     [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_16    [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_32    [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_64    [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_128   [ reduce using rule 138 (void -> .) ]
  ! QUOTE           [ reduce using rule 138 (void -> .) ]

    main_rule                      shift and go to state 298
    father_rule                    shift and go to state 2
    print                          shift and go to state 3
    dvariable                      shift and go to state 4
    function                       shift and go to state 5
    control_str                    shift and go to state 6
    void                           shift and go to state 7
    array                          shift and go to state 8
    linkedlist_methods             shift and go to state 9
    hashmap_methods                shift and go to state 10
    initialization                 shift and go to state 11
    input                          shift and go to state 12
    assignation                    shift and go to state 13
    declare_data_type              shift and go to state 14
    casting                        shift and go to state 15
    for_str                        shift and go to state 20
    for_str_tagged                 shift and go to state 21
    if                             shift and go to state 22
    else                           shift and go to state 23
    else_if                        shift and go to state 24
    while                          shift and go to state 25
    let_initialization             shift and go to state 27
    const_initialization           shift and go to state 28
    data_str                       shift and go to state 29
    input_init                     shift and go to state 30
    flotante                       shift and go to state 31
    sigint                         shift and go to state 32
    unsigint                       shift and go to state 33
    label                          shift and go to state 35
    hashmap                        shift and go to state 40
    linkedlist                     shift and go to state 41

state 272

    (150) function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS . GT data_type LBRACE return RBRACE

    GT              shift and go to state 299


state 273

    (124) for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule . RBRACE

    RBRACE          shift and go to state 300


state 274

    (127) range -> VARIABLE DOT DOT . VARIABLE

    VARIABLE        shift and go to state 301


state 275

    (123) for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule . RBRACE

    RBRACE          shift and go to state 302


state 276

    (126) range -> INTEGER DOT DOT . INTEGER

    INTEGER         shift and go to state 303


state 277

    (84) conditional -> LPAREN lvariable RPAREN comparator data .

    LBRACE          reduce using rule 84 (conditional -> LPAREN lvariable RPAREN comparator data .)


state 278

    (149) else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .

    KW_PRINT        reduce using rule 149 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    KW_LET          reduce using rule 149 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    KW_FN           reduce using rule 149 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    LBRACKET        reduce using rule 149 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    VARIABLE        reduce using rule 149 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    KW_FOR          reduce using rule 149 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    KW_IF           reduce using rule 149 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    KW_ELSE         reduce using rule 149 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    KW_WHILE        reduce using rule 149 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    KW_CONST        reduce using rule 149 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    FLOAT_32        reduce using rule 149 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    FLOAT_64        reduce using rule 149 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    SIG_INT_8       reduce using rule 149 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    SIG_INT_16      reduce using rule 149 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    SIG_INT_32      reduce using rule 149 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    SIG_INT_64      reduce using rule 149 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    SIG_INT_128     reduce using rule 149 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    UNSIG_INT_8     reduce using rule 149 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    UNSIG_INT_16    reduce using rule 149 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    UNSIG_INT_32    reduce using rule 149 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    UNSIG_INT_64    reduce using rule 149 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    UNSIG_INT_128   reduce using rule 149 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    QUOTE           reduce using rule 149 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    $end            reduce using rule 149 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    RBRACE          reduce using rule 149 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    KW_RETURN       reduce using rule 149 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)


state 279

    (113) const_initialization -> KW_CONST VARIABLE COLON data_type EQUALS data .

    SEMI            reduce using rule 113 (const_initialization -> KW_CONST VARIABLE COLON data_type EQUALS data .)


state 280

    (88) print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN . SEMI

    SEMI            shift and go to state 304


state 281

    (157) input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE . RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI

    RPAREN          shift and go to state 305


state 282

    (145) linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .

    KW_PRINT        reduce using rule 145 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    KW_LET          reduce using rule 145 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    KW_FN           reduce using rule 145 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    LBRACKET        reduce using rule 145 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    VARIABLE        reduce using rule 145 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    KW_FOR          reduce using rule 145 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    KW_IF           reduce using rule 145 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    KW_ELSE         reduce using rule 145 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    KW_WHILE        reduce using rule 145 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    KW_CONST        reduce using rule 145 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    FLOAT_32        reduce using rule 145 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    FLOAT_64        reduce using rule 145 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    SIG_INT_8       reduce using rule 145 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    SIG_INT_16      reduce using rule 145 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    SIG_INT_32      reduce using rule 145 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    SIG_INT_64      reduce using rule 145 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    SIG_INT_128     reduce using rule 145 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    UNSIG_INT_8     reduce using rule 145 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    UNSIG_INT_16    reduce using rule 145 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    UNSIG_INT_32    reduce using rule 145 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    UNSIG_INT_64    reduce using rule 145 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    UNSIG_INT_128   reduce using rule 145 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    QUOTE           reduce using rule 145 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    $end            reduce using rule 145 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    RBRACE          reduce using rule 145 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    KW_RETURN       reduce using rule 145 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)


state 283

    (146) linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .

    KW_PRINT        reduce using rule 146 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    KW_LET          reduce using rule 146 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    KW_FN           reduce using rule 146 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    LBRACKET        reduce using rule 146 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    VARIABLE        reduce using rule 146 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    KW_FOR          reduce using rule 146 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    KW_IF           reduce using rule 146 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    KW_ELSE         reduce using rule 146 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    KW_WHILE        reduce using rule 146 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    KW_CONST        reduce using rule 146 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    FLOAT_32        reduce using rule 146 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    FLOAT_64        reduce using rule 146 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    SIG_INT_8       reduce using rule 146 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    SIG_INT_16      reduce using rule 146 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    SIG_INT_32      reduce using rule 146 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    SIG_INT_64      reduce using rule 146 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    SIG_INT_128     reduce using rule 146 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    UNSIG_INT_8     reduce using rule 146 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    UNSIG_INT_16    reduce using rule 146 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    UNSIG_INT_32    reduce using rule 146 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    UNSIG_INT_64    reduce using rule 146 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    UNSIG_INT_128   reduce using rule 146 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    QUOTE           reduce using rule 146 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    $end            reduce using rule 146 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    RBRACE          reduce using rule 146 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    KW_RETURN       reduce using rule 146 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)


state 284

    (137) hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN . SEMI

    SEMI            shift and go to state 306


state 285

    (136) hashmap_insert -> DOT KW_INSERT LPAREN data COMMA data . RPAREN SEMI

    RPAREN          shift and go to state 307


state 286

    (93) array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data . RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (94) array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data . RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI

    RBRACKET        shift and go to state 308


state 287

    (139) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT . EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN

    EQUALS          shift and go to state 309


state 288

    (90) array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .

    KW_PRINT        reduce using rule 90 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_LET          reduce using rule 90 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_FN           reduce using rule 90 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    LBRACKET        reduce using rule 90 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    VARIABLE        reduce using rule 90 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_FOR          reduce using rule 90 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_IF           reduce using rule 90 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_ELSE         reduce using rule 90 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_WHILE        reduce using rule 90 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_CONST        reduce using rule 90 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    FLOAT_32        reduce using rule 90 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    FLOAT_64        reduce using rule 90 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    SIG_INT_8       reduce using rule 90 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    SIG_INT_16      reduce using rule 90 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    SIG_INT_32      reduce using rule 90 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    SIG_INT_64      reduce using rule 90 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    SIG_INT_128     reduce using rule 90 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    UNSIG_INT_8     reduce using rule 90 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    UNSIG_INT_16    reduce using rule 90 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    UNSIG_INT_32    reduce using rule 90 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    UNSIG_INT_64    reduce using rule 90 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    UNSIG_INT_128   reduce using rule 90 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    QUOTE           reduce using rule 90 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    $end            reduce using rule 90 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    SEMI            reduce using rule 90 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    RBRACE          reduce using rule 90 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_RETURN       reduce using rule 90 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    RPAREN          reduce using rule 90 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)


state 289

    (156) input_init -> KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN . LPAREN RPAREN

    LPAREN          shift and go to state 310


state 290

    (132) hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW . LPAREN RPAREN

    LPAREN          shift and go to state 311


state 291

    (141) linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM . LPAREN array RPAREN

    LPAREN          shift and go to state 312


state 292

    (95) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI . data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (96) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI . data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (66) data -> . CADENA
    (67) data -> . INTEGER
    (68) data -> . CHAR
    (69) data -> . FLOAT
    (70) data -> . KW_FALSE
    (71) data -> . KW_TRUE
    (72) data -> . tuple
    (100) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 74
    INTEGER         shift and go to state 75
    CHAR            shift and go to state 76
    FLOAT           shift and go to state 77
    KW_FALSE        shift and go to state 78
    KW_TRUE         shift and go to state 79
    LPAREN          shift and go to state 81

    data                           shift and go to state 313
    tuple                          shift and go to state 80

state 293

    (108) let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS data .
    (152) expression_var -> data .

  ! reduce/reduce conflict for SEMI resolved using rule 108 (let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS data .)
    SEMI            reduce using rule 108 (let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS data .)

  ! SEMI            [ reduce using rule 152 (expression_var -> data .) ]


state 294

    (112) let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var .

    SEMI            reduce using rule 112 (let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var .)


state 295

    (140) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type . GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN

    GT              shift and go to state 314


state 296

    (133) hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON . KW_NEW LPAREN RPAREN

    KW_NEW          shift and go to state 315


state 297

    (142) linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON . KW_FROM LPAREN array RPAREN

    KW_FROM         shift and go to state 316


state 298

    (116) function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule . RBRACE

    RBRACE          shift and go to state 317


state 299

    (150) function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT . data_type LBRACE return RBRACE
    (26) data_type -> . UNSIG_INT_8
    (27) data_type -> . UNSIG_INT_16
    (28) data_type -> . UNSIG_INT_32
    (29) data_type -> . UNSIG_INT_64
    (30) data_type -> . UNSIG_INT_128
    (31) data_type -> . SIG_INT_8
    (32) data_type -> . SIG_INT_16
    (33) data_type -> . SIG_INT_32
    (34) data_type -> . SIG_INT_64
    (35) data_type -> . SIG_INT_128
    (36) data_type -> . FLOAT_32
    (37) data_type -> . FLOAT_64
    (38) data_type -> . KW_BOOLEAN
    (39) data_type -> . KW_STRING
    (40) data_type -> . KW_CHARACTER

    UNSIG_INT_8     shift and go to state 159
    UNSIG_INT_16    shift and go to state 160
    UNSIG_INT_32    shift and go to state 161
    UNSIG_INT_64    shift and go to state 162
    UNSIG_INT_128   shift and go to state 163
    SIG_INT_8       shift and go to state 164
    SIG_INT_16      shift and go to state 165
    SIG_INT_32      shift and go to state 166
    SIG_INT_64      shift and go to state 167
    SIG_INT_128     shift and go to state 168
    FLOAT_32        shift and go to state 169
    FLOAT_64        shift and go to state 170
    KW_BOOLEAN      shift and go to state 171
    KW_STRING       shift and go to state 172
    KW_CHARACTER    shift and go to state 173

    data_type                      shift and go to state 318

state 300

    (124) for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .

    KW_PRINT        reduce using rule 124 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    KW_LET          reduce using rule 124 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    KW_FN           reduce using rule 124 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    LBRACKET        reduce using rule 124 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    VARIABLE        reduce using rule 124 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    KW_FOR          reduce using rule 124 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    KW_IF           reduce using rule 124 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    KW_ELSE         reduce using rule 124 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    KW_WHILE        reduce using rule 124 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    KW_CONST        reduce using rule 124 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    FLOAT_32        reduce using rule 124 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    FLOAT_64        reduce using rule 124 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    SIG_INT_8       reduce using rule 124 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    SIG_INT_16      reduce using rule 124 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    SIG_INT_32      reduce using rule 124 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    SIG_INT_64      reduce using rule 124 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    SIG_INT_128     reduce using rule 124 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    UNSIG_INT_8     reduce using rule 124 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    UNSIG_INT_16    reduce using rule 124 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    UNSIG_INT_32    reduce using rule 124 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    UNSIG_INT_64    reduce using rule 124 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    UNSIG_INT_128   reduce using rule 124 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    QUOTE           reduce using rule 124 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    $end            reduce using rule 124 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    RBRACE          reduce using rule 124 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    KW_RETURN       reduce using rule 124 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)


state 301

    (127) range -> VARIABLE DOT DOT VARIABLE .

    LBRACE          reduce using rule 127 (range -> VARIABLE DOT DOT VARIABLE .)


state 302

    (123) for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .

    KW_PRINT        reduce using rule 123 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    KW_LET          reduce using rule 123 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    KW_FN           reduce using rule 123 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    LBRACKET        reduce using rule 123 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    VARIABLE        reduce using rule 123 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    KW_FOR          reduce using rule 123 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    KW_IF           reduce using rule 123 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    KW_ELSE         reduce using rule 123 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    KW_WHILE        reduce using rule 123 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    KW_CONST        reduce using rule 123 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    FLOAT_32        reduce using rule 123 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    FLOAT_64        reduce using rule 123 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    SIG_INT_8       reduce using rule 123 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    SIG_INT_16      reduce using rule 123 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    SIG_INT_32      reduce using rule 123 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    SIG_INT_64      reduce using rule 123 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    SIG_INT_128     reduce using rule 123 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    UNSIG_INT_8     reduce using rule 123 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    UNSIG_INT_16    reduce using rule 123 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    UNSIG_INT_32    reduce using rule 123 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    UNSIG_INT_64    reduce using rule 123 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    UNSIG_INT_128   reduce using rule 123 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    QUOTE           reduce using rule 123 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    $end            reduce using rule 123 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    RBRACE          reduce using rule 123 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    KW_RETURN       reduce using rule 123 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)


state 303

    (126) range -> INTEGER DOT DOT INTEGER .

    LBRACE          reduce using rule 126 (range -> INTEGER DOT DOT INTEGER .)


state 304

    (88) print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .

    KW_PRINT        reduce using rule 88 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    KW_LET          reduce using rule 88 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    KW_FN           reduce using rule 88 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    LBRACKET        reduce using rule 88 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    VARIABLE        reduce using rule 88 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    KW_FOR          reduce using rule 88 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    KW_IF           reduce using rule 88 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    KW_ELSE         reduce using rule 88 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    KW_WHILE        reduce using rule 88 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    KW_CONST        reduce using rule 88 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    FLOAT_32        reduce using rule 88 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    FLOAT_64        reduce using rule 88 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    SIG_INT_8       reduce using rule 88 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    SIG_INT_16      reduce using rule 88 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    SIG_INT_32      reduce using rule 88 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    SIG_INT_64      reduce using rule 88 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    SIG_INT_128     reduce using rule 88 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    UNSIG_INT_8     reduce using rule 88 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    UNSIG_INT_16    reduce using rule 88 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    UNSIG_INT_32    reduce using rule 88 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    UNSIG_INT_64    reduce using rule 88 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    UNSIG_INT_128   reduce using rule 88 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    QUOTE           reduce using rule 88 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    $end            reduce using rule 88 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    RBRACE          reduce using rule 88 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    KW_RETURN       reduce using rule 88 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)


state 305

    (157) input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN . DOT KW_EXPECT LPAREN CADENA RPAREN SEMI

    DOT             shift and go to state 319


state 306

    (137) hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .

    KW_PRINT        reduce using rule 137 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    KW_LET          reduce using rule 137 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    KW_FN           reduce using rule 137 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    LBRACKET        reduce using rule 137 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    VARIABLE        reduce using rule 137 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    KW_FOR          reduce using rule 137 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    KW_IF           reduce using rule 137 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    KW_ELSE         reduce using rule 137 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    KW_WHILE        reduce using rule 137 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    KW_CONST        reduce using rule 137 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    FLOAT_32        reduce using rule 137 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    FLOAT_64        reduce using rule 137 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    SIG_INT_8       reduce using rule 137 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    SIG_INT_16      reduce using rule 137 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    SIG_INT_32      reduce using rule 137 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    SIG_INT_64      reduce using rule 137 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    SIG_INT_128     reduce using rule 137 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    UNSIG_INT_8     reduce using rule 137 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    UNSIG_INT_16    reduce using rule 137 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    UNSIG_INT_32    reduce using rule 137 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    UNSIG_INT_64    reduce using rule 137 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    UNSIG_INT_128   reduce using rule 137 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    QUOTE           reduce using rule 137 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    $end            reduce using rule 137 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    RBRACE          reduce using rule 137 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    KW_RETURN       reduce using rule 137 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)


state 307

    (136) hashmap_insert -> DOT KW_INSERT LPAREN data COMMA data RPAREN . SEMI

    SEMI            shift and go to state 320


state 308

    (93) array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET . EQUALS LBRACKET mdata RBRACKET SEMI
    (94) array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET . EQUALS LBRACKET data SEMI data RBRACKET SEMI

    EQUALS          shift and go to state 321


state 309

    (139) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS . KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN

    KW_LINKEDLIST   shift and go to state 322


state 310

    (156) input_init -> KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN . RPAREN

    RPAREN          shift and go to state 323


state 311

    (132) hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN . RPAREN

    RPAREN          shift and go to state 324


state 312

    (141) linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN . array RPAREN
    (90) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (91) array -> . LBRACKET mdata RBRACKET
    (92) array -> . LBRACKET data SEMI data RBRACKET
    (93) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (94) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (95) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (96) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI

    KW_LET          shift and go to state 325
    LBRACKET        shift and go to state 26

    array                          shift and go to state 326

state 313

    (95) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data . RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (96) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data . RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI

    RBRACKET        shift and go to state 327


state 314

    (140) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT . EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN

    EQUALS          shift and go to state 328


state 315

    (133) hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW . LPAREN RPAREN

    LPAREN          shift and go to state 329


state 316

    (142) linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM . LPAREN array RPAREN

    LPAREN          shift and go to state 330


state 317

    (116) function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .

    KW_PRINT        reduce using rule 116 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    KW_LET          reduce using rule 116 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    KW_FN           reduce using rule 116 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    LBRACKET        reduce using rule 116 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    VARIABLE        reduce using rule 116 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    KW_FOR          reduce using rule 116 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    KW_IF           reduce using rule 116 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    KW_ELSE         reduce using rule 116 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    KW_WHILE        reduce using rule 116 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    KW_CONST        reduce using rule 116 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    FLOAT_32        reduce using rule 116 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    FLOAT_64        reduce using rule 116 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    SIG_INT_8       reduce using rule 116 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    SIG_INT_16      reduce using rule 116 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    SIG_INT_32      reduce using rule 116 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    SIG_INT_64      reduce using rule 116 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    SIG_INT_128     reduce using rule 116 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    UNSIG_INT_8     reduce using rule 116 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    UNSIG_INT_16    reduce using rule 116 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    UNSIG_INT_32    reduce using rule 116 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    UNSIG_INT_64    reduce using rule 116 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    UNSIG_INT_128   reduce using rule 116 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    QUOTE           reduce using rule 116 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    $end            reduce using rule 116 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    RBRACE          reduce using rule 116 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    KW_RETURN       reduce using rule 116 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)


state 318

    (150) function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type . LBRACE return RBRACE

    LBRACE          shift and go to state 331


state 319

    (157) input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT . KW_EXPECT LPAREN CADENA RPAREN SEMI

    KW_EXPECT       shift and go to state 332


state 320

    (136) hashmap_insert -> DOT KW_INSERT LPAREN data COMMA data RPAREN SEMI .

    KW_PRINT        reduce using rule 136 (hashmap_insert -> DOT KW_INSERT LPAREN data COMMA data RPAREN SEMI .)
    KW_LET          reduce using rule 136 (hashmap_insert -> DOT KW_INSERT LPAREN data COMMA data RPAREN SEMI .)
    KW_FN           reduce using rule 136 (hashmap_insert -> DOT KW_INSERT LPAREN data COMMA data RPAREN SEMI .)
    LBRACKET        reduce using rule 136 (hashmap_insert -> DOT KW_INSERT LPAREN data COMMA data RPAREN SEMI .)
    VARIABLE        reduce using rule 136 (hashmap_insert -> DOT KW_INSERT LPAREN data COMMA data RPAREN SEMI .)
    KW_FOR          reduce using rule 136 (hashmap_insert -> DOT KW_INSERT LPAREN data COMMA data RPAREN SEMI .)
    KW_IF           reduce using rule 136 (hashmap_insert -> DOT KW_INSERT LPAREN data COMMA data RPAREN SEMI .)
    KW_ELSE         reduce using rule 136 (hashmap_insert -> DOT KW_INSERT LPAREN data COMMA data RPAREN SEMI .)
    KW_WHILE        reduce using rule 136 (hashmap_insert -> DOT KW_INSERT LPAREN data COMMA data RPAREN SEMI .)
    KW_CONST        reduce using rule 136 (hashmap_insert -> DOT KW_INSERT LPAREN data COMMA data RPAREN SEMI .)
    FLOAT_32        reduce using rule 136 (hashmap_insert -> DOT KW_INSERT LPAREN data COMMA data RPAREN SEMI .)
    FLOAT_64        reduce using rule 136 (hashmap_insert -> DOT KW_INSERT LPAREN data COMMA data RPAREN SEMI .)
    SIG_INT_8       reduce using rule 136 (hashmap_insert -> DOT KW_INSERT LPAREN data COMMA data RPAREN SEMI .)
    SIG_INT_16      reduce using rule 136 (hashmap_insert -> DOT KW_INSERT LPAREN data COMMA data RPAREN SEMI .)
    SIG_INT_32      reduce using rule 136 (hashmap_insert -> DOT KW_INSERT LPAREN data COMMA data RPAREN SEMI .)
    SIG_INT_64      reduce using rule 136 (hashmap_insert -> DOT KW_INSERT LPAREN data COMMA data RPAREN SEMI .)
    SIG_INT_128     reduce using rule 136 (hashmap_insert -> DOT KW_INSERT LPAREN data COMMA data RPAREN SEMI .)
    UNSIG_INT_8     reduce using rule 136 (hashmap_insert -> DOT KW_INSERT LPAREN data COMMA data RPAREN SEMI .)
    UNSIG_INT_16    reduce using rule 136 (hashmap_insert -> DOT KW_INSERT LPAREN data COMMA data RPAREN SEMI .)
    UNSIG_INT_32    reduce using rule 136 (hashmap_insert -> DOT KW_INSERT LPAREN data COMMA data RPAREN SEMI .)
    UNSIG_INT_64    reduce using rule 136 (hashmap_insert -> DOT KW_INSERT LPAREN data COMMA data RPAREN SEMI .)
    UNSIG_INT_128   reduce using rule 136 (hashmap_insert -> DOT KW_INSERT LPAREN data COMMA data RPAREN SEMI .)
    QUOTE           reduce using rule 136 (hashmap_insert -> DOT KW_INSERT LPAREN data COMMA data RPAREN SEMI .)
    $end            reduce using rule 136 (hashmap_insert -> DOT KW_INSERT LPAREN data COMMA data RPAREN SEMI .)
    RBRACE          reduce using rule 136 (hashmap_insert -> DOT KW_INSERT LPAREN data COMMA data RPAREN SEMI .)
    KW_RETURN       reduce using rule 136 (hashmap_insert -> DOT KW_INSERT LPAREN data COMMA data RPAREN SEMI .)


state 321

    (93) array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS . LBRACKET mdata RBRACKET SEMI
    (94) array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS . LBRACKET data SEMI data RBRACKET SEMI

    LBRACKET        shift and go to state 333


state 322

    (139) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST . COLON COLON KW_NEW LPAREN RPAREN

    COLON           shift and go to state 334


state 323

    (156) input_init -> KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN .

    SEMI            reduce using rule 156 (input_init -> KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN .)


state 324

    (132) hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .

    SEMI            reduce using rule 132 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)


state 325

    (90) array -> KW_LET . VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (93) array -> KW_LET . VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (94) array -> KW_LET . VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (95) array -> KW_LET . KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (96) array -> KW_LET . KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI

    VARIABLE        shift and go to state 335
    KW_MUT          shift and go to state 336


state 326

    (141) linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array . RPAREN

    RPAREN          shift and go to state 337


state 327

    (95) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET . EQUALS LBRACKET mdata RBRACKET SEMI
    (96) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET . EQUALS LBRACKET data SEMI data RBRACKET SEMI

    EQUALS          shift and go to state 338


state 328

    (140) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS . KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN

    KW_LINKEDLIST   shift and go to state 339


state 329

    (133) hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN . RPAREN

    RPAREN          shift and go to state 340


state 330

    (142) linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN . array RPAREN
    (90) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (91) array -> . LBRACKET mdata RBRACKET
    (92) array -> . LBRACKET data SEMI data RBRACKET
    (93) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (94) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (95) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (96) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI

    KW_LET          shift and go to state 325
    LBRACKET        shift and go to state 26

    array                          shift and go to state 341

state 331

    (150) function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE . return RBRACE
    (153) return -> . main_rule
    (154) return -> . KW_RETURN expression_var SEMI
    (155) return -> . main_rule KW_RETURN expression_var SEMI
    (1) main_rule -> . father_rule
    (2) main_rule -> . father_rule main_rule
    (3) father_rule -> . print
    (4) father_rule -> . dvariable
    (5) father_rule -> . function
    (6) father_rule -> . control_str
    (7) father_rule -> . void
    (8) father_rule -> . array
    (9) father_rule -> . linkedlist_methods
    (10) father_rule -> . hashmap_methods
    (11) father_rule -> . initialization
    (12) father_rule -> . input
    (13) father_rule -> . assignation
    (14) father_rule -> . declare_data_type
    (15) father_rule -> . casting
    (87) print -> . KW_PRINT LNOT LPAREN CADENA RPAREN SEMI
    (88) print -> . KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI
    (89) dvariable -> . KW_LET VARIABLE COLON data_type SEMI
    (116) function -> . KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE
    (150) function -> . KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE
    (117) control_str -> . for_str
    (118) control_str -> . for_str_tagged
    (119) control_str -> . if
    (120) control_str -> . else
    (121) control_str -> . else_if
    (122) control_str -> . while
    (138) void -> .
    (90) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (91) array -> . LBRACKET mdata RBRACKET
    (92) array -> . LBRACKET data SEMI data RBRACKET
    (93) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (94) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (95) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (96) array -> . KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (143) linkedlist_methods -> . VARIABLE linkedlist_push
    (144) linkedlist_methods -> . VARIABLE linkedlist_remove
    (134) hashmap_methods -> . VARIABLE hashmap_insert
    (135) hashmap_methods -> . VARIABLE hashmap_remove
    (101) initialization -> . let_initialization SEMI
    (102) initialization -> . const_initialization SEMI
    (103) initialization -> . data_str SEMI
    (104) initialization -> . input_init SEMI
    (157) input -> . VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI
    (158) assignation -> . VARIABLE assign_operators number SEMI
    (159) assignation -> . VARIABLE assign_operators expression SEMI
    (160) assignation -> . VARIABLE assign_operators number
    (161) assignation -> . VARIABLE assign_operators expression
    (162) declare_data_type -> . KW_LET VARIABLE COLON data_type SEMI
    (59) casting -> . flotante KW_AS sigint
    (60) casting -> . flotante KW_AS unsigint
    (61) casting -> . sigint KW_AS flotante
    (62) casting -> . unsigint KW_AS flotante
    (63) casting -> . flotante KW_AS flotante
    (123) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE
    (124) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE
    (125) for_str_tagged -> . label COLON for_str
    (147) if -> . KW_IF conditional LBRACE main_rule RBRACE
    (148) else -> . KW_ELSE LBRACE main_rule RBRACE
    (149) else_if -> . KW_ELSE KW_IF conditional LBRACE main_rule RBRACE
    (99) while -> . KW_WHILE conditional LBRACE main_rule RBRACE
    (105) let_initialization -> . KW_LET VARIABLE EQUALS data
    (106) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS data
    (107) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS data
    (108) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS data
    (109) let_initialization -> . KW_LET VARIABLE EQUALS expression_var
    (110) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS expression_var
    (111) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS expression_var
    (112) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var
    (113) const_initialization -> . KW_CONST VARIABLE COLON data_type EQUALS data
    (129) data_str -> . array
    (130) data_str -> . hashmap
    (131) data_str -> . linkedlist
    (156) input_init -> . KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN
    (57) flotante -> . FLOAT_32
    (58) flotante -> . FLOAT_64
    (47) sigint -> . SIG_INT_8
    (48) sigint -> . SIG_INT_16
    (49) sigint -> . SIG_INT_32
    (50) sigint -> . SIG_INT_64
    (51) sigint -> . SIG_INT_128
    (52) unsigint -> . UNSIG_INT_8
    (53) unsigint -> . UNSIG_INT_16
    (54) unsigint -> . UNSIG_INT_32
    (55) unsigint -> . UNSIG_INT_64
    (56) unsigint -> . UNSIG_INT_128
    (128) label -> . QUOTE VARIABLE
    (132) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (133) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (139) linkedlist -> . KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (140) linkedlist -> . KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (141) linkedlist -> . KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (142) linkedlist -> . KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN

  ! shift/reduce conflict for KW_PRINT resolved as shift
  ! shift/reduce conflict for KW_LET resolved as shift
  ! shift/reduce conflict for KW_FN resolved as shift
  ! shift/reduce conflict for KW_RETURN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for KW_FOR resolved as shift
  ! shift/reduce conflict for KW_IF resolved as shift
  ! shift/reduce conflict for KW_ELSE resolved as shift
  ! shift/reduce conflict for KW_WHILE resolved as shift
  ! shift/reduce conflict for KW_CONST resolved as shift
  ! shift/reduce conflict for FLOAT_32 resolved as shift
  ! shift/reduce conflict for FLOAT_64 resolved as shift
  ! shift/reduce conflict for SIG_INT_8 resolved as shift
  ! shift/reduce conflict for SIG_INT_16 resolved as shift
  ! shift/reduce conflict for SIG_INT_32 resolved as shift
  ! shift/reduce conflict for SIG_INT_64 resolved as shift
  ! shift/reduce conflict for SIG_INT_128 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_8 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_16 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_32 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_64 resolved as shift
  ! shift/reduce conflict for UNSIG_INT_128 resolved as shift
  ! shift/reduce conflict for QUOTE resolved as shift
    KW_RETURN       shift and go to state 344
    KW_PRINT        shift and go to state 16
    KW_LET          shift and go to state 18
    KW_FN           shift and go to state 19
    RBRACE          reduce using rule 138 (void -> .)
    LBRACKET        shift and go to state 26
    VARIABLE        shift and go to state 17
    KW_FOR          shift and go to state 34
    KW_IF           shift and go to state 36
    KW_ELSE         shift and go to state 37
    KW_WHILE        shift and go to state 38
    KW_CONST        shift and go to state 39
    FLOAT_32        shift and go to state 42
    FLOAT_64        shift and go to state 43
    SIG_INT_8       shift and go to state 44
    SIG_INT_16      shift and go to state 45
    SIG_INT_32      shift and go to state 46
    SIG_INT_64      shift and go to state 47
    SIG_INT_128     shift and go to state 48
    UNSIG_INT_8     shift and go to state 49
    UNSIG_INT_16    shift and go to state 50
    UNSIG_INT_32    shift and go to state 51
    UNSIG_INT_64    shift and go to state 52
    UNSIG_INT_128   shift and go to state 53
    QUOTE           shift and go to state 54

  ! KW_PRINT        [ reduce using rule 138 (void -> .) ]
  ! KW_LET          [ reduce using rule 138 (void -> .) ]
  ! KW_FN           [ reduce using rule 138 (void -> .) ]
  ! LBRACKET        [ reduce using rule 138 (void -> .) ]
  ! VARIABLE        [ reduce using rule 138 (void -> .) ]
  ! KW_FOR          [ reduce using rule 138 (void -> .) ]
  ! KW_IF           [ reduce using rule 138 (void -> .) ]
  ! KW_ELSE         [ reduce using rule 138 (void -> .) ]
  ! KW_WHILE        [ reduce using rule 138 (void -> .) ]
  ! KW_CONST        [ reduce using rule 138 (void -> .) ]
  ! FLOAT_32        [ reduce using rule 138 (void -> .) ]
  ! FLOAT_64        [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_8       [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_16      [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_32      [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_64      [ reduce using rule 138 (void -> .) ]
  ! SIG_INT_128     [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_8     [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_16    [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_32    [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_64    [ reduce using rule 138 (void -> .) ]
  ! UNSIG_INT_128   [ reduce using rule 138 (void -> .) ]
  ! QUOTE           [ reduce using rule 138 (void -> .) ]
  ! KW_RETURN       [ reduce using rule 138 (void -> .) ]

    return                         shift and go to state 342
    main_rule                      shift and go to state 343
    father_rule                    shift and go to state 2
    print                          shift and go to state 3
    dvariable                      shift and go to state 4
    function                       shift and go to state 5
    control_str                    shift and go to state 6
    void                           shift and go to state 7
    array                          shift and go to state 8
    linkedlist_methods             shift and go to state 9
    hashmap_methods                shift and go to state 10
    initialization                 shift and go to state 11
    input                          shift and go to state 12
    assignation                    shift and go to state 13
    declare_data_type              shift and go to state 14
    casting                        shift and go to state 15
    for_str                        shift and go to state 20
    for_str_tagged                 shift and go to state 21
    if                             shift and go to state 22
    else                           shift and go to state 23
    else_if                        shift and go to state 24
    while                          shift and go to state 25
    let_initialization             shift and go to state 27
    const_initialization           shift and go to state 28
    data_str                       shift and go to state 29
    input_init                     shift and go to state 30
    flotante                       shift and go to state 31
    sigint                         shift and go to state 32
    unsigint                       shift and go to state 33
    label                          shift and go to state 35
    hashmap                        shift and go to state 40
    linkedlist                     shift and go to state 41

state 332

    (157) input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT . LPAREN CADENA RPAREN SEMI

    LPAREN          shift and go to state 345


state 333

    (93) array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET . mdata RBRACKET SEMI
    (94) array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET . data SEMI data RBRACKET SEMI
    (85) mdata -> . data
    (86) mdata -> . data COMMA mdata
    (66) data -> . CADENA
    (67) data -> . INTEGER
    (68) data -> . CHAR
    (69) data -> . FLOAT
    (70) data -> . KW_FALSE
    (71) data -> . KW_TRUE
    (72) data -> . tuple
    (100) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 74
    INTEGER         shift and go to state 75
    CHAR            shift and go to state 76
    FLOAT           shift and go to state 77
    KW_FALSE        shift and go to state 78
    KW_TRUE         shift and go to state 79
    LPAREN          shift and go to state 81

    data                           shift and go to state 346
    mdata                          shift and go to state 347
    tuple                          shift and go to state 80

state 334

    (139) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON . COLON KW_NEW LPAREN RPAREN

    COLON           shift and go to state 348


state 335

    (90) array -> KW_LET VARIABLE . EQUALS LBRACKET mdata RBRACKET SEMI
    (93) array -> KW_LET VARIABLE . COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (94) array -> KW_LET VARIABLE . COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI

    EQUALS          shift and go to state 349
    COLON           shift and go to state 350


state 336

    (95) array -> KW_LET KW_MUT . VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (96) array -> KW_LET KW_MUT . VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI

    VARIABLE        shift and go to state 351


state 337

    (141) linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .

    SEMI            reduce using rule 141 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)


state 338

    (95) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS . LBRACKET mdata RBRACKET SEMI
    (96) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS . LBRACKET data SEMI data RBRACKET SEMI

    LBRACKET        shift and go to state 352


state 339

    (140) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST . COLON COLON KW_NEW LPAREN RPAREN

    COLON           shift and go to state 353


state 340

    (133) hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .

    SEMI            reduce using rule 133 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)


state 341

    (142) linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array . RPAREN

    RPAREN          shift and go to state 354


state 342

    (150) function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return . RBRACE

    RBRACE          shift and go to state 355


state 343

    (153) return -> main_rule .
    (155) return -> main_rule . KW_RETURN expression_var SEMI

    RBRACE          reduce using rule 153 (return -> main_rule .)
    KW_RETURN       shift and go to state 356


state 344

    (154) return -> KW_RETURN . expression_var SEMI
    (151) expression_var -> . expression
    (152) expression_var -> . data
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . number
    (21) expression -> . division
    (22) expression -> . variable
    (66) data -> . CADENA
    (67) data -> . INTEGER
    (68) data -> . CHAR
    (69) data -> . FLOAT
    (70) data -> . KW_FALSE
    (71) data -> . KW_TRUE
    (72) data -> . tuple
    (23) number -> . INTEGER
    (24) number -> . FLOAT
    (64) division -> . INTEGER DIVIDE INTEGER
    (65) division -> . FLOAT DIVIDE FLOAT
    (25) variable -> . VARIABLE
    (100) tuple -> . LPAREN mdata RPAREN

    LPAREN          shift and go to state 225
    CADENA          shift and go to state 74
    INTEGER         shift and go to state 181
    CHAR            shift and go to state 76
    FLOAT           shift and go to state 182
    KW_FALSE        shift and go to state 78
    KW_TRUE         shift and go to state 79
    VARIABLE        shift and go to state 104

    expression_var                 shift and go to state 357
    expression                     shift and go to state 183
    data                           shift and go to state 358
    number                         shift and go to state 155
    division                       shift and go to state 110
    variable                       shift and go to state 111
    tuple                          shift and go to state 80

state 345

    (157) input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN . CADENA RPAREN SEMI

    CADENA          shift and go to state 359


state 346

    (94) array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data . SEMI data RBRACKET SEMI
    (85) mdata -> data .
    (86) mdata -> data . COMMA mdata

    SEMI            shift and go to state 360
    RBRACKET        reduce using rule 85 (mdata -> data .)
    COMMA           shift and go to state 118


state 347

    (93) array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata . RBRACKET SEMI

    RBRACKET        shift and go to state 361


state 348

    (139) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON . KW_NEW LPAREN RPAREN

    KW_NEW          shift and go to state 362


state 349

    (90) array -> KW_LET VARIABLE EQUALS . LBRACKET mdata RBRACKET SEMI

    LBRACKET        shift and go to state 174


state 350

    (93) array -> KW_LET VARIABLE COLON . LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (94) array -> KW_LET VARIABLE COLON . LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI

    LBRACKET        shift and go to state 157


state 351

    (95) array -> KW_LET KW_MUT VARIABLE . COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (96) array -> KW_LET KW_MUT VARIABLE . COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI

    COLON           shift and go to state 363


state 352

    (95) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET . mdata RBRACKET SEMI
    (96) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET . data SEMI data RBRACKET SEMI
    (85) mdata -> . data
    (86) mdata -> . data COMMA mdata
    (66) data -> . CADENA
    (67) data -> . INTEGER
    (68) data -> . CHAR
    (69) data -> . FLOAT
    (70) data -> . KW_FALSE
    (71) data -> . KW_TRUE
    (72) data -> . tuple
    (100) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 74
    INTEGER         shift and go to state 75
    CHAR            shift and go to state 76
    FLOAT           shift and go to state 77
    KW_FALSE        shift and go to state 78
    KW_TRUE         shift and go to state 79
    LPAREN          shift and go to state 81

    data                           shift and go to state 364
    mdata                          shift and go to state 365
    tuple                          shift and go to state 80

state 353

    (140) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON . COLON KW_NEW LPAREN RPAREN

    COLON           shift and go to state 366


state 354

    (142) linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .

    SEMI            reduce using rule 142 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)


state 355

    (150) function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .

    KW_PRINT        reduce using rule 150 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    KW_LET          reduce using rule 150 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    KW_FN           reduce using rule 150 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    LBRACKET        reduce using rule 150 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    VARIABLE        reduce using rule 150 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    KW_FOR          reduce using rule 150 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    KW_IF           reduce using rule 150 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    KW_ELSE         reduce using rule 150 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    KW_WHILE        reduce using rule 150 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    KW_CONST        reduce using rule 150 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    FLOAT_32        reduce using rule 150 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    FLOAT_64        reduce using rule 150 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    SIG_INT_8       reduce using rule 150 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    SIG_INT_16      reduce using rule 150 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    SIG_INT_32      reduce using rule 150 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    SIG_INT_64      reduce using rule 150 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    SIG_INT_128     reduce using rule 150 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    UNSIG_INT_8     reduce using rule 150 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    UNSIG_INT_16    reduce using rule 150 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    UNSIG_INT_32    reduce using rule 150 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    UNSIG_INT_64    reduce using rule 150 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    UNSIG_INT_128   reduce using rule 150 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    QUOTE           reduce using rule 150 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    $end            reduce using rule 150 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    RBRACE          reduce using rule 150 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    KW_RETURN       reduce using rule 150 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)


state 356

    (155) return -> main_rule KW_RETURN . expression_var SEMI
    (151) expression_var -> . expression
    (152) expression_var -> . data
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . number
    (21) expression -> . division
    (22) expression -> . variable
    (66) data -> . CADENA
    (67) data -> . INTEGER
    (68) data -> . CHAR
    (69) data -> . FLOAT
    (70) data -> . KW_FALSE
    (71) data -> . KW_TRUE
    (72) data -> . tuple
    (23) number -> . INTEGER
    (24) number -> . FLOAT
    (64) division -> . INTEGER DIVIDE INTEGER
    (65) division -> . FLOAT DIVIDE FLOAT
    (25) variable -> . VARIABLE
    (100) tuple -> . LPAREN mdata RPAREN

    LPAREN          shift and go to state 225
    CADENA          shift and go to state 74
    INTEGER         shift and go to state 181
    CHAR            shift and go to state 76
    FLOAT           shift and go to state 182
    KW_FALSE        shift and go to state 78
    KW_TRUE         shift and go to state 79
    VARIABLE        shift and go to state 104

    expression_var                 shift and go to state 367
    expression                     shift and go to state 183
    data                           shift and go to state 358
    number                         shift and go to state 155
    division                       shift and go to state 110
    variable                       shift and go to state 111
    tuple                          shift and go to state 80

state 357

    (154) return -> KW_RETURN expression_var . SEMI

    SEMI            shift and go to state 368


state 358

    (152) expression_var -> data .

    SEMI            reduce using rule 152 (expression_var -> data .)


state 359

    (157) input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA . RPAREN SEMI

    RPAREN          shift and go to state 369


state 360

    (94) array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI . data RBRACKET SEMI
    (66) data -> . CADENA
    (67) data -> . INTEGER
    (68) data -> . CHAR
    (69) data -> . FLOAT
    (70) data -> . KW_FALSE
    (71) data -> . KW_TRUE
    (72) data -> . tuple
    (100) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 74
    INTEGER         shift and go to state 75
    CHAR            shift and go to state 76
    FLOAT           shift and go to state 77
    KW_FALSE        shift and go to state 78
    KW_TRUE         shift and go to state 79
    LPAREN          shift and go to state 81

    data                           shift and go to state 370
    tuple                          shift and go to state 80

state 361

    (93) array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET . SEMI

    SEMI            shift and go to state 371


state 362

    (139) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW . LPAREN RPAREN

    LPAREN          shift and go to state 372


state 363

    (95) array -> KW_LET KW_MUT VARIABLE COLON . LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (96) array -> KW_LET KW_MUT VARIABLE COLON . LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI

    LBRACKET        shift and go to state 228


state 364

    (96) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data . SEMI data RBRACKET SEMI
    (85) mdata -> data .
    (86) mdata -> data . COMMA mdata

    SEMI            shift and go to state 373
    RBRACKET        reduce using rule 85 (mdata -> data .)
    COMMA           shift and go to state 118


state 365

    (95) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata . RBRACKET SEMI

    RBRACKET        shift and go to state 374


state 366

    (140) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON . KW_NEW LPAREN RPAREN

    KW_NEW          shift and go to state 375


state 367

    (155) return -> main_rule KW_RETURN expression_var . SEMI

    SEMI            shift and go to state 376


state 368

    (154) return -> KW_RETURN expression_var SEMI .

    RBRACE          reduce using rule 154 (return -> KW_RETURN expression_var SEMI .)


state 369

    (157) input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN . SEMI

    SEMI            shift and go to state 377


state 370

    (94) array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data . RBRACKET SEMI

    RBRACKET        shift and go to state 378


state 371

    (93) array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .

    KW_PRINT        reduce using rule 93 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_LET          reduce using rule 93 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_FN           reduce using rule 93 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    LBRACKET        reduce using rule 93 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    VARIABLE        reduce using rule 93 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_FOR          reduce using rule 93 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_IF           reduce using rule 93 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_ELSE         reduce using rule 93 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_WHILE        reduce using rule 93 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_CONST        reduce using rule 93 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    FLOAT_32        reduce using rule 93 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    FLOAT_64        reduce using rule 93 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    SIG_INT_8       reduce using rule 93 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    SIG_INT_16      reduce using rule 93 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    SIG_INT_32      reduce using rule 93 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    SIG_INT_64      reduce using rule 93 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    SIG_INT_128     reduce using rule 93 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    UNSIG_INT_8     reduce using rule 93 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    UNSIG_INT_16    reduce using rule 93 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    UNSIG_INT_32    reduce using rule 93 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    UNSIG_INT_64    reduce using rule 93 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    UNSIG_INT_128   reduce using rule 93 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    QUOTE           reduce using rule 93 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    $end            reduce using rule 93 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    SEMI            reduce using rule 93 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    RBRACE          reduce using rule 93 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_RETURN       reduce using rule 93 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    RPAREN          reduce using rule 93 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)


state 372

    (139) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN . RPAREN

    RPAREN          shift and go to state 379


state 373

    (96) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI . data RBRACKET SEMI
    (66) data -> . CADENA
    (67) data -> . INTEGER
    (68) data -> . CHAR
    (69) data -> . FLOAT
    (70) data -> . KW_FALSE
    (71) data -> . KW_TRUE
    (72) data -> . tuple
    (100) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 74
    INTEGER         shift and go to state 75
    CHAR            shift and go to state 76
    FLOAT           shift and go to state 77
    KW_FALSE        shift and go to state 78
    KW_TRUE         shift and go to state 79
    LPAREN          shift and go to state 81

    data                           shift and go to state 380
    tuple                          shift and go to state 80

state 374

    (95) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET . SEMI

    SEMI            shift and go to state 381


state 375

    (140) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW . LPAREN RPAREN

    LPAREN          shift and go to state 382


state 376

    (155) return -> main_rule KW_RETURN expression_var SEMI .

    RBRACE          reduce using rule 155 (return -> main_rule KW_RETURN expression_var SEMI .)


state 377

    (157) input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .

    KW_PRINT        reduce using rule 157 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    KW_LET          reduce using rule 157 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    KW_FN           reduce using rule 157 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    LBRACKET        reduce using rule 157 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    VARIABLE        reduce using rule 157 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    KW_FOR          reduce using rule 157 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    KW_IF           reduce using rule 157 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    KW_ELSE         reduce using rule 157 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    KW_WHILE        reduce using rule 157 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    KW_CONST        reduce using rule 157 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    FLOAT_32        reduce using rule 157 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    FLOAT_64        reduce using rule 157 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    SIG_INT_8       reduce using rule 157 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    SIG_INT_16      reduce using rule 157 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    SIG_INT_32      reduce using rule 157 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    SIG_INT_64      reduce using rule 157 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    SIG_INT_128     reduce using rule 157 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    UNSIG_INT_8     reduce using rule 157 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    UNSIG_INT_16    reduce using rule 157 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    UNSIG_INT_32    reduce using rule 157 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    UNSIG_INT_64    reduce using rule 157 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    UNSIG_INT_128   reduce using rule 157 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    QUOTE           reduce using rule 157 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    $end            reduce using rule 157 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    RBRACE          reduce using rule 157 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    KW_RETURN       reduce using rule 157 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)


state 378

    (94) array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET . SEMI

    SEMI            shift and go to state 383


state 379

    (139) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .

    SEMI            reduce using rule 139 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)


state 380

    (96) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data . RBRACKET SEMI

    RBRACKET        shift and go to state 384


state 381

    (95) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .

    KW_PRINT        reduce using rule 95 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_LET          reduce using rule 95 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_FN           reduce using rule 95 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    LBRACKET        reduce using rule 95 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    VARIABLE        reduce using rule 95 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_FOR          reduce using rule 95 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_IF           reduce using rule 95 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_ELSE         reduce using rule 95 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_WHILE        reduce using rule 95 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_CONST        reduce using rule 95 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    FLOAT_32        reduce using rule 95 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    FLOAT_64        reduce using rule 95 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    SIG_INT_8       reduce using rule 95 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    SIG_INT_16      reduce using rule 95 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    SIG_INT_32      reduce using rule 95 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    SIG_INT_64      reduce using rule 95 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    SIG_INT_128     reduce using rule 95 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    UNSIG_INT_8     reduce using rule 95 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    UNSIG_INT_16    reduce using rule 95 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    UNSIG_INT_32    reduce using rule 95 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    UNSIG_INT_64    reduce using rule 95 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    UNSIG_INT_128   reduce using rule 95 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    QUOTE           reduce using rule 95 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    $end            reduce using rule 95 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    SEMI            reduce using rule 95 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    RBRACE          reduce using rule 95 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_RETURN       reduce using rule 95 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    RPAREN          reduce using rule 95 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)


state 382

    (140) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN . RPAREN

    RPAREN          shift and go to state 385


state 383

    (94) array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .

    KW_PRINT        reduce using rule 94 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    KW_LET          reduce using rule 94 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    KW_FN           reduce using rule 94 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    LBRACKET        reduce using rule 94 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    VARIABLE        reduce using rule 94 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    KW_FOR          reduce using rule 94 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    KW_IF           reduce using rule 94 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    KW_ELSE         reduce using rule 94 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    KW_WHILE        reduce using rule 94 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    KW_CONST        reduce using rule 94 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    FLOAT_32        reduce using rule 94 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    FLOAT_64        reduce using rule 94 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    SIG_INT_8       reduce using rule 94 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    SIG_INT_16      reduce using rule 94 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    SIG_INT_32      reduce using rule 94 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    SIG_INT_64      reduce using rule 94 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    SIG_INT_128     reduce using rule 94 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    UNSIG_INT_8     reduce using rule 94 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    UNSIG_INT_16    reduce using rule 94 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    UNSIG_INT_32    reduce using rule 94 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    UNSIG_INT_64    reduce using rule 94 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    UNSIG_INT_128   reduce using rule 94 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    QUOTE           reduce using rule 94 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    $end            reduce using rule 94 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    SEMI            reduce using rule 94 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    RBRACE          reduce using rule 94 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    KW_RETURN       reduce using rule 94 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    RPAREN          reduce using rule 94 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)


state 384

    (96) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET . SEMI

    SEMI            shift and go to state 386


state 385

    (140) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .

    SEMI            reduce using rule 140 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)


state 386

    (96) array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .

    KW_PRINT        reduce using rule 96 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    KW_LET          reduce using rule 96 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    KW_FN           reduce using rule 96 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    LBRACKET        reduce using rule 96 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    VARIABLE        reduce using rule 96 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    KW_FOR          reduce using rule 96 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    KW_IF           reduce using rule 96 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    KW_ELSE         reduce using rule 96 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    KW_WHILE        reduce using rule 96 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    KW_CONST        reduce using rule 96 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    FLOAT_32        reduce using rule 96 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    FLOAT_64        reduce using rule 96 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    SIG_INT_8       reduce using rule 96 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    SIG_INT_16      reduce using rule 96 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    SIG_INT_32      reduce using rule 96 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    SIG_INT_64      reduce using rule 96 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    SIG_INT_128     reduce using rule 96 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    UNSIG_INT_8     reduce using rule 96 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    UNSIG_INT_16    reduce using rule 96 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    UNSIG_INT_32    reduce using rule 96 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    UNSIG_INT_64    reduce using rule 96 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    UNSIG_INT_128   reduce using rule 96 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    QUOTE           reduce using rule 96 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    $end            reduce using rule 96 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    SEMI            reduce using rule 96 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    RBRACE          reduce using rule 96 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    KW_RETURN       reduce using rule 96 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    RPAREN          reduce using rule 96 (array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for KW_PRINT in state 0 resolved as shift
WARNING: shift/reduce conflict for KW_LET in state 0 resolved as shift
WARNING: shift/reduce conflict for KW_FN in state 0 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 0 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 0 resolved as shift
WARNING: shift/reduce conflict for KW_FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for KW_IF in state 0 resolved as shift
WARNING: shift/reduce conflict for KW_ELSE in state 0 resolved as shift
WARNING: shift/reduce conflict for KW_WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for KW_CONST in state 0 resolved as shift
WARNING: shift/reduce conflict for FLOAT_32 in state 0 resolved as shift
WARNING: shift/reduce conflict for FLOAT_64 in state 0 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_8 in state 0 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_16 in state 0 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_32 in state 0 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_64 in state 0 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_128 in state 0 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_8 in state 0 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_16 in state 0 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_32 in state 0 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_64 in state 0 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_128 in state 0 resolved as shift
WARNING: shift/reduce conflict for QUOTE in state 0 resolved as shift
WARNING: shift/reduce conflict for KW_PRINT in state 2 resolved as shift
WARNING: shift/reduce conflict for KW_LET in state 2 resolved as shift
WARNING: shift/reduce conflict for KW_FN in state 2 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 2 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 2 resolved as shift
WARNING: shift/reduce conflict for KW_FOR in state 2 resolved as shift
WARNING: shift/reduce conflict for KW_IF in state 2 resolved as shift
WARNING: shift/reduce conflict for KW_ELSE in state 2 resolved as shift
WARNING: shift/reduce conflict for KW_WHILE in state 2 resolved as shift
WARNING: shift/reduce conflict for KW_CONST in state 2 resolved as shift
WARNING: shift/reduce conflict for FLOAT_32 in state 2 resolved as shift
WARNING: shift/reduce conflict for FLOAT_64 in state 2 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_8 in state 2 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_16 in state 2 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_32 in state 2 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_64 in state 2 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_128 in state 2 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_8 in state 2 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_16 in state 2 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_32 in state 2 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_64 in state 2 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_128 in state 2 resolved as shift
WARNING: shift/reduce conflict for QUOTE in state 2 resolved as shift
WARNING: shift/reduce conflict for KW_PRINT in state 94 resolved as shift
WARNING: shift/reduce conflict for KW_LET in state 94 resolved as shift
WARNING: shift/reduce conflict for KW_FN in state 94 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 94 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 94 resolved as shift
WARNING: shift/reduce conflict for KW_FOR in state 94 resolved as shift
WARNING: shift/reduce conflict for KW_IF in state 94 resolved as shift
WARNING: shift/reduce conflict for KW_ELSE in state 94 resolved as shift
WARNING: shift/reduce conflict for KW_WHILE in state 94 resolved as shift
WARNING: shift/reduce conflict for KW_CONST in state 94 resolved as shift
WARNING: shift/reduce conflict for FLOAT_32 in state 94 resolved as shift
WARNING: shift/reduce conflict for FLOAT_64 in state 94 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_8 in state 94 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_16 in state 94 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_32 in state 94 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_64 in state 94 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_128 in state 94 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_8 in state 94 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_16 in state 94 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_32 in state 94 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_64 in state 94 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_128 in state 94 resolved as shift
WARNING: shift/reduce conflict for QUOTE in state 94 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 105 resolved as shift
WARNING: shift/reduce conflict for KW_PRINT in state 128 resolved as shift
WARNING: shift/reduce conflict for KW_LET in state 128 resolved as shift
WARNING: shift/reduce conflict for KW_FN in state 128 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 128 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 128 resolved as shift
WARNING: shift/reduce conflict for KW_FOR in state 128 resolved as shift
WARNING: shift/reduce conflict for KW_IF in state 128 resolved as shift
WARNING: shift/reduce conflict for KW_ELSE in state 128 resolved as shift
WARNING: shift/reduce conflict for KW_WHILE in state 128 resolved as shift
WARNING: shift/reduce conflict for KW_CONST in state 128 resolved as shift
WARNING: shift/reduce conflict for FLOAT_32 in state 128 resolved as shift
WARNING: shift/reduce conflict for FLOAT_64 in state 128 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_8 in state 128 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_16 in state 128 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_32 in state 128 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_64 in state 128 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_128 in state 128 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_8 in state 128 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_16 in state 128 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_32 in state 128 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_64 in state 128 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_128 in state 128 resolved as shift
WARNING: shift/reduce conflict for QUOTE in state 128 resolved as shift
WARNING: shift/reduce conflict for KW_PRINT in state 140 resolved as shift
WARNING: shift/reduce conflict for KW_LET in state 140 resolved as shift
WARNING: shift/reduce conflict for KW_FN in state 140 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 140 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 140 resolved as shift
WARNING: shift/reduce conflict for KW_FOR in state 140 resolved as shift
WARNING: shift/reduce conflict for KW_IF in state 140 resolved as shift
WARNING: shift/reduce conflict for KW_ELSE in state 140 resolved as shift
WARNING: shift/reduce conflict for KW_WHILE in state 140 resolved as shift
WARNING: shift/reduce conflict for KW_CONST in state 140 resolved as shift
WARNING: shift/reduce conflict for FLOAT_32 in state 140 resolved as shift
WARNING: shift/reduce conflict for FLOAT_64 in state 140 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_8 in state 140 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_16 in state 140 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_32 in state 140 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_64 in state 140 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_128 in state 140 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_8 in state 140 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_16 in state 140 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_32 in state 140 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_64 in state 140 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_128 in state 140 resolved as shift
WARNING: shift/reduce conflict for QUOTE in state 140 resolved as shift
WARNING: shift/reduce conflict for KW_PRINT in state 203 resolved as shift
WARNING: shift/reduce conflict for KW_LET in state 203 resolved as shift
WARNING: shift/reduce conflict for KW_FN in state 203 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 203 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 203 resolved as shift
WARNING: shift/reduce conflict for KW_FOR in state 203 resolved as shift
WARNING: shift/reduce conflict for KW_IF in state 203 resolved as shift
WARNING: shift/reduce conflict for KW_ELSE in state 203 resolved as shift
WARNING: shift/reduce conflict for KW_WHILE in state 203 resolved as shift
WARNING: shift/reduce conflict for KW_CONST in state 203 resolved as shift
WARNING: shift/reduce conflict for FLOAT_32 in state 203 resolved as shift
WARNING: shift/reduce conflict for FLOAT_64 in state 203 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_8 in state 203 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_16 in state 203 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_32 in state 203 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_64 in state 203 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_128 in state 203 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_8 in state 203 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_16 in state 203 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_32 in state 203 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_64 in state 203 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_128 in state 203 resolved as shift
WARNING: shift/reduce conflict for QUOTE in state 203 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 213 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 213 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 213 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 214 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 214 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 214 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 215 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 215 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 215 resolved as shift
WARNING: shift/reduce conflict for KW_PRINT in state 238 resolved as shift
WARNING: shift/reduce conflict for KW_LET in state 238 resolved as shift
WARNING: shift/reduce conflict for KW_FN in state 238 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 238 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 238 resolved as shift
WARNING: shift/reduce conflict for KW_FOR in state 238 resolved as shift
WARNING: shift/reduce conflict for KW_IF in state 238 resolved as shift
WARNING: shift/reduce conflict for KW_ELSE in state 238 resolved as shift
WARNING: shift/reduce conflict for KW_WHILE in state 238 resolved as shift
WARNING: shift/reduce conflict for KW_CONST in state 238 resolved as shift
WARNING: shift/reduce conflict for FLOAT_32 in state 238 resolved as shift
WARNING: shift/reduce conflict for FLOAT_64 in state 238 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_8 in state 238 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_16 in state 238 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_32 in state 238 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_64 in state 238 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_128 in state 238 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_8 in state 238 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_16 in state 238 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_32 in state 238 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_64 in state 238 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_128 in state 238 resolved as shift
WARNING: shift/reduce conflict for QUOTE in state 238 resolved as shift
WARNING: shift/reduce conflict for KW_PRINT in state 240 resolved as shift
WARNING: shift/reduce conflict for KW_LET in state 240 resolved as shift
WARNING: shift/reduce conflict for KW_FN in state 240 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 240 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 240 resolved as shift
WARNING: shift/reduce conflict for KW_FOR in state 240 resolved as shift
WARNING: shift/reduce conflict for KW_IF in state 240 resolved as shift
WARNING: shift/reduce conflict for KW_ELSE in state 240 resolved as shift
WARNING: shift/reduce conflict for KW_WHILE in state 240 resolved as shift
WARNING: shift/reduce conflict for KW_CONST in state 240 resolved as shift
WARNING: shift/reduce conflict for FLOAT_32 in state 240 resolved as shift
WARNING: shift/reduce conflict for FLOAT_64 in state 240 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_8 in state 240 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_16 in state 240 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_32 in state 240 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_64 in state 240 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_128 in state 240 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_8 in state 240 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_16 in state 240 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_32 in state 240 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_64 in state 240 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_128 in state 240 resolved as shift
WARNING: shift/reduce conflict for QUOTE in state 240 resolved as shift
WARNING: shift/reduce conflict for KW_PRINT in state 271 resolved as shift
WARNING: shift/reduce conflict for KW_LET in state 271 resolved as shift
WARNING: shift/reduce conflict for KW_FN in state 271 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 271 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 271 resolved as shift
WARNING: shift/reduce conflict for KW_FOR in state 271 resolved as shift
WARNING: shift/reduce conflict for KW_IF in state 271 resolved as shift
WARNING: shift/reduce conflict for KW_ELSE in state 271 resolved as shift
WARNING: shift/reduce conflict for KW_WHILE in state 271 resolved as shift
WARNING: shift/reduce conflict for KW_CONST in state 271 resolved as shift
WARNING: shift/reduce conflict for FLOAT_32 in state 271 resolved as shift
WARNING: shift/reduce conflict for FLOAT_64 in state 271 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_8 in state 271 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_16 in state 271 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_32 in state 271 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_64 in state 271 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_128 in state 271 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_8 in state 271 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_16 in state 271 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_32 in state 271 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_64 in state 271 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_128 in state 271 resolved as shift
WARNING: shift/reduce conflict for QUOTE in state 271 resolved as shift
WARNING: shift/reduce conflict for KW_PRINT in state 331 resolved as shift
WARNING: shift/reduce conflict for KW_LET in state 331 resolved as shift
WARNING: shift/reduce conflict for KW_FN in state 331 resolved as shift
WARNING: shift/reduce conflict for KW_RETURN in state 331 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 331 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 331 resolved as shift
WARNING: shift/reduce conflict for KW_FOR in state 331 resolved as shift
WARNING: shift/reduce conflict for KW_IF in state 331 resolved as shift
WARNING: shift/reduce conflict for KW_ELSE in state 331 resolved as shift
WARNING: shift/reduce conflict for KW_WHILE in state 331 resolved as shift
WARNING: shift/reduce conflict for KW_CONST in state 331 resolved as shift
WARNING: shift/reduce conflict for FLOAT_32 in state 331 resolved as shift
WARNING: shift/reduce conflict for FLOAT_64 in state 331 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_8 in state 331 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_16 in state 331 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_32 in state 331 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_64 in state 331 resolved as shift
WARNING: shift/reduce conflict for SIG_INT_128 in state 331 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_8 in state 331 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_16 in state 331 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_32 in state 331 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_64 in state 331 resolved as shift
WARNING: shift/reduce conflict for UNSIG_INT_128 in state 331 resolved as shift
WARNING: shift/reduce conflict for QUOTE in state 331 resolved as shift
WARNING: reduce/reduce conflict in state 2 resolved using rule (main_rule -> father_rule)
WARNING: rejected rule (void -> <empty>) in state 2
WARNING: reduce/reduce conflict in state 105 resolved using rule (expression -> number)
WARNING: rejected rule (assignation -> VARIABLE assign_operators number) in state 105
WARNING: reduce/reduce conflict in state 175 resolved using rule (let_initialization -> KW_LET VARIABLE EQUALS data)
WARNING: rejected rule (expression_var -> data) in state 175
WARNING: reduce/reduce conflict in state 181 resolved using rule (number -> INTEGER)
WARNING: rejected rule (data -> INTEGER) in state 181
WARNING: reduce/reduce conflict in state 182 resolved using rule (number -> FLOAT)
WARNING: rejected rule (data -> FLOAT) in state 182
WARNING: reduce/reduce conflict in state 219 resolved using rule (dvariable -> KW_LET VARIABLE COLON data_type SEMI)
WARNING: rejected rule (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI) in state 219
WARNING: reduce/reduce conflict in state 231 resolved using rule (let_initialization -> KW_LET KW_MUT VARIABLE EQUALS data)
WARNING: rejected rule (expression_var -> data) in state 231
WARNING: reduce/reduce conflict in state 255 resolved using rule (let_initialization -> KW_LET VARIABLE COLON data_type EQUALS data)
WARNING: rejected rule (expression_var -> data) in state 255
WARNING: reduce/reduce conflict in state 261 resolved using rule (number -> INTEGER)
WARNING: rejected rule (data -> INTEGER) in state 261
WARNING: reduce/reduce conflict in state 262 resolved using rule (number -> FLOAT)
WARNING: rejected rule (data -> FLOAT) in state 262
WARNING: reduce/reduce conflict in state 293 resolved using rule (let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS data)
WARNING: rejected rule (expression_var -> data) in state 293
WARNING: Rule (assignation -> VARIABLE assign_operators number) is never reduced
WARNING: Rule (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI) is never reduced
