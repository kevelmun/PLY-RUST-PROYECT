Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ANDE
    COMMENT
    HASH
    KW_ABSTRACT
    KW_AS
    KW_ASYNC
    KW_AWAIT
    KW_BECOME
    KW_BOX
    KW_BREAK
    KW_CHARACTER
    KW_CONTINUE
    KW_CRATE
    KW_DO
    KW_DYN
    KW_ENUM
    KW_EXTERN
    KW_FINAL
    KW_IMPL
    KW_LOOP
    KW_MACRO
    KW_MATCH
    KW_MOD
    KW_MOVE
    KW_OVERRIDE
    KW_PRIV
    KW_PUB
    KW_REF
    KW_SELFTYPE
    KW_SELFVALUE
    KW_STATIC
    KW_STATICLIFETIME
    KW_STRUCT
    KW_SUPER
    KW_TRAIT
    KW_TRY
    KW_TYPE
    KW_TYPEOF
    KW_UNION
    KW_UNSAFE
    KW_UNSIZED
    KW_USE
    KW_VIRTUAL
    KW_WHERE
    KW_YIELD
    MODULUS
    ORE
    OREXE
    QMARK

Grammar

Rule 0     S' -> main_rule
Rule 1     main_rule -> father_rule
Rule 2     main_rule -> father_rule main_rule
Rule 3     father_rule -> print
Rule 4     father_rule -> dvariable
Rule 5     father_rule -> function
Rule 6     father_rule -> variables
Rule 7     father_rule -> control_str
Rule 8     father_rule -> expression
Rule 9     father_rule -> void
Rule 10    father_rule -> data_str
Rule 11    father_rule -> array
Rule 12    father_rule -> linkedlist_methods
Rule 13    father_rule -> hashmap_methods
Rule 14    father_rule -> initialization
Rule 15    father_rule -> input
Rule 16    father_rule -> assignation
Rule 17    father_rule -> declare_data_type
Rule 18    expression -> expression PLUS expression
Rule 19    expression -> expression MINUS expression
Rule 20    expression -> expression TIMES expression
Rule 21    expression -> expression DIVIDE expression
Rule 22    expression -> LPAREN expression RPAREN
Rule 23    expression -> number
Rule 24    number -> INTEGER
Rule 25    number -> FLOAT
Rule 26    number -> VARIABLE
Rule 27    data_type -> UNSIG_INT_8
Rule 28    data_type -> UNSIG_INT_16
Rule 29    data_type -> UNSIG_INT_32
Rule 30    data_type -> UNSIG_INT_64
Rule 31    data_type -> UNSIG_INT_128
Rule 32    data_type -> SIG_INT_8
Rule 33    data_type -> SIG_INT_16
Rule 34    data_type -> SIG_INT_32
Rule 35    data_type -> SIG_INT_64
Rule 36    data_type -> SIG_INT_128
Rule 37    data_type -> FLOAT_32
Rule 38    data_type -> FLOAT_64
Rule 39    data_type -> KW_BOOLEAN
Rule 40    data_type -> KW_STRING
Rule 41    assign_operators -> EQUALS
Rule 42    assign_operators -> TIMESEQUAL
Rule 43    assign_operators -> DIVEQUAL
Rule 44    assign_operators -> MODULUSEQUAL
Rule 45    assign_operators -> PLUSEQUAL
Rule 46    assign_operators -> MINUSEQUAL
Rule 47    data -> CADENA
Rule 48    data -> INTEGER
Rule 49    data -> CHAR
Rule 50    data -> FLOAT
Rule 51    data -> KW_FALSE
Rule 52    data -> KW_TRUE
Rule 53    data -> tuple
Rule 54    comparator -> <empty>
Rule 55    comparator -> EQ
Rule 56    comparator -> NE
Rule 57    comparator -> GE
Rule 58    comparator -> LE
Rule 59    comparator -> GT
Rule 60    comparator -> LT
Rule 61    logic -> LOR
Rule 62    logic -> LAND
Rule 63    lvariable -> VARIABLE logic VARIABLE
Rule 64    conditional -> VARIABLE comparator data
Rule 65    conditional -> LPAREN lvariable RPAREN comparator data
Rule 66    mdata -> data
Rule 67    mdata -> data COMMA mdata
Rule 68    print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI
Rule 69    print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI
Rule 70    print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE COLON COLON LT data_type GT LPAREN RPAREN RPAREN SEMI
Rule 71    dvariable -> KW_LET VARIABLE SEMI
Rule 72    array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
Rule 73    array -> LBRACKET mdata RBRACKET
Rule 74    array -> LBRACKET data SEMI data RBRACKET
Rule 75    array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
Rule 76    array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
Rule 77    variables -> VARIABLE
Rule 78    variables -> VARIABLE COMMA variables
Rule 79    while -> KW_WHILE VARIABLE comparator data LBRACE main_rule RBRACE
Rule 80    tuple -> LPAREN mdata RPAREN
Rule 81    initialization -> let_initialization SEMI
Rule 82    initialization -> const_initialization SEMI
Rule 83    initialization -> data_str SEMI
Rule 84    initialization -> input_init SEMI
Rule 85    let_initialization -> KW_LET VARIABLE EQUALS data
Rule 86    let_initialization -> KW_LET VARIABLE COLON data_type EQUALS data
Rule 87    let_initialization -> KW_LET KW_MUT VARIABLE EQUALS data
Rule 88    let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS data
Rule 89    let_initialization -> KW_LET VARIABLE EQUALS expression_var
Rule 90    let_initialization -> KW_LET VARIABLE COLON data_type EQUALS expression_var
Rule 91    let_initialization -> KW_LET KW_MUT VARIABLE EQUALS expression_var
Rule 92    let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var
Rule 93    const_initialization -> KW_CONST VARIABLE COLON data_type EQUALS data
Rule 94    arguments -> void
Rule 95    arguments -> variables
Rule 96    function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE
Rule 97    control_str -> for_str
Rule 98    control_str -> for_str_tagged
Rule 99    control_str -> if
Rule 100   control_str -> else
Rule 101   control_str -> else_if
Rule 102   control_str -> while
Rule 103   for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE
Rule 104   for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE
Rule 105   for_str_tagged -> label COLON for_str
Rule 106   range -> INTEGER DOT DOT INTEGER
Rule 107   range -> VARIABLE DOT DOT VARIABLE
Rule 108   label -> QUOTE VARIABLE
Rule 109   data_str -> array
Rule 110   data_str -> hashmap
Rule 111   data_str -> linkedlist
Rule 112   hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
Rule 113   hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
Rule 114   hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
Rule 115   hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
Rule 116   hashmap_methods -> VARIABLE hashmap_insert
Rule 117   hashmap_methods -> VARIABLE hashmap_remove
Rule 118   hashmap_insert -> DOT KW_INSERT LPAREN mdata RPAREN SEMI
Rule 119   hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI
Rule 120   void -> <empty>
Rule 121   linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
Rule 122   linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
Rule 123   linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
Rule 124   linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
Rule 125   linkedlist_methods -> VARIABLE linkedlist_push
Rule 126   linkedlist_methods -> VARIABLE linkedlist_remove
Rule 127   linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI
Rule 128   linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI
Rule 129   if -> KW_IF conditional LBRACE main_rule RBRACE
Rule 130   else -> KW_ELSE LBRACE main_rule RBRACE
Rule 131   else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE
Rule 132   function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE
Rule 133   expression_var -> expression
Rule 134   expression_var -> data
Rule 135   return -> main_rule
Rule 136   return -> KW_RETURN expression_var SEMI
Rule 137   return -> main_rule KW_RETURN expression_var SEMI
Rule 138   input_init -> KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN
Rule 139   input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI
Rule 140   assignation -> VARIABLE assign_operators number
Rule 141   declare_data_type -> KW_LET VARIABLE COLON data_type SEMI

Terminals, with rules where they appear

AND                  : 119 139
ANDE                 : 
CADENA               : 47 68 69 70 139
CHAR                 : 49
COLON                : 70 70 75 76 86 88 90 92 93 105 112 112 113 113 114 114 115 115 121 121 121 122 122 122 123 123 124 124 138 138 141
COMMA                : 67 69 70 78
COMMENT              : 
DIVEQUAL             : 43
DIVIDE               : 21
DOT                  : 106 106 107 107 118 119 127 128 139 139
EQ                   : 55
EQUALS               : 41 72 75 76 85 86 87 88 89 90 91 92 93 112 113 114 115 121 122 123 124 138
FLOAT                : 25 50
FLOAT_32             : 37
FLOAT_64             : 38
GE                   : 57
GT                   : 59 70 121 122 132
HASH                 : 
INTEGER              : 24 48 106 106 128
KW_ABSTRACT          : 
KW_AS                : 
KW_ASYNC             : 
KW_AWAIT             : 
KW_BECOME            : 
KW_BOOLEAN           : 39
KW_BOX               : 
KW_BREAK             : 
KW_CHARACTER         : 
KW_CONST             : 93
KW_CONTINUE          : 
KW_CRATE             : 
KW_DO                : 
KW_DYN               : 
KW_ELSE              : 130 131
KW_ENUM              : 
KW_EXPECT            : 139
KW_EXTERN            : 
KW_FALSE             : 51
KW_FINAL             : 
KW_FN                : 96 132
KW_FOR               : 103 104
KW_FROM              : 114 115 123 124
KW_HASHMAP           : 112 113 114 115
KW_IF                : 129 131
KW_IMPL              : 
KW_IN                : 103 104
KW_INSERT            : 118
KW_IO                : 138
KW_LET               : 71 72 75 76 85 86 87 88 89 90 91 92 112 113 114 115 121 122 123 124 138 141
KW_LINKEDLIST        : 121 121 122 122 123 124
KW_LOOP              : 
KW_MACRO             : 
KW_MATCH             : 
KW_MOD               : 
KW_MOVE              : 
KW_MUT               : 87 88 91 92 113 115 122 124 139
KW_NEW               : 112 113 121 122
KW_OVERRIDE          : 
KW_PRINT             : 68 69 70
KW_PRIV              : 
KW_PUB               : 
KW_PUSH_BACK         : 127
KW_READ_LINE         : 139
KW_REF               : 
KW_REMOVE            : 119 128
KW_RETURN            : 136 137
KW_SELFTYPE          : 
KW_SELFVALUE         : 
KW_STATIC            : 
KW_STATICLIFETIME    : 
KW_STDIN             : 138
KW_STRING            : 40
KW_STRUCT            : 
KW_SUPER             : 
KW_TRAIT             : 
KW_TRUE              : 52
KW_TRY               : 
KW_TYPE              : 
KW_TYPEOF            : 
KW_UNION             : 
KW_UNSAFE            : 
KW_UNSIZED           : 
KW_USE               : 
KW_VIRTUAL           : 
KW_WHERE             : 
KW_WHILE             : 79
KW_YIELD             : 
LAND                 : 62
LBRACE               : 79 96 103 104 129 130 131 132
LBRACKET             : 72 73 74 75 75 76 76
LE                   : 58
LNOT                 : 68 69 70
LOR                  : 61
LPAREN               : 22 65 68 69 70 70 80 96 112 113 114 115 118 119 121 122 123 124 127 128 132 138 139 139
LT                   : 60 70 121 122
MINUS                : 19 132
MINUSEQUAL           : 46
MODULUS              : 
MODULUSEQUAL         : 44
NE                   : 56
ORE                  : 
OREXE                : 
PLUS                 : 18
PLUSEQUAL            : 45
QMARK                : 
QUOTE                : 108
RBRACE               : 79 96 103 104 129 130 131 132
RBRACKET             : 72 73 74 75 75 76 76
RPAREN               : 22 65 68 69 70 70 80 96 112 113 114 115 118 119 121 122 123 124 127 128 132 138 139 139
SEMI                 : 68 69 70 71 72 74 75 75 76 76 76 81 82 83 84 118 119 127 128 136 137 139 141
SIG_INT_128          : 36
SIG_INT_16           : 33
SIG_INT_32           : 34
SIG_INT_64           : 35
SIG_INT_8            : 32
TIMES                : 20
TIMESEQUAL           : 42
UNSIG_INT_128        : 31
UNSIG_INT_16         : 28
UNSIG_INT_32         : 29
UNSIG_INT_64         : 30
UNSIG_INT_8          : 27
VARIABLE             : 26 63 63 64 69 70 71 72 75 76 77 78 79 85 86 87 88 89 90 91 92 93 96 103 104 104 107 107 108 112 113 114 115 116 117 121 122 123 124 125 126 132 138 139 139 140 141
error                : 

Nonterminals, with rules where they appear

arguments            : 96 132
array                : 11 109 114 115 123 124
assign_operators     : 140
assignation          : 16
comparator           : 64 65 79
conditional          : 129 131
const_initialization : 82
control_str          : 7
data                 : 64 65 66 67 74 74 75 76 76 76 79 85 86 87 88 93 119 127 134
data_str             : 10 83
data_type            : 70 75 76 86 88 90 92 93 121 122 132 141
declare_data_type    : 17
dvariable            : 4
else                 : 100
else_if              : 101
expression           : 8 18 18 19 19 20 20 21 21 22 133
expression_var       : 89 90 91 92 136 137
father_rule          : 1 2
for_str              : 97 105
for_str_tagged       : 98
function             : 5
hashmap              : 110
hashmap_insert       : 116
hashmap_methods      : 13
hashmap_remove       : 117
if                   : 99
initialization       : 14
input                : 15
input_init           : 84
label                : 105
let_initialization   : 81
linkedlist           : 111
linkedlist_methods   : 12
linkedlist_push      : 125
linkedlist_remove    : 126
logic                : 63
lvariable            : 65
main_rule            : 2 79 96 103 104 129 130 131 135 137 0
mdata                : 67 72 73 75 80 118
number               : 23 140
print                : 3
range                : 103
return               : 132
tuple                : 53
variables            : 6 78 95
void                 : 9 94
while                : 102

Parsing method: LALR

state 0

    (0) S' -> . main_rule
    (1) main_rule -> . father_rule
    (2) main_rule -> . father_rule main_rule
    (3) father_rule -> . print
    (4) father_rule -> . dvariable
    (5) father_rule -> . function
    (6) father_rule -> . variables
    (7) father_rule -> . control_str
    (8) father_rule -> . expression
    (9) father_rule -> . void
    (10) father_rule -> . data_str
    (11) father_rule -> . array
    (12) father_rule -> . linkedlist_methods
    (13) father_rule -> . hashmap_methods
    (14) father_rule -> . initialization
    (15) father_rule -> . input
    (16) father_rule -> . assignation
    (17) father_rule -> . declare_data_type
    (68) print -> . KW_PRINT LNOT LPAREN CADENA RPAREN SEMI
    (69) print -> . KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI
    (70) print -> . KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE COLON COLON LT data_type GT LPAREN RPAREN RPAREN SEMI
    (71) dvariable -> . KW_LET VARIABLE SEMI
    (96) function -> . KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE
    (132) function -> . KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE
    (77) variables -> . VARIABLE
    (78) variables -> . VARIABLE COMMA variables
    (97) control_str -> . for_str
    (98) control_str -> . for_str_tagged
    (99) control_str -> . if
    (100) control_str -> . else
    (101) control_str -> . else_if
    (102) control_str -> . while
    (18) expression -> . expression PLUS expression
    (19) expression -> . expression MINUS expression
    (20) expression -> . expression TIMES expression
    (21) expression -> . expression DIVIDE expression
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . number
    (120) void -> .
    (109) data_str -> . array
    (110) data_str -> . hashmap
    (111) data_str -> . linkedlist
    (72) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (73) array -> . LBRACKET mdata RBRACKET
    (74) array -> . LBRACKET data SEMI data RBRACKET
    (75) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (125) linkedlist_methods -> . VARIABLE linkedlist_push
    (126) linkedlist_methods -> . VARIABLE linkedlist_remove
    (116) hashmap_methods -> . VARIABLE hashmap_insert
    (117) hashmap_methods -> . VARIABLE hashmap_remove
    (81) initialization -> . let_initialization SEMI
    (82) initialization -> . const_initialization SEMI
    (83) initialization -> . data_str SEMI
    (84) initialization -> . input_init SEMI
    (139) input -> . VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI
    (140) assignation -> . VARIABLE assign_operators number
    (141) declare_data_type -> . KW_LET VARIABLE COLON data_type SEMI
    (103) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE
    (104) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE
    (105) for_str_tagged -> . label COLON for_str
    (129) if -> . KW_IF conditional LBRACE main_rule RBRACE
    (130) else -> . KW_ELSE LBRACE main_rule RBRACE
    (131) else_if -> . KW_ELSE KW_IF conditional LBRACE main_rule RBRACE
    (79) while -> . KW_WHILE VARIABLE comparator data LBRACE main_rule RBRACE
    (24) number -> . INTEGER
    (25) number -> . FLOAT
    (26) number -> . VARIABLE
    (112) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (113) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (114) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (115) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (121) linkedlist -> . KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (122) linkedlist -> . KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (123) linkedlist -> . KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (124) linkedlist -> . KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (85) let_initialization -> . KW_LET VARIABLE EQUALS data
    (86) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS data
    (87) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS data
    (88) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS data
    (89) let_initialization -> . KW_LET VARIABLE EQUALS expression_var
    (90) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS expression_var
    (91) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS expression_var
    (92) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var
    (93) const_initialization -> . KW_CONST VARIABLE COLON data_type EQUALS data
    (138) input_init -> . KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN
    (108) label -> . QUOTE VARIABLE

  ! shift/reduce conflict for KW_PRINT resolved as shift
  ! shift/reduce conflict for KW_LET resolved as shift
  ! shift/reduce conflict for KW_FN resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for KW_FOR resolved as shift
  ! shift/reduce conflict for KW_IF resolved as shift
  ! shift/reduce conflict for KW_ELSE resolved as shift
  ! shift/reduce conflict for KW_WHILE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for KW_CONST resolved as shift
  ! shift/reduce conflict for QUOTE resolved as shift
    KW_PRINT        shift and go to state 18
    KW_LET          shift and go to state 21
    KW_FN           shift and go to state 22
    VARIABLE        shift and go to state 20
    LPAREN          shift and go to state 19
    $end            reduce using rule 120 (void -> .)
    LBRACKET        shift and go to state 32
    KW_FOR          shift and go to state 36
    KW_IF           shift and go to state 38
    KW_ELSE         shift and go to state 39
    KW_WHILE        shift and go to state 40
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 42
    KW_CONST        shift and go to state 43
    QUOTE           shift and go to state 44

  ! KW_PRINT        [ reduce using rule 120 (void -> .) ]
  ! KW_LET          [ reduce using rule 120 (void -> .) ]
  ! KW_FN           [ reduce using rule 120 (void -> .) ]
  ! VARIABLE        [ reduce using rule 120 (void -> .) ]
  ! LPAREN          [ reduce using rule 120 (void -> .) ]
  ! LBRACKET        [ reduce using rule 120 (void -> .) ]
  ! KW_FOR          [ reduce using rule 120 (void -> .) ]
  ! KW_IF           [ reduce using rule 120 (void -> .) ]
  ! KW_ELSE         [ reduce using rule 120 (void -> .) ]
  ! KW_WHILE        [ reduce using rule 120 (void -> .) ]
  ! INTEGER         [ reduce using rule 120 (void -> .) ]
  ! FLOAT           [ reduce using rule 120 (void -> .) ]
  ! KW_CONST        [ reduce using rule 120 (void -> .) ]
  ! QUOTE           [ reduce using rule 120 (void -> .) ]

    main_rule                      shift and go to state 1
    father_rule                    shift and go to state 2
    print                          shift and go to state 3
    dvariable                      shift and go to state 4
    function                       shift and go to state 5
    variables                      shift and go to state 6
    control_str                    shift and go to state 7
    expression                     shift and go to state 8
    void                           shift and go to state 9
    data_str                       shift and go to state 10
    array                          shift and go to state 11
    linkedlist_methods             shift and go to state 12
    hashmap_methods                shift and go to state 13
    initialization                 shift and go to state 14
    input                          shift and go to state 15
    assignation                    shift and go to state 16
    declare_data_type              shift and go to state 17
    for_str                        shift and go to state 23
    for_str_tagged                 shift and go to state 24
    if                             shift and go to state 25
    else                           shift and go to state 26
    else_if                        shift and go to state 27
    while                          shift and go to state 28
    number                         shift and go to state 29
    hashmap                        shift and go to state 30
    linkedlist                     shift and go to state 31
    let_initialization             shift and go to state 33
    const_initialization           shift and go to state 34
    input_init                     shift and go to state 35
    label                          shift and go to state 37

state 1

    (0) S' -> main_rule .



state 2

    (1) main_rule -> father_rule .
    (2) main_rule -> father_rule . main_rule
    (1) main_rule -> . father_rule
    (2) main_rule -> . father_rule main_rule
    (3) father_rule -> . print
    (4) father_rule -> . dvariable
    (5) father_rule -> . function
    (6) father_rule -> . variables
    (7) father_rule -> . control_str
    (8) father_rule -> . expression
    (9) father_rule -> . void
    (10) father_rule -> . data_str
    (11) father_rule -> . array
    (12) father_rule -> . linkedlist_methods
    (13) father_rule -> . hashmap_methods
    (14) father_rule -> . initialization
    (15) father_rule -> . input
    (16) father_rule -> . assignation
    (17) father_rule -> . declare_data_type
    (68) print -> . KW_PRINT LNOT LPAREN CADENA RPAREN SEMI
    (69) print -> . KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI
    (70) print -> . KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE COLON COLON LT data_type GT LPAREN RPAREN RPAREN SEMI
    (71) dvariable -> . KW_LET VARIABLE SEMI
    (96) function -> . KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE
    (132) function -> . KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE
    (77) variables -> . VARIABLE
    (78) variables -> . VARIABLE COMMA variables
    (97) control_str -> . for_str
    (98) control_str -> . for_str_tagged
    (99) control_str -> . if
    (100) control_str -> . else
    (101) control_str -> . else_if
    (102) control_str -> . while
    (18) expression -> . expression PLUS expression
    (19) expression -> . expression MINUS expression
    (20) expression -> . expression TIMES expression
    (21) expression -> . expression DIVIDE expression
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . number
    (120) void -> .
    (109) data_str -> . array
    (110) data_str -> . hashmap
    (111) data_str -> . linkedlist
    (72) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (73) array -> . LBRACKET mdata RBRACKET
    (74) array -> . LBRACKET data SEMI data RBRACKET
    (75) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (125) linkedlist_methods -> . VARIABLE linkedlist_push
    (126) linkedlist_methods -> . VARIABLE linkedlist_remove
    (116) hashmap_methods -> . VARIABLE hashmap_insert
    (117) hashmap_methods -> . VARIABLE hashmap_remove
    (81) initialization -> . let_initialization SEMI
    (82) initialization -> . const_initialization SEMI
    (83) initialization -> . data_str SEMI
    (84) initialization -> . input_init SEMI
    (139) input -> . VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI
    (140) assignation -> . VARIABLE assign_operators number
    (141) declare_data_type -> . KW_LET VARIABLE COLON data_type SEMI
    (103) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE
    (104) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE
    (105) for_str_tagged -> . label COLON for_str
    (129) if -> . KW_IF conditional LBRACE main_rule RBRACE
    (130) else -> . KW_ELSE LBRACE main_rule RBRACE
    (131) else_if -> . KW_ELSE KW_IF conditional LBRACE main_rule RBRACE
    (79) while -> . KW_WHILE VARIABLE comparator data LBRACE main_rule RBRACE
    (24) number -> . INTEGER
    (25) number -> . FLOAT
    (26) number -> . VARIABLE
    (112) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (113) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (114) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (115) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (121) linkedlist -> . KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (122) linkedlist -> . KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (123) linkedlist -> . KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (124) linkedlist -> . KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (85) let_initialization -> . KW_LET VARIABLE EQUALS data
    (86) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS data
    (87) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS data
    (88) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS data
    (89) let_initialization -> . KW_LET VARIABLE EQUALS expression_var
    (90) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS expression_var
    (91) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS expression_var
    (92) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var
    (93) const_initialization -> . KW_CONST VARIABLE COLON data_type EQUALS data
    (138) input_init -> . KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN
    (108) label -> . QUOTE VARIABLE

  ! shift/reduce conflict for KW_PRINT resolved as shift
  ! shift/reduce conflict for KW_LET resolved as shift
  ! shift/reduce conflict for KW_FN resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 1 (main_rule -> father_rule .)
  ! reduce/reduce conflict for RBRACE resolved using rule 1 (main_rule -> father_rule .)
  ! reduce/reduce conflict for KW_RETURN resolved using rule 1 (main_rule -> father_rule .)
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for KW_FOR resolved as shift
  ! shift/reduce conflict for KW_IF resolved as shift
  ! shift/reduce conflict for KW_ELSE resolved as shift
  ! shift/reduce conflict for KW_WHILE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for KW_CONST resolved as shift
  ! shift/reduce conflict for QUOTE resolved as shift
    $end            reduce using rule 1 (main_rule -> father_rule .)
    RBRACE          reduce using rule 1 (main_rule -> father_rule .)
    KW_RETURN       reduce using rule 1 (main_rule -> father_rule .)
    KW_PRINT        shift and go to state 18
    KW_LET          shift and go to state 21
    KW_FN           shift and go to state 22
    VARIABLE        shift and go to state 20
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 32
    KW_FOR          shift and go to state 36
    KW_IF           shift and go to state 38
    KW_ELSE         shift and go to state 39
    KW_WHILE        shift and go to state 40
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 42
    KW_CONST        shift and go to state 43
    QUOTE           shift and go to state 44

  ! KW_PRINT        [ reduce using rule 120 (void -> .) ]
  ! KW_LET          [ reduce using rule 120 (void -> .) ]
  ! KW_FN           [ reduce using rule 120 (void -> .) ]
  ! VARIABLE        [ reduce using rule 120 (void -> .) ]
  ! LPAREN          [ reduce using rule 120 (void -> .) ]
  ! LBRACKET        [ reduce using rule 120 (void -> .) ]
  ! KW_FOR          [ reduce using rule 120 (void -> .) ]
  ! KW_IF           [ reduce using rule 120 (void -> .) ]
  ! KW_ELSE         [ reduce using rule 120 (void -> .) ]
  ! KW_WHILE        [ reduce using rule 120 (void -> .) ]
  ! INTEGER         [ reduce using rule 120 (void -> .) ]
  ! FLOAT           [ reduce using rule 120 (void -> .) ]
  ! KW_CONST        [ reduce using rule 120 (void -> .) ]
  ! QUOTE           [ reduce using rule 120 (void -> .) ]
  ! $end            [ reduce using rule 120 (void -> .) ]
  ! RBRACE          [ reduce using rule 120 (void -> .) ]
  ! KW_RETURN       [ reduce using rule 120 (void -> .) ]

    father_rule                    shift and go to state 2
    main_rule                      shift and go to state 45
    print                          shift and go to state 3
    dvariable                      shift and go to state 4
    function                       shift and go to state 5
    variables                      shift and go to state 6
    control_str                    shift and go to state 7
    expression                     shift and go to state 8
    void                           shift and go to state 9
    data_str                       shift and go to state 10
    array                          shift and go to state 11
    linkedlist_methods             shift and go to state 12
    hashmap_methods                shift and go to state 13
    initialization                 shift and go to state 14
    input                          shift and go to state 15
    assignation                    shift and go to state 16
    declare_data_type              shift and go to state 17
    for_str                        shift and go to state 23
    for_str_tagged                 shift and go to state 24
    if                             shift and go to state 25
    else                           shift and go to state 26
    else_if                        shift and go to state 27
    while                          shift and go to state 28
    number                         shift and go to state 29
    hashmap                        shift and go to state 30
    linkedlist                     shift and go to state 31
    let_initialization             shift and go to state 33
    const_initialization           shift and go to state 34
    input_init                     shift and go to state 35
    label                          shift and go to state 37

state 3

    (3) father_rule -> print .

    KW_PRINT        reduce using rule 3 (father_rule -> print .)
    KW_LET          reduce using rule 3 (father_rule -> print .)
    KW_FN           reduce using rule 3 (father_rule -> print .)
    VARIABLE        reduce using rule 3 (father_rule -> print .)
    LPAREN          reduce using rule 3 (father_rule -> print .)
    LBRACKET        reduce using rule 3 (father_rule -> print .)
    KW_FOR          reduce using rule 3 (father_rule -> print .)
    KW_IF           reduce using rule 3 (father_rule -> print .)
    KW_ELSE         reduce using rule 3 (father_rule -> print .)
    KW_WHILE        reduce using rule 3 (father_rule -> print .)
    INTEGER         reduce using rule 3 (father_rule -> print .)
    FLOAT           reduce using rule 3 (father_rule -> print .)
    KW_CONST        reduce using rule 3 (father_rule -> print .)
    QUOTE           reduce using rule 3 (father_rule -> print .)
    $end            reduce using rule 3 (father_rule -> print .)
    RBRACE          reduce using rule 3 (father_rule -> print .)
    KW_RETURN       reduce using rule 3 (father_rule -> print .)


state 4

    (4) father_rule -> dvariable .

    KW_PRINT        reduce using rule 4 (father_rule -> dvariable .)
    KW_LET          reduce using rule 4 (father_rule -> dvariable .)
    KW_FN           reduce using rule 4 (father_rule -> dvariable .)
    VARIABLE        reduce using rule 4 (father_rule -> dvariable .)
    LPAREN          reduce using rule 4 (father_rule -> dvariable .)
    LBRACKET        reduce using rule 4 (father_rule -> dvariable .)
    KW_FOR          reduce using rule 4 (father_rule -> dvariable .)
    KW_IF           reduce using rule 4 (father_rule -> dvariable .)
    KW_ELSE         reduce using rule 4 (father_rule -> dvariable .)
    KW_WHILE        reduce using rule 4 (father_rule -> dvariable .)
    INTEGER         reduce using rule 4 (father_rule -> dvariable .)
    FLOAT           reduce using rule 4 (father_rule -> dvariable .)
    KW_CONST        reduce using rule 4 (father_rule -> dvariable .)
    QUOTE           reduce using rule 4 (father_rule -> dvariable .)
    $end            reduce using rule 4 (father_rule -> dvariable .)
    RBRACE          reduce using rule 4 (father_rule -> dvariable .)
    KW_RETURN       reduce using rule 4 (father_rule -> dvariable .)


state 5

    (5) father_rule -> function .

    KW_PRINT        reduce using rule 5 (father_rule -> function .)
    KW_LET          reduce using rule 5 (father_rule -> function .)
    KW_FN           reduce using rule 5 (father_rule -> function .)
    VARIABLE        reduce using rule 5 (father_rule -> function .)
    LPAREN          reduce using rule 5 (father_rule -> function .)
    LBRACKET        reduce using rule 5 (father_rule -> function .)
    KW_FOR          reduce using rule 5 (father_rule -> function .)
    KW_IF           reduce using rule 5 (father_rule -> function .)
    KW_ELSE         reduce using rule 5 (father_rule -> function .)
    KW_WHILE        reduce using rule 5 (father_rule -> function .)
    INTEGER         reduce using rule 5 (father_rule -> function .)
    FLOAT           reduce using rule 5 (father_rule -> function .)
    KW_CONST        reduce using rule 5 (father_rule -> function .)
    QUOTE           reduce using rule 5 (father_rule -> function .)
    $end            reduce using rule 5 (father_rule -> function .)
    RBRACE          reduce using rule 5 (father_rule -> function .)
    KW_RETURN       reduce using rule 5 (father_rule -> function .)


state 6

    (6) father_rule -> variables .

    KW_PRINT        reduce using rule 6 (father_rule -> variables .)
    KW_LET          reduce using rule 6 (father_rule -> variables .)
    KW_FN           reduce using rule 6 (father_rule -> variables .)
    VARIABLE        reduce using rule 6 (father_rule -> variables .)
    LPAREN          reduce using rule 6 (father_rule -> variables .)
    LBRACKET        reduce using rule 6 (father_rule -> variables .)
    KW_FOR          reduce using rule 6 (father_rule -> variables .)
    KW_IF           reduce using rule 6 (father_rule -> variables .)
    KW_ELSE         reduce using rule 6 (father_rule -> variables .)
    KW_WHILE        reduce using rule 6 (father_rule -> variables .)
    INTEGER         reduce using rule 6 (father_rule -> variables .)
    FLOAT           reduce using rule 6 (father_rule -> variables .)
    KW_CONST        reduce using rule 6 (father_rule -> variables .)
    QUOTE           reduce using rule 6 (father_rule -> variables .)
    $end            reduce using rule 6 (father_rule -> variables .)
    RBRACE          reduce using rule 6 (father_rule -> variables .)
    KW_RETURN       reduce using rule 6 (father_rule -> variables .)


state 7

    (7) father_rule -> control_str .

    KW_PRINT        reduce using rule 7 (father_rule -> control_str .)
    KW_LET          reduce using rule 7 (father_rule -> control_str .)
    KW_FN           reduce using rule 7 (father_rule -> control_str .)
    VARIABLE        reduce using rule 7 (father_rule -> control_str .)
    LPAREN          reduce using rule 7 (father_rule -> control_str .)
    LBRACKET        reduce using rule 7 (father_rule -> control_str .)
    KW_FOR          reduce using rule 7 (father_rule -> control_str .)
    KW_IF           reduce using rule 7 (father_rule -> control_str .)
    KW_ELSE         reduce using rule 7 (father_rule -> control_str .)
    KW_WHILE        reduce using rule 7 (father_rule -> control_str .)
    INTEGER         reduce using rule 7 (father_rule -> control_str .)
    FLOAT           reduce using rule 7 (father_rule -> control_str .)
    KW_CONST        reduce using rule 7 (father_rule -> control_str .)
    QUOTE           reduce using rule 7 (father_rule -> control_str .)
    $end            reduce using rule 7 (father_rule -> control_str .)
    RBRACE          reduce using rule 7 (father_rule -> control_str .)
    KW_RETURN       reduce using rule 7 (father_rule -> control_str .)


state 8

    (8) father_rule -> expression .
    (18) expression -> expression . PLUS expression
    (19) expression -> expression . MINUS expression
    (20) expression -> expression . TIMES expression
    (21) expression -> expression . DIVIDE expression

    KW_PRINT        reduce using rule 8 (father_rule -> expression .)
    KW_LET          reduce using rule 8 (father_rule -> expression .)
    KW_FN           reduce using rule 8 (father_rule -> expression .)
    VARIABLE        reduce using rule 8 (father_rule -> expression .)
    LPAREN          reduce using rule 8 (father_rule -> expression .)
    LBRACKET        reduce using rule 8 (father_rule -> expression .)
    KW_FOR          reduce using rule 8 (father_rule -> expression .)
    KW_IF           reduce using rule 8 (father_rule -> expression .)
    KW_ELSE         reduce using rule 8 (father_rule -> expression .)
    KW_WHILE        reduce using rule 8 (father_rule -> expression .)
    INTEGER         reduce using rule 8 (father_rule -> expression .)
    FLOAT           reduce using rule 8 (father_rule -> expression .)
    KW_CONST        reduce using rule 8 (father_rule -> expression .)
    QUOTE           reduce using rule 8 (father_rule -> expression .)
    $end            reduce using rule 8 (father_rule -> expression .)
    RBRACE          reduce using rule 8 (father_rule -> expression .)
    KW_RETURN       reduce using rule 8 (father_rule -> expression .)
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49


state 9

    (9) father_rule -> void .

    KW_PRINT        reduce using rule 9 (father_rule -> void .)
    KW_LET          reduce using rule 9 (father_rule -> void .)
    KW_FN           reduce using rule 9 (father_rule -> void .)
    VARIABLE        reduce using rule 9 (father_rule -> void .)
    LPAREN          reduce using rule 9 (father_rule -> void .)
    LBRACKET        reduce using rule 9 (father_rule -> void .)
    KW_FOR          reduce using rule 9 (father_rule -> void .)
    KW_IF           reduce using rule 9 (father_rule -> void .)
    KW_ELSE         reduce using rule 9 (father_rule -> void .)
    KW_WHILE        reduce using rule 9 (father_rule -> void .)
    INTEGER         reduce using rule 9 (father_rule -> void .)
    FLOAT           reduce using rule 9 (father_rule -> void .)
    KW_CONST        reduce using rule 9 (father_rule -> void .)
    QUOTE           reduce using rule 9 (father_rule -> void .)
    $end            reduce using rule 9 (father_rule -> void .)
    RBRACE          reduce using rule 9 (father_rule -> void .)
    KW_RETURN       reduce using rule 9 (father_rule -> void .)


state 10

    (10) father_rule -> data_str .
    (83) initialization -> data_str . SEMI

    KW_PRINT        reduce using rule 10 (father_rule -> data_str .)
    KW_LET          reduce using rule 10 (father_rule -> data_str .)
    KW_FN           reduce using rule 10 (father_rule -> data_str .)
    VARIABLE        reduce using rule 10 (father_rule -> data_str .)
    LPAREN          reduce using rule 10 (father_rule -> data_str .)
    LBRACKET        reduce using rule 10 (father_rule -> data_str .)
    KW_FOR          reduce using rule 10 (father_rule -> data_str .)
    KW_IF           reduce using rule 10 (father_rule -> data_str .)
    KW_ELSE         reduce using rule 10 (father_rule -> data_str .)
    KW_WHILE        reduce using rule 10 (father_rule -> data_str .)
    INTEGER         reduce using rule 10 (father_rule -> data_str .)
    FLOAT           reduce using rule 10 (father_rule -> data_str .)
    KW_CONST        reduce using rule 10 (father_rule -> data_str .)
    QUOTE           reduce using rule 10 (father_rule -> data_str .)
    $end            reduce using rule 10 (father_rule -> data_str .)
    RBRACE          reduce using rule 10 (father_rule -> data_str .)
    KW_RETURN       reduce using rule 10 (father_rule -> data_str .)
    SEMI            shift and go to state 50


state 11

    (11) father_rule -> array .
    (109) data_str -> array .

  ! reduce/reduce conflict for KW_PRINT resolved using rule 11 (father_rule -> array .)
  ! reduce/reduce conflict for KW_LET resolved using rule 11 (father_rule -> array .)
  ! reduce/reduce conflict for KW_FN resolved using rule 11 (father_rule -> array .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 11 (father_rule -> array .)
  ! reduce/reduce conflict for LPAREN resolved using rule 11 (father_rule -> array .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 11 (father_rule -> array .)
  ! reduce/reduce conflict for KW_FOR resolved using rule 11 (father_rule -> array .)
  ! reduce/reduce conflict for KW_IF resolved using rule 11 (father_rule -> array .)
  ! reduce/reduce conflict for KW_ELSE resolved using rule 11 (father_rule -> array .)
  ! reduce/reduce conflict for KW_WHILE resolved using rule 11 (father_rule -> array .)
  ! reduce/reduce conflict for INTEGER resolved using rule 11 (father_rule -> array .)
  ! reduce/reduce conflict for FLOAT resolved using rule 11 (father_rule -> array .)
  ! reduce/reduce conflict for KW_CONST resolved using rule 11 (father_rule -> array .)
  ! reduce/reduce conflict for QUOTE resolved using rule 11 (father_rule -> array .)
  ! reduce/reduce conflict for $end resolved using rule 11 (father_rule -> array .)
  ! reduce/reduce conflict for RBRACE resolved using rule 11 (father_rule -> array .)
  ! reduce/reduce conflict for KW_RETURN resolved using rule 11 (father_rule -> array .)
    KW_PRINT        reduce using rule 11 (father_rule -> array .)
    KW_LET          reduce using rule 11 (father_rule -> array .)
    KW_FN           reduce using rule 11 (father_rule -> array .)
    VARIABLE        reduce using rule 11 (father_rule -> array .)
    LPAREN          reduce using rule 11 (father_rule -> array .)
    LBRACKET        reduce using rule 11 (father_rule -> array .)
    KW_FOR          reduce using rule 11 (father_rule -> array .)
    KW_IF           reduce using rule 11 (father_rule -> array .)
    KW_ELSE         reduce using rule 11 (father_rule -> array .)
    KW_WHILE        reduce using rule 11 (father_rule -> array .)
    INTEGER         reduce using rule 11 (father_rule -> array .)
    FLOAT           reduce using rule 11 (father_rule -> array .)
    KW_CONST        reduce using rule 11 (father_rule -> array .)
    QUOTE           reduce using rule 11 (father_rule -> array .)
    $end            reduce using rule 11 (father_rule -> array .)
    RBRACE          reduce using rule 11 (father_rule -> array .)
    KW_RETURN       reduce using rule 11 (father_rule -> array .)
    SEMI            reduce using rule 109 (data_str -> array .)

  ! KW_PRINT        [ reduce using rule 109 (data_str -> array .) ]
  ! KW_LET          [ reduce using rule 109 (data_str -> array .) ]
  ! KW_FN           [ reduce using rule 109 (data_str -> array .) ]
  ! VARIABLE        [ reduce using rule 109 (data_str -> array .) ]
  ! LPAREN          [ reduce using rule 109 (data_str -> array .) ]
  ! LBRACKET        [ reduce using rule 109 (data_str -> array .) ]
  ! KW_FOR          [ reduce using rule 109 (data_str -> array .) ]
  ! KW_IF           [ reduce using rule 109 (data_str -> array .) ]
  ! KW_ELSE         [ reduce using rule 109 (data_str -> array .) ]
  ! KW_WHILE        [ reduce using rule 109 (data_str -> array .) ]
  ! INTEGER         [ reduce using rule 109 (data_str -> array .) ]
  ! FLOAT           [ reduce using rule 109 (data_str -> array .) ]
  ! KW_CONST        [ reduce using rule 109 (data_str -> array .) ]
  ! QUOTE           [ reduce using rule 109 (data_str -> array .) ]
  ! $end            [ reduce using rule 109 (data_str -> array .) ]
  ! RBRACE          [ reduce using rule 109 (data_str -> array .) ]
  ! KW_RETURN       [ reduce using rule 109 (data_str -> array .) ]


state 12

    (12) father_rule -> linkedlist_methods .

    KW_PRINT        reduce using rule 12 (father_rule -> linkedlist_methods .)
    KW_LET          reduce using rule 12 (father_rule -> linkedlist_methods .)
    KW_FN           reduce using rule 12 (father_rule -> linkedlist_methods .)
    VARIABLE        reduce using rule 12 (father_rule -> linkedlist_methods .)
    LPAREN          reduce using rule 12 (father_rule -> linkedlist_methods .)
    LBRACKET        reduce using rule 12 (father_rule -> linkedlist_methods .)
    KW_FOR          reduce using rule 12 (father_rule -> linkedlist_methods .)
    KW_IF           reduce using rule 12 (father_rule -> linkedlist_methods .)
    KW_ELSE         reduce using rule 12 (father_rule -> linkedlist_methods .)
    KW_WHILE        reduce using rule 12 (father_rule -> linkedlist_methods .)
    INTEGER         reduce using rule 12 (father_rule -> linkedlist_methods .)
    FLOAT           reduce using rule 12 (father_rule -> linkedlist_methods .)
    KW_CONST        reduce using rule 12 (father_rule -> linkedlist_methods .)
    QUOTE           reduce using rule 12 (father_rule -> linkedlist_methods .)
    $end            reduce using rule 12 (father_rule -> linkedlist_methods .)
    RBRACE          reduce using rule 12 (father_rule -> linkedlist_methods .)
    KW_RETURN       reduce using rule 12 (father_rule -> linkedlist_methods .)


state 13

    (13) father_rule -> hashmap_methods .

    KW_PRINT        reduce using rule 13 (father_rule -> hashmap_methods .)
    KW_LET          reduce using rule 13 (father_rule -> hashmap_methods .)
    KW_FN           reduce using rule 13 (father_rule -> hashmap_methods .)
    VARIABLE        reduce using rule 13 (father_rule -> hashmap_methods .)
    LPAREN          reduce using rule 13 (father_rule -> hashmap_methods .)
    LBRACKET        reduce using rule 13 (father_rule -> hashmap_methods .)
    KW_FOR          reduce using rule 13 (father_rule -> hashmap_methods .)
    KW_IF           reduce using rule 13 (father_rule -> hashmap_methods .)
    KW_ELSE         reduce using rule 13 (father_rule -> hashmap_methods .)
    KW_WHILE        reduce using rule 13 (father_rule -> hashmap_methods .)
    INTEGER         reduce using rule 13 (father_rule -> hashmap_methods .)
    FLOAT           reduce using rule 13 (father_rule -> hashmap_methods .)
    KW_CONST        reduce using rule 13 (father_rule -> hashmap_methods .)
    QUOTE           reduce using rule 13 (father_rule -> hashmap_methods .)
    $end            reduce using rule 13 (father_rule -> hashmap_methods .)
    RBRACE          reduce using rule 13 (father_rule -> hashmap_methods .)
    KW_RETURN       reduce using rule 13 (father_rule -> hashmap_methods .)


state 14

    (14) father_rule -> initialization .

    KW_PRINT        reduce using rule 14 (father_rule -> initialization .)
    KW_LET          reduce using rule 14 (father_rule -> initialization .)
    KW_FN           reduce using rule 14 (father_rule -> initialization .)
    VARIABLE        reduce using rule 14 (father_rule -> initialization .)
    LPAREN          reduce using rule 14 (father_rule -> initialization .)
    LBRACKET        reduce using rule 14 (father_rule -> initialization .)
    KW_FOR          reduce using rule 14 (father_rule -> initialization .)
    KW_IF           reduce using rule 14 (father_rule -> initialization .)
    KW_ELSE         reduce using rule 14 (father_rule -> initialization .)
    KW_WHILE        reduce using rule 14 (father_rule -> initialization .)
    INTEGER         reduce using rule 14 (father_rule -> initialization .)
    FLOAT           reduce using rule 14 (father_rule -> initialization .)
    KW_CONST        reduce using rule 14 (father_rule -> initialization .)
    QUOTE           reduce using rule 14 (father_rule -> initialization .)
    $end            reduce using rule 14 (father_rule -> initialization .)
    RBRACE          reduce using rule 14 (father_rule -> initialization .)
    KW_RETURN       reduce using rule 14 (father_rule -> initialization .)


state 15

    (15) father_rule -> input .

    KW_PRINT        reduce using rule 15 (father_rule -> input .)
    KW_LET          reduce using rule 15 (father_rule -> input .)
    KW_FN           reduce using rule 15 (father_rule -> input .)
    VARIABLE        reduce using rule 15 (father_rule -> input .)
    LPAREN          reduce using rule 15 (father_rule -> input .)
    LBRACKET        reduce using rule 15 (father_rule -> input .)
    KW_FOR          reduce using rule 15 (father_rule -> input .)
    KW_IF           reduce using rule 15 (father_rule -> input .)
    KW_ELSE         reduce using rule 15 (father_rule -> input .)
    KW_WHILE        reduce using rule 15 (father_rule -> input .)
    INTEGER         reduce using rule 15 (father_rule -> input .)
    FLOAT           reduce using rule 15 (father_rule -> input .)
    KW_CONST        reduce using rule 15 (father_rule -> input .)
    QUOTE           reduce using rule 15 (father_rule -> input .)
    $end            reduce using rule 15 (father_rule -> input .)
    RBRACE          reduce using rule 15 (father_rule -> input .)
    KW_RETURN       reduce using rule 15 (father_rule -> input .)


state 16

    (16) father_rule -> assignation .

    KW_PRINT        reduce using rule 16 (father_rule -> assignation .)
    KW_LET          reduce using rule 16 (father_rule -> assignation .)
    KW_FN           reduce using rule 16 (father_rule -> assignation .)
    VARIABLE        reduce using rule 16 (father_rule -> assignation .)
    LPAREN          reduce using rule 16 (father_rule -> assignation .)
    LBRACKET        reduce using rule 16 (father_rule -> assignation .)
    KW_FOR          reduce using rule 16 (father_rule -> assignation .)
    KW_IF           reduce using rule 16 (father_rule -> assignation .)
    KW_ELSE         reduce using rule 16 (father_rule -> assignation .)
    KW_WHILE        reduce using rule 16 (father_rule -> assignation .)
    INTEGER         reduce using rule 16 (father_rule -> assignation .)
    FLOAT           reduce using rule 16 (father_rule -> assignation .)
    KW_CONST        reduce using rule 16 (father_rule -> assignation .)
    QUOTE           reduce using rule 16 (father_rule -> assignation .)
    $end            reduce using rule 16 (father_rule -> assignation .)
    RBRACE          reduce using rule 16 (father_rule -> assignation .)
    KW_RETURN       reduce using rule 16 (father_rule -> assignation .)


state 17

    (17) father_rule -> declare_data_type .

    KW_PRINT        reduce using rule 17 (father_rule -> declare_data_type .)
    KW_LET          reduce using rule 17 (father_rule -> declare_data_type .)
    KW_FN           reduce using rule 17 (father_rule -> declare_data_type .)
    VARIABLE        reduce using rule 17 (father_rule -> declare_data_type .)
    LPAREN          reduce using rule 17 (father_rule -> declare_data_type .)
    LBRACKET        reduce using rule 17 (father_rule -> declare_data_type .)
    KW_FOR          reduce using rule 17 (father_rule -> declare_data_type .)
    KW_IF           reduce using rule 17 (father_rule -> declare_data_type .)
    KW_ELSE         reduce using rule 17 (father_rule -> declare_data_type .)
    KW_WHILE        reduce using rule 17 (father_rule -> declare_data_type .)
    INTEGER         reduce using rule 17 (father_rule -> declare_data_type .)
    FLOAT           reduce using rule 17 (father_rule -> declare_data_type .)
    KW_CONST        reduce using rule 17 (father_rule -> declare_data_type .)
    QUOTE           reduce using rule 17 (father_rule -> declare_data_type .)
    $end            reduce using rule 17 (father_rule -> declare_data_type .)
    RBRACE          reduce using rule 17 (father_rule -> declare_data_type .)
    KW_RETURN       reduce using rule 17 (father_rule -> declare_data_type .)


state 18

    (68) print -> KW_PRINT . LNOT LPAREN CADENA RPAREN SEMI
    (69) print -> KW_PRINT . LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI
    (70) print -> KW_PRINT . LNOT LPAREN CADENA COMMA VARIABLE COLON COLON LT data_type GT LPAREN RPAREN RPAREN SEMI

    LNOT            shift and go to state 51


state 19

    (22) expression -> LPAREN . expression RPAREN
    (18) expression -> . expression PLUS expression
    (19) expression -> . expression MINUS expression
    (20) expression -> . expression TIMES expression
    (21) expression -> . expression DIVIDE expression
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . number
    (24) number -> . INTEGER
    (25) number -> . FLOAT
    (26) number -> . VARIABLE

    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 42
    VARIABLE        shift and go to state 53

    expression                     shift and go to state 52
    number                         shift and go to state 29

state 20

    (77) variables -> VARIABLE .
    (78) variables -> VARIABLE . COMMA variables
    (125) linkedlist_methods -> VARIABLE . linkedlist_push
    (126) linkedlist_methods -> VARIABLE . linkedlist_remove
    (116) hashmap_methods -> VARIABLE . hashmap_insert
    (117) hashmap_methods -> VARIABLE . hashmap_remove
    (139) input -> VARIABLE . DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI
    (140) assignation -> VARIABLE . assign_operators number
    (26) number -> VARIABLE .
    (127) linkedlist_push -> . DOT KW_PUSH_BACK LPAREN data RPAREN SEMI
    (128) linkedlist_remove -> . DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI
    (118) hashmap_insert -> . DOT KW_INSERT LPAREN mdata RPAREN SEMI
    (119) hashmap_remove -> . DOT KW_REMOVE LPAREN AND data RPAREN SEMI
    (41) assign_operators -> . EQUALS
    (42) assign_operators -> . TIMESEQUAL
    (43) assign_operators -> . DIVEQUAL
    (44) assign_operators -> . MODULUSEQUAL
    (45) assign_operators -> . PLUSEQUAL
    (46) assign_operators -> . MINUSEQUAL

  ! reduce/reduce conflict for KW_PRINT resolved using rule 26 (number -> VARIABLE .)
  ! reduce/reduce conflict for KW_LET resolved using rule 26 (number -> VARIABLE .)
  ! reduce/reduce conflict for KW_FN resolved using rule 26 (number -> VARIABLE .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 26 (number -> VARIABLE .)
  ! reduce/reduce conflict for LPAREN resolved using rule 26 (number -> VARIABLE .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 26 (number -> VARIABLE .)
  ! reduce/reduce conflict for KW_FOR resolved using rule 26 (number -> VARIABLE .)
  ! reduce/reduce conflict for KW_IF resolved using rule 26 (number -> VARIABLE .)
  ! reduce/reduce conflict for KW_ELSE resolved using rule 26 (number -> VARIABLE .)
  ! reduce/reduce conflict for KW_WHILE resolved using rule 26 (number -> VARIABLE .)
  ! reduce/reduce conflict for INTEGER resolved using rule 26 (number -> VARIABLE .)
  ! reduce/reduce conflict for FLOAT resolved using rule 26 (number -> VARIABLE .)
  ! reduce/reduce conflict for KW_CONST resolved using rule 26 (number -> VARIABLE .)
  ! reduce/reduce conflict for QUOTE resolved using rule 26 (number -> VARIABLE .)
  ! reduce/reduce conflict for $end resolved using rule 26 (number -> VARIABLE .)
  ! reduce/reduce conflict for RBRACE resolved using rule 26 (number -> VARIABLE .)
  ! reduce/reduce conflict for KW_RETURN resolved using rule 26 (number -> VARIABLE .)
    COMMA           shift and go to state 54
    DOT             shift and go to state 59
    PLUS            reduce using rule 26 (number -> VARIABLE .)
    MINUS           reduce using rule 26 (number -> VARIABLE .)
    TIMES           reduce using rule 26 (number -> VARIABLE .)
    DIVIDE          reduce using rule 26 (number -> VARIABLE .)
    KW_PRINT        reduce using rule 26 (number -> VARIABLE .)
    KW_LET          reduce using rule 26 (number -> VARIABLE .)
    KW_FN           reduce using rule 26 (number -> VARIABLE .)
    VARIABLE        reduce using rule 26 (number -> VARIABLE .)
    LPAREN          reduce using rule 26 (number -> VARIABLE .)
    LBRACKET        reduce using rule 26 (number -> VARIABLE .)
    KW_FOR          reduce using rule 26 (number -> VARIABLE .)
    KW_IF           reduce using rule 26 (number -> VARIABLE .)
    KW_ELSE         reduce using rule 26 (number -> VARIABLE .)
    KW_WHILE        reduce using rule 26 (number -> VARIABLE .)
    INTEGER         reduce using rule 26 (number -> VARIABLE .)
    FLOAT           reduce using rule 26 (number -> VARIABLE .)
    KW_CONST        reduce using rule 26 (number -> VARIABLE .)
    QUOTE           reduce using rule 26 (number -> VARIABLE .)
    $end            reduce using rule 26 (number -> VARIABLE .)
    RBRACE          reduce using rule 26 (number -> VARIABLE .)
    KW_RETURN       reduce using rule 26 (number -> VARIABLE .)
    EQUALS          shift and go to state 61
    TIMESEQUAL      shift and go to state 62
    DIVEQUAL        shift and go to state 63
    MODULUSEQUAL    shift and go to state 64
    PLUSEQUAL       shift and go to state 65
    MINUSEQUAL      shift and go to state 66

  ! KW_PRINT        [ reduce using rule 77 (variables -> VARIABLE .) ]
  ! KW_LET          [ reduce using rule 77 (variables -> VARIABLE .) ]
  ! KW_FN           [ reduce using rule 77 (variables -> VARIABLE .) ]
  ! VARIABLE        [ reduce using rule 77 (variables -> VARIABLE .) ]
  ! LPAREN          [ reduce using rule 77 (variables -> VARIABLE .) ]
  ! LBRACKET        [ reduce using rule 77 (variables -> VARIABLE .) ]
  ! KW_FOR          [ reduce using rule 77 (variables -> VARIABLE .) ]
  ! KW_IF           [ reduce using rule 77 (variables -> VARIABLE .) ]
  ! KW_ELSE         [ reduce using rule 77 (variables -> VARIABLE .) ]
  ! KW_WHILE        [ reduce using rule 77 (variables -> VARIABLE .) ]
  ! INTEGER         [ reduce using rule 77 (variables -> VARIABLE .) ]
  ! FLOAT           [ reduce using rule 77 (variables -> VARIABLE .) ]
  ! KW_CONST        [ reduce using rule 77 (variables -> VARIABLE .) ]
  ! QUOTE           [ reduce using rule 77 (variables -> VARIABLE .) ]
  ! $end            [ reduce using rule 77 (variables -> VARIABLE .) ]
  ! RBRACE          [ reduce using rule 77 (variables -> VARIABLE .) ]
  ! KW_RETURN       [ reduce using rule 77 (variables -> VARIABLE .) ]

    linkedlist_push                shift and go to state 55
    linkedlist_remove              shift and go to state 56
    hashmap_insert                 shift and go to state 57
    hashmap_remove                 shift and go to state 58
    assign_operators               shift and go to state 60

state 21

    (71) dvariable -> KW_LET . VARIABLE SEMI
    (72) array -> KW_LET . VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (75) array -> KW_LET . VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> KW_LET . VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (141) declare_data_type -> KW_LET . VARIABLE COLON data_type SEMI
    (112) hashmap -> KW_LET . VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (113) hashmap -> KW_LET . KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (114) hashmap -> KW_LET . VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (115) hashmap -> KW_LET . KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (121) linkedlist -> KW_LET . VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (122) linkedlist -> KW_LET . KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (123) linkedlist -> KW_LET . VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (124) linkedlist -> KW_LET . KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (85) let_initialization -> KW_LET . VARIABLE EQUALS data
    (86) let_initialization -> KW_LET . VARIABLE COLON data_type EQUALS data
    (87) let_initialization -> KW_LET . KW_MUT VARIABLE EQUALS data
    (88) let_initialization -> KW_LET . KW_MUT VARIABLE COLON data_type EQUALS data
    (89) let_initialization -> KW_LET . VARIABLE EQUALS expression_var
    (90) let_initialization -> KW_LET . VARIABLE COLON data_type EQUALS expression_var
    (91) let_initialization -> KW_LET . KW_MUT VARIABLE EQUALS expression_var
    (92) let_initialization -> KW_LET . KW_MUT VARIABLE COLON data_type EQUALS expression_var
    (138) input_init -> KW_LET . VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN

    VARIABLE        shift and go to state 67
    KW_MUT          shift and go to state 68


state 22

    (96) function -> KW_FN . VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE
    (132) function -> KW_FN . VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE

    VARIABLE        shift and go to state 69


state 23

    (97) control_str -> for_str .

    KW_PRINT        reduce using rule 97 (control_str -> for_str .)
    KW_LET          reduce using rule 97 (control_str -> for_str .)
    KW_FN           reduce using rule 97 (control_str -> for_str .)
    VARIABLE        reduce using rule 97 (control_str -> for_str .)
    LPAREN          reduce using rule 97 (control_str -> for_str .)
    LBRACKET        reduce using rule 97 (control_str -> for_str .)
    KW_FOR          reduce using rule 97 (control_str -> for_str .)
    KW_IF           reduce using rule 97 (control_str -> for_str .)
    KW_ELSE         reduce using rule 97 (control_str -> for_str .)
    KW_WHILE        reduce using rule 97 (control_str -> for_str .)
    INTEGER         reduce using rule 97 (control_str -> for_str .)
    FLOAT           reduce using rule 97 (control_str -> for_str .)
    KW_CONST        reduce using rule 97 (control_str -> for_str .)
    QUOTE           reduce using rule 97 (control_str -> for_str .)
    $end            reduce using rule 97 (control_str -> for_str .)
    RBRACE          reduce using rule 97 (control_str -> for_str .)
    KW_RETURN       reduce using rule 97 (control_str -> for_str .)


state 24

    (98) control_str -> for_str_tagged .

    KW_PRINT        reduce using rule 98 (control_str -> for_str_tagged .)
    KW_LET          reduce using rule 98 (control_str -> for_str_tagged .)
    KW_FN           reduce using rule 98 (control_str -> for_str_tagged .)
    VARIABLE        reduce using rule 98 (control_str -> for_str_tagged .)
    LPAREN          reduce using rule 98 (control_str -> for_str_tagged .)
    LBRACKET        reduce using rule 98 (control_str -> for_str_tagged .)
    KW_FOR          reduce using rule 98 (control_str -> for_str_tagged .)
    KW_IF           reduce using rule 98 (control_str -> for_str_tagged .)
    KW_ELSE         reduce using rule 98 (control_str -> for_str_tagged .)
    KW_WHILE        reduce using rule 98 (control_str -> for_str_tagged .)
    INTEGER         reduce using rule 98 (control_str -> for_str_tagged .)
    FLOAT           reduce using rule 98 (control_str -> for_str_tagged .)
    KW_CONST        reduce using rule 98 (control_str -> for_str_tagged .)
    QUOTE           reduce using rule 98 (control_str -> for_str_tagged .)
    $end            reduce using rule 98 (control_str -> for_str_tagged .)
    RBRACE          reduce using rule 98 (control_str -> for_str_tagged .)
    KW_RETURN       reduce using rule 98 (control_str -> for_str_tagged .)


state 25

    (99) control_str -> if .

    KW_PRINT        reduce using rule 99 (control_str -> if .)
    KW_LET          reduce using rule 99 (control_str -> if .)
    KW_FN           reduce using rule 99 (control_str -> if .)
    VARIABLE        reduce using rule 99 (control_str -> if .)
    LPAREN          reduce using rule 99 (control_str -> if .)
    LBRACKET        reduce using rule 99 (control_str -> if .)
    KW_FOR          reduce using rule 99 (control_str -> if .)
    KW_IF           reduce using rule 99 (control_str -> if .)
    KW_ELSE         reduce using rule 99 (control_str -> if .)
    KW_WHILE        reduce using rule 99 (control_str -> if .)
    INTEGER         reduce using rule 99 (control_str -> if .)
    FLOAT           reduce using rule 99 (control_str -> if .)
    KW_CONST        reduce using rule 99 (control_str -> if .)
    QUOTE           reduce using rule 99 (control_str -> if .)
    $end            reduce using rule 99 (control_str -> if .)
    RBRACE          reduce using rule 99 (control_str -> if .)
    KW_RETURN       reduce using rule 99 (control_str -> if .)


state 26

    (100) control_str -> else .

    KW_PRINT        reduce using rule 100 (control_str -> else .)
    KW_LET          reduce using rule 100 (control_str -> else .)
    KW_FN           reduce using rule 100 (control_str -> else .)
    VARIABLE        reduce using rule 100 (control_str -> else .)
    LPAREN          reduce using rule 100 (control_str -> else .)
    LBRACKET        reduce using rule 100 (control_str -> else .)
    KW_FOR          reduce using rule 100 (control_str -> else .)
    KW_IF           reduce using rule 100 (control_str -> else .)
    KW_ELSE         reduce using rule 100 (control_str -> else .)
    KW_WHILE        reduce using rule 100 (control_str -> else .)
    INTEGER         reduce using rule 100 (control_str -> else .)
    FLOAT           reduce using rule 100 (control_str -> else .)
    KW_CONST        reduce using rule 100 (control_str -> else .)
    QUOTE           reduce using rule 100 (control_str -> else .)
    $end            reduce using rule 100 (control_str -> else .)
    RBRACE          reduce using rule 100 (control_str -> else .)
    KW_RETURN       reduce using rule 100 (control_str -> else .)


state 27

    (101) control_str -> else_if .

    KW_PRINT        reduce using rule 101 (control_str -> else_if .)
    KW_LET          reduce using rule 101 (control_str -> else_if .)
    KW_FN           reduce using rule 101 (control_str -> else_if .)
    VARIABLE        reduce using rule 101 (control_str -> else_if .)
    LPAREN          reduce using rule 101 (control_str -> else_if .)
    LBRACKET        reduce using rule 101 (control_str -> else_if .)
    KW_FOR          reduce using rule 101 (control_str -> else_if .)
    KW_IF           reduce using rule 101 (control_str -> else_if .)
    KW_ELSE         reduce using rule 101 (control_str -> else_if .)
    KW_WHILE        reduce using rule 101 (control_str -> else_if .)
    INTEGER         reduce using rule 101 (control_str -> else_if .)
    FLOAT           reduce using rule 101 (control_str -> else_if .)
    KW_CONST        reduce using rule 101 (control_str -> else_if .)
    QUOTE           reduce using rule 101 (control_str -> else_if .)
    $end            reduce using rule 101 (control_str -> else_if .)
    RBRACE          reduce using rule 101 (control_str -> else_if .)
    KW_RETURN       reduce using rule 101 (control_str -> else_if .)


state 28

    (102) control_str -> while .

    KW_PRINT        reduce using rule 102 (control_str -> while .)
    KW_LET          reduce using rule 102 (control_str -> while .)
    KW_FN           reduce using rule 102 (control_str -> while .)
    VARIABLE        reduce using rule 102 (control_str -> while .)
    LPAREN          reduce using rule 102 (control_str -> while .)
    LBRACKET        reduce using rule 102 (control_str -> while .)
    KW_FOR          reduce using rule 102 (control_str -> while .)
    KW_IF           reduce using rule 102 (control_str -> while .)
    KW_ELSE         reduce using rule 102 (control_str -> while .)
    KW_WHILE        reduce using rule 102 (control_str -> while .)
    INTEGER         reduce using rule 102 (control_str -> while .)
    FLOAT           reduce using rule 102 (control_str -> while .)
    KW_CONST        reduce using rule 102 (control_str -> while .)
    QUOTE           reduce using rule 102 (control_str -> while .)
    $end            reduce using rule 102 (control_str -> while .)
    RBRACE          reduce using rule 102 (control_str -> while .)
    KW_RETURN       reduce using rule 102 (control_str -> while .)


state 29

    (23) expression -> number .

    PLUS            reduce using rule 23 (expression -> number .)
    MINUS           reduce using rule 23 (expression -> number .)
    TIMES           reduce using rule 23 (expression -> number .)
    DIVIDE          reduce using rule 23 (expression -> number .)
    KW_PRINT        reduce using rule 23 (expression -> number .)
    KW_LET          reduce using rule 23 (expression -> number .)
    KW_FN           reduce using rule 23 (expression -> number .)
    VARIABLE        reduce using rule 23 (expression -> number .)
    LPAREN          reduce using rule 23 (expression -> number .)
    LBRACKET        reduce using rule 23 (expression -> number .)
    KW_FOR          reduce using rule 23 (expression -> number .)
    KW_IF           reduce using rule 23 (expression -> number .)
    KW_ELSE         reduce using rule 23 (expression -> number .)
    KW_WHILE        reduce using rule 23 (expression -> number .)
    INTEGER         reduce using rule 23 (expression -> number .)
    FLOAT           reduce using rule 23 (expression -> number .)
    KW_CONST        reduce using rule 23 (expression -> number .)
    QUOTE           reduce using rule 23 (expression -> number .)
    $end            reduce using rule 23 (expression -> number .)
    RBRACE          reduce using rule 23 (expression -> number .)
    KW_RETURN       reduce using rule 23 (expression -> number .)
    RPAREN          reduce using rule 23 (expression -> number .)
    SEMI            reduce using rule 23 (expression -> number .)


state 30

    (110) data_str -> hashmap .

    SEMI            reduce using rule 110 (data_str -> hashmap .)
    KW_PRINT        reduce using rule 110 (data_str -> hashmap .)
    KW_LET          reduce using rule 110 (data_str -> hashmap .)
    KW_FN           reduce using rule 110 (data_str -> hashmap .)
    VARIABLE        reduce using rule 110 (data_str -> hashmap .)
    LPAREN          reduce using rule 110 (data_str -> hashmap .)
    LBRACKET        reduce using rule 110 (data_str -> hashmap .)
    KW_FOR          reduce using rule 110 (data_str -> hashmap .)
    KW_IF           reduce using rule 110 (data_str -> hashmap .)
    KW_ELSE         reduce using rule 110 (data_str -> hashmap .)
    KW_WHILE        reduce using rule 110 (data_str -> hashmap .)
    INTEGER         reduce using rule 110 (data_str -> hashmap .)
    FLOAT           reduce using rule 110 (data_str -> hashmap .)
    KW_CONST        reduce using rule 110 (data_str -> hashmap .)
    QUOTE           reduce using rule 110 (data_str -> hashmap .)
    $end            reduce using rule 110 (data_str -> hashmap .)
    RBRACE          reduce using rule 110 (data_str -> hashmap .)
    KW_RETURN       reduce using rule 110 (data_str -> hashmap .)


state 31

    (111) data_str -> linkedlist .

    SEMI            reduce using rule 111 (data_str -> linkedlist .)
    KW_PRINT        reduce using rule 111 (data_str -> linkedlist .)
    KW_LET          reduce using rule 111 (data_str -> linkedlist .)
    KW_FN           reduce using rule 111 (data_str -> linkedlist .)
    VARIABLE        reduce using rule 111 (data_str -> linkedlist .)
    LPAREN          reduce using rule 111 (data_str -> linkedlist .)
    LBRACKET        reduce using rule 111 (data_str -> linkedlist .)
    KW_FOR          reduce using rule 111 (data_str -> linkedlist .)
    KW_IF           reduce using rule 111 (data_str -> linkedlist .)
    KW_ELSE         reduce using rule 111 (data_str -> linkedlist .)
    KW_WHILE        reduce using rule 111 (data_str -> linkedlist .)
    INTEGER         reduce using rule 111 (data_str -> linkedlist .)
    FLOAT           reduce using rule 111 (data_str -> linkedlist .)
    KW_CONST        reduce using rule 111 (data_str -> linkedlist .)
    QUOTE           reduce using rule 111 (data_str -> linkedlist .)
    $end            reduce using rule 111 (data_str -> linkedlist .)
    RBRACE          reduce using rule 111 (data_str -> linkedlist .)
    KW_RETURN       reduce using rule 111 (data_str -> linkedlist .)


state 32

    (73) array -> LBRACKET . mdata RBRACKET
    (74) array -> LBRACKET . data SEMI data RBRACKET
    (66) mdata -> . data
    (67) mdata -> . data COMMA mdata
    (47) data -> . CADENA
    (48) data -> . INTEGER
    (49) data -> . CHAR
    (50) data -> . FLOAT
    (51) data -> . KW_FALSE
    (52) data -> . KW_TRUE
    (53) data -> . tuple
    (80) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 72
    INTEGER         shift and go to state 73
    CHAR            shift and go to state 74
    FLOAT           shift and go to state 75
    KW_FALSE        shift and go to state 76
    KW_TRUE         shift and go to state 77
    LPAREN          shift and go to state 79

    mdata                          shift and go to state 70
    data                           shift and go to state 71
    tuple                          shift and go to state 78

state 33

    (81) initialization -> let_initialization . SEMI

    SEMI            shift and go to state 80


state 34

    (82) initialization -> const_initialization . SEMI

    SEMI            shift and go to state 81


state 35

    (84) initialization -> input_init . SEMI

    SEMI            shift and go to state 82


state 36

    (103) for_str -> KW_FOR . VARIABLE KW_IN range LBRACE main_rule RBRACE
    (104) for_str -> KW_FOR . VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE

    VARIABLE        shift and go to state 83


state 37

    (105) for_str_tagged -> label . COLON for_str

    COLON           shift and go to state 84


state 38

    (129) if -> KW_IF . conditional LBRACE main_rule RBRACE
    (64) conditional -> . VARIABLE comparator data
    (65) conditional -> . LPAREN lvariable RPAREN comparator data

    VARIABLE        shift and go to state 86
    LPAREN          shift and go to state 87

    conditional                    shift and go to state 85

state 39

    (130) else -> KW_ELSE . LBRACE main_rule RBRACE
    (131) else_if -> KW_ELSE . KW_IF conditional LBRACE main_rule RBRACE

    LBRACE          shift and go to state 88
    KW_IF           shift and go to state 89


state 40

    (79) while -> KW_WHILE . VARIABLE comparator data LBRACE main_rule RBRACE

    VARIABLE        shift and go to state 90


state 41

    (24) number -> INTEGER .

    PLUS            reduce using rule 24 (number -> INTEGER .)
    MINUS           reduce using rule 24 (number -> INTEGER .)
    TIMES           reduce using rule 24 (number -> INTEGER .)
    DIVIDE          reduce using rule 24 (number -> INTEGER .)
    KW_PRINT        reduce using rule 24 (number -> INTEGER .)
    KW_LET          reduce using rule 24 (number -> INTEGER .)
    KW_FN           reduce using rule 24 (number -> INTEGER .)
    VARIABLE        reduce using rule 24 (number -> INTEGER .)
    LPAREN          reduce using rule 24 (number -> INTEGER .)
    LBRACKET        reduce using rule 24 (number -> INTEGER .)
    KW_FOR          reduce using rule 24 (number -> INTEGER .)
    KW_IF           reduce using rule 24 (number -> INTEGER .)
    KW_ELSE         reduce using rule 24 (number -> INTEGER .)
    KW_WHILE        reduce using rule 24 (number -> INTEGER .)
    INTEGER         reduce using rule 24 (number -> INTEGER .)
    FLOAT           reduce using rule 24 (number -> INTEGER .)
    KW_CONST        reduce using rule 24 (number -> INTEGER .)
    QUOTE           reduce using rule 24 (number -> INTEGER .)
    $end            reduce using rule 24 (number -> INTEGER .)
    RBRACE          reduce using rule 24 (number -> INTEGER .)
    KW_RETURN       reduce using rule 24 (number -> INTEGER .)
    RPAREN          reduce using rule 24 (number -> INTEGER .)
    SEMI            reduce using rule 24 (number -> INTEGER .)


state 42

    (25) number -> FLOAT .

    PLUS            reduce using rule 25 (number -> FLOAT .)
    MINUS           reduce using rule 25 (number -> FLOAT .)
    TIMES           reduce using rule 25 (number -> FLOAT .)
    DIVIDE          reduce using rule 25 (number -> FLOAT .)
    KW_PRINT        reduce using rule 25 (number -> FLOAT .)
    KW_LET          reduce using rule 25 (number -> FLOAT .)
    KW_FN           reduce using rule 25 (number -> FLOAT .)
    VARIABLE        reduce using rule 25 (number -> FLOAT .)
    LPAREN          reduce using rule 25 (number -> FLOAT .)
    LBRACKET        reduce using rule 25 (number -> FLOAT .)
    KW_FOR          reduce using rule 25 (number -> FLOAT .)
    KW_IF           reduce using rule 25 (number -> FLOAT .)
    KW_ELSE         reduce using rule 25 (number -> FLOAT .)
    KW_WHILE        reduce using rule 25 (number -> FLOAT .)
    INTEGER         reduce using rule 25 (number -> FLOAT .)
    FLOAT           reduce using rule 25 (number -> FLOAT .)
    KW_CONST        reduce using rule 25 (number -> FLOAT .)
    QUOTE           reduce using rule 25 (number -> FLOAT .)
    $end            reduce using rule 25 (number -> FLOAT .)
    RBRACE          reduce using rule 25 (number -> FLOAT .)
    KW_RETURN       reduce using rule 25 (number -> FLOAT .)
    RPAREN          reduce using rule 25 (number -> FLOAT .)
    SEMI            reduce using rule 25 (number -> FLOAT .)


state 43

    (93) const_initialization -> KW_CONST . VARIABLE COLON data_type EQUALS data

    VARIABLE        shift and go to state 91


state 44

    (108) label -> QUOTE . VARIABLE

    VARIABLE        shift and go to state 92


state 45

    (2) main_rule -> father_rule main_rule .

    $end            reduce using rule 2 (main_rule -> father_rule main_rule .)
    RBRACE          reduce using rule 2 (main_rule -> father_rule main_rule .)
    KW_RETURN       reduce using rule 2 (main_rule -> father_rule main_rule .)


state 46

    (18) expression -> expression PLUS . expression
    (18) expression -> . expression PLUS expression
    (19) expression -> . expression MINUS expression
    (20) expression -> . expression TIMES expression
    (21) expression -> . expression DIVIDE expression
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . number
    (24) number -> . INTEGER
    (25) number -> . FLOAT
    (26) number -> . VARIABLE

    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 42
    VARIABLE        shift and go to state 53

    expression                     shift and go to state 93
    number                         shift and go to state 29

state 47

    (19) expression -> expression MINUS . expression
    (18) expression -> . expression PLUS expression
    (19) expression -> . expression MINUS expression
    (20) expression -> . expression TIMES expression
    (21) expression -> . expression DIVIDE expression
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . number
    (24) number -> . INTEGER
    (25) number -> . FLOAT
    (26) number -> . VARIABLE

    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 42
    VARIABLE        shift and go to state 53

    expression                     shift and go to state 94
    number                         shift and go to state 29

state 48

    (20) expression -> expression TIMES . expression
    (18) expression -> . expression PLUS expression
    (19) expression -> . expression MINUS expression
    (20) expression -> . expression TIMES expression
    (21) expression -> . expression DIVIDE expression
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . number
    (24) number -> . INTEGER
    (25) number -> . FLOAT
    (26) number -> . VARIABLE

    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 42
    VARIABLE        shift and go to state 53

    expression                     shift and go to state 95
    number                         shift and go to state 29

state 49

    (21) expression -> expression DIVIDE . expression
    (18) expression -> . expression PLUS expression
    (19) expression -> . expression MINUS expression
    (20) expression -> . expression TIMES expression
    (21) expression -> . expression DIVIDE expression
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . number
    (24) number -> . INTEGER
    (25) number -> . FLOAT
    (26) number -> . VARIABLE

    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 42
    VARIABLE        shift and go to state 53

    expression                     shift and go to state 96
    number                         shift and go to state 29

state 50

    (83) initialization -> data_str SEMI .

    KW_PRINT        reduce using rule 83 (initialization -> data_str SEMI .)
    KW_LET          reduce using rule 83 (initialization -> data_str SEMI .)
    KW_FN           reduce using rule 83 (initialization -> data_str SEMI .)
    VARIABLE        reduce using rule 83 (initialization -> data_str SEMI .)
    LPAREN          reduce using rule 83 (initialization -> data_str SEMI .)
    LBRACKET        reduce using rule 83 (initialization -> data_str SEMI .)
    KW_FOR          reduce using rule 83 (initialization -> data_str SEMI .)
    KW_IF           reduce using rule 83 (initialization -> data_str SEMI .)
    KW_ELSE         reduce using rule 83 (initialization -> data_str SEMI .)
    KW_WHILE        reduce using rule 83 (initialization -> data_str SEMI .)
    INTEGER         reduce using rule 83 (initialization -> data_str SEMI .)
    FLOAT           reduce using rule 83 (initialization -> data_str SEMI .)
    KW_CONST        reduce using rule 83 (initialization -> data_str SEMI .)
    QUOTE           reduce using rule 83 (initialization -> data_str SEMI .)
    $end            reduce using rule 83 (initialization -> data_str SEMI .)
    RBRACE          reduce using rule 83 (initialization -> data_str SEMI .)
    KW_RETURN       reduce using rule 83 (initialization -> data_str SEMI .)


state 51

    (68) print -> KW_PRINT LNOT . LPAREN CADENA RPAREN SEMI
    (69) print -> KW_PRINT LNOT . LPAREN CADENA COMMA VARIABLE RPAREN SEMI
    (70) print -> KW_PRINT LNOT . LPAREN CADENA COMMA VARIABLE COLON COLON LT data_type GT LPAREN RPAREN RPAREN SEMI

    LPAREN          shift and go to state 97


state 52

    (22) expression -> LPAREN expression . RPAREN
    (18) expression -> expression . PLUS expression
    (19) expression -> expression . MINUS expression
    (20) expression -> expression . TIMES expression
    (21) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 98
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49


state 53

    (26) number -> VARIABLE .

    RPAREN          reduce using rule 26 (number -> VARIABLE .)
    PLUS            reduce using rule 26 (number -> VARIABLE .)
    MINUS           reduce using rule 26 (number -> VARIABLE .)
    TIMES           reduce using rule 26 (number -> VARIABLE .)
    DIVIDE          reduce using rule 26 (number -> VARIABLE .)
    KW_PRINT        reduce using rule 26 (number -> VARIABLE .)
    KW_LET          reduce using rule 26 (number -> VARIABLE .)
    KW_FN           reduce using rule 26 (number -> VARIABLE .)
    VARIABLE        reduce using rule 26 (number -> VARIABLE .)
    LPAREN          reduce using rule 26 (number -> VARIABLE .)
    LBRACKET        reduce using rule 26 (number -> VARIABLE .)
    KW_FOR          reduce using rule 26 (number -> VARIABLE .)
    KW_IF           reduce using rule 26 (number -> VARIABLE .)
    KW_ELSE         reduce using rule 26 (number -> VARIABLE .)
    KW_WHILE        reduce using rule 26 (number -> VARIABLE .)
    INTEGER         reduce using rule 26 (number -> VARIABLE .)
    FLOAT           reduce using rule 26 (number -> VARIABLE .)
    KW_CONST        reduce using rule 26 (number -> VARIABLE .)
    QUOTE           reduce using rule 26 (number -> VARIABLE .)
    $end            reduce using rule 26 (number -> VARIABLE .)
    RBRACE          reduce using rule 26 (number -> VARIABLE .)
    KW_RETURN       reduce using rule 26 (number -> VARIABLE .)
    SEMI            reduce using rule 26 (number -> VARIABLE .)


state 54

    (78) variables -> VARIABLE COMMA . variables
    (77) variables -> . VARIABLE
    (78) variables -> . VARIABLE COMMA variables

    VARIABLE        shift and go to state 99

    variables                      shift and go to state 100

state 55

    (125) linkedlist_methods -> VARIABLE linkedlist_push .

    KW_PRINT        reduce using rule 125 (linkedlist_methods -> VARIABLE linkedlist_push .)
    KW_LET          reduce using rule 125 (linkedlist_methods -> VARIABLE linkedlist_push .)
    KW_FN           reduce using rule 125 (linkedlist_methods -> VARIABLE linkedlist_push .)
    VARIABLE        reduce using rule 125 (linkedlist_methods -> VARIABLE linkedlist_push .)
    LPAREN          reduce using rule 125 (linkedlist_methods -> VARIABLE linkedlist_push .)
    LBRACKET        reduce using rule 125 (linkedlist_methods -> VARIABLE linkedlist_push .)
    KW_FOR          reduce using rule 125 (linkedlist_methods -> VARIABLE linkedlist_push .)
    KW_IF           reduce using rule 125 (linkedlist_methods -> VARIABLE linkedlist_push .)
    KW_ELSE         reduce using rule 125 (linkedlist_methods -> VARIABLE linkedlist_push .)
    KW_WHILE        reduce using rule 125 (linkedlist_methods -> VARIABLE linkedlist_push .)
    INTEGER         reduce using rule 125 (linkedlist_methods -> VARIABLE linkedlist_push .)
    FLOAT           reduce using rule 125 (linkedlist_methods -> VARIABLE linkedlist_push .)
    KW_CONST        reduce using rule 125 (linkedlist_methods -> VARIABLE linkedlist_push .)
    QUOTE           reduce using rule 125 (linkedlist_methods -> VARIABLE linkedlist_push .)
    $end            reduce using rule 125 (linkedlist_methods -> VARIABLE linkedlist_push .)
    RBRACE          reduce using rule 125 (linkedlist_methods -> VARIABLE linkedlist_push .)
    KW_RETURN       reduce using rule 125 (linkedlist_methods -> VARIABLE linkedlist_push .)


state 56

    (126) linkedlist_methods -> VARIABLE linkedlist_remove .

    KW_PRINT        reduce using rule 126 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    KW_LET          reduce using rule 126 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    KW_FN           reduce using rule 126 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    VARIABLE        reduce using rule 126 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    LPAREN          reduce using rule 126 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    LBRACKET        reduce using rule 126 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    KW_FOR          reduce using rule 126 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    KW_IF           reduce using rule 126 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    KW_ELSE         reduce using rule 126 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    KW_WHILE        reduce using rule 126 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    INTEGER         reduce using rule 126 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    FLOAT           reduce using rule 126 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    KW_CONST        reduce using rule 126 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    QUOTE           reduce using rule 126 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    $end            reduce using rule 126 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    RBRACE          reduce using rule 126 (linkedlist_methods -> VARIABLE linkedlist_remove .)
    KW_RETURN       reduce using rule 126 (linkedlist_methods -> VARIABLE linkedlist_remove .)


state 57

    (116) hashmap_methods -> VARIABLE hashmap_insert .

    KW_PRINT        reduce using rule 116 (hashmap_methods -> VARIABLE hashmap_insert .)
    KW_LET          reduce using rule 116 (hashmap_methods -> VARIABLE hashmap_insert .)
    KW_FN           reduce using rule 116 (hashmap_methods -> VARIABLE hashmap_insert .)
    VARIABLE        reduce using rule 116 (hashmap_methods -> VARIABLE hashmap_insert .)
    LPAREN          reduce using rule 116 (hashmap_methods -> VARIABLE hashmap_insert .)
    LBRACKET        reduce using rule 116 (hashmap_methods -> VARIABLE hashmap_insert .)
    KW_FOR          reduce using rule 116 (hashmap_methods -> VARIABLE hashmap_insert .)
    KW_IF           reduce using rule 116 (hashmap_methods -> VARIABLE hashmap_insert .)
    KW_ELSE         reduce using rule 116 (hashmap_methods -> VARIABLE hashmap_insert .)
    KW_WHILE        reduce using rule 116 (hashmap_methods -> VARIABLE hashmap_insert .)
    INTEGER         reduce using rule 116 (hashmap_methods -> VARIABLE hashmap_insert .)
    FLOAT           reduce using rule 116 (hashmap_methods -> VARIABLE hashmap_insert .)
    KW_CONST        reduce using rule 116 (hashmap_methods -> VARIABLE hashmap_insert .)
    QUOTE           reduce using rule 116 (hashmap_methods -> VARIABLE hashmap_insert .)
    $end            reduce using rule 116 (hashmap_methods -> VARIABLE hashmap_insert .)
    RBRACE          reduce using rule 116 (hashmap_methods -> VARIABLE hashmap_insert .)
    KW_RETURN       reduce using rule 116 (hashmap_methods -> VARIABLE hashmap_insert .)


state 58

    (117) hashmap_methods -> VARIABLE hashmap_remove .

    KW_PRINT        reduce using rule 117 (hashmap_methods -> VARIABLE hashmap_remove .)
    KW_LET          reduce using rule 117 (hashmap_methods -> VARIABLE hashmap_remove .)
    KW_FN           reduce using rule 117 (hashmap_methods -> VARIABLE hashmap_remove .)
    VARIABLE        reduce using rule 117 (hashmap_methods -> VARIABLE hashmap_remove .)
    LPAREN          reduce using rule 117 (hashmap_methods -> VARIABLE hashmap_remove .)
    LBRACKET        reduce using rule 117 (hashmap_methods -> VARIABLE hashmap_remove .)
    KW_FOR          reduce using rule 117 (hashmap_methods -> VARIABLE hashmap_remove .)
    KW_IF           reduce using rule 117 (hashmap_methods -> VARIABLE hashmap_remove .)
    KW_ELSE         reduce using rule 117 (hashmap_methods -> VARIABLE hashmap_remove .)
    KW_WHILE        reduce using rule 117 (hashmap_methods -> VARIABLE hashmap_remove .)
    INTEGER         reduce using rule 117 (hashmap_methods -> VARIABLE hashmap_remove .)
    FLOAT           reduce using rule 117 (hashmap_methods -> VARIABLE hashmap_remove .)
    KW_CONST        reduce using rule 117 (hashmap_methods -> VARIABLE hashmap_remove .)
    QUOTE           reduce using rule 117 (hashmap_methods -> VARIABLE hashmap_remove .)
    $end            reduce using rule 117 (hashmap_methods -> VARIABLE hashmap_remove .)
    RBRACE          reduce using rule 117 (hashmap_methods -> VARIABLE hashmap_remove .)
    KW_RETURN       reduce using rule 117 (hashmap_methods -> VARIABLE hashmap_remove .)


state 59

    (139) input -> VARIABLE DOT . KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI
    (127) linkedlist_push -> DOT . KW_PUSH_BACK LPAREN data RPAREN SEMI
    (128) linkedlist_remove -> DOT . KW_REMOVE LPAREN INTEGER RPAREN SEMI
    (118) hashmap_insert -> DOT . KW_INSERT LPAREN mdata RPAREN SEMI
    (119) hashmap_remove -> DOT . KW_REMOVE LPAREN AND data RPAREN SEMI

    KW_READ_LINE    shift and go to state 101
    KW_PUSH_BACK    shift and go to state 102
    KW_REMOVE       shift and go to state 103
    KW_INSERT       shift and go to state 104


state 60

    (140) assignation -> VARIABLE assign_operators . number
    (24) number -> . INTEGER
    (25) number -> . FLOAT
    (26) number -> . VARIABLE

    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 42
    VARIABLE        shift and go to state 53

    number                         shift and go to state 105

state 61

    (41) assign_operators -> EQUALS .

    INTEGER         reduce using rule 41 (assign_operators -> EQUALS .)
    FLOAT           reduce using rule 41 (assign_operators -> EQUALS .)
    VARIABLE        reduce using rule 41 (assign_operators -> EQUALS .)


state 62

    (42) assign_operators -> TIMESEQUAL .

    INTEGER         reduce using rule 42 (assign_operators -> TIMESEQUAL .)
    FLOAT           reduce using rule 42 (assign_operators -> TIMESEQUAL .)
    VARIABLE        reduce using rule 42 (assign_operators -> TIMESEQUAL .)


state 63

    (43) assign_operators -> DIVEQUAL .

    INTEGER         reduce using rule 43 (assign_operators -> DIVEQUAL .)
    FLOAT           reduce using rule 43 (assign_operators -> DIVEQUAL .)
    VARIABLE        reduce using rule 43 (assign_operators -> DIVEQUAL .)


state 64

    (44) assign_operators -> MODULUSEQUAL .

    INTEGER         reduce using rule 44 (assign_operators -> MODULUSEQUAL .)
    FLOAT           reduce using rule 44 (assign_operators -> MODULUSEQUAL .)
    VARIABLE        reduce using rule 44 (assign_operators -> MODULUSEQUAL .)


state 65

    (45) assign_operators -> PLUSEQUAL .

    INTEGER         reduce using rule 45 (assign_operators -> PLUSEQUAL .)
    FLOAT           reduce using rule 45 (assign_operators -> PLUSEQUAL .)
    VARIABLE        reduce using rule 45 (assign_operators -> PLUSEQUAL .)


state 66

    (46) assign_operators -> MINUSEQUAL .

    INTEGER         reduce using rule 46 (assign_operators -> MINUSEQUAL .)
    FLOAT           reduce using rule 46 (assign_operators -> MINUSEQUAL .)
    VARIABLE        reduce using rule 46 (assign_operators -> MINUSEQUAL .)


state 67

    (71) dvariable -> KW_LET VARIABLE . SEMI
    (72) array -> KW_LET VARIABLE . EQUALS LBRACKET mdata RBRACKET SEMI
    (75) array -> KW_LET VARIABLE . COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> KW_LET VARIABLE . COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (141) declare_data_type -> KW_LET VARIABLE . COLON data_type SEMI
    (112) hashmap -> KW_LET VARIABLE . EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (114) hashmap -> KW_LET VARIABLE . EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (121) linkedlist -> KW_LET VARIABLE . COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (123) linkedlist -> KW_LET VARIABLE . EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (85) let_initialization -> KW_LET VARIABLE . EQUALS data
    (86) let_initialization -> KW_LET VARIABLE . COLON data_type EQUALS data
    (89) let_initialization -> KW_LET VARIABLE . EQUALS expression_var
    (90) let_initialization -> KW_LET VARIABLE . COLON data_type EQUALS expression_var
    (138) input_init -> KW_LET VARIABLE . EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN

    SEMI            shift and go to state 106
    EQUALS          shift and go to state 107
    COLON           shift and go to state 108


state 68

    (113) hashmap -> KW_LET KW_MUT . VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (115) hashmap -> KW_LET KW_MUT . VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (122) linkedlist -> KW_LET KW_MUT . VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (124) linkedlist -> KW_LET KW_MUT . VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (87) let_initialization -> KW_LET KW_MUT . VARIABLE EQUALS data
    (88) let_initialization -> KW_LET KW_MUT . VARIABLE COLON data_type EQUALS data
    (91) let_initialization -> KW_LET KW_MUT . VARIABLE EQUALS expression_var
    (92) let_initialization -> KW_LET KW_MUT . VARIABLE COLON data_type EQUALS expression_var

    VARIABLE        shift and go to state 109


state 69

    (96) function -> KW_FN VARIABLE . LPAREN arguments RPAREN LBRACE main_rule RBRACE
    (132) function -> KW_FN VARIABLE . LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE

    LPAREN          shift and go to state 110


state 70

    (73) array -> LBRACKET mdata . RBRACKET

    RBRACKET        shift and go to state 111


state 71

    (74) array -> LBRACKET data . SEMI data RBRACKET
    (66) mdata -> data .
    (67) mdata -> data . COMMA mdata

    SEMI            shift and go to state 112
    RBRACKET        reduce using rule 66 (mdata -> data .)
    COMMA           shift and go to state 113


state 72

    (47) data -> CADENA .

    SEMI            reduce using rule 47 (data -> CADENA .)
    COMMA           reduce using rule 47 (data -> CADENA .)
    RBRACKET        reduce using rule 47 (data -> CADENA .)
    RPAREN          reduce using rule 47 (data -> CADENA .)
    LBRACE          reduce using rule 47 (data -> CADENA .)


state 73

    (48) data -> INTEGER .

    SEMI            reduce using rule 48 (data -> INTEGER .)
    COMMA           reduce using rule 48 (data -> INTEGER .)
    RBRACKET        reduce using rule 48 (data -> INTEGER .)
    RPAREN          reduce using rule 48 (data -> INTEGER .)
    LBRACE          reduce using rule 48 (data -> INTEGER .)


state 74

    (49) data -> CHAR .

    SEMI            reduce using rule 49 (data -> CHAR .)
    COMMA           reduce using rule 49 (data -> CHAR .)
    RBRACKET        reduce using rule 49 (data -> CHAR .)
    RPAREN          reduce using rule 49 (data -> CHAR .)
    LBRACE          reduce using rule 49 (data -> CHAR .)


state 75

    (50) data -> FLOAT .

    SEMI            reduce using rule 50 (data -> FLOAT .)
    COMMA           reduce using rule 50 (data -> FLOAT .)
    RBRACKET        reduce using rule 50 (data -> FLOAT .)
    RPAREN          reduce using rule 50 (data -> FLOAT .)
    LBRACE          reduce using rule 50 (data -> FLOAT .)


state 76

    (51) data -> KW_FALSE .

    SEMI            reduce using rule 51 (data -> KW_FALSE .)
    COMMA           reduce using rule 51 (data -> KW_FALSE .)
    RBRACKET        reduce using rule 51 (data -> KW_FALSE .)
    RPAREN          reduce using rule 51 (data -> KW_FALSE .)
    LBRACE          reduce using rule 51 (data -> KW_FALSE .)


state 77

    (52) data -> KW_TRUE .

    SEMI            reduce using rule 52 (data -> KW_TRUE .)
    COMMA           reduce using rule 52 (data -> KW_TRUE .)
    RBRACKET        reduce using rule 52 (data -> KW_TRUE .)
    RPAREN          reduce using rule 52 (data -> KW_TRUE .)
    LBRACE          reduce using rule 52 (data -> KW_TRUE .)


state 78

    (53) data -> tuple .

    SEMI            reduce using rule 53 (data -> tuple .)
    COMMA           reduce using rule 53 (data -> tuple .)
    RBRACKET        reduce using rule 53 (data -> tuple .)
    RPAREN          reduce using rule 53 (data -> tuple .)
    LBRACE          reduce using rule 53 (data -> tuple .)


state 79

    (80) tuple -> LPAREN . mdata RPAREN
    (66) mdata -> . data
    (67) mdata -> . data COMMA mdata
    (47) data -> . CADENA
    (48) data -> . INTEGER
    (49) data -> . CHAR
    (50) data -> . FLOAT
    (51) data -> . KW_FALSE
    (52) data -> . KW_TRUE
    (53) data -> . tuple
    (80) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 72
    INTEGER         shift and go to state 73
    CHAR            shift and go to state 74
    FLOAT           shift and go to state 75
    KW_FALSE        shift and go to state 76
    KW_TRUE         shift and go to state 77
    LPAREN          shift and go to state 79

    mdata                          shift and go to state 114
    data                           shift and go to state 115
    tuple                          shift and go to state 78

state 80

    (81) initialization -> let_initialization SEMI .

    KW_PRINT        reduce using rule 81 (initialization -> let_initialization SEMI .)
    KW_LET          reduce using rule 81 (initialization -> let_initialization SEMI .)
    KW_FN           reduce using rule 81 (initialization -> let_initialization SEMI .)
    VARIABLE        reduce using rule 81 (initialization -> let_initialization SEMI .)
    LPAREN          reduce using rule 81 (initialization -> let_initialization SEMI .)
    LBRACKET        reduce using rule 81 (initialization -> let_initialization SEMI .)
    KW_FOR          reduce using rule 81 (initialization -> let_initialization SEMI .)
    KW_IF           reduce using rule 81 (initialization -> let_initialization SEMI .)
    KW_ELSE         reduce using rule 81 (initialization -> let_initialization SEMI .)
    KW_WHILE        reduce using rule 81 (initialization -> let_initialization SEMI .)
    INTEGER         reduce using rule 81 (initialization -> let_initialization SEMI .)
    FLOAT           reduce using rule 81 (initialization -> let_initialization SEMI .)
    KW_CONST        reduce using rule 81 (initialization -> let_initialization SEMI .)
    QUOTE           reduce using rule 81 (initialization -> let_initialization SEMI .)
    $end            reduce using rule 81 (initialization -> let_initialization SEMI .)
    RBRACE          reduce using rule 81 (initialization -> let_initialization SEMI .)
    KW_RETURN       reduce using rule 81 (initialization -> let_initialization SEMI .)


state 81

    (82) initialization -> const_initialization SEMI .

    KW_PRINT        reduce using rule 82 (initialization -> const_initialization SEMI .)
    KW_LET          reduce using rule 82 (initialization -> const_initialization SEMI .)
    KW_FN           reduce using rule 82 (initialization -> const_initialization SEMI .)
    VARIABLE        reduce using rule 82 (initialization -> const_initialization SEMI .)
    LPAREN          reduce using rule 82 (initialization -> const_initialization SEMI .)
    LBRACKET        reduce using rule 82 (initialization -> const_initialization SEMI .)
    KW_FOR          reduce using rule 82 (initialization -> const_initialization SEMI .)
    KW_IF           reduce using rule 82 (initialization -> const_initialization SEMI .)
    KW_ELSE         reduce using rule 82 (initialization -> const_initialization SEMI .)
    KW_WHILE        reduce using rule 82 (initialization -> const_initialization SEMI .)
    INTEGER         reduce using rule 82 (initialization -> const_initialization SEMI .)
    FLOAT           reduce using rule 82 (initialization -> const_initialization SEMI .)
    KW_CONST        reduce using rule 82 (initialization -> const_initialization SEMI .)
    QUOTE           reduce using rule 82 (initialization -> const_initialization SEMI .)
    $end            reduce using rule 82 (initialization -> const_initialization SEMI .)
    RBRACE          reduce using rule 82 (initialization -> const_initialization SEMI .)
    KW_RETURN       reduce using rule 82 (initialization -> const_initialization SEMI .)


state 82

    (84) initialization -> input_init SEMI .

    KW_PRINT        reduce using rule 84 (initialization -> input_init SEMI .)
    KW_LET          reduce using rule 84 (initialization -> input_init SEMI .)
    KW_FN           reduce using rule 84 (initialization -> input_init SEMI .)
    VARIABLE        reduce using rule 84 (initialization -> input_init SEMI .)
    LPAREN          reduce using rule 84 (initialization -> input_init SEMI .)
    LBRACKET        reduce using rule 84 (initialization -> input_init SEMI .)
    KW_FOR          reduce using rule 84 (initialization -> input_init SEMI .)
    KW_IF           reduce using rule 84 (initialization -> input_init SEMI .)
    KW_ELSE         reduce using rule 84 (initialization -> input_init SEMI .)
    KW_WHILE        reduce using rule 84 (initialization -> input_init SEMI .)
    INTEGER         reduce using rule 84 (initialization -> input_init SEMI .)
    FLOAT           reduce using rule 84 (initialization -> input_init SEMI .)
    KW_CONST        reduce using rule 84 (initialization -> input_init SEMI .)
    QUOTE           reduce using rule 84 (initialization -> input_init SEMI .)
    $end            reduce using rule 84 (initialization -> input_init SEMI .)
    RBRACE          reduce using rule 84 (initialization -> input_init SEMI .)
    KW_RETURN       reduce using rule 84 (initialization -> input_init SEMI .)


state 83

    (103) for_str -> KW_FOR VARIABLE . KW_IN range LBRACE main_rule RBRACE
    (104) for_str -> KW_FOR VARIABLE . KW_IN VARIABLE LBRACE main_rule RBRACE

    KW_IN           shift and go to state 116


state 84

    (105) for_str_tagged -> label COLON . for_str
    (103) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE
    (104) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE

    KW_FOR          shift and go to state 36

    for_str                        shift and go to state 117

state 85

    (129) if -> KW_IF conditional . LBRACE main_rule RBRACE

    LBRACE          shift and go to state 118


state 86

    (64) conditional -> VARIABLE . comparator data
    (54) comparator -> .
    (55) comparator -> . EQ
    (56) comparator -> . NE
    (57) comparator -> . GE
    (58) comparator -> . LE
    (59) comparator -> . GT
    (60) comparator -> . LT

    CADENA          reduce using rule 54 (comparator -> .)
    INTEGER         reduce using rule 54 (comparator -> .)
    CHAR            reduce using rule 54 (comparator -> .)
    FLOAT           reduce using rule 54 (comparator -> .)
    KW_FALSE        reduce using rule 54 (comparator -> .)
    KW_TRUE         reduce using rule 54 (comparator -> .)
    LPAREN          reduce using rule 54 (comparator -> .)
    EQ              shift and go to state 120
    NE              shift and go to state 121
    GE              shift and go to state 122
    LE              shift and go to state 123
    GT              shift and go to state 124
    LT              shift and go to state 125

    comparator                     shift and go to state 119

state 87

    (65) conditional -> LPAREN . lvariable RPAREN comparator data
    (63) lvariable -> . VARIABLE logic VARIABLE

    VARIABLE        shift and go to state 127

    lvariable                      shift and go to state 126

state 88

    (130) else -> KW_ELSE LBRACE . main_rule RBRACE
    (1) main_rule -> . father_rule
    (2) main_rule -> . father_rule main_rule
    (3) father_rule -> . print
    (4) father_rule -> . dvariable
    (5) father_rule -> . function
    (6) father_rule -> . variables
    (7) father_rule -> . control_str
    (8) father_rule -> . expression
    (9) father_rule -> . void
    (10) father_rule -> . data_str
    (11) father_rule -> . array
    (12) father_rule -> . linkedlist_methods
    (13) father_rule -> . hashmap_methods
    (14) father_rule -> . initialization
    (15) father_rule -> . input
    (16) father_rule -> . assignation
    (17) father_rule -> . declare_data_type
    (68) print -> . KW_PRINT LNOT LPAREN CADENA RPAREN SEMI
    (69) print -> . KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI
    (70) print -> . KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE COLON COLON LT data_type GT LPAREN RPAREN RPAREN SEMI
    (71) dvariable -> . KW_LET VARIABLE SEMI
    (96) function -> . KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE
    (132) function -> . KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE
    (77) variables -> . VARIABLE
    (78) variables -> . VARIABLE COMMA variables
    (97) control_str -> . for_str
    (98) control_str -> . for_str_tagged
    (99) control_str -> . if
    (100) control_str -> . else
    (101) control_str -> . else_if
    (102) control_str -> . while
    (18) expression -> . expression PLUS expression
    (19) expression -> . expression MINUS expression
    (20) expression -> . expression TIMES expression
    (21) expression -> . expression DIVIDE expression
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . number
    (120) void -> .
    (109) data_str -> . array
    (110) data_str -> . hashmap
    (111) data_str -> . linkedlist
    (72) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (73) array -> . LBRACKET mdata RBRACKET
    (74) array -> . LBRACKET data SEMI data RBRACKET
    (75) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (125) linkedlist_methods -> . VARIABLE linkedlist_push
    (126) linkedlist_methods -> . VARIABLE linkedlist_remove
    (116) hashmap_methods -> . VARIABLE hashmap_insert
    (117) hashmap_methods -> . VARIABLE hashmap_remove
    (81) initialization -> . let_initialization SEMI
    (82) initialization -> . const_initialization SEMI
    (83) initialization -> . data_str SEMI
    (84) initialization -> . input_init SEMI
    (139) input -> . VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI
    (140) assignation -> . VARIABLE assign_operators number
    (141) declare_data_type -> . KW_LET VARIABLE COLON data_type SEMI
    (103) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE
    (104) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE
    (105) for_str_tagged -> . label COLON for_str
    (129) if -> . KW_IF conditional LBRACE main_rule RBRACE
    (130) else -> . KW_ELSE LBRACE main_rule RBRACE
    (131) else_if -> . KW_ELSE KW_IF conditional LBRACE main_rule RBRACE
    (79) while -> . KW_WHILE VARIABLE comparator data LBRACE main_rule RBRACE
    (24) number -> . INTEGER
    (25) number -> . FLOAT
    (26) number -> . VARIABLE
    (112) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (113) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (114) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (115) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (121) linkedlist -> . KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (122) linkedlist -> . KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (123) linkedlist -> . KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (124) linkedlist -> . KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (85) let_initialization -> . KW_LET VARIABLE EQUALS data
    (86) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS data
    (87) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS data
    (88) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS data
    (89) let_initialization -> . KW_LET VARIABLE EQUALS expression_var
    (90) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS expression_var
    (91) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS expression_var
    (92) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var
    (93) const_initialization -> . KW_CONST VARIABLE COLON data_type EQUALS data
    (138) input_init -> . KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN
    (108) label -> . QUOTE VARIABLE

  ! shift/reduce conflict for KW_PRINT resolved as shift
  ! shift/reduce conflict for KW_LET resolved as shift
  ! shift/reduce conflict for KW_FN resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for KW_FOR resolved as shift
  ! shift/reduce conflict for KW_IF resolved as shift
  ! shift/reduce conflict for KW_ELSE resolved as shift
  ! shift/reduce conflict for KW_WHILE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for KW_CONST resolved as shift
  ! shift/reduce conflict for QUOTE resolved as shift
    KW_PRINT        shift and go to state 18
    KW_LET          shift and go to state 21
    KW_FN           shift and go to state 22
    VARIABLE        shift and go to state 20
    LPAREN          shift and go to state 19
    RBRACE          reduce using rule 120 (void -> .)
    LBRACKET        shift and go to state 32
    KW_FOR          shift and go to state 36
    KW_IF           shift and go to state 38
    KW_ELSE         shift and go to state 39
    KW_WHILE        shift and go to state 40
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 42
    KW_CONST        shift and go to state 43
    QUOTE           shift and go to state 44

  ! KW_PRINT        [ reduce using rule 120 (void -> .) ]
  ! KW_LET          [ reduce using rule 120 (void -> .) ]
  ! KW_FN           [ reduce using rule 120 (void -> .) ]
  ! VARIABLE        [ reduce using rule 120 (void -> .) ]
  ! LPAREN          [ reduce using rule 120 (void -> .) ]
  ! LBRACKET        [ reduce using rule 120 (void -> .) ]
  ! KW_FOR          [ reduce using rule 120 (void -> .) ]
  ! KW_IF           [ reduce using rule 120 (void -> .) ]
  ! KW_ELSE         [ reduce using rule 120 (void -> .) ]
  ! KW_WHILE        [ reduce using rule 120 (void -> .) ]
  ! INTEGER         [ reduce using rule 120 (void -> .) ]
  ! FLOAT           [ reduce using rule 120 (void -> .) ]
  ! KW_CONST        [ reduce using rule 120 (void -> .) ]
  ! QUOTE           [ reduce using rule 120 (void -> .) ]

    main_rule                      shift and go to state 128
    father_rule                    shift and go to state 2
    print                          shift and go to state 3
    dvariable                      shift and go to state 4
    function                       shift and go to state 5
    variables                      shift and go to state 6
    control_str                    shift and go to state 7
    expression                     shift and go to state 8
    void                           shift and go to state 9
    data_str                       shift and go to state 10
    array                          shift and go to state 11
    linkedlist_methods             shift and go to state 12
    hashmap_methods                shift and go to state 13
    initialization                 shift and go to state 14
    input                          shift and go to state 15
    assignation                    shift and go to state 16
    declare_data_type              shift and go to state 17
    for_str                        shift and go to state 23
    for_str_tagged                 shift and go to state 24
    if                             shift and go to state 25
    else                           shift and go to state 26
    else_if                        shift and go to state 27
    while                          shift and go to state 28
    number                         shift and go to state 29
    hashmap                        shift and go to state 30
    linkedlist                     shift and go to state 31
    let_initialization             shift and go to state 33
    const_initialization           shift and go to state 34
    input_init                     shift and go to state 35
    label                          shift and go to state 37

state 89

    (131) else_if -> KW_ELSE KW_IF . conditional LBRACE main_rule RBRACE
    (64) conditional -> . VARIABLE comparator data
    (65) conditional -> . LPAREN lvariable RPAREN comparator data

    VARIABLE        shift and go to state 86
    LPAREN          shift and go to state 87

    conditional                    shift and go to state 129

state 90

    (79) while -> KW_WHILE VARIABLE . comparator data LBRACE main_rule RBRACE
    (54) comparator -> .
    (55) comparator -> . EQ
    (56) comparator -> . NE
    (57) comparator -> . GE
    (58) comparator -> . LE
    (59) comparator -> . GT
    (60) comparator -> . LT

    CADENA          reduce using rule 54 (comparator -> .)
    INTEGER         reduce using rule 54 (comparator -> .)
    CHAR            reduce using rule 54 (comparator -> .)
    FLOAT           reduce using rule 54 (comparator -> .)
    KW_FALSE        reduce using rule 54 (comparator -> .)
    KW_TRUE         reduce using rule 54 (comparator -> .)
    LPAREN          reduce using rule 54 (comparator -> .)
    EQ              shift and go to state 120
    NE              shift and go to state 121
    GE              shift and go to state 122
    LE              shift and go to state 123
    GT              shift and go to state 124
    LT              shift and go to state 125

    comparator                     shift and go to state 130

state 91

    (93) const_initialization -> KW_CONST VARIABLE . COLON data_type EQUALS data

    COLON           shift and go to state 131


state 92

    (108) label -> QUOTE VARIABLE .

    COLON           reduce using rule 108 (label -> QUOTE VARIABLE .)


state 93

    (18) expression -> expression PLUS expression .
    (18) expression -> expression . PLUS expression
    (19) expression -> expression . MINUS expression
    (20) expression -> expression . TIMES expression
    (21) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    KW_PRINT        reduce using rule 18 (expression -> expression PLUS expression .)
    KW_LET          reduce using rule 18 (expression -> expression PLUS expression .)
    KW_FN           reduce using rule 18 (expression -> expression PLUS expression .)
    VARIABLE        reduce using rule 18 (expression -> expression PLUS expression .)
    LPAREN          reduce using rule 18 (expression -> expression PLUS expression .)
    LBRACKET        reduce using rule 18 (expression -> expression PLUS expression .)
    KW_FOR          reduce using rule 18 (expression -> expression PLUS expression .)
    KW_IF           reduce using rule 18 (expression -> expression PLUS expression .)
    KW_ELSE         reduce using rule 18 (expression -> expression PLUS expression .)
    KW_WHILE        reduce using rule 18 (expression -> expression PLUS expression .)
    INTEGER         reduce using rule 18 (expression -> expression PLUS expression .)
    FLOAT           reduce using rule 18 (expression -> expression PLUS expression .)
    KW_CONST        reduce using rule 18 (expression -> expression PLUS expression .)
    QUOTE           reduce using rule 18 (expression -> expression PLUS expression .)
    $end            reduce using rule 18 (expression -> expression PLUS expression .)
    RBRACE          reduce using rule 18 (expression -> expression PLUS expression .)
    KW_RETURN       reduce using rule 18 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 18 (expression -> expression PLUS expression .)
    SEMI            reduce using rule 18 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49

  ! PLUS            [ reduce using rule 18 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 18 (expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 18 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 18 (expression -> expression PLUS expression .) ]


state 94

    (19) expression -> expression MINUS expression .
    (18) expression -> expression . PLUS expression
    (19) expression -> expression . MINUS expression
    (20) expression -> expression . TIMES expression
    (21) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    KW_PRINT        reduce using rule 19 (expression -> expression MINUS expression .)
    KW_LET          reduce using rule 19 (expression -> expression MINUS expression .)
    KW_FN           reduce using rule 19 (expression -> expression MINUS expression .)
    VARIABLE        reduce using rule 19 (expression -> expression MINUS expression .)
    LPAREN          reduce using rule 19 (expression -> expression MINUS expression .)
    LBRACKET        reduce using rule 19 (expression -> expression MINUS expression .)
    KW_FOR          reduce using rule 19 (expression -> expression MINUS expression .)
    KW_IF           reduce using rule 19 (expression -> expression MINUS expression .)
    KW_ELSE         reduce using rule 19 (expression -> expression MINUS expression .)
    KW_WHILE        reduce using rule 19 (expression -> expression MINUS expression .)
    INTEGER         reduce using rule 19 (expression -> expression MINUS expression .)
    FLOAT           reduce using rule 19 (expression -> expression MINUS expression .)
    KW_CONST        reduce using rule 19 (expression -> expression MINUS expression .)
    QUOTE           reduce using rule 19 (expression -> expression MINUS expression .)
    $end            reduce using rule 19 (expression -> expression MINUS expression .)
    RBRACE          reduce using rule 19 (expression -> expression MINUS expression .)
    KW_RETURN       reduce using rule 19 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 19 (expression -> expression MINUS expression .)
    SEMI            reduce using rule 19 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49

  ! PLUS            [ reduce using rule 19 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 19 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 19 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 19 (expression -> expression MINUS expression .) ]


state 95

    (20) expression -> expression TIMES expression .
    (18) expression -> expression . PLUS expression
    (19) expression -> expression . MINUS expression
    (20) expression -> expression . TIMES expression
    (21) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    KW_PRINT        reduce using rule 20 (expression -> expression TIMES expression .)
    KW_LET          reduce using rule 20 (expression -> expression TIMES expression .)
    KW_FN           reduce using rule 20 (expression -> expression TIMES expression .)
    VARIABLE        reduce using rule 20 (expression -> expression TIMES expression .)
    LPAREN          reduce using rule 20 (expression -> expression TIMES expression .)
    LBRACKET        reduce using rule 20 (expression -> expression TIMES expression .)
    KW_FOR          reduce using rule 20 (expression -> expression TIMES expression .)
    KW_IF           reduce using rule 20 (expression -> expression TIMES expression .)
    KW_ELSE         reduce using rule 20 (expression -> expression TIMES expression .)
    KW_WHILE        reduce using rule 20 (expression -> expression TIMES expression .)
    INTEGER         reduce using rule 20 (expression -> expression TIMES expression .)
    FLOAT           reduce using rule 20 (expression -> expression TIMES expression .)
    KW_CONST        reduce using rule 20 (expression -> expression TIMES expression .)
    QUOTE           reduce using rule 20 (expression -> expression TIMES expression .)
    $end            reduce using rule 20 (expression -> expression TIMES expression .)
    RBRACE          reduce using rule 20 (expression -> expression TIMES expression .)
    KW_RETURN       reduce using rule 20 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 20 (expression -> expression TIMES expression .)
    SEMI            reduce using rule 20 (expression -> expression TIMES expression .)
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49

  ! PLUS            [ reduce using rule 20 (expression -> expression TIMES expression .) ]
  ! MINUS           [ reduce using rule 20 (expression -> expression TIMES expression .) ]
  ! TIMES           [ reduce using rule 20 (expression -> expression TIMES expression .) ]
  ! DIVIDE          [ reduce using rule 20 (expression -> expression TIMES expression .) ]


state 96

    (21) expression -> expression DIVIDE expression .
    (18) expression -> expression . PLUS expression
    (19) expression -> expression . MINUS expression
    (20) expression -> expression . TIMES expression
    (21) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    KW_PRINT        reduce using rule 21 (expression -> expression DIVIDE expression .)
    KW_LET          reduce using rule 21 (expression -> expression DIVIDE expression .)
    KW_FN           reduce using rule 21 (expression -> expression DIVIDE expression .)
    VARIABLE        reduce using rule 21 (expression -> expression DIVIDE expression .)
    LPAREN          reduce using rule 21 (expression -> expression DIVIDE expression .)
    LBRACKET        reduce using rule 21 (expression -> expression DIVIDE expression .)
    KW_FOR          reduce using rule 21 (expression -> expression DIVIDE expression .)
    KW_IF           reduce using rule 21 (expression -> expression DIVIDE expression .)
    KW_ELSE         reduce using rule 21 (expression -> expression DIVIDE expression .)
    KW_WHILE        reduce using rule 21 (expression -> expression DIVIDE expression .)
    INTEGER         reduce using rule 21 (expression -> expression DIVIDE expression .)
    FLOAT           reduce using rule 21 (expression -> expression DIVIDE expression .)
    KW_CONST        reduce using rule 21 (expression -> expression DIVIDE expression .)
    QUOTE           reduce using rule 21 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 21 (expression -> expression DIVIDE expression .)
    RBRACE          reduce using rule 21 (expression -> expression DIVIDE expression .)
    KW_RETURN       reduce using rule 21 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 21 (expression -> expression DIVIDE expression .)
    SEMI            reduce using rule 21 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49

  ! PLUS            [ reduce using rule 21 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 21 (expression -> expression DIVIDE expression .) ]
  ! TIMES           [ reduce using rule 21 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 21 (expression -> expression DIVIDE expression .) ]


state 97

    (68) print -> KW_PRINT LNOT LPAREN . CADENA RPAREN SEMI
    (69) print -> KW_PRINT LNOT LPAREN . CADENA COMMA VARIABLE RPAREN SEMI
    (70) print -> KW_PRINT LNOT LPAREN . CADENA COMMA VARIABLE COLON COLON LT data_type GT LPAREN RPAREN RPAREN SEMI

    CADENA          shift and go to state 132


state 98

    (22) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 22 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 22 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 22 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 22 (expression -> LPAREN expression RPAREN .)
    KW_PRINT        reduce using rule 22 (expression -> LPAREN expression RPAREN .)
    KW_LET          reduce using rule 22 (expression -> LPAREN expression RPAREN .)
    KW_FN           reduce using rule 22 (expression -> LPAREN expression RPAREN .)
    VARIABLE        reduce using rule 22 (expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 22 (expression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 22 (expression -> LPAREN expression RPAREN .)
    KW_FOR          reduce using rule 22 (expression -> LPAREN expression RPAREN .)
    KW_IF           reduce using rule 22 (expression -> LPAREN expression RPAREN .)
    KW_ELSE         reduce using rule 22 (expression -> LPAREN expression RPAREN .)
    KW_WHILE        reduce using rule 22 (expression -> LPAREN expression RPAREN .)
    INTEGER         reduce using rule 22 (expression -> LPAREN expression RPAREN .)
    FLOAT           reduce using rule 22 (expression -> LPAREN expression RPAREN .)
    KW_CONST        reduce using rule 22 (expression -> LPAREN expression RPAREN .)
    QUOTE           reduce using rule 22 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 22 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 22 (expression -> LPAREN expression RPAREN .)
    KW_RETURN       reduce using rule 22 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 22 (expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 22 (expression -> LPAREN expression RPAREN .)


state 99

    (77) variables -> VARIABLE .
    (78) variables -> VARIABLE . COMMA variables

    KW_PRINT        reduce using rule 77 (variables -> VARIABLE .)
    KW_LET          reduce using rule 77 (variables -> VARIABLE .)
    KW_FN           reduce using rule 77 (variables -> VARIABLE .)
    VARIABLE        reduce using rule 77 (variables -> VARIABLE .)
    LPAREN          reduce using rule 77 (variables -> VARIABLE .)
    LBRACKET        reduce using rule 77 (variables -> VARIABLE .)
    KW_FOR          reduce using rule 77 (variables -> VARIABLE .)
    KW_IF           reduce using rule 77 (variables -> VARIABLE .)
    KW_ELSE         reduce using rule 77 (variables -> VARIABLE .)
    KW_WHILE        reduce using rule 77 (variables -> VARIABLE .)
    INTEGER         reduce using rule 77 (variables -> VARIABLE .)
    FLOAT           reduce using rule 77 (variables -> VARIABLE .)
    KW_CONST        reduce using rule 77 (variables -> VARIABLE .)
    QUOTE           reduce using rule 77 (variables -> VARIABLE .)
    $end            reduce using rule 77 (variables -> VARIABLE .)
    RBRACE          reduce using rule 77 (variables -> VARIABLE .)
    KW_RETURN       reduce using rule 77 (variables -> VARIABLE .)
    RPAREN          reduce using rule 77 (variables -> VARIABLE .)
    COMMA           shift and go to state 54


state 100

    (78) variables -> VARIABLE COMMA variables .

    KW_PRINT        reduce using rule 78 (variables -> VARIABLE COMMA variables .)
    KW_LET          reduce using rule 78 (variables -> VARIABLE COMMA variables .)
    KW_FN           reduce using rule 78 (variables -> VARIABLE COMMA variables .)
    VARIABLE        reduce using rule 78 (variables -> VARIABLE COMMA variables .)
    LPAREN          reduce using rule 78 (variables -> VARIABLE COMMA variables .)
    LBRACKET        reduce using rule 78 (variables -> VARIABLE COMMA variables .)
    KW_FOR          reduce using rule 78 (variables -> VARIABLE COMMA variables .)
    KW_IF           reduce using rule 78 (variables -> VARIABLE COMMA variables .)
    KW_ELSE         reduce using rule 78 (variables -> VARIABLE COMMA variables .)
    KW_WHILE        reduce using rule 78 (variables -> VARIABLE COMMA variables .)
    INTEGER         reduce using rule 78 (variables -> VARIABLE COMMA variables .)
    FLOAT           reduce using rule 78 (variables -> VARIABLE COMMA variables .)
    KW_CONST        reduce using rule 78 (variables -> VARIABLE COMMA variables .)
    QUOTE           reduce using rule 78 (variables -> VARIABLE COMMA variables .)
    $end            reduce using rule 78 (variables -> VARIABLE COMMA variables .)
    RBRACE          reduce using rule 78 (variables -> VARIABLE COMMA variables .)
    KW_RETURN       reduce using rule 78 (variables -> VARIABLE COMMA variables .)
    RPAREN          reduce using rule 78 (variables -> VARIABLE COMMA variables .)


state 101

    (139) input -> VARIABLE DOT KW_READ_LINE . LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI

    LPAREN          shift and go to state 133


state 102

    (127) linkedlist_push -> DOT KW_PUSH_BACK . LPAREN data RPAREN SEMI

    LPAREN          shift and go to state 134


state 103

    (128) linkedlist_remove -> DOT KW_REMOVE . LPAREN INTEGER RPAREN SEMI
    (119) hashmap_remove -> DOT KW_REMOVE . LPAREN AND data RPAREN SEMI

    LPAREN          shift and go to state 135


state 104

    (118) hashmap_insert -> DOT KW_INSERT . LPAREN mdata RPAREN SEMI

    LPAREN          shift and go to state 136


state 105

    (140) assignation -> VARIABLE assign_operators number .

    KW_PRINT        reduce using rule 140 (assignation -> VARIABLE assign_operators number .)
    KW_LET          reduce using rule 140 (assignation -> VARIABLE assign_operators number .)
    KW_FN           reduce using rule 140 (assignation -> VARIABLE assign_operators number .)
    VARIABLE        reduce using rule 140 (assignation -> VARIABLE assign_operators number .)
    LPAREN          reduce using rule 140 (assignation -> VARIABLE assign_operators number .)
    LBRACKET        reduce using rule 140 (assignation -> VARIABLE assign_operators number .)
    KW_FOR          reduce using rule 140 (assignation -> VARIABLE assign_operators number .)
    KW_IF           reduce using rule 140 (assignation -> VARIABLE assign_operators number .)
    KW_ELSE         reduce using rule 140 (assignation -> VARIABLE assign_operators number .)
    KW_WHILE        reduce using rule 140 (assignation -> VARIABLE assign_operators number .)
    INTEGER         reduce using rule 140 (assignation -> VARIABLE assign_operators number .)
    FLOAT           reduce using rule 140 (assignation -> VARIABLE assign_operators number .)
    KW_CONST        reduce using rule 140 (assignation -> VARIABLE assign_operators number .)
    QUOTE           reduce using rule 140 (assignation -> VARIABLE assign_operators number .)
    $end            reduce using rule 140 (assignation -> VARIABLE assign_operators number .)
    RBRACE          reduce using rule 140 (assignation -> VARIABLE assign_operators number .)
    KW_RETURN       reduce using rule 140 (assignation -> VARIABLE assign_operators number .)


state 106

    (71) dvariable -> KW_LET VARIABLE SEMI .

    KW_PRINT        reduce using rule 71 (dvariable -> KW_LET VARIABLE SEMI .)
    KW_LET          reduce using rule 71 (dvariable -> KW_LET VARIABLE SEMI .)
    KW_FN           reduce using rule 71 (dvariable -> KW_LET VARIABLE SEMI .)
    VARIABLE        reduce using rule 71 (dvariable -> KW_LET VARIABLE SEMI .)
    LPAREN          reduce using rule 71 (dvariable -> KW_LET VARIABLE SEMI .)
    LBRACKET        reduce using rule 71 (dvariable -> KW_LET VARIABLE SEMI .)
    KW_FOR          reduce using rule 71 (dvariable -> KW_LET VARIABLE SEMI .)
    KW_IF           reduce using rule 71 (dvariable -> KW_LET VARIABLE SEMI .)
    KW_ELSE         reduce using rule 71 (dvariable -> KW_LET VARIABLE SEMI .)
    KW_WHILE        reduce using rule 71 (dvariable -> KW_LET VARIABLE SEMI .)
    INTEGER         reduce using rule 71 (dvariable -> KW_LET VARIABLE SEMI .)
    FLOAT           reduce using rule 71 (dvariable -> KW_LET VARIABLE SEMI .)
    KW_CONST        reduce using rule 71 (dvariable -> KW_LET VARIABLE SEMI .)
    QUOTE           reduce using rule 71 (dvariable -> KW_LET VARIABLE SEMI .)
    $end            reduce using rule 71 (dvariable -> KW_LET VARIABLE SEMI .)
    RBRACE          reduce using rule 71 (dvariable -> KW_LET VARIABLE SEMI .)
    KW_RETURN       reduce using rule 71 (dvariable -> KW_LET VARIABLE SEMI .)


state 107

    (72) array -> KW_LET VARIABLE EQUALS . LBRACKET mdata RBRACKET SEMI
    (112) hashmap -> KW_LET VARIABLE EQUALS . KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (114) hashmap -> KW_LET VARIABLE EQUALS . KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (123) linkedlist -> KW_LET VARIABLE EQUALS . KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (85) let_initialization -> KW_LET VARIABLE EQUALS . data
    (89) let_initialization -> KW_LET VARIABLE EQUALS . expression_var
    (138) input_init -> KW_LET VARIABLE EQUALS . KW_IO COLON COLON KW_STDIN LPAREN RPAREN
    (47) data -> . CADENA
    (48) data -> . INTEGER
    (49) data -> . CHAR
    (50) data -> . FLOAT
    (51) data -> . KW_FALSE
    (52) data -> . KW_TRUE
    (53) data -> . tuple
    (133) expression_var -> . expression
    (134) expression_var -> . data
    (80) tuple -> . LPAREN mdata RPAREN
    (18) expression -> . expression PLUS expression
    (19) expression -> . expression MINUS expression
    (20) expression -> . expression TIMES expression
    (21) expression -> . expression DIVIDE expression
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . number
    (24) number -> . INTEGER
    (25) number -> . FLOAT
    (26) number -> . VARIABLE

    LBRACKET        shift and go to state 137
    KW_HASHMAP      shift and go to state 138
    KW_LINKEDLIST   shift and go to state 140
    KW_IO           shift and go to state 143
    CADENA          shift and go to state 72
    INTEGER         shift and go to state 144
    CHAR            shift and go to state 74
    FLOAT           shift and go to state 145
    KW_FALSE        shift and go to state 76
    KW_TRUE         shift and go to state 77
    LPAREN          shift and go to state 139
    VARIABLE        shift and go to state 53

    data                           shift and go to state 141
    expression_var                 shift and go to state 142
    tuple                          shift and go to state 78
    expression                     shift and go to state 146
    number                         shift and go to state 29

state 108

    (75) array -> KW_LET VARIABLE COLON . LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> KW_LET VARIABLE COLON . LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (141) declare_data_type -> KW_LET VARIABLE COLON . data_type SEMI
    (121) linkedlist -> KW_LET VARIABLE COLON . KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (86) let_initialization -> KW_LET VARIABLE COLON . data_type EQUALS data
    (90) let_initialization -> KW_LET VARIABLE COLON . data_type EQUALS expression_var
    (27) data_type -> . UNSIG_INT_8
    (28) data_type -> . UNSIG_INT_16
    (29) data_type -> . UNSIG_INT_32
    (30) data_type -> . UNSIG_INT_64
    (31) data_type -> . UNSIG_INT_128
    (32) data_type -> . SIG_INT_8
    (33) data_type -> . SIG_INT_16
    (34) data_type -> . SIG_INT_32
    (35) data_type -> . SIG_INT_64
    (36) data_type -> . SIG_INT_128
    (37) data_type -> . FLOAT_32
    (38) data_type -> . FLOAT_64
    (39) data_type -> . KW_BOOLEAN
    (40) data_type -> . KW_STRING

    LBRACKET        shift and go to state 147
    KW_LINKEDLIST   shift and go to state 149
    UNSIG_INT_8     shift and go to state 150
    UNSIG_INT_16    shift and go to state 151
    UNSIG_INT_32    shift and go to state 152
    UNSIG_INT_64    shift and go to state 153
    UNSIG_INT_128   shift and go to state 154
    SIG_INT_8       shift and go to state 155
    SIG_INT_16      shift and go to state 156
    SIG_INT_32      shift and go to state 157
    SIG_INT_64      shift and go to state 158
    SIG_INT_128     shift and go to state 159
    FLOAT_32        shift and go to state 160
    FLOAT_64        shift and go to state 161
    KW_BOOLEAN      shift and go to state 162
    KW_STRING       shift and go to state 163

    data_type                      shift and go to state 148

state 109

    (113) hashmap -> KW_LET KW_MUT VARIABLE . EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (115) hashmap -> KW_LET KW_MUT VARIABLE . EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (122) linkedlist -> KW_LET KW_MUT VARIABLE . COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (124) linkedlist -> KW_LET KW_MUT VARIABLE . EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (87) let_initialization -> KW_LET KW_MUT VARIABLE . EQUALS data
    (88) let_initialization -> KW_LET KW_MUT VARIABLE . COLON data_type EQUALS data
    (91) let_initialization -> KW_LET KW_MUT VARIABLE . EQUALS expression_var
    (92) let_initialization -> KW_LET KW_MUT VARIABLE . COLON data_type EQUALS expression_var

    EQUALS          shift and go to state 164
    COLON           shift and go to state 165


state 110

    (96) function -> KW_FN VARIABLE LPAREN . arguments RPAREN LBRACE main_rule RBRACE
    (132) function -> KW_FN VARIABLE LPAREN . arguments RPAREN MINUS GT data_type LBRACE return RBRACE
    (94) arguments -> . void
    (95) arguments -> . variables
    (120) void -> .
    (77) variables -> . VARIABLE
    (78) variables -> . VARIABLE COMMA variables

    RPAREN          reduce using rule 120 (void -> .)
    VARIABLE        shift and go to state 99

    arguments                      shift and go to state 166
    void                           shift and go to state 167
    variables                      shift and go to state 168

state 111

    (73) array -> LBRACKET mdata RBRACKET .

    KW_PRINT        reduce using rule 73 (array -> LBRACKET mdata RBRACKET .)
    KW_LET          reduce using rule 73 (array -> LBRACKET mdata RBRACKET .)
    KW_FN           reduce using rule 73 (array -> LBRACKET mdata RBRACKET .)
    VARIABLE        reduce using rule 73 (array -> LBRACKET mdata RBRACKET .)
    LPAREN          reduce using rule 73 (array -> LBRACKET mdata RBRACKET .)
    LBRACKET        reduce using rule 73 (array -> LBRACKET mdata RBRACKET .)
    KW_FOR          reduce using rule 73 (array -> LBRACKET mdata RBRACKET .)
    KW_IF           reduce using rule 73 (array -> LBRACKET mdata RBRACKET .)
    KW_ELSE         reduce using rule 73 (array -> LBRACKET mdata RBRACKET .)
    KW_WHILE        reduce using rule 73 (array -> LBRACKET mdata RBRACKET .)
    INTEGER         reduce using rule 73 (array -> LBRACKET mdata RBRACKET .)
    FLOAT           reduce using rule 73 (array -> LBRACKET mdata RBRACKET .)
    KW_CONST        reduce using rule 73 (array -> LBRACKET mdata RBRACKET .)
    QUOTE           reduce using rule 73 (array -> LBRACKET mdata RBRACKET .)
    $end            reduce using rule 73 (array -> LBRACKET mdata RBRACKET .)
    SEMI            reduce using rule 73 (array -> LBRACKET mdata RBRACKET .)
    RBRACE          reduce using rule 73 (array -> LBRACKET mdata RBRACKET .)
    KW_RETURN       reduce using rule 73 (array -> LBRACKET mdata RBRACKET .)
    RPAREN          reduce using rule 73 (array -> LBRACKET mdata RBRACKET .)


state 112

    (74) array -> LBRACKET data SEMI . data RBRACKET
    (47) data -> . CADENA
    (48) data -> . INTEGER
    (49) data -> . CHAR
    (50) data -> . FLOAT
    (51) data -> . KW_FALSE
    (52) data -> . KW_TRUE
    (53) data -> . tuple
    (80) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 72
    INTEGER         shift and go to state 73
    CHAR            shift and go to state 74
    FLOAT           shift and go to state 75
    KW_FALSE        shift and go to state 76
    KW_TRUE         shift and go to state 77
    LPAREN          shift and go to state 79

    data                           shift and go to state 169
    tuple                          shift and go to state 78

state 113

    (67) mdata -> data COMMA . mdata
    (66) mdata -> . data
    (67) mdata -> . data COMMA mdata
    (47) data -> . CADENA
    (48) data -> . INTEGER
    (49) data -> . CHAR
    (50) data -> . FLOAT
    (51) data -> . KW_FALSE
    (52) data -> . KW_TRUE
    (53) data -> . tuple
    (80) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 72
    INTEGER         shift and go to state 73
    CHAR            shift and go to state 74
    FLOAT           shift and go to state 75
    KW_FALSE        shift and go to state 76
    KW_TRUE         shift and go to state 77
    LPAREN          shift and go to state 79

    data                           shift and go to state 115
    mdata                          shift and go to state 170
    tuple                          shift and go to state 78

state 114

    (80) tuple -> LPAREN mdata . RPAREN

    RPAREN          shift and go to state 171


state 115

    (66) mdata -> data .
    (67) mdata -> data . COMMA mdata

    RPAREN          reduce using rule 66 (mdata -> data .)
    RBRACKET        reduce using rule 66 (mdata -> data .)
    COMMA           shift and go to state 113


state 116

    (103) for_str -> KW_FOR VARIABLE KW_IN . range LBRACE main_rule RBRACE
    (104) for_str -> KW_FOR VARIABLE KW_IN . VARIABLE LBRACE main_rule RBRACE
    (106) range -> . INTEGER DOT DOT INTEGER
    (107) range -> . VARIABLE DOT DOT VARIABLE

    VARIABLE        shift and go to state 172
    INTEGER         shift and go to state 174

    range                          shift and go to state 173

state 117

    (105) for_str_tagged -> label COLON for_str .

    KW_PRINT        reduce using rule 105 (for_str_tagged -> label COLON for_str .)
    KW_LET          reduce using rule 105 (for_str_tagged -> label COLON for_str .)
    KW_FN           reduce using rule 105 (for_str_tagged -> label COLON for_str .)
    VARIABLE        reduce using rule 105 (for_str_tagged -> label COLON for_str .)
    LPAREN          reduce using rule 105 (for_str_tagged -> label COLON for_str .)
    LBRACKET        reduce using rule 105 (for_str_tagged -> label COLON for_str .)
    KW_FOR          reduce using rule 105 (for_str_tagged -> label COLON for_str .)
    KW_IF           reduce using rule 105 (for_str_tagged -> label COLON for_str .)
    KW_ELSE         reduce using rule 105 (for_str_tagged -> label COLON for_str .)
    KW_WHILE        reduce using rule 105 (for_str_tagged -> label COLON for_str .)
    INTEGER         reduce using rule 105 (for_str_tagged -> label COLON for_str .)
    FLOAT           reduce using rule 105 (for_str_tagged -> label COLON for_str .)
    KW_CONST        reduce using rule 105 (for_str_tagged -> label COLON for_str .)
    QUOTE           reduce using rule 105 (for_str_tagged -> label COLON for_str .)
    $end            reduce using rule 105 (for_str_tagged -> label COLON for_str .)
    RBRACE          reduce using rule 105 (for_str_tagged -> label COLON for_str .)
    KW_RETURN       reduce using rule 105 (for_str_tagged -> label COLON for_str .)


state 118

    (129) if -> KW_IF conditional LBRACE . main_rule RBRACE
    (1) main_rule -> . father_rule
    (2) main_rule -> . father_rule main_rule
    (3) father_rule -> . print
    (4) father_rule -> . dvariable
    (5) father_rule -> . function
    (6) father_rule -> . variables
    (7) father_rule -> . control_str
    (8) father_rule -> . expression
    (9) father_rule -> . void
    (10) father_rule -> . data_str
    (11) father_rule -> . array
    (12) father_rule -> . linkedlist_methods
    (13) father_rule -> . hashmap_methods
    (14) father_rule -> . initialization
    (15) father_rule -> . input
    (16) father_rule -> . assignation
    (17) father_rule -> . declare_data_type
    (68) print -> . KW_PRINT LNOT LPAREN CADENA RPAREN SEMI
    (69) print -> . KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI
    (70) print -> . KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE COLON COLON LT data_type GT LPAREN RPAREN RPAREN SEMI
    (71) dvariable -> . KW_LET VARIABLE SEMI
    (96) function -> . KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE
    (132) function -> . KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE
    (77) variables -> . VARIABLE
    (78) variables -> . VARIABLE COMMA variables
    (97) control_str -> . for_str
    (98) control_str -> . for_str_tagged
    (99) control_str -> . if
    (100) control_str -> . else
    (101) control_str -> . else_if
    (102) control_str -> . while
    (18) expression -> . expression PLUS expression
    (19) expression -> . expression MINUS expression
    (20) expression -> . expression TIMES expression
    (21) expression -> . expression DIVIDE expression
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . number
    (120) void -> .
    (109) data_str -> . array
    (110) data_str -> . hashmap
    (111) data_str -> . linkedlist
    (72) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (73) array -> . LBRACKET mdata RBRACKET
    (74) array -> . LBRACKET data SEMI data RBRACKET
    (75) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (125) linkedlist_methods -> . VARIABLE linkedlist_push
    (126) linkedlist_methods -> . VARIABLE linkedlist_remove
    (116) hashmap_methods -> . VARIABLE hashmap_insert
    (117) hashmap_methods -> . VARIABLE hashmap_remove
    (81) initialization -> . let_initialization SEMI
    (82) initialization -> . const_initialization SEMI
    (83) initialization -> . data_str SEMI
    (84) initialization -> . input_init SEMI
    (139) input -> . VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI
    (140) assignation -> . VARIABLE assign_operators number
    (141) declare_data_type -> . KW_LET VARIABLE COLON data_type SEMI
    (103) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE
    (104) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE
    (105) for_str_tagged -> . label COLON for_str
    (129) if -> . KW_IF conditional LBRACE main_rule RBRACE
    (130) else -> . KW_ELSE LBRACE main_rule RBRACE
    (131) else_if -> . KW_ELSE KW_IF conditional LBRACE main_rule RBRACE
    (79) while -> . KW_WHILE VARIABLE comparator data LBRACE main_rule RBRACE
    (24) number -> . INTEGER
    (25) number -> . FLOAT
    (26) number -> . VARIABLE
    (112) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (113) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (114) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (115) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (121) linkedlist -> . KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (122) linkedlist -> . KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (123) linkedlist -> . KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (124) linkedlist -> . KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (85) let_initialization -> . KW_LET VARIABLE EQUALS data
    (86) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS data
    (87) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS data
    (88) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS data
    (89) let_initialization -> . KW_LET VARIABLE EQUALS expression_var
    (90) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS expression_var
    (91) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS expression_var
    (92) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var
    (93) const_initialization -> . KW_CONST VARIABLE COLON data_type EQUALS data
    (138) input_init -> . KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN
    (108) label -> . QUOTE VARIABLE

  ! shift/reduce conflict for KW_PRINT resolved as shift
  ! shift/reduce conflict for KW_LET resolved as shift
  ! shift/reduce conflict for KW_FN resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for KW_FOR resolved as shift
  ! shift/reduce conflict for KW_IF resolved as shift
  ! shift/reduce conflict for KW_ELSE resolved as shift
  ! shift/reduce conflict for KW_WHILE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for KW_CONST resolved as shift
  ! shift/reduce conflict for QUOTE resolved as shift
    KW_PRINT        shift and go to state 18
    KW_LET          shift and go to state 21
    KW_FN           shift and go to state 22
    VARIABLE        shift and go to state 20
    LPAREN          shift and go to state 19
    RBRACE          reduce using rule 120 (void -> .)
    LBRACKET        shift and go to state 32
    KW_FOR          shift and go to state 36
    KW_IF           shift and go to state 38
    KW_ELSE         shift and go to state 39
    KW_WHILE        shift and go to state 40
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 42
    KW_CONST        shift and go to state 43
    QUOTE           shift and go to state 44

  ! KW_PRINT        [ reduce using rule 120 (void -> .) ]
  ! KW_LET          [ reduce using rule 120 (void -> .) ]
  ! KW_FN           [ reduce using rule 120 (void -> .) ]
  ! VARIABLE        [ reduce using rule 120 (void -> .) ]
  ! LPAREN          [ reduce using rule 120 (void -> .) ]
  ! LBRACKET        [ reduce using rule 120 (void -> .) ]
  ! KW_FOR          [ reduce using rule 120 (void -> .) ]
  ! KW_IF           [ reduce using rule 120 (void -> .) ]
  ! KW_ELSE         [ reduce using rule 120 (void -> .) ]
  ! KW_WHILE        [ reduce using rule 120 (void -> .) ]
  ! INTEGER         [ reduce using rule 120 (void -> .) ]
  ! FLOAT           [ reduce using rule 120 (void -> .) ]
  ! KW_CONST        [ reduce using rule 120 (void -> .) ]
  ! QUOTE           [ reduce using rule 120 (void -> .) ]

    main_rule                      shift and go to state 175
    father_rule                    shift and go to state 2
    print                          shift and go to state 3
    dvariable                      shift and go to state 4
    function                       shift and go to state 5
    variables                      shift and go to state 6
    control_str                    shift and go to state 7
    expression                     shift and go to state 8
    void                           shift and go to state 9
    data_str                       shift and go to state 10
    array                          shift and go to state 11
    linkedlist_methods             shift and go to state 12
    hashmap_methods                shift and go to state 13
    initialization                 shift and go to state 14
    input                          shift and go to state 15
    assignation                    shift and go to state 16
    declare_data_type              shift and go to state 17
    for_str                        shift and go to state 23
    for_str_tagged                 shift and go to state 24
    if                             shift and go to state 25
    else                           shift and go to state 26
    else_if                        shift and go to state 27
    while                          shift and go to state 28
    number                         shift and go to state 29
    hashmap                        shift and go to state 30
    linkedlist                     shift and go to state 31
    let_initialization             shift and go to state 33
    const_initialization           shift and go to state 34
    input_init                     shift and go to state 35
    label                          shift and go to state 37

state 119

    (64) conditional -> VARIABLE comparator . data
    (47) data -> . CADENA
    (48) data -> . INTEGER
    (49) data -> . CHAR
    (50) data -> . FLOAT
    (51) data -> . KW_FALSE
    (52) data -> . KW_TRUE
    (53) data -> . tuple
    (80) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 72
    INTEGER         shift and go to state 73
    CHAR            shift and go to state 74
    FLOAT           shift and go to state 75
    KW_FALSE        shift and go to state 76
    KW_TRUE         shift and go to state 77
    LPAREN          shift and go to state 79

    data                           shift and go to state 176
    tuple                          shift and go to state 78

state 120

    (55) comparator -> EQ .

    CADENA          reduce using rule 55 (comparator -> EQ .)
    INTEGER         reduce using rule 55 (comparator -> EQ .)
    CHAR            reduce using rule 55 (comparator -> EQ .)
    FLOAT           reduce using rule 55 (comparator -> EQ .)
    KW_FALSE        reduce using rule 55 (comparator -> EQ .)
    KW_TRUE         reduce using rule 55 (comparator -> EQ .)
    LPAREN          reduce using rule 55 (comparator -> EQ .)


state 121

    (56) comparator -> NE .

    CADENA          reduce using rule 56 (comparator -> NE .)
    INTEGER         reduce using rule 56 (comparator -> NE .)
    CHAR            reduce using rule 56 (comparator -> NE .)
    FLOAT           reduce using rule 56 (comparator -> NE .)
    KW_FALSE        reduce using rule 56 (comparator -> NE .)
    KW_TRUE         reduce using rule 56 (comparator -> NE .)
    LPAREN          reduce using rule 56 (comparator -> NE .)


state 122

    (57) comparator -> GE .

    CADENA          reduce using rule 57 (comparator -> GE .)
    INTEGER         reduce using rule 57 (comparator -> GE .)
    CHAR            reduce using rule 57 (comparator -> GE .)
    FLOAT           reduce using rule 57 (comparator -> GE .)
    KW_FALSE        reduce using rule 57 (comparator -> GE .)
    KW_TRUE         reduce using rule 57 (comparator -> GE .)
    LPAREN          reduce using rule 57 (comparator -> GE .)


state 123

    (58) comparator -> LE .

    CADENA          reduce using rule 58 (comparator -> LE .)
    INTEGER         reduce using rule 58 (comparator -> LE .)
    CHAR            reduce using rule 58 (comparator -> LE .)
    FLOAT           reduce using rule 58 (comparator -> LE .)
    KW_FALSE        reduce using rule 58 (comparator -> LE .)
    KW_TRUE         reduce using rule 58 (comparator -> LE .)
    LPAREN          reduce using rule 58 (comparator -> LE .)


state 124

    (59) comparator -> GT .

    CADENA          reduce using rule 59 (comparator -> GT .)
    INTEGER         reduce using rule 59 (comparator -> GT .)
    CHAR            reduce using rule 59 (comparator -> GT .)
    FLOAT           reduce using rule 59 (comparator -> GT .)
    KW_FALSE        reduce using rule 59 (comparator -> GT .)
    KW_TRUE         reduce using rule 59 (comparator -> GT .)
    LPAREN          reduce using rule 59 (comparator -> GT .)


state 125

    (60) comparator -> LT .

    CADENA          reduce using rule 60 (comparator -> LT .)
    INTEGER         reduce using rule 60 (comparator -> LT .)
    CHAR            reduce using rule 60 (comparator -> LT .)
    FLOAT           reduce using rule 60 (comparator -> LT .)
    KW_FALSE        reduce using rule 60 (comparator -> LT .)
    KW_TRUE         reduce using rule 60 (comparator -> LT .)
    LPAREN          reduce using rule 60 (comparator -> LT .)


state 126

    (65) conditional -> LPAREN lvariable . RPAREN comparator data

    RPAREN          shift and go to state 177


state 127

    (63) lvariable -> VARIABLE . logic VARIABLE
    (61) logic -> . LOR
    (62) logic -> . LAND

    LOR             shift and go to state 179
    LAND            shift and go to state 180

    logic                          shift and go to state 178

state 128

    (130) else -> KW_ELSE LBRACE main_rule . RBRACE

    RBRACE          shift and go to state 181


state 129

    (131) else_if -> KW_ELSE KW_IF conditional . LBRACE main_rule RBRACE

    LBRACE          shift and go to state 182


state 130

    (79) while -> KW_WHILE VARIABLE comparator . data LBRACE main_rule RBRACE
    (47) data -> . CADENA
    (48) data -> . INTEGER
    (49) data -> . CHAR
    (50) data -> . FLOAT
    (51) data -> . KW_FALSE
    (52) data -> . KW_TRUE
    (53) data -> . tuple
    (80) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 72
    INTEGER         shift and go to state 73
    CHAR            shift and go to state 74
    FLOAT           shift and go to state 75
    KW_FALSE        shift and go to state 76
    KW_TRUE         shift and go to state 77
    LPAREN          shift and go to state 79

    data                           shift and go to state 183
    tuple                          shift and go to state 78

state 131

    (93) const_initialization -> KW_CONST VARIABLE COLON . data_type EQUALS data
    (27) data_type -> . UNSIG_INT_8
    (28) data_type -> . UNSIG_INT_16
    (29) data_type -> . UNSIG_INT_32
    (30) data_type -> . UNSIG_INT_64
    (31) data_type -> . UNSIG_INT_128
    (32) data_type -> . SIG_INT_8
    (33) data_type -> . SIG_INT_16
    (34) data_type -> . SIG_INT_32
    (35) data_type -> . SIG_INT_64
    (36) data_type -> . SIG_INT_128
    (37) data_type -> . FLOAT_32
    (38) data_type -> . FLOAT_64
    (39) data_type -> . KW_BOOLEAN
    (40) data_type -> . KW_STRING

    UNSIG_INT_8     shift and go to state 150
    UNSIG_INT_16    shift and go to state 151
    UNSIG_INT_32    shift and go to state 152
    UNSIG_INT_64    shift and go to state 153
    UNSIG_INT_128   shift and go to state 154
    SIG_INT_8       shift and go to state 155
    SIG_INT_16      shift and go to state 156
    SIG_INT_32      shift and go to state 157
    SIG_INT_64      shift and go to state 158
    SIG_INT_128     shift and go to state 159
    FLOAT_32        shift and go to state 160
    FLOAT_64        shift and go to state 161
    KW_BOOLEAN      shift and go to state 162
    KW_STRING       shift and go to state 163

    data_type                      shift and go to state 184

state 132

    (68) print -> KW_PRINT LNOT LPAREN CADENA . RPAREN SEMI
    (69) print -> KW_PRINT LNOT LPAREN CADENA . COMMA VARIABLE RPAREN SEMI
    (70) print -> KW_PRINT LNOT LPAREN CADENA . COMMA VARIABLE COLON COLON LT data_type GT LPAREN RPAREN RPAREN SEMI

    RPAREN          shift and go to state 185
    COMMA           shift and go to state 186


state 133

    (139) input -> VARIABLE DOT KW_READ_LINE LPAREN . AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI

    AND             shift and go to state 187


state 134

    (127) linkedlist_push -> DOT KW_PUSH_BACK LPAREN . data RPAREN SEMI
    (47) data -> . CADENA
    (48) data -> . INTEGER
    (49) data -> . CHAR
    (50) data -> . FLOAT
    (51) data -> . KW_FALSE
    (52) data -> . KW_TRUE
    (53) data -> . tuple
    (80) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 72
    INTEGER         shift and go to state 73
    CHAR            shift and go to state 74
    FLOAT           shift and go to state 75
    KW_FALSE        shift and go to state 76
    KW_TRUE         shift and go to state 77
    LPAREN          shift and go to state 79

    data                           shift and go to state 188
    tuple                          shift and go to state 78

state 135

    (128) linkedlist_remove -> DOT KW_REMOVE LPAREN . INTEGER RPAREN SEMI
    (119) hashmap_remove -> DOT KW_REMOVE LPAREN . AND data RPAREN SEMI

    INTEGER         shift and go to state 189
    AND             shift and go to state 190


state 136

    (118) hashmap_insert -> DOT KW_INSERT LPAREN . mdata RPAREN SEMI
    (66) mdata -> . data
    (67) mdata -> . data COMMA mdata
    (47) data -> . CADENA
    (48) data -> . INTEGER
    (49) data -> . CHAR
    (50) data -> . FLOAT
    (51) data -> . KW_FALSE
    (52) data -> . KW_TRUE
    (53) data -> . tuple
    (80) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 72
    INTEGER         shift and go to state 73
    CHAR            shift and go to state 74
    FLOAT           shift and go to state 75
    KW_FALSE        shift and go to state 76
    KW_TRUE         shift and go to state 77
    LPAREN          shift and go to state 79

    mdata                          shift and go to state 191
    data                           shift and go to state 115
    tuple                          shift and go to state 78

state 137

    (72) array -> KW_LET VARIABLE EQUALS LBRACKET . mdata RBRACKET SEMI
    (66) mdata -> . data
    (67) mdata -> . data COMMA mdata
    (47) data -> . CADENA
    (48) data -> . INTEGER
    (49) data -> . CHAR
    (50) data -> . FLOAT
    (51) data -> . KW_FALSE
    (52) data -> . KW_TRUE
    (53) data -> . tuple
    (80) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 72
    INTEGER         shift and go to state 73
    CHAR            shift and go to state 74
    FLOAT           shift and go to state 75
    KW_FALSE        shift and go to state 76
    KW_TRUE         shift and go to state 77
    LPAREN          shift and go to state 79

    mdata                          shift and go to state 192
    data                           shift and go to state 115
    tuple                          shift and go to state 78

state 138

    (112) hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP . COLON COLON KW_NEW LPAREN RPAREN
    (114) hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP . COLON COLON KW_FROM LPAREN array RPAREN

    COLON           shift and go to state 193


state 139

    (80) tuple -> LPAREN . mdata RPAREN
    (22) expression -> LPAREN . expression RPAREN
    (66) mdata -> . data
    (67) mdata -> . data COMMA mdata
    (18) expression -> . expression PLUS expression
    (19) expression -> . expression MINUS expression
    (20) expression -> . expression TIMES expression
    (21) expression -> . expression DIVIDE expression
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . number
    (47) data -> . CADENA
    (48) data -> . INTEGER
    (49) data -> . CHAR
    (50) data -> . FLOAT
    (51) data -> . KW_FALSE
    (52) data -> . KW_TRUE
    (53) data -> . tuple
    (24) number -> . INTEGER
    (25) number -> . FLOAT
    (26) number -> . VARIABLE
    (80) tuple -> . LPAREN mdata RPAREN

    LPAREN          shift and go to state 194
    CADENA          shift and go to state 72
    INTEGER         shift and go to state 144
    CHAR            shift and go to state 74
    FLOAT           shift and go to state 145
    KW_FALSE        shift and go to state 76
    KW_TRUE         shift and go to state 77
    VARIABLE        shift and go to state 53

    mdata                          shift and go to state 114
    expression                     shift and go to state 52
    data                           shift and go to state 115
    number                         shift and go to state 29
    tuple                          shift and go to state 78

state 140

    (123) linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST . COLON COLON KW_FROM LPAREN array RPAREN

    COLON           shift and go to state 195


state 141

    (85) let_initialization -> KW_LET VARIABLE EQUALS data .
    (134) expression_var -> data .

  ! reduce/reduce conflict for SEMI resolved using rule 85 (let_initialization -> KW_LET VARIABLE EQUALS data .)
    SEMI            reduce using rule 85 (let_initialization -> KW_LET VARIABLE EQUALS data .)

  ! SEMI            [ reduce using rule 134 (expression_var -> data .) ]


state 142

    (89) let_initialization -> KW_LET VARIABLE EQUALS expression_var .

    SEMI            reduce using rule 89 (let_initialization -> KW_LET VARIABLE EQUALS expression_var .)


state 143

    (138) input_init -> KW_LET VARIABLE EQUALS KW_IO . COLON COLON KW_STDIN LPAREN RPAREN

    COLON           shift and go to state 196


state 144

    (48) data -> INTEGER .
    (24) number -> INTEGER .

  ! reduce/reduce conflict for SEMI resolved using rule 24 (number -> INTEGER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 24 (number -> INTEGER .)
    COMMA           reduce using rule 48 (data -> INTEGER .)
    PLUS            reduce using rule 24 (number -> INTEGER .)
    MINUS           reduce using rule 24 (number -> INTEGER .)
    TIMES           reduce using rule 24 (number -> INTEGER .)
    DIVIDE          reduce using rule 24 (number -> INTEGER .)
    SEMI            reduce using rule 24 (number -> INTEGER .)
    RPAREN          reduce using rule 24 (number -> INTEGER .)

  ! SEMI            [ reduce using rule 48 (data -> INTEGER .) ]
  ! RPAREN          [ reduce using rule 48 (data -> INTEGER .) ]


state 145

    (50) data -> FLOAT .
    (25) number -> FLOAT .

  ! reduce/reduce conflict for SEMI resolved using rule 25 (number -> FLOAT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 25 (number -> FLOAT .)
    COMMA           reduce using rule 50 (data -> FLOAT .)
    PLUS            reduce using rule 25 (number -> FLOAT .)
    MINUS           reduce using rule 25 (number -> FLOAT .)
    TIMES           reduce using rule 25 (number -> FLOAT .)
    DIVIDE          reduce using rule 25 (number -> FLOAT .)
    SEMI            reduce using rule 25 (number -> FLOAT .)
    RPAREN          reduce using rule 25 (number -> FLOAT .)

  ! SEMI            [ reduce using rule 50 (data -> FLOAT .) ]
  ! RPAREN          [ reduce using rule 50 (data -> FLOAT .) ]


state 146

    (133) expression_var -> expression .
    (18) expression -> expression . PLUS expression
    (19) expression -> expression . MINUS expression
    (20) expression -> expression . TIMES expression
    (21) expression -> expression . DIVIDE expression

    SEMI            reduce using rule 133 (expression_var -> expression .)
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49


state 147

    (75) array -> KW_LET VARIABLE COLON LBRACKET . data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> KW_LET VARIABLE COLON LBRACKET . data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (27) data_type -> . UNSIG_INT_8
    (28) data_type -> . UNSIG_INT_16
    (29) data_type -> . UNSIG_INT_32
    (30) data_type -> . UNSIG_INT_64
    (31) data_type -> . UNSIG_INT_128
    (32) data_type -> . SIG_INT_8
    (33) data_type -> . SIG_INT_16
    (34) data_type -> . SIG_INT_32
    (35) data_type -> . SIG_INT_64
    (36) data_type -> . SIG_INT_128
    (37) data_type -> . FLOAT_32
    (38) data_type -> . FLOAT_64
    (39) data_type -> . KW_BOOLEAN
    (40) data_type -> . KW_STRING

    UNSIG_INT_8     shift and go to state 150
    UNSIG_INT_16    shift and go to state 151
    UNSIG_INT_32    shift and go to state 152
    UNSIG_INT_64    shift and go to state 153
    UNSIG_INT_128   shift and go to state 154
    SIG_INT_8       shift and go to state 155
    SIG_INT_16      shift and go to state 156
    SIG_INT_32      shift and go to state 157
    SIG_INT_64      shift and go to state 158
    SIG_INT_128     shift and go to state 159
    FLOAT_32        shift and go to state 160
    FLOAT_64        shift and go to state 161
    KW_BOOLEAN      shift and go to state 162
    KW_STRING       shift and go to state 163

    data_type                      shift and go to state 197

state 148

    (141) declare_data_type -> KW_LET VARIABLE COLON data_type . SEMI
    (86) let_initialization -> KW_LET VARIABLE COLON data_type . EQUALS data
    (90) let_initialization -> KW_LET VARIABLE COLON data_type . EQUALS expression_var

    SEMI            shift and go to state 198
    EQUALS          shift and go to state 199


state 149

    (121) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST . LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN

    LT              shift and go to state 200


state 150

    (27) data_type -> UNSIG_INT_8 .

    SEMI            reduce using rule 27 (data_type -> UNSIG_INT_8 .)
    EQUALS          reduce using rule 27 (data_type -> UNSIG_INT_8 .)
    GT              reduce using rule 27 (data_type -> UNSIG_INT_8 .)
    LBRACE          reduce using rule 27 (data_type -> UNSIG_INT_8 .)


state 151

    (28) data_type -> UNSIG_INT_16 .

    SEMI            reduce using rule 28 (data_type -> UNSIG_INT_16 .)
    EQUALS          reduce using rule 28 (data_type -> UNSIG_INT_16 .)
    GT              reduce using rule 28 (data_type -> UNSIG_INT_16 .)
    LBRACE          reduce using rule 28 (data_type -> UNSIG_INT_16 .)


state 152

    (29) data_type -> UNSIG_INT_32 .

    SEMI            reduce using rule 29 (data_type -> UNSIG_INT_32 .)
    EQUALS          reduce using rule 29 (data_type -> UNSIG_INT_32 .)
    GT              reduce using rule 29 (data_type -> UNSIG_INT_32 .)
    LBRACE          reduce using rule 29 (data_type -> UNSIG_INT_32 .)


state 153

    (30) data_type -> UNSIG_INT_64 .

    SEMI            reduce using rule 30 (data_type -> UNSIG_INT_64 .)
    EQUALS          reduce using rule 30 (data_type -> UNSIG_INT_64 .)
    GT              reduce using rule 30 (data_type -> UNSIG_INT_64 .)
    LBRACE          reduce using rule 30 (data_type -> UNSIG_INT_64 .)


state 154

    (31) data_type -> UNSIG_INT_128 .

    SEMI            reduce using rule 31 (data_type -> UNSIG_INT_128 .)
    EQUALS          reduce using rule 31 (data_type -> UNSIG_INT_128 .)
    GT              reduce using rule 31 (data_type -> UNSIG_INT_128 .)
    LBRACE          reduce using rule 31 (data_type -> UNSIG_INT_128 .)


state 155

    (32) data_type -> SIG_INT_8 .

    SEMI            reduce using rule 32 (data_type -> SIG_INT_8 .)
    EQUALS          reduce using rule 32 (data_type -> SIG_INT_8 .)
    GT              reduce using rule 32 (data_type -> SIG_INT_8 .)
    LBRACE          reduce using rule 32 (data_type -> SIG_INT_8 .)


state 156

    (33) data_type -> SIG_INT_16 .

    SEMI            reduce using rule 33 (data_type -> SIG_INT_16 .)
    EQUALS          reduce using rule 33 (data_type -> SIG_INT_16 .)
    GT              reduce using rule 33 (data_type -> SIG_INT_16 .)
    LBRACE          reduce using rule 33 (data_type -> SIG_INT_16 .)


state 157

    (34) data_type -> SIG_INT_32 .

    SEMI            reduce using rule 34 (data_type -> SIG_INT_32 .)
    EQUALS          reduce using rule 34 (data_type -> SIG_INT_32 .)
    GT              reduce using rule 34 (data_type -> SIG_INT_32 .)
    LBRACE          reduce using rule 34 (data_type -> SIG_INT_32 .)


state 158

    (35) data_type -> SIG_INT_64 .

    SEMI            reduce using rule 35 (data_type -> SIG_INT_64 .)
    EQUALS          reduce using rule 35 (data_type -> SIG_INT_64 .)
    GT              reduce using rule 35 (data_type -> SIG_INT_64 .)
    LBRACE          reduce using rule 35 (data_type -> SIG_INT_64 .)


state 159

    (36) data_type -> SIG_INT_128 .

    SEMI            reduce using rule 36 (data_type -> SIG_INT_128 .)
    EQUALS          reduce using rule 36 (data_type -> SIG_INT_128 .)
    GT              reduce using rule 36 (data_type -> SIG_INT_128 .)
    LBRACE          reduce using rule 36 (data_type -> SIG_INT_128 .)


state 160

    (37) data_type -> FLOAT_32 .

    SEMI            reduce using rule 37 (data_type -> FLOAT_32 .)
    EQUALS          reduce using rule 37 (data_type -> FLOAT_32 .)
    GT              reduce using rule 37 (data_type -> FLOAT_32 .)
    LBRACE          reduce using rule 37 (data_type -> FLOAT_32 .)


state 161

    (38) data_type -> FLOAT_64 .

    SEMI            reduce using rule 38 (data_type -> FLOAT_64 .)
    EQUALS          reduce using rule 38 (data_type -> FLOAT_64 .)
    GT              reduce using rule 38 (data_type -> FLOAT_64 .)
    LBRACE          reduce using rule 38 (data_type -> FLOAT_64 .)


state 162

    (39) data_type -> KW_BOOLEAN .

    SEMI            reduce using rule 39 (data_type -> KW_BOOLEAN .)
    EQUALS          reduce using rule 39 (data_type -> KW_BOOLEAN .)
    GT              reduce using rule 39 (data_type -> KW_BOOLEAN .)
    LBRACE          reduce using rule 39 (data_type -> KW_BOOLEAN .)


state 163

    (40) data_type -> KW_STRING .

    SEMI            reduce using rule 40 (data_type -> KW_STRING .)
    EQUALS          reduce using rule 40 (data_type -> KW_STRING .)
    GT              reduce using rule 40 (data_type -> KW_STRING .)
    LBRACE          reduce using rule 40 (data_type -> KW_STRING .)


state 164

    (113) hashmap -> KW_LET KW_MUT VARIABLE EQUALS . KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (115) hashmap -> KW_LET KW_MUT VARIABLE EQUALS . KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (124) linkedlist -> KW_LET KW_MUT VARIABLE EQUALS . KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (87) let_initialization -> KW_LET KW_MUT VARIABLE EQUALS . data
    (91) let_initialization -> KW_LET KW_MUT VARIABLE EQUALS . expression_var
    (47) data -> . CADENA
    (48) data -> . INTEGER
    (49) data -> . CHAR
    (50) data -> . FLOAT
    (51) data -> . KW_FALSE
    (52) data -> . KW_TRUE
    (53) data -> . tuple
    (133) expression_var -> . expression
    (134) expression_var -> . data
    (80) tuple -> . LPAREN mdata RPAREN
    (18) expression -> . expression PLUS expression
    (19) expression -> . expression MINUS expression
    (20) expression -> . expression TIMES expression
    (21) expression -> . expression DIVIDE expression
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . number
    (24) number -> . INTEGER
    (25) number -> . FLOAT
    (26) number -> . VARIABLE

    KW_HASHMAP      shift and go to state 201
    KW_LINKEDLIST   shift and go to state 202
    CADENA          shift and go to state 72
    INTEGER         shift and go to state 144
    CHAR            shift and go to state 74
    FLOAT           shift and go to state 145
    KW_FALSE        shift and go to state 76
    KW_TRUE         shift and go to state 77
    LPAREN          shift and go to state 139
    VARIABLE        shift and go to state 53

    data                           shift and go to state 203
    expression_var                 shift and go to state 204
    tuple                          shift and go to state 78
    expression                     shift and go to state 146
    number                         shift and go to state 29

state 165

    (122) linkedlist -> KW_LET KW_MUT VARIABLE COLON . KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (88) let_initialization -> KW_LET KW_MUT VARIABLE COLON . data_type EQUALS data
    (92) let_initialization -> KW_LET KW_MUT VARIABLE COLON . data_type EQUALS expression_var
    (27) data_type -> . UNSIG_INT_8
    (28) data_type -> . UNSIG_INT_16
    (29) data_type -> . UNSIG_INT_32
    (30) data_type -> . UNSIG_INT_64
    (31) data_type -> . UNSIG_INT_128
    (32) data_type -> . SIG_INT_8
    (33) data_type -> . SIG_INT_16
    (34) data_type -> . SIG_INT_32
    (35) data_type -> . SIG_INT_64
    (36) data_type -> . SIG_INT_128
    (37) data_type -> . FLOAT_32
    (38) data_type -> . FLOAT_64
    (39) data_type -> . KW_BOOLEAN
    (40) data_type -> . KW_STRING

    KW_LINKEDLIST   shift and go to state 205
    UNSIG_INT_8     shift and go to state 150
    UNSIG_INT_16    shift and go to state 151
    UNSIG_INT_32    shift and go to state 152
    UNSIG_INT_64    shift and go to state 153
    UNSIG_INT_128   shift and go to state 154
    SIG_INT_8       shift and go to state 155
    SIG_INT_16      shift and go to state 156
    SIG_INT_32      shift and go to state 157
    SIG_INT_64      shift and go to state 158
    SIG_INT_128     shift and go to state 159
    FLOAT_32        shift and go to state 160
    FLOAT_64        shift and go to state 161
    KW_BOOLEAN      shift and go to state 162
    KW_STRING       shift and go to state 163

    data_type                      shift and go to state 206

state 166

    (96) function -> KW_FN VARIABLE LPAREN arguments . RPAREN LBRACE main_rule RBRACE
    (132) function -> KW_FN VARIABLE LPAREN arguments . RPAREN MINUS GT data_type LBRACE return RBRACE

    RPAREN          shift and go to state 207


state 167

    (94) arguments -> void .

    RPAREN          reduce using rule 94 (arguments -> void .)


state 168

    (95) arguments -> variables .

    RPAREN          reduce using rule 95 (arguments -> variables .)


state 169

    (74) array -> LBRACKET data SEMI data . RBRACKET

    RBRACKET        shift and go to state 208


state 170

    (67) mdata -> data COMMA mdata .

    RBRACKET        reduce using rule 67 (mdata -> data COMMA mdata .)
    RPAREN          reduce using rule 67 (mdata -> data COMMA mdata .)


state 171

    (80) tuple -> LPAREN mdata RPAREN .

    SEMI            reduce using rule 80 (tuple -> LPAREN mdata RPAREN .)
    COMMA           reduce using rule 80 (tuple -> LPAREN mdata RPAREN .)
    RBRACKET        reduce using rule 80 (tuple -> LPAREN mdata RPAREN .)
    RPAREN          reduce using rule 80 (tuple -> LPAREN mdata RPAREN .)
    LBRACE          reduce using rule 80 (tuple -> LPAREN mdata RPAREN .)


state 172

    (104) for_str -> KW_FOR VARIABLE KW_IN VARIABLE . LBRACE main_rule RBRACE
    (107) range -> VARIABLE . DOT DOT VARIABLE

    LBRACE          shift and go to state 209
    DOT             shift and go to state 210


state 173

    (103) for_str -> KW_FOR VARIABLE KW_IN range . LBRACE main_rule RBRACE

    LBRACE          shift and go to state 211


state 174

    (106) range -> INTEGER . DOT DOT INTEGER

    DOT             shift and go to state 212


state 175

    (129) if -> KW_IF conditional LBRACE main_rule . RBRACE

    RBRACE          shift and go to state 213


state 176

    (64) conditional -> VARIABLE comparator data .

    LBRACE          reduce using rule 64 (conditional -> VARIABLE comparator data .)


state 177

    (65) conditional -> LPAREN lvariable RPAREN . comparator data
    (54) comparator -> .
    (55) comparator -> . EQ
    (56) comparator -> . NE
    (57) comparator -> . GE
    (58) comparator -> . LE
    (59) comparator -> . GT
    (60) comparator -> . LT

    CADENA          reduce using rule 54 (comparator -> .)
    INTEGER         reduce using rule 54 (comparator -> .)
    CHAR            reduce using rule 54 (comparator -> .)
    FLOAT           reduce using rule 54 (comparator -> .)
    KW_FALSE        reduce using rule 54 (comparator -> .)
    KW_TRUE         reduce using rule 54 (comparator -> .)
    LPAREN          reduce using rule 54 (comparator -> .)
    EQ              shift and go to state 120
    NE              shift and go to state 121
    GE              shift and go to state 122
    LE              shift and go to state 123
    GT              shift and go to state 124
    LT              shift and go to state 125

    comparator                     shift and go to state 214

state 178

    (63) lvariable -> VARIABLE logic . VARIABLE

    VARIABLE        shift and go to state 215


state 179

    (61) logic -> LOR .

    VARIABLE        reduce using rule 61 (logic -> LOR .)


state 180

    (62) logic -> LAND .

    VARIABLE        reduce using rule 62 (logic -> LAND .)


state 181

    (130) else -> KW_ELSE LBRACE main_rule RBRACE .

    KW_PRINT        reduce using rule 130 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    KW_LET          reduce using rule 130 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    KW_FN           reduce using rule 130 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    VARIABLE        reduce using rule 130 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    LPAREN          reduce using rule 130 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    LBRACKET        reduce using rule 130 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    KW_FOR          reduce using rule 130 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    KW_IF           reduce using rule 130 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    KW_ELSE         reduce using rule 130 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    KW_WHILE        reduce using rule 130 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    INTEGER         reduce using rule 130 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    FLOAT           reduce using rule 130 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    KW_CONST        reduce using rule 130 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    QUOTE           reduce using rule 130 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    $end            reduce using rule 130 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    RBRACE          reduce using rule 130 (else -> KW_ELSE LBRACE main_rule RBRACE .)
    KW_RETURN       reduce using rule 130 (else -> KW_ELSE LBRACE main_rule RBRACE .)


state 182

    (131) else_if -> KW_ELSE KW_IF conditional LBRACE . main_rule RBRACE
    (1) main_rule -> . father_rule
    (2) main_rule -> . father_rule main_rule
    (3) father_rule -> . print
    (4) father_rule -> . dvariable
    (5) father_rule -> . function
    (6) father_rule -> . variables
    (7) father_rule -> . control_str
    (8) father_rule -> . expression
    (9) father_rule -> . void
    (10) father_rule -> . data_str
    (11) father_rule -> . array
    (12) father_rule -> . linkedlist_methods
    (13) father_rule -> . hashmap_methods
    (14) father_rule -> . initialization
    (15) father_rule -> . input
    (16) father_rule -> . assignation
    (17) father_rule -> . declare_data_type
    (68) print -> . KW_PRINT LNOT LPAREN CADENA RPAREN SEMI
    (69) print -> . KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI
    (70) print -> . KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE COLON COLON LT data_type GT LPAREN RPAREN RPAREN SEMI
    (71) dvariable -> . KW_LET VARIABLE SEMI
    (96) function -> . KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE
    (132) function -> . KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE
    (77) variables -> . VARIABLE
    (78) variables -> . VARIABLE COMMA variables
    (97) control_str -> . for_str
    (98) control_str -> . for_str_tagged
    (99) control_str -> . if
    (100) control_str -> . else
    (101) control_str -> . else_if
    (102) control_str -> . while
    (18) expression -> . expression PLUS expression
    (19) expression -> . expression MINUS expression
    (20) expression -> . expression TIMES expression
    (21) expression -> . expression DIVIDE expression
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . number
    (120) void -> .
    (109) data_str -> . array
    (110) data_str -> . hashmap
    (111) data_str -> . linkedlist
    (72) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (73) array -> . LBRACKET mdata RBRACKET
    (74) array -> . LBRACKET data SEMI data RBRACKET
    (75) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (125) linkedlist_methods -> . VARIABLE linkedlist_push
    (126) linkedlist_methods -> . VARIABLE linkedlist_remove
    (116) hashmap_methods -> . VARIABLE hashmap_insert
    (117) hashmap_methods -> . VARIABLE hashmap_remove
    (81) initialization -> . let_initialization SEMI
    (82) initialization -> . const_initialization SEMI
    (83) initialization -> . data_str SEMI
    (84) initialization -> . input_init SEMI
    (139) input -> . VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI
    (140) assignation -> . VARIABLE assign_operators number
    (141) declare_data_type -> . KW_LET VARIABLE COLON data_type SEMI
    (103) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE
    (104) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE
    (105) for_str_tagged -> . label COLON for_str
    (129) if -> . KW_IF conditional LBRACE main_rule RBRACE
    (130) else -> . KW_ELSE LBRACE main_rule RBRACE
    (131) else_if -> . KW_ELSE KW_IF conditional LBRACE main_rule RBRACE
    (79) while -> . KW_WHILE VARIABLE comparator data LBRACE main_rule RBRACE
    (24) number -> . INTEGER
    (25) number -> . FLOAT
    (26) number -> . VARIABLE
    (112) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (113) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (114) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (115) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (121) linkedlist -> . KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (122) linkedlist -> . KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (123) linkedlist -> . KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (124) linkedlist -> . KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (85) let_initialization -> . KW_LET VARIABLE EQUALS data
    (86) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS data
    (87) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS data
    (88) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS data
    (89) let_initialization -> . KW_LET VARIABLE EQUALS expression_var
    (90) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS expression_var
    (91) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS expression_var
    (92) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var
    (93) const_initialization -> . KW_CONST VARIABLE COLON data_type EQUALS data
    (138) input_init -> . KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN
    (108) label -> . QUOTE VARIABLE

  ! shift/reduce conflict for KW_PRINT resolved as shift
  ! shift/reduce conflict for KW_LET resolved as shift
  ! shift/reduce conflict for KW_FN resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for KW_FOR resolved as shift
  ! shift/reduce conflict for KW_IF resolved as shift
  ! shift/reduce conflict for KW_ELSE resolved as shift
  ! shift/reduce conflict for KW_WHILE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for KW_CONST resolved as shift
  ! shift/reduce conflict for QUOTE resolved as shift
    KW_PRINT        shift and go to state 18
    KW_LET          shift and go to state 21
    KW_FN           shift and go to state 22
    VARIABLE        shift and go to state 20
    LPAREN          shift and go to state 19
    RBRACE          reduce using rule 120 (void -> .)
    LBRACKET        shift and go to state 32
    KW_FOR          shift and go to state 36
    KW_IF           shift and go to state 38
    KW_ELSE         shift and go to state 39
    KW_WHILE        shift and go to state 40
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 42
    KW_CONST        shift and go to state 43
    QUOTE           shift and go to state 44

  ! KW_PRINT        [ reduce using rule 120 (void -> .) ]
  ! KW_LET          [ reduce using rule 120 (void -> .) ]
  ! KW_FN           [ reduce using rule 120 (void -> .) ]
  ! VARIABLE        [ reduce using rule 120 (void -> .) ]
  ! LPAREN          [ reduce using rule 120 (void -> .) ]
  ! LBRACKET        [ reduce using rule 120 (void -> .) ]
  ! KW_FOR          [ reduce using rule 120 (void -> .) ]
  ! KW_IF           [ reduce using rule 120 (void -> .) ]
  ! KW_ELSE         [ reduce using rule 120 (void -> .) ]
  ! KW_WHILE        [ reduce using rule 120 (void -> .) ]
  ! INTEGER         [ reduce using rule 120 (void -> .) ]
  ! FLOAT           [ reduce using rule 120 (void -> .) ]
  ! KW_CONST        [ reduce using rule 120 (void -> .) ]
  ! QUOTE           [ reduce using rule 120 (void -> .) ]

    main_rule                      shift and go to state 216
    father_rule                    shift and go to state 2
    print                          shift and go to state 3
    dvariable                      shift and go to state 4
    function                       shift and go to state 5
    variables                      shift and go to state 6
    control_str                    shift and go to state 7
    expression                     shift and go to state 8
    void                           shift and go to state 9
    data_str                       shift and go to state 10
    array                          shift and go to state 11
    linkedlist_methods             shift and go to state 12
    hashmap_methods                shift and go to state 13
    initialization                 shift and go to state 14
    input                          shift and go to state 15
    assignation                    shift and go to state 16
    declare_data_type              shift and go to state 17
    for_str                        shift and go to state 23
    for_str_tagged                 shift and go to state 24
    if                             shift and go to state 25
    else                           shift and go to state 26
    else_if                        shift and go to state 27
    while                          shift and go to state 28
    number                         shift and go to state 29
    hashmap                        shift and go to state 30
    linkedlist                     shift and go to state 31
    let_initialization             shift and go to state 33
    const_initialization           shift and go to state 34
    input_init                     shift and go to state 35
    label                          shift and go to state 37

state 183

    (79) while -> KW_WHILE VARIABLE comparator data . LBRACE main_rule RBRACE

    LBRACE          shift and go to state 217


state 184

    (93) const_initialization -> KW_CONST VARIABLE COLON data_type . EQUALS data

    EQUALS          shift and go to state 218


state 185

    (68) print -> KW_PRINT LNOT LPAREN CADENA RPAREN . SEMI

    SEMI            shift and go to state 219


state 186

    (69) print -> KW_PRINT LNOT LPAREN CADENA COMMA . VARIABLE RPAREN SEMI
    (70) print -> KW_PRINT LNOT LPAREN CADENA COMMA . VARIABLE COLON COLON LT data_type GT LPAREN RPAREN RPAREN SEMI

    VARIABLE        shift and go to state 220


state 187

    (139) input -> VARIABLE DOT KW_READ_LINE LPAREN AND . KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI

    KW_MUT          shift and go to state 221


state 188

    (127) linkedlist_push -> DOT KW_PUSH_BACK LPAREN data . RPAREN SEMI

    RPAREN          shift and go to state 222


state 189

    (128) linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER . RPAREN SEMI

    RPAREN          shift and go to state 223


state 190

    (119) hashmap_remove -> DOT KW_REMOVE LPAREN AND . data RPAREN SEMI
    (47) data -> . CADENA
    (48) data -> . INTEGER
    (49) data -> . CHAR
    (50) data -> . FLOAT
    (51) data -> . KW_FALSE
    (52) data -> . KW_TRUE
    (53) data -> . tuple
    (80) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 72
    INTEGER         shift and go to state 73
    CHAR            shift and go to state 74
    FLOAT           shift and go to state 75
    KW_FALSE        shift and go to state 76
    KW_TRUE         shift and go to state 77
    LPAREN          shift and go to state 79

    data                           shift and go to state 224
    tuple                          shift and go to state 78

state 191

    (118) hashmap_insert -> DOT KW_INSERT LPAREN mdata . RPAREN SEMI

    RPAREN          shift and go to state 225


state 192

    (72) array -> KW_LET VARIABLE EQUALS LBRACKET mdata . RBRACKET SEMI

    RBRACKET        shift and go to state 226


state 193

    (112) hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON . COLON KW_NEW LPAREN RPAREN
    (114) hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON . COLON KW_FROM LPAREN array RPAREN

    COLON           shift and go to state 227


state 194

    (22) expression -> LPAREN . expression RPAREN
    (80) tuple -> LPAREN . mdata RPAREN
    (18) expression -> . expression PLUS expression
    (19) expression -> . expression MINUS expression
    (20) expression -> . expression TIMES expression
    (21) expression -> . expression DIVIDE expression
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . number
    (66) mdata -> . data
    (67) mdata -> . data COMMA mdata
    (24) number -> . INTEGER
    (25) number -> . FLOAT
    (26) number -> . VARIABLE
    (47) data -> . CADENA
    (48) data -> . INTEGER
    (49) data -> . CHAR
    (50) data -> . FLOAT
    (51) data -> . KW_FALSE
    (52) data -> . KW_TRUE
    (53) data -> . tuple
    (80) tuple -> . LPAREN mdata RPAREN

    LPAREN          shift and go to state 194
    INTEGER         shift and go to state 228
    FLOAT           shift and go to state 229
    VARIABLE        shift and go to state 53
    CADENA          shift and go to state 72
    CHAR            shift and go to state 74
    KW_FALSE        shift and go to state 76
    KW_TRUE         shift and go to state 77

    expression                     shift and go to state 52
    mdata                          shift and go to state 114
    number                         shift and go to state 29
    data                           shift and go to state 115
    tuple                          shift and go to state 78

state 195

    (123) linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON . COLON KW_FROM LPAREN array RPAREN

    COLON           shift and go to state 230


state 196

    (138) input_init -> KW_LET VARIABLE EQUALS KW_IO COLON . COLON KW_STDIN LPAREN RPAREN

    COLON           shift and go to state 231


state 197

    (75) array -> KW_LET VARIABLE COLON LBRACKET data_type . SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> KW_LET VARIABLE COLON LBRACKET data_type . SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI

    SEMI            shift and go to state 232


state 198

    (141) declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .

    KW_PRINT        reduce using rule 141 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .)
    KW_LET          reduce using rule 141 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .)
    KW_FN           reduce using rule 141 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .)
    VARIABLE        reduce using rule 141 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .)
    LPAREN          reduce using rule 141 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .)
    LBRACKET        reduce using rule 141 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .)
    KW_FOR          reduce using rule 141 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .)
    KW_IF           reduce using rule 141 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .)
    KW_ELSE         reduce using rule 141 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .)
    KW_WHILE        reduce using rule 141 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .)
    INTEGER         reduce using rule 141 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .)
    FLOAT           reduce using rule 141 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .)
    KW_CONST        reduce using rule 141 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .)
    QUOTE           reduce using rule 141 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .)
    $end            reduce using rule 141 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .)
    RBRACE          reduce using rule 141 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .)
    KW_RETURN       reduce using rule 141 (declare_data_type -> KW_LET VARIABLE COLON data_type SEMI .)


state 199

    (86) let_initialization -> KW_LET VARIABLE COLON data_type EQUALS . data
    (90) let_initialization -> KW_LET VARIABLE COLON data_type EQUALS . expression_var
    (47) data -> . CADENA
    (48) data -> . INTEGER
    (49) data -> . CHAR
    (50) data -> . FLOAT
    (51) data -> . KW_FALSE
    (52) data -> . KW_TRUE
    (53) data -> . tuple
    (133) expression_var -> . expression
    (134) expression_var -> . data
    (80) tuple -> . LPAREN mdata RPAREN
    (18) expression -> . expression PLUS expression
    (19) expression -> . expression MINUS expression
    (20) expression -> . expression TIMES expression
    (21) expression -> . expression DIVIDE expression
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . number
    (24) number -> . INTEGER
    (25) number -> . FLOAT
    (26) number -> . VARIABLE

    CADENA          shift and go to state 72
    INTEGER         shift and go to state 144
    CHAR            shift and go to state 74
    FLOAT           shift and go to state 145
    KW_FALSE        shift and go to state 76
    KW_TRUE         shift and go to state 77
    LPAREN          shift and go to state 139
    VARIABLE        shift and go to state 53

    data                           shift and go to state 233
    expression_var                 shift and go to state 234
    tuple                          shift and go to state 78
    expression                     shift and go to state 146
    number                         shift and go to state 29

state 200

    (121) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT . data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (27) data_type -> . UNSIG_INT_8
    (28) data_type -> . UNSIG_INT_16
    (29) data_type -> . UNSIG_INT_32
    (30) data_type -> . UNSIG_INT_64
    (31) data_type -> . UNSIG_INT_128
    (32) data_type -> . SIG_INT_8
    (33) data_type -> . SIG_INT_16
    (34) data_type -> . SIG_INT_32
    (35) data_type -> . SIG_INT_64
    (36) data_type -> . SIG_INT_128
    (37) data_type -> . FLOAT_32
    (38) data_type -> . FLOAT_64
    (39) data_type -> . KW_BOOLEAN
    (40) data_type -> . KW_STRING

    UNSIG_INT_8     shift and go to state 150
    UNSIG_INT_16    shift and go to state 151
    UNSIG_INT_32    shift and go to state 152
    UNSIG_INT_64    shift and go to state 153
    UNSIG_INT_128   shift and go to state 154
    SIG_INT_8       shift and go to state 155
    SIG_INT_16      shift and go to state 156
    SIG_INT_32      shift and go to state 157
    SIG_INT_64      shift and go to state 158
    SIG_INT_128     shift and go to state 159
    FLOAT_32        shift and go to state 160
    FLOAT_64        shift and go to state 161
    KW_BOOLEAN      shift and go to state 162
    KW_STRING       shift and go to state 163

    data_type                      shift and go to state 235

state 201

    (113) hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP . COLON COLON KW_NEW LPAREN RPAREN
    (115) hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP . COLON COLON KW_FROM LPAREN array RPAREN

    COLON           shift and go to state 236


state 202

    (124) linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST . COLON COLON KW_FROM LPAREN array RPAREN

    COLON           shift and go to state 237


state 203

    (87) let_initialization -> KW_LET KW_MUT VARIABLE EQUALS data .
    (134) expression_var -> data .

  ! reduce/reduce conflict for SEMI resolved using rule 87 (let_initialization -> KW_LET KW_MUT VARIABLE EQUALS data .)
    SEMI            reduce using rule 87 (let_initialization -> KW_LET KW_MUT VARIABLE EQUALS data .)

  ! SEMI            [ reduce using rule 134 (expression_var -> data .) ]


state 204

    (91) let_initialization -> KW_LET KW_MUT VARIABLE EQUALS expression_var .

    SEMI            reduce using rule 91 (let_initialization -> KW_LET KW_MUT VARIABLE EQUALS expression_var .)


state 205

    (122) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST . LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN

    LT              shift and go to state 238


state 206

    (88) let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type . EQUALS data
    (92) let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type . EQUALS expression_var

    EQUALS          shift and go to state 239


state 207

    (96) function -> KW_FN VARIABLE LPAREN arguments RPAREN . LBRACE main_rule RBRACE
    (132) function -> KW_FN VARIABLE LPAREN arguments RPAREN . MINUS GT data_type LBRACE return RBRACE

    LBRACE          shift and go to state 240
    MINUS           shift and go to state 241


state 208

    (74) array -> LBRACKET data SEMI data RBRACKET .

    KW_PRINT        reduce using rule 74 (array -> LBRACKET data SEMI data RBRACKET .)
    KW_LET          reduce using rule 74 (array -> LBRACKET data SEMI data RBRACKET .)
    KW_FN           reduce using rule 74 (array -> LBRACKET data SEMI data RBRACKET .)
    VARIABLE        reduce using rule 74 (array -> LBRACKET data SEMI data RBRACKET .)
    LPAREN          reduce using rule 74 (array -> LBRACKET data SEMI data RBRACKET .)
    LBRACKET        reduce using rule 74 (array -> LBRACKET data SEMI data RBRACKET .)
    KW_FOR          reduce using rule 74 (array -> LBRACKET data SEMI data RBRACKET .)
    KW_IF           reduce using rule 74 (array -> LBRACKET data SEMI data RBRACKET .)
    KW_ELSE         reduce using rule 74 (array -> LBRACKET data SEMI data RBRACKET .)
    KW_WHILE        reduce using rule 74 (array -> LBRACKET data SEMI data RBRACKET .)
    INTEGER         reduce using rule 74 (array -> LBRACKET data SEMI data RBRACKET .)
    FLOAT           reduce using rule 74 (array -> LBRACKET data SEMI data RBRACKET .)
    KW_CONST        reduce using rule 74 (array -> LBRACKET data SEMI data RBRACKET .)
    QUOTE           reduce using rule 74 (array -> LBRACKET data SEMI data RBRACKET .)
    $end            reduce using rule 74 (array -> LBRACKET data SEMI data RBRACKET .)
    SEMI            reduce using rule 74 (array -> LBRACKET data SEMI data RBRACKET .)
    RBRACE          reduce using rule 74 (array -> LBRACKET data SEMI data RBRACKET .)
    KW_RETURN       reduce using rule 74 (array -> LBRACKET data SEMI data RBRACKET .)
    RPAREN          reduce using rule 74 (array -> LBRACKET data SEMI data RBRACKET .)


state 209

    (104) for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE . main_rule RBRACE
    (1) main_rule -> . father_rule
    (2) main_rule -> . father_rule main_rule
    (3) father_rule -> . print
    (4) father_rule -> . dvariable
    (5) father_rule -> . function
    (6) father_rule -> . variables
    (7) father_rule -> . control_str
    (8) father_rule -> . expression
    (9) father_rule -> . void
    (10) father_rule -> . data_str
    (11) father_rule -> . array
    (12) father_rule -> . linkedlist_methods
    (13) father_rule -> . hashmap_methods
    (14) father_rule -> . initialization
    (15) father_rule -> . input
    (16) father_rule -> . assignation
    (17) father_rule -> . declare_data_type
    (68) print -> . KW_PRINT LNOT LPAREN CADENA RPAREN SEMI
    (69) print -> . KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI
    (70) print -> . KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE COLON COLON LT data_type GT LPAREN RPAREN RPAREN SEMI
    (71) dvariable -> . KW_LET VARIABLE SEMI
    (96) function -> . KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE
    (132) function -> . KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE
    (77) variables -> . VARIABLE
    (78) variables -> . VARIABLE COMMA variables
    (97) control_str -> . for_str
    (98) control_str -> . for_str_tagged
    (99) control_str -> . if
    (100) control_str -> . else
    (101) control_str -> . else_if
    (102) control_str -> . while
    (18) expression -> . expression PLUS expression
    (19) expression -> . expression MINUS expression
    (20) expression -> . expression TIMES expression
    (21) expression -> . expression DIVIDE expression
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . number
    (120) void -> .
    (109) data_str -> . array
    (110) data_str -> . hashmap
    (111) data_str -> . linkedlist
    (72) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (73) array -> . LBRACKET mdata RBRACKET
    (74) array -> . LBRACKET data SEMI data RBRACKET
    (75) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (125) linkedlist_methods -> . VARIABLE linkedlist_push
    (126) linkedlist_methods -> . VARIABLE linkedlist_remove
    (116) hashmap_methods -> . VARIABLE hashmap_insert
    (117) hashmap_methods -> . VARIABLE hashmap_remove
    (81) initialization -> . let_initialization SEMI
    (82) initialization -> . const_initialization SEMI
    (83) initialization -> . data_str SEMI
    (84) initialization -> . input_init SEMI
    (139) input -> . VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI
    (140) assignation -> . VARIABLE assign_operators number
    (141) declare_data_type -> . KW_LET VARIABLE COLON data_type SEMI
    (103) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE
    (104) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE
    (105) for_str_tagged -> . label COLON for_str
    (129) if -> . KW_IF conditional LBRACE main_rule RBRACE
    (130) else -> . KW_ELSE LBRACE main_rule RBRACE
    (131) else_if -> . KW_ELSE KW_IF conditional LBRACE main_rule RBRACE
    (79) while -> . KW_WHILE VARIABLE comparator data LBRACE main_rule RBRACE
    (24) number -> . INTEGER
    (25) number -> . FLOAT
    (26) number -> . VARIABLE
    (112) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (113) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (114) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (115) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (121) linkedlist -> . KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (122) linkedlist -> . KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (123) linkedlist -> . KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (124) linkedlist -> . KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (85) let_initialization -> . KW_LET VARIABLE EQUALS data
    (86) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS data
    (87) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS data
    (88) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS data
    (89) let_initialization -> . KW_LET VARIABLE EQUALS expression_var
    (90) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS expression_var
    (91) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS expression_var
    (92) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var
    (93) const_initialization -> . KW_CONST VARIABLE COLON data_type EQUALS data
    (138) input_init -> . KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN
    (108) label -> . QUOTE VARIABLE

  ! shift/reduce conflict for KW_PRINT resolved as shift
  ! shift/reduce conflict for KW_LET resolved as shift
  ! shift/reduce conflict for KW_FN resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for KW_FOR resolved as shift
  ! shift/reduce conflict for KW_IF resolved as shift
  ! shift/reduce conflict for KW_ELSE resolved as shift
  ! shift/reduce conflict for KW_WHILE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for KW_CONST resolved as shift
  ! shift/reduce conflict for QUOTE resolved as shift
    KW_PRINT        shift and go to state 18
    KW_LET          shift and go to state 21
    KW_FN           shift and go to state 22
    VARIABLE        shift and go to state 20
    LPAREN          shift and go to state 19
    RBRACE          reduce using rule 120 (void -> .)
    LBRACKET        shift and go to state 32
    KW_FOR          shift and go to state 36
    KW_IF           shift and go to state 38
    KW_ELSE         shift and go to state 39
    KW_WHILE        shift and go to state 40
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 42
    KW_CONST        shift and go to state 43
    QUOTE           shift and go to state 44

  ! KW_PRINT        [ reduce using rule 120 (void -> .) ]
  ! KW_LET          [ reduce using rule 120 (void -> .) ]
  ! KW_FN           [ reduce using rule 120 (void -> .) ]
  ! VARIABLE        [ reduce using rule 120 (void -> .) ]
  ! LPAREN          [ reduce using rule 120 (void -> .) ]
  ! LBRACKET        [ reduce using rule 120 (void -> .) ]
  ! KW_FOR          [ reduce using rule 120 (void -> .) ]
  ! KW_IF           [ reduce using rule 120 (void -> .) ]
  ! KW_ELSE         [ reduce using rule 120 (void -> .) ]
  ! KW_WHILE        [ reduce using rule 120 (void -> .) ]
  ! INTEGER         [ reduce using rule 120 (void -> .) ]
  ! FLOAT           [ reduce using rule 120 (void -> .) ]
  ! KW_CONST        [ reduce using rule 120 (void -> .) ]
  ! QUOTE           [ reduce using rule 120 (void -> .) ]

    main_rule                      shift and go to state 242
    father_rule                    shift and go to state 2
    print                          shift and go to state 3
    dvariable                      shift and go to state 4
    function                       shift and go to state 5
    variables                      shift and go to state 6
    control_str                    shift and go to state 7
    expression                     shift and go to state 8
    void                           shift and go to state 9
    data_str                       shift and go to state 10
    array                          shift and go to state 11
    linkedlist_methods             shift and go to state 12
    hashmap_methods                shift and go to state 13
    initialization                 shift and go to state 14
    input                          shift and go to state 15
    assignation                    shift and go to state 16
    declare_data_type              shift and go to state 17
    for_str                        shift and go to state 23
    for_str_tagged                 shift and go to state 24
    if                             shift and go to state 25
    else                           shift and go to state 26
    else_if                        shift and go to state 27
    while                          shift and go to state 28
    number                         shift and go to state 29
    hashmap                        shift and go to state 30
    linkedlist                     shift and go to state 31
    let_initialization             shift and go to state 33
    const_initialization           shift and go to state 34
    input_init                     shift and go to state 35
    label                          shift and go to state 37

state 210

    (107) range -> VARIABLE DOT . DOT VARIABLE

    DOT             shift and go to state 243


state 211

    (103) for_str -> KW_FOR VARIABLE KW_IN range LBRACE . main_rule RBRACE
    (1) main_rule -> . father_rule
    (2) main_rule -> . father_rule main_rule
    (3) father_rule -> . print
    (4) father_rule -> . dvariable
    (5) father_rule -> . function
    (6) father_rule -> . variables
    (7) father_rule -> . control_str
    (8) father_rule -> . expression
    (9) father_rule -> . void
    (10) father_rule -> . data_str
    (11) father_rule -> . array
    (12) father_rule -> . linkedlist_methods
    (13) father_rule -> . hashmap_methods
    (14) father_rule -> . initialization
    (15) father_rule -> . input
    (16) father_rule -> . assignation
    (17) father_rule -> . declare_data_type
    (68) print -> . KW_PRINT LNOT LPAREN CADENA RPAREN SEMI
    (69) print -> . KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI
    (70) print -> . KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE COLON COLON LT data_type GT LPAREN RPAREN RPAREN SEMI
    (71) dvariable -> . KW_LET VARIABLE SEMI
    (96) function -> . KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE
    (132) function -> . KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE
    (77) variables -> . VARIABLE
    (78) variables -> . VARIABLE COMMA variables
    (97) control_str -> . for_str
    (98) control_str -> . for_str_tagged
    (99) control_str -> . if
    (100) control_str -> . else
    (101) control_str -> . else_if
    (102) control_str -> . while
    (18) expression -> . expression PLUS expression
    (19) expression -> . expression MINUS expression
    (20) expression -> . expression TIMES expression
    (21) expression -> . expression DIVIDE expression
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . number
    (120) void -> .
    (109) data_str -> . array
    (110) data_str -> . hashmap
    (111) data_str -> . linkedlist
    (72) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (73) array -> . LBRACKET mdata RBRACKET
    (74) array -> . LBRACKET data SEMI data RBRACKET
    (75) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (125) linkedlist_methods -> . VARIABLE linkedlist_push
    (126) linkedlist_methods -> . VARIABLE linkedlist_remove
    (116) hashmap_methods -> . VARIABLE hashmap_insert
    (117) hashmap_methods -> . VARIABLE hashmap_remove
    (81) initialization -> . let_initialization SEMI
    (82) initialization -> . const_initialization SEMI
    (83) initialization -> . data_str SEMI
    (84) initialization -> . input_init SEMI
    (139) input -> . VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI
    (140) assignation -> . VARIABLE assign_operators number
    (141) declare_data_type -> . KW_LET VARIABLE COLON data_type SEMI
    (103) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE
    (104) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE
    (105) for_str_tagged -> . label COLON for_str
    (129) if -> . KW_IF conditional LBRACE main_rule RBRACE
    (130) else -> . KW_ELSE LBRACE main_rule RBRACE
    (131) else_if -> . KW_ELSE KW_IF conditional LBRACE main_rule RBRACE
    (79) while -> . KW_WHILE VARIABLE comparator data LBRACE main_rule RBRACE
    (24) number -> . INTEGER
    (25) number -> . FLOAT
    (26) number -> . VARIABLE
    (112) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (113) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (114) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (115) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (121) linkedlist -> . KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (122) linkedlist -> . KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (123) linkedlist -> . KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (124) linkedlist -> . KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (85) let_initialization -> . KW_LET VARIABLE EQUALS data
    (86) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS data
    (87) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS data
    (88) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS data
    (89) let_initialization -> . KW_LET VARIABLE EQUALS expression_var
    (90) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS expression_var
    (91) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS expression_var
    (92) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var
    (93) const_initialization -> . KW_CONST VARIABLE COLON data_type EQUALS data
    (138) input_init -> . KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN
    (108) label -> . QUOTE VARIABLE

  ! shift/reduce conflict for KW_PRINT resolved as shift
  ! shift/reduce conflict for KW_LET resolved as shift
  ! shift/reduce conflict for KW_FN resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for KW_FOR resolved as shift
  ! shift/reduce conflict for KW_IF resolved as shift
  ! shift/reduce conflict for KW_ELSE resolved as shift
  ! shift/reduce conflict for KW_WHILE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for KW_CONST resolved as shift
  ! shift/reduce conflict for QUOTE resolved as shift
    KW_PRINT        shift and go to state 18
    KW_LET          shift and go to state 21
    KW_FN           shift and go to state 22
    VARIABLE        shift and go to state 20
    LPAREN          shift and go to state 19
    RBRACE          reduce using rule 120 (void -> .)
    LBRACKET        shift and go to state 32
    KW_FOR          shift and go to state 36
    KW_IF           shift and go to state 38
    KW_ELSE         shift and go to state 39
    KW_WHILE        shift and go to state 40
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 42
    KW_CONST        shift and go to state 43
    QUOTE           shift and go to state 44

  ! KW_PRINT        [ reduce using rule 120 (void -> .) ]
  ! KW_LET          [ reduce using rule 120 (void -> .) ]
  ! KW_FN           [ reduce using rule 120 (void -> .) ]
  ! VARIABLE        [ reduce using rule 120 (void -> .) ]
  ! LPAREN          [ reduce using rule 120 (void -> .) ]
  ! LBRACKET        [ reduce using rule 120 (void -> .) ]
  ! KW_FOR          [ reduce using rule 120 (void -> .) ]
  ! KW_IF           [ reduce using rule 120 (void -> .) ]
  ! KW_ELSE         [ reduce using rule 120 (void -> .) ]
  ! KW_WHILE        [ reduce using rule 120 (void -> .) ]
  ! INTEGER         [ reduce using rule 120 (void -> .) ]
  ! FLOAT           [ reduce using rule 120 (void -> .) ]
  ! KW_CONST        [ reduce using rule 120 (void -> .) ]
  ! QUOTE           [ reduce using rule 120 (void -> .) ]

    main_rule                      shift and go to state 244
    father_rule                    shift and go to state 2
    print                          shift and go to state 3
    dvariable                      shift and go to state 4
    function                       shift and go to state 5
    variables                      shift and go to state 6
    control_str                    shift and go to state 7
    expression                     shift and go to state 8
    void                           shift and go to state 9
    data_str                       shift and go to state 10
    array                          shift and go to state 11
    linkedlist_methods             shift and go to state 12
    hashmap_methods                shift and go to state 13
    initialization                 shift and go to state 14
    input                          shift and go to state 15
    assignation                    shift and go to state 16
    declare_data_type              shift and go to state 17
    for_str                        shift and go to state 23
    for_str_tagged                 shift and go to state 24
    if                             shift and go to state 25
    else                           shift and go to state 26
    else_if                        shift and go to state 27
    while                          shift and go to state 28
    number                         shift and go to state 29
    hashmap                        shift and go to state 30
    linkedlist                     shift and go to state 31
    let_initialization             shift and go to state 33
    const_initialization           shift and go to state 34
    input_init                     shift and go to state 35
    label                          shift and go to state 37

state 212

    (106) range -> INTEGER DOT . DOT INTEGER

    DOT             shift and go to state 245


state 213

    (129) if -> KW_IF conditional LBRACE main_rule RBRACE .

    KW_PRINT        reduce using rule 129 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    KW_LET          reduce using rule 129 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    KW_FN           reduce using rule 129 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    VARIABLE        reduce using rule 129 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    LPAREN          reduce using rule 129 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    LBRACKET        reduce using rule 129 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    KW_FOR          reduce using rule 129 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    KW_IF           reduce using rule 129 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    KW_ELSE         reduce using rule 129 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    KW_WHILE        reduce using rule 129 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    INTEGER         reduce using rule 129 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    FLOAT           reduce using rule 129 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    KW_CONST        reduce using rule 129 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    QUOTE           reduce using rule 129 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    $end            reduce using rule 129 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    RBRACE          reduce using rule 129 (if -> KW_IF conditional LBRACE main_rule RBRACE .)
    KW_RETURN       reduce using rule 129 (if -> KW_IF conditional LBRACE main_rule RBRACE .)


state 214

    (65) conditional -> LPAREN lvariable RPAREN comparator . data
    (47) data -> . CADENA
    (48) data -> . INTEGER
    (49) data -> . CHAR
    (50) data -> . FLOAT
    (51) data -> . KW_FALSE
    (52) data -> . KW_TRUE
    (53) data -> . tuple
    (80) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 72
    INTEGER         shift and go to state 73
    CHAR            shift and go to state 74
    FLOAT           shift and go to state 75
    KW_FALSE        shift and go to state 76
    KW_TRUE         shift and go to state 77
    LPAREN          shift and go to state 79

    data                           shift and go to state 246
    tuple                          shift and go to state 78

state 215

    (63) lvariable -> VARIABLE logic VARIABLE .

    RPAREN          reduce using rule 63 (lvariable -> VARIABLE logic VARIABLE .)


state 216

    (131) else_if -> KW_ELSE KW_IF conditional LBRACE main_rule . RBRACE

    RBRACE          shift and go to state 247


state 217

    (79) while -> KW_WHILE VARIABLE comparator data LBRACE . main_rule RBRACE
    (1) main_rule -> . father_rule
    (2) main_rule -> . father_rule main_rule
    (3) father_rule -> . print
    (4) father_rule -> . dvariable
    (5) father_rule -> . function
    (6) father_rule -> . variables
    (7) father_rule -> . control_str
    (8) father_rule -> . expression
    (9) father_rule -> . void
    (10) father_rule -> . data_str
    (11) father_rule -> . array
    (12) father_rule -> . linkedlist_methods
    (13) father_rule -> . hashmap_methods
    (14) father_rule -> . initialization
    (15) father_rule -> . input
    (16) father_rule -> . assignation
    (17) father_rule -> . declare_data_type
    (68) print -> . KW_PRINT LNOT LPAREN CADENA RPAREN SEMI
    (69) print -> . KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI
    (70) print -> . KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE COLON COLON LT data_type GT LPAREN RPAREN RPAREN SEMI
    (71) dvariable -> . KW_LET VARIABLE SEMI
    (96) function -> . KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE
    (132) function -> . KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE
    (77) variables -> . VARIABLE
    (78) variables -> . VARIABLE COMMA variables
    (97) control_str -> . for_str
    (98) control_str -> . for_str_tagged
    (99) control_str -> . if
    (100) control_str -> . else
    (101) control_str -> . else_if
    (102) control_str -> . while
    (18) expression -> . expression PLUS expression
    (19) expression -> . expression MINUS expression
    (20) expression -> . expression TIMES expression
    (21) expression -> . expression DIVIDE expression
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . number
    (120) void -> .
    (109) data_str -> . array
    (110) data_str -> . hashmap
    (111) data_str -> . linkedlist
    (72) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (73) array -> . LBRACKET mdata RBRACKET
    (74) array -> . LBRACKET data SEMI data RBRACKET
    (75) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (125) linkedlist_methods -> . VARIABLE linkedlist_push
    (126) linkedlist_methods -> . VARIABLE linkedlist_remove
    (116) hashmap_methods -> . VARIABLE hashmap_insert
    (117) hashmap_methods -> . VARIABLE hashmap_remove
    (81) initialization -> . let_initialization SEMI
    (82) initialization -> . const_initialization SEMI
    (83) initialization -> . data_str SEMI
    (84) initialization -> . input_init SEMI
    (139) input -> . VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI
    (140) assignation -> . VARIABLE assign_operators number
    (141) declare_data_type -> . KW_LET VARIABLE COLON data_type SEMI
    (103) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE
    (104) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE
    (105) for_str_tagged -> . label COLON for_str
    (129) if -> . KW_IF conditional LBRACE main_rule RBRACE
    (130) else -> . KW_ELSE LBRACE main_rule RBRACE
    (131) else_if -> . KW_ELSE KW_IF conditional LBRACE main_rule RBRACE
    (79) while -> . KW_WHILE VARIABLE comparator data LBRACE main_rule RBRACE
    (24) number -> . INTEGER
    (25) number -> . FLOAT
    (26) number -> . VARIABLE
    (112) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (113) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (114) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (115) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (121) linkedlist -> . KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (122) linkedlist -> . KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (123) linkedlist -> . KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (124) linkedlist -> . KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (85) let_initialization -> . KW_LET VARIABLE EQUALS data
    (86) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS data
    (87) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS data
    (88) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS data
    (89) let_initialization -> . KW_LET VARIABLE EQUALS expression_var
    (90) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS expression_var
    (91) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS expression_var
    (92) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var
    (93) const_initialization -> . KW_CONST VARIABLE COLON data_type EQUALS data
    (138) input_init -> . KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN
    (108) label -> . QUOTE VARIABLE

  ! shift/reduce conflict for KW_PRINT resolved as shift
  ! shift/reduce conflict for KW_LET resolved as shift
  ! shift/reduce conflict for KW_FN resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for KW_FOR resolved as shift
  ! shift/reduce conflict for KW_IF resolved as shift
  ! shift/reduce conflict for KW_ELSE resolved as shift
  ! shift/reduce conflict for KW_WHILE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for KW_CONST resolved as shift
  ! shift/reduce conflict for QUOTE resolved as shift
    KW_PRINT        shift and go to state 18
    KW_LET          shift and go to state 21
    KW_FN           shift and go to state 22
    VARIABLE        shift and go to state 20
    LPAREN          shift and go to state 19
    RBRACE          reduce using rule 120 (void -> .)
    LBRACKET        shift and go to state 32
    KW_FOR          shift and go to state 36
    KW_IF           shift and go to state 38
    KW_ELSE         shift and go to state 39
    KW_WHILE        shift and go to state 40
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 42
    KW_CONST        shift and go to state 43
    QUOTE           shift and go to state 44

  ! KW_PRINT        [ reduce using rule 120 (void -> .) ]
  ! KW_LET          [ reduce using rule 120 (void -> .) ]
  ! KW_FN           [ reduce using rule 120 (void -> .) ]
  ! VARIABLE        [ reduce using rule 120 (void -> .) ]
  ! LPAREN          [ reduce using rule 120 (void -> .) ]
  ! LBRACKET        [ reduce using rule 120 (void -> .) ]
  ! KW_FOR          [ reduce using rule 120 (void -> .) ]
  ! KW_IF           [ reduce using rule 120 (void -> .) ]
  ! KW_ELSE         [ reduce using rule 120 (void -> .) ]
  ! KW_WHILE        [ reduce using rule 120 (void -> .) ]
  ! INTEGER         [ reduce using rule 120 (void -> .) ]
  ! FLOAT           [ reduce using rule 120 (void -> .) ]
  ! KW_CONST        [ reduce using rule 120 (void -> .) ]
  ! QUOTE           [ reduce using rule 120 (void -> .) ]

    main_rule                      shift and go to state 248
    father_rule                    shift and go to state 2
    print                          shift and go to state 3
    dvariable                      shift and go to state 4
    function                       shift and go to state 5
    variables                      shift and go to state 6
    control_str                    shift and go to state 7
    expression                     shift and go to state 8
    void                           shift and go to state 9
    data_str                       shift and go to state 10
    array                          shift and go to state 11
    linkedlist_methods             shift and go to state 12
    hashmap_methods                shift and go to state 13
    initialization                 shift and go to state 14
    input                          shift and go to state 15
    assignation                    shift and go to state 16
    declare_data_type              shift and go to state 17
    for_str                        shift and go to state 23
    for_str_tagged                 shift and go to state 24
    if                             shift and go to state 25
    else                           shift and go to state 26
    else_if                        shift and go to state 27
    while                          shift and go to state 28
    number                         shift and go to state 29
    hashmap                        shift and go to state 30
    linkedlist                     shift and go to state 31
    let_initialization             shift and go to state 33
    const_initialization           shift and go to state 34
    input_init                     shift and go to state 35
    label                          shift and go to state 37

state 218

    (93) const_initialization -> KW_CONST VARIABLE COLON data_type EQUALS . data
    (47) data -> . CADENA
    (48) data -> . INTEGER
    (49) data -> . CHAR
    (50) data -> . FLOAT
    (51) data -> . KW_FALSE
    (52) data -> . KW_TRUE
    (53) data -> . tuple
    (80) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 72
    INTEGER         shift and go to state 73
    CHAR            shift and go to state 74
    FLOAT           shift and go to state 75
    KW_FALSE        shift and go to state 76
    KW_TRUE         shift and go to state 77
    LPAREN          shift and go to state 79

    data                           shift and go to state 249
    tuple                          shift and go to state 78

state 219

    (68) print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .

    KW_PRINT        reduce using rule 68 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    KW_LET          reduce using rule 68 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    KW_FN           reduce using rule 68 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    VARIABLE        reduce using rule 68 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    LPAREN          reduce using rule 68 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    LBRACKET        reduce using rule 68 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    KW_FOR          reduce using rule 68 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    KW_IF           reduce using rule 68 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    KW_ELSE         reduce using rule 68 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    KW_WHILE        reduce using rule 68 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    INTEGER         reduce using rule 68 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    FLOAT           reduce using rule 68 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    KW_CONST        reduce using rule 68 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    QUOTE           reduce using rule 68 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    $end            reduce using rule 68 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    RBRACE          reduce using rule 68 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)
    KW_RETURN       reduce using rule 68 (print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI .)


state 220

    (69) print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE . RPAREN SEMI
    (70) print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE . COLON COLON LT data_type GT LPAREN RPAREN RPAREN SEMI

    RPAREN          shift and go to state 250
    COLON           shift and go to state 251


state 221

    (139) input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT . VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI

    VARIABLE        shift and go to state 252


state 222

    (127) linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN . SEMI

    SEMI            shift and go to state 253


state 223

    (128) linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN . SEMI

    SEMI            shift and go to state 254


state 224

    (119) hashmap_remove -> DOT KW_REMOVE LPAREN AND data . RPAREN SEMI

    RPAREN          shift and go to state 255


state 225

    (118) hashmap_insert -> DOT KW_INSERT LPAREN mdata RPAREN . SEMI

    SEMI            shift and go to state 256


state 226

    (72) array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET . SEMI

    SEMI            shift and go to state 257


state 227

    (112) hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON . KW_NEW LPAREN RPAREN
    (114) hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON . KW_FROM LPAREN array RPAREN

    KW_NEW          shift and go to state 258
    KW_FROM         shift and go to state 259


state 228

    (24) number -> INTEGER .
    (48) data -> INTEGER .

  ! reduce/reduce conflict for RPAREN resolved using rule 24 (number -> INTEGER .)
    RPAREN          reduce using rule 24 (number -> INTEGER .)
    PLUS            reduce using rule 24 (number -> INTEGER .)
    MINUS           reduce using rule 24 (number -> INTEGER .)
    TIMES           reduce using rule 24 (number -> INTEGER .)
    DIVIDE          reduce using rule 24 (number -> INTEGER .)
    COMMA           reduce using rule 48 (data -> INTEGER .)

  ! RPAREN          [ reduce using rule 48 (data -> INTEGER .) ]


state 229

    (25) number -> FLOAT .
    (50) data -> FLOAT .

  ! reduce/reduce conflict for RPAREN resolved using rule 25 (number -> FLOAT .)
    RPAREN          reduce using rule 25 (number -> FLOAT .)
    PLUS            reduce using rule 25 (number -> FLOAT .)
    MINUS           reduce using rule 25 (number -> FLOAT .)
    TIMES           reduce using rule 25 (number -> FLOAT .)
    DIVIDE          reduce using rule 25 (number -> FLOAT .)
    COMMA           reduce using rule 50 (data -> FLOAT .)

  ! RPAREN          [ reduce using rule 50 (data -> FLOAT .) ]


state 230

    (123) linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON . KW_FROM LPAREN array RPAREN

    KW_FROM         shift and go to state 260


state 231

    (138) input_init -> KW_LET VARIABLE EQUALS KW_IO COLON COLON . KW_STDIN LPAREN RPAREN

    KW_STDIN        shift and go to state 261


state 232

    (75) array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI . data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI . data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (47) data -> . CADENA
    (48) data -> . INTEGER
    (49) data -> . CHAR
    (50) data -> . FLOAT
    (51) data -> . KW_FALSE
    (52) data -> . KW_TRUE
    (53) data -> . tuple
    (80) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 72
    INTEGER         shift and go to state 73
    CHAR            shift and go to state 74
    FLOAT           shift and go to state 75
    KW_FALSE        shift and go to state 76
    KW_TRUE         shift and go to state 77
    LPAREN          shift and go to state 79

    data                           shift and go to state 262
    tuple                          shift and go to state 78

state 233

    (86) let_initialization -> KW_LET VARIABLE COLON data_type EQUALS data .
    (134) expression_var -> data .

  ! reduce/reduce conflict for SEMI resolved using rule 86 (let_initialization -> KW_LET VARIABLE COLON data_type EQUALS data .)
    SEMI            reduce using rule 86 (let_initialization -> KW_LET VARIABLE COLON data_type EQUALS data .)

  ! SEMI            [ reduce using rule 134 (expression_var -> data .) ]


state 234

    (90) let_initialization -> KW_LET VARIABLE COLON data_type EQUALS expression_var .

    SEMI            reduce using rule 90 (let_initialization -> KW_LET VARIABLE COLON data_type EQUALS expression_var .)


state 235

    (121) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type . GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN

    GT              shift and go to state 263


state 236

    (113) hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON . COLON KW_NEW LPAREN RPAREN
    (115) hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON . COLON KW_FROM LPAREN array RPAREN

    COLON           shift and go to state 264


state 237

    (124) linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON . COLON KW_FROM LPAREN array RPAREN

    COLON           shift and go to state 265


state 238

    (122) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT . data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (27) data_type -> . UNSIG_INT_8
    (28) data_type -> . UNSIG_INT_16
    (29) data_type -> . UNSIG_INT_32
    (30) data_type -> . UNSIG_INT_64
    (31) data_type -> . UNSIG_INT_128
    (32) data_type -> . SIG_INT_8
    (33) data_type -> . SIG_INT_16
    (34) data_type -> . SIG_INT_32
    (35) data_type -> . SIG_INT_64
    (36) data_type -> . SIG_INT_128
    (37) data_type -> . FLOAT_32
    (38) data_type -> . FLOAT_64
    (39) data_type -> . KW_BOOLEAN
    (40) data_type -> . KW_STRING

    UNSIG_INT_8     shift and go to state 150
    UNSIG_INT_16    shift and go to state 151
    UNSIG_INT_32    shift and go to state 152
    UNSIG_INT_64    shift and go to state 153
    UNSIG_INT_128   shift and go to state 154
    SIG_INT_8       shift and go to state 155
    SIG_INT_16      shift and go to state 156
    SIG_INT_32      shift and go to state 157
    SIG_INT_64      shift and go to state 158
    SIG_INT_128     shift and go to state 159
    FLOAT_32        shift and go to state 160
    FLOAT_64        shift and go to state 161
    KW_BOOLEAN      shift and go to state 162
    KW_STRING       shift and go to state 163

    data_type                      shift and go to state 266

state 239

    (88) let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS . data
    (92) let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS . expression_var
    (47) data -> . CADENA
    (48) data -> . INTEGER
    (49) data -> . CHAR
    (50) data -> . FLOAT
    (51) data -> . KW_FALSE
    (52) data -> . KW_TRUE
    (53) data -> . tuple
    (133) expression_var -> . expression
    (134) expression_var -> . data
    (80) tuple -> . LPAREN mdata RPAREN
    (18) expression -> . expression PLUS expression
    (19) expression -> . expression MINUS expression
    (20) expression -> . expression TIMES expression
    (21) expression -> . expression DIVIDE expression
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . number
    (24) number -> . INTEGER
    (25) number -> . FLOAT
    (26) number -> . VARIABLE

    CADENA          shift and go to state 72
    INTEGER         shift and go to state 144
    CHAR            shift and go to state 74
    FLOAT           shift and go to state 145
    KW_FALSE        shift and go to state 76
    KW_TRUE         shift and go to state 77
    LPAREN          shift and go to state 139
    VARIABLE        shift and go to state 53

    data                           shift and go to state 267
    expression_var                 shift and go to state 268
    tuple                          shift and go to state 78
    expression                     shift and go to state 146
    number                         shift and go to state 29

state 240

    (96) function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE . main_rule RBRACE
    (1) main_rule -> . father_rule
    (2) main_rule -> . father_rule main_rule
    (3) father_rule -> . print
    (4) father_rule -> . dvariable
    (5) father_rule -> . function
    (6) father_rule -> . variables
    (7) father_rule -> . control_str
    (8) father_rule -> . expression
    (9) father_rule -> . void
    (10) father_rule -> . data_str
    (11) father_rule -> . array
    (12) father_rule -> . linkedlist_methods
    (13) father_rule -> . hashmap_methods
    (14) father_rule -> . initialization
    (15) father_rule -> . input
    (16) father_rule -> . assignation
    (17) father_rule -> . declare_data_type
    (68) print -> . KW_PRINT LNOT LPAREN CADENA RPAREN SEMI
    (69) print -> . KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI
    (70) print -> . KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE COLON COLON LT data_type GT LPAREN RPAREN RPAREN SEMI
    (71) dvariable -> . KW_LET VARIABLE SEMI
    (96) function -> . KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE
    (132) function -> . KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE
    (77) variables -> . VARIABLE
    (78) variables -> . VARIABLE COMMA variables
    (97) control_str -> . for_str
    (98) control_str -> . for_str_tagged
    (99) control_str -> . if
    (100) control_str -> . else
    (101) control_str -> . else_if
    (102) control_str -> . while
    (18) expression -> . expression PLUS expression
    (19) expression -> . expression MINUS expression
    (20) expression -> . expression TIMES expression
    (21) expression -> . expression DIVIDE expression
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . number
    (120) void -> .
    (109) data_str -> . array
    (110) data_str -> . hashmap
    (111) data_str -> . linkedlist
    (72) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (73) array -> . LBRACKET mdata RBRACKET
    (74) array -> . LBRACKET data SEMI data RBRACKET
    (75) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (125) linkedlist_methods -> . VARIABLE linkedlist_push
    (126) linkedlist_methods -> . VARIABLE linkedlist_remove
    (116) hashmap_methods -> . VARIABLE hashmap_insert
    (117) hashmap_methods -> . VARIABLE hashmap_remove
    (81) initialization -> . let_initialization SEMI
    (82) initialization -> . const_initialization SEMI
    (83) initialization -> . data_str SEMI
    (84) initialization -> . input_init SEMI
    (139) input -> . VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI
    (140) assignation -> . VARIABLE assign_operators number
    (141) declare_data_type -> . KW_LET VARIABLE COLON data_type SEMI
    (103) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE
    (104) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE
    (105) for_str_tagged -> . label COLON for_str
    (129) if -> . KW_IF conditional LBRACE main_rule RBRACE
    (130) else -> . KW_ELSE LBRACE main_rule RBRACE
    (131) else_if -> . KW_ELSE KW_IF conditional LBRACE main_rule RBRACE
    (79) while -> . KW_WHILE VARIABLE comparator data LBRACE main_rule RBRACE
    (24) number -> . INTEGER
    (25) number -> . FLOAT
    (26) number -> . VARIABLE
    (112) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (113) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (114) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (115) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (121) linkedlist -> . KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (122) linkedlist -> . KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (123) linkedlist -> . KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (124) linkedlist -> . KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (85) let_initialization -> . KW_LET VARIABLE EQUALS data
    (86) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS data
    (87) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS data
    (88) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS data
    (89) let_initialization -> . KW_LET VARIABLE EQUALS expression_var
    (90) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS expression_var
    (91) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS expression_var
    (92) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var
    (93) const_initialization -> . KW_CONST VARIABLE COLON data_type EQUALS data
    (138) input_init -> . KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN
    (108) label -> . QUOTE VARIABLE

  ! shift/reduce conflict for KW_PRINT resolved as shift
  ! shift/reduce conflict for KW_LET resolved as shift
  ! shift/reduce conflict for KW_FN resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for KW_FOR resolved as shift
  ! shift/reduce conflict for KW_IF resolved as shift
  ! shift/reduce conflict for KW_ELSE resolved as shift
  ! shift/reduce conflict for KW_WHILE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for KW_CONST resolved as shift
  ! shift/reduce conflict for QUOTE resolved as shift
    KW_PRINT        shift and go to state 18
    KW_LET          shift and go to state 21
    KW_FN           shift and go to state 22
    VARIABLE        shift and go to state 20
    LPAREN          shift and go to state 19
    RBRACE          reduce using rule 120 (void -> .)
    LBRACKET        shift and go to state 32
    KW_FOR          shift and go to state 36
    KW_IF           shift and go to state 38
    KW_ELSE         shift and go to state 39
    KW_WHILE        shift and go to state 40
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 42
    KW_CONST        shift and go to state 43
    QUOTE           shift and go to state 44

  ! KW_PRINT        [ reduce using rule 120 (void -> .) ]
  ! KW_LET          [ reduce using rule 120 (void -> .) ]
  ! KW_FN           [ reduce using rule 120 (void -> .) ]
  ! VARIABLE        [ reduce using rule 120 (void -> .) ]
  ! LPAREN          [ reduce using rule 120 (void -> .) ]
  ! LBRACKET        [ reduce using rule 120 (void -> .) ]
  ! KW_FOR          [ reduce using rule 120 (void -> .) ]
  ! KW_IF           [ reduce using rule 120 (void -> .) ]
  ! KW_ELSE         [ reduce using rule 120 (void -> .) ]
  ! KW_WHILE        [ reduce using rule 120 (void -> .) ]
  ! INTEGER         [ reduce using rule 120 (void -> .) ]
  ! FLOAT           [ reduce using rule 120 (void -> .) ]
  ! KW_CONST        [ reduce using rule 120 (void -> .) ]
  ! QUOTE           [ reduce using rule 120 (void -> .) ]

    main_rule                      shift and go to state 269
    father_rule                    shift and go to state 2
    print                          shift and go to state 3
    dvariable                      shift and go to state 4
    function                       shift and go to state 5
    variables                      shift and go to state 6
    control_str                    shift and go to state 7
    expression                     shift and go to state 8
    void                           shift and go to state 9
    data_str                       shift and go to state 10
    array                          shift and go to state 11
    linkedlist_methods             shift and go to state 12
    hashmap_methods                shift and go to state 13
    initialization                 shift and go to state 14
    input                          shift and go to state 15
    assignation                    shift and go to state 16
    declare_data_type              shift and go to state 17
    for_str                        shift and go to state 23
    for_str_tagged                 shift and go to state 24
    if                             shift and go to state 25
    else                           shift and go to state 26
    else_if                        shift and go to state 27
    while                          shift and go to state 28
    number                         shift and go to state 29
    hashmap                        shift and go to state 30
    linkedlist                     shift and go to state 31
    let_initialization             shift and go to state 33
    const_initialization           shift and go to state 34
    input_init                     shift and go to state 35
    label                          shift and go to state 37

state 241

    (132) function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS . GT data_type LBRACE return RBRACE

    GT              shift and go to state 270


state 242

    (104) for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule . RBRACE

    RBRACE          shift and go to state 271


state 243

    (107) range -> VARIABLE DOT DOT . VARIABLE

    VARIABLE        shift and go to state 272


state 244

    (103) for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule . RBRACE

    RBRACE          shift and go to state 273


state 245

    (106) range -> INTEGER DOT DOT . INTEGER

    INTEGER         shift and go to state 274


state 246

    (65) conditional -> LPAREN lvariable RPAREN comparator data .

    LBRACE          reduce using rule 65 (conditional -> LPAREN lvariable RPAREN comparator data .)


state 247

    (131) else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .

    KW_PRINT        reduce using rule 131 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    KW_LET          reduce using rule 131 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    KW_FN           reduce using rule 131 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    VARIABLE        reduce using rule 131 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    LPAREN          reduce using rule 131 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    LBRACKET        reduce using rule 131 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    KW_FOR          reduce using rule 131 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    KW_IF           reduce using rule 131 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    KW_ELSE         reduce using rule 131 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    KW_WHILE        reduce using rule 131 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    INTEGER         reduce using rule 131 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    FLOAT           reduce using rule 131 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    KW_CONST        reduce using rule 131 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    QUOTE           reduce using rule 131 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    $end            reduce using rule 131 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    RBRACE          reduce using rule 131 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)
    KW_RETURN       reduce using rule 131 (else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE .)


state 248

    (79) while -> KW_WHILE VARIABLE comparator data LBRACE main_rule . RBRACE

    RBRACE          shift and go to state 275


state 249

    (93) const_initialization -> KW_CONST VARIABLE COLON data_type EQUALS data .

    SEMI            reduce using rule 93 (const_initialization -> KW_CONST VARIABLE COLON data_type EQUALS data .)


state 250

    (69) print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN . SEMI

    SEMI            shift and go to state 276


state 251

    (70) print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE COLON . COLON LT data_type GT LPAREN RPAREN RPAREN SEMI

    COLON           shift and go to state 277


state 252

    (139) input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE . RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI

    RPAREN          shift and go to state 278


state 253

    (127) linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .

    KW_PRINT        reduce using rule 127 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    KW_LET          reduce using rule 127 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    KW_FN           reduce using rule 127 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    VARIABLE        reduce using rule 127 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    LPAREN          reduce using rule 127 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    LBRACKET        reduce using rule 127 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    KW_FOR          reduce using rule 127 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    KW_IF           reduce using rule 127 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    KW_ELSE         reduce using rule 127 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    KW_WHILE        reduce using rule 127 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    INTEGER         reduce using rule 127 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    FLOAT           reduce using rule 127 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    KW_CONST        reduce using rule 127 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    QUOTE           reduce using rule 127 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    $end            reduce using rule 127 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    RBRACE          reduce using rule 127 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)
    KW_RETURN       reduce using rule 127 (linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI .)


state 254

    (128) linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .

    KW_PRINT        reduce using rule 128 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    KW_LET          reduce using rule 128 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    KW_FN           reduce using rule 128 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    VARIABLE        reduce using rule 128 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    LPAREN          reduce using rule 128 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    LBRACKET        reduce using rule 128 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    KW_FOR          reduce using rule 128 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    KW_IF           reduce using rule 128 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    KW_ELSE         reduce using rule 128 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    KW_WHILE        reduce using rule 128 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    INTEGER         reduce using rule 128 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    FLOAT           reduce using rule 128 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    KW_CONST        reduce using rule 128 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    QUOTE           reduce using rule 128 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    $end            reduce using rule 128 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    RBRACE          reduce using rule 128 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)
    KW_RETURN       reduce using rule 128 (linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI .)


state 255

    (119) hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN . SEMI

    SEMI            shift and go to state 279


state 256

    (118) hashmap_insert -> DOT KW_INSERT LPAREN mdata RPAREN SEMI .

    KW_PRINT        reduce using rule 118 (hashmap_insert -> DOT KW_INSERT LPAREN mdata RPAREN SEMI .)
    KW_LET          reduce using rule 118 (hashmap_insert -> DOT KW_INSERT LPAREN mdata RPAREN SEMI .)
    KW_FN           reduce using rule 118 (hashmap_insert -> DOT KW_INSERT LPAREN mdata RPAREN SEMI .)
    VARIABLE        reduce using rule 118 (hashmap_insert -> DOT KW_INSERT LPAREN mdata RPAREN SEMI .)
    LPAREN          reduce using rule 118 (hashmap_insert -> DOT KW_INSERT LPAREN mdata RPAREN SEMI .)
    LBRACKET        reduce using rule 118 (hashmap_insert -> DOT KW_INSERT LPAREN mdata RPAREN SEMI .)
    KW_FOR          reduce using rule 118 (hashmap_insert -> DOT KW_INSERT LPAREN mdata RPAREN SEMI .)
    KW_IF           reduce using rule 118 (hashmap_insert -> DOT KW_INSERT LPAREN mdata RPAREN SEMI .)
    KW_ELSE         reduce using rule 118 (hashmap_insert -> DOT KW_INSERT LPAREN mdata RPAREN SEMI .)
    KW_WHILE        reduce using rule 118 (hashmap_insert -> DOT KW_INSERT LPAREN mdata RPAREN SEMI .)
    INTEGER         reduce using rule 118 (hashmap_insert -> DOT KW_INSERT LPAREN mdata RPAREN SEMI .)
    FLOAT           reduce using rule 118 (hashmap_insert -> DOT KW_INSERT LPAREN mdata RPAREN SEMI .)
    KW_CONST        reduce using rule 118 (hashmap_insert -> DOT KW_INSERT LPAREN mdata RPAREN SEMI .)
    QUOTE           reduce using rule 118 (hashmap_insert -> DOT KW_INSERT LPAREN mdata RPAREN SEMI .)
    $end            reduce using rule 118 (hashmap_insert -> DOT KW_INSERT LPAREN mdata RPAREN SEMI .)
    RBRACE          reduce using rule 118 (hashmap_insert -> DOT KW_INSERT LPAREN mdata RPAREN SEMI .)
    KW_RETURN       reduce using rule 118 (hashmap_insert -> DOT KW_INSERT LPAREN mdata RPAREN SEMI .)


state 257

    (72) array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .

    KW_PRINT        reduce using rule 72 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_LET          reduce using rule 72 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_FN           reduce using rule 72 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    VARIABLE        reduce using rule 72 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    LPAREN          reduce using rule 72 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    LBRACKET        reduce using rule 72 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_FOR          reduce using rule 72 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_IF           reduce using rule 72 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_ELSE         reduce using rule 72 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_WHILE        reduce using rule 72 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    INTEGER         reduce using rule 72 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    FLOAT           reduce using rule 72 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_CONST        reduce using rule 72 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    QUOTE           reduce using rule 72 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    $end            reduce using rule 72 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    SEMI            reduce using rule 72 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    RBRACE          reduce using rule 72 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_RETURN       reduce using rule 72 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)
    RPAREN          reduce using rule 72 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI .)


state 258

    (112) hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW . LPAREN RPAREN

    LPAREN          shift and go to state 280


state 259

    (114) hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM . LPAREN array RPAREN

    LPAREN          shift and go to state 281


state 260

    (123) linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM . LPAREN array RPAREN

    LPAREN          shift and go to state 282


state 261

    (138) input_init -> KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN . LPAREN RPAREN

    LPAREN          shift and go to state 283


state 262

    (75) array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data . RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data . RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI

    RBRACKET        shift and go to state 284


state 263

    (121) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT . EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN

    EQUALS          shift and go to state 285


state 264

    (113) hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON . KW_NEW LPAREN RPAREN
    (115) hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON . KW_FROM LPAREN array RPAREN

    KW_NEW          shift and go to state 286
    KW_FROM         shift and go to state 287


state 265

    (124) linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON . KW_FROM LPAREN array RPAREN

    KW_FROM         shift and go to state 288


state 266

    (122) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type . GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN

    GT              shift and go to state 289


state 267

    (88) let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS data .
    (134) expression_var -> data .

  ! reduce/reduce conflict for SEMI resolved using rule 88 (let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS data .)
    SEMI            reduce using rule 88 (let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS data .)

  ! SEMI            [ reduce using rule 134 (expression_var -> data .) ]


state 268

    (92) let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var .

    SEMI            reduce using rule 92 (let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var .)


state 269

    (96) function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule . RBRACE

    RBRACE          shift and go to state 290


state 270

    (132) function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT . data_type LBRACE return RBRACE
    (27) data_type -> . UNSIG_INT_8
    (28) data_type -> . UNSIG_INT_16
    (29) data_type -> . UNSIG_INT_32
    (30) data_type -> . UNSIG_INT_64
    (31) data_type -> . UNSIG_INT_128
    (32) data_type -> . SIG_INT_8
    (33) data_type -> . SIG_INT_16
    (34) data_type -> . SIG_INT_32
    (35) data_type -> . SIG_INT_64
    (36) data_type -> . SIG_INT_128
    (37) data_type -> . FLOAT_32
    (38) data_type -> . FLOAT_64
    (39) data_type -> . KW_BOOLEAN
    (40) data_type -> . KW_STRING

    UNSIG_INT_8     shift and go to state 150
    UNSIG_INT_16    shift and go to state 151
    UNSIG_INT_32    shift and go to state 152
    UNSIG_INT_64    shift and go to state 153
    UNSIG_INT_128   shift and go to state 154
    SIG_INT_8       shift and go to state 155
    SIG_INT_16      shift and go to state 156
    SIG_INT_32      shift and go to state 157
    SIG_INT_64      shift and go to state 158
    SIG_INT_128     shift and go to state 159
    FLOAT_32        shift and go to state 160
    FLOAT_64        shift and go to state 161
    KW_BOOLEAN      shift and go to state 162
    KW_STRING       shift and go to state 163

    data_type                      shift and go to state 291

state 271

    (104) for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .

    KW_PRINT        reduce using rule 104 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    KW_LET          reduce using rule 104 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    KW_FN           reduce using rule 104 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    VARIABLE        reduce using rule 104 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    LPAREN          reduce using rule 104 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    LBRACKET        reduce using rule 104 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    KW_FOR          reduce using rule 104 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    KW_IF           reduce using rule 104 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    KW_ELSE         reduce using rule 104 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    KW_WHILE        reduce using rule 104 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    INTEGER         reduce using rule 104 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    FLOAT           reduce using rule 104 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    KW_CONST        reduce using rule 104 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    QUOTE           reduce using rule 104 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    $end            reduce using rule 104 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    RBRACE          reduce using rule 104 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)
    KW_RETURN       reduce using rule 104 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE .)


state 272

    (107) range -> VARIABLE DOT DOT VARIABLE .

    LBRACE          reduce using rule 107 (range -> VARIABLE DOT DOT VARIABLE .)


state 273

    (103) for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .

    KW_PRINT        reduce using rule 103 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    KW_LET          reduce using rule 103 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    KW_FN           reduce using rule 103 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    VARIABLE        reduce using rule 103 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    LPAREN          reduce using rule 103 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    LBRACKET        reduce using rule 103 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    KW_FOR          reduce using rule 103 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    KW_IF           reduce using rule 103 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    KW_ELSE         reduce using rule 103 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    KW_WHILE        reduce using rule 103 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    INTEGER         reduce using rule 103 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    FLOAT           reduce using rule 103 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    KW_CONST        reduce using rule 103 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    QUOTE           reduce using rule 103 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    $end            reduce using rule 103 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    RBRACE          reduce using rule 103 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)
    KW_RETURN       reduce using rule 103 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE .)


state 274

    (106) range -> INTEGER DOT DOT INTEGER .

    LBRACE          reduce using rule 106 (range -> INTEGER DOT DOT INTEGER .)


state 275

    (79) while -> KW_WHILE VARIABLE comparator data LBRACE main_rule RBRACE .

    KW_PRINT        reduce using rule 79 (while -> KW_WHILE VARIABLE comparator data LBRACE main_rule RBRACE .)
    KW_LET          reduce using rule 79 (while -> KW_WHILE VARIABLE comparator data LBRACE main_rule RBRACE .)
    KW_FN           reduce using rule 79 (while -> KW_WHILE VARIABLE comparator data LBRACE main_rule RBRACE .)
    VARIABLE        reduce using rule 79 (while -> KW_WHILE VARIABLE comparator data LBRACE main_rule RBRACE .)
    LPAREN          reduce using rule 79 (while -> KW_WHILE VARIABLE comparator data LBRACE main_rule RBRACE .)
    LBRACKET        reduce using rule 79 (while -> KW_WHILE VARIABLE comparator data LBRACE main_rule RBRACE .)
    KW_FOR          reduce using rule 79 (while -> KW_WHILE VARIABLE comparator data LBRACE main_rule RBRACE .)
    KW_IF           reduce using rule 79 (while -> KW_WHILE VARIABLE comparator data LBRACE main_rule RBRACE .)
    KW_ELSE         reduce using rule 79 (while -> KW_WHILE VARIABLE comparator data LBRACE main_rule RBRACE .)
    KW_WHILE        reduce using rule 79 (while -> KW_WHILE VARIABLE comparator data LBRACE main_rule RBRACE .)
    INTEGER         reduce using rule 79 (while -> KW_WHILE VARIABLE comparator data LBRACE main_rule RBRACE .)
    FLOAT           reduce using rule 79 (while -> KW_WHILE VARIABLE comparator data LBRACE main_rule RBRACE .)
    KW_CONST        reduce using rule 79 (while -> KW_WHILE VARIABLE comparator data LBRACE main_rule RBRACE .)
    QUOTE           reduce using rule 79 (while -> KW_WHILE VARIABLE comparator data LBRACE main_rule RBRACE .)
    $end            reduce using rule 79 (while -> KW_WHILE VARIABLE comparator data LBRACE main_rule RBRACE .)
    RBRACE          reduce using rule 79 (while -> KW_WHILE VARIABLE comparator data LBRACE main_rule RBRACE .)
    KW_RETURN       reduce using rule 79 (while -> KW_WHILE VARIABLE comparator data LBRACE main_rule RBRACE .)


state 276

    (69) print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .

    KW_PRINT        reduce using rule 69 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    KW_LET          reduce using rule 69 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    KW_FN           reduce using rule 69 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    VARIABLE        reduce using rule 69 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    LPAREN          reduce using rule 69 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    LBRACKET        reduce using rule 69 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    KW_FOR          reduce using rule 69 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    KW_IF           reduce using rule 69 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    KW_ELSE         reduce using rule 69 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    KW_WHILE        reduce using rule 69 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    INTEGER         reduce using rule 69 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    FLOAT           reduce using rule 69 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    KW_CONST        reduce using rule 69 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    QUOTE           reduce using rule 69 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    $end            reduce using rule 69 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    RBRACE          reduce using rule 69 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)
    KW_RETURN       reduce using rule 69 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI .)


state 277

    (70) print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE COLON COLON . LT data_type GT LPAREN RPAREN RPAREN SEMI

    LT              shift and go to state 292


state 278

    (139) input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN . DOT KW_EXPECT LPAREN CADENA RPAREN SEMI

    DOT             shift and go to state 293


state 279

    (119) hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .

    KW_PRINT        reduce using rule 119 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    KW_LET          reduce using rule 119 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    KW_FN           reduce using rule 119 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    VARIABLE        reduce using rule 119 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    LPAREN          reduce using rule 119 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    LBRACKET        reduce using rule 119 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    KW_FOR          reduce using rule 119 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    KW_IF           reduce using rule 119 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    KW_ELSE         reduce using rule 119 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    KW_WHILE        reduce using rule 119 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    INTEGER         reduce using rule 119 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    FLOAT           reduce using rule 119 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    KW_CONST        reduce using rule 119 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    QUOTE           reduce using rule 119 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    $end            reduce using rule 119 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    RBRACE          reduce using rule 119 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)
    KW_RETURN       reduce using rule 119 (hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI .)


state 280

    (112) hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN . RPAREN

    RPAREN          shift and go to state 294


state 281

    (114) hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN . array RPAREN
    (72) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (73) array -> . LBRACKET mdata RBRACKET
    (74) array -> . LBRACKET data SEMI data RBRACKET
    (75) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI

    KW_LET          shift and go to state 295
    LBRACKET        shift and go to state 32

    array                          shift and go to state 296

state 282

    (123) linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN . array RPAREN
    (72) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (73) array -> . LBRACKET mdata RBRACKET
    (74) array -> . LBRACKET data SEMI data RBRACKET
    (75) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI

    KW_LET          shift and go to state 295
    LBRACKET        shift and go to state 32

    array                          shift and go to state 297

state 283

    (138) input_init -> KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN . RPAREN

    RPAREN          shift and go to state 298


state 284

    (75) array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET . EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET . EQUALS LBRACKET data SEMI data RBRACKET SEMI

    EQUALS          shift and go to state 299


state 285

    (121) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS . KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN

    KW_LINKEDLIST   shift and go to state 300


state 286

    (113) hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW . LPAREN RPAREN

    LPAREN          shift and go to state 301


state 287

    (115) hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM . LPAREN array RPAREN

    LPAREN          shift and go to state 302


state 288

    (124) linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM . LPAREN array RPAREN

    LPAREN          shift and go to state 303


state 289

    (122) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT . EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN

    EQUALS          shift and go to state 304


state 290

    (96) function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .

    KW_PRINT        reduce using rule 96 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    KW_LET          reduce using rule 96 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    KW_FN           reduce using rule 96 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    VARIABLE        reduce using rule 96 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    LPAREN          reduce using rule 96 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    LBRACKET        reduce using rule 96 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    KW_FOR          reduce using rule 96 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    KW_IF           reduce using rule 96 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    KW_ELSE         reduce using rule 96 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    KW_WHILE        reduce using rule 96 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    INTEGER         reduce using rule 96 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    FLOAT           reduce using rule 96 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    KW_CONST        reduce using rule 96 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    QUOTE           reduce using rule 96 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    $end            reduce using rule 96 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    RBRACE          reduce using rule 96 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)
    KW_RETURN       reduce using rule 96 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE .)


state 291

    (132) function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type . LBRACE return RBRACE

    LBRACE          shift and go to state 305


state 292

    (70) print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE COLON COLON LT . data_type GT LPAREN RPAREN RPAREN SEMI
    (27) data_type -> . UNSIG_INT_8
    (28) data_type -> . UNSIG_INT_16
    (29) data_type -> . UNSIG_INT_32
    (30) data_type -> . UNSIG_INT_64
    (31) data_type -> . UNSIG_INT_128
    (32) data_type -> . SIG_INT_8
    (33) data_type -> . SIG_INT_16
    (34) data_type -> . SIG_INT_32
    (35) data_type -> . SIG_INT_64
    (36) data_type -> . SIG_INT_128
    (37) data_type -> . FLOAT_32
    (38) data_type -> . FLOAT_64
    (39) data_type -> . KW_BOOLEAN
    (40) data_type -> . KW_STRING

    UNSIG_INT_8     shift and go to state 150
    UNSIG_INT_16    shift and go to state 151
    UNSIG_INT_32    shift and go to state 152
    UNSIG_INT_64    shift and go to state 153
    UNSIG_INT_128   shift and go to state 154
    SIG_INT_8       shift and go to state 155
    SIG_INT_16      shift and go to state 156
    SIG_INT_32      shift and go to state 157
    SIG_INT_64      shift and go to state 158
    SIG_INT_128     shift and go to state 159
    FLOAT_32        shift and go to state 160
    FLOAT_64        shift and go to state 161
    KW_BOOLEAN      shift and go to state 162
    KW_STRING       shift and go to state 163

    data_type                      shift and go to state 306

state 293

    (139) input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT . KW_EXPECT LPAREN CADENA RPAREN SEMI

    KW_EXPECT       shift and go to state 307


state 294

    (112) hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .

    SEMI            reduce using rule 112 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    KW_PRINT        reduce using rule 112 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    KW_LET          reduce using rule 112 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    KW_FN           reduce using rule 112 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    VARIABLE        reduce using rule 112 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    LPAREN          reduce using rule 112 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    LBRACKET        reduce using rule 112 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    KW_FOR          reduce using rule 112 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    KW_IF           reduce using rule 112 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    KW_ELSE         reduce using rule 112 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    KW_WHILE        reduce using rule 112 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    INTEGER         reduce using rule 112 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    FLOAT           reduce using rule 112 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    KW_CONST        reduce using rule 112 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    QUOTE           reduce using rule 112 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    $end            reduce using rule 112 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    RBRACE          reduce using rule 112 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    KW_RETURN       reduce using rule 112 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)


state 295

    (72) array -> KW_LET . VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (75) array -> KW_LET . VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> KW_LET . VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI

    VARIABLE        shift and go to state 308


state 296

    (114) hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array . RPAREN

    RPAREN          shift and go to state 309


state 297

    (123) linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array . RPAREN

    RPAREN          shift and go to state 310


state 298

    (138) input_init -> KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN .

    SEMI            reduce using rule 138 (input_init -> KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN .)


state 299

    (75) array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS . LBRACKET mdata RBRACKET SEMI
    (76) array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS . LBRACKET data SEMI data RBRACKET SEMI

    LBRACKET        shift and go to state 311


state 300

    (121) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST . COLON COLON KW_NEW LPAREN RPAREN

    COLON           shift and go to state 312


state 301

    (113) hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN . RPAREN

    RPAREN          shift and go to state 313


state 302

    (115) hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN . array RPAREN
    (72) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (73) array -> . LBRACKET mdata RBRACKET
    (74) array -> . LBRACKET data SEMI data RBRACKET
    (75) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI

    KW_LET          shift and go to state 295
    LBRACKET        shift and go to state 32

    array                          shift and go to state 314

state 303

    (124) linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN . array RPAREN
    (72) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (73) array -> . LBRACKET mdata RBRACKET
    (74) array -> . LBRACKET data SEMI data RBRACKET
    (75) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI

    KW_LET          shift and go to state 295
    LBRACKET        shift and go to state 32

    array                          shift and go to state 315

state 304

    (122) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS . KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN

    KW_LINKEDLIST   shift and go to state 316


state 305

    (132) function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE . return RBRACE
    (135) return -> . main_rule
    (136) return -> . KW_RETURN expression_var SEMI
    (137) return -> . main_rule KW_RETURN expression_var SEMI
    (1) main_rule -> . father_rule
    (2) main_rule -> . father_rule main_rule
    (3) father_rule -> . print
    (4) father_rule -> . dvariable
    (5) father_rule -> . function
    (6) father_rule -> . variables
    (7) father_rule -> . control_str
    (8) father_rule -> . expression
    (9) father_rule -> . void
    (10) father_rule -> . data_str
    (11) father_rule -> . array
    (12) father_rule -> . linkedlist_methods
    (13) father_rule -> . hashmap_methods
    (14) father_rule -> . initialization
    (15) father_rule -> . input
    (16) father_rule -> . assignation
    (17) father_rule -> . declare_data_type
    (68) print -> . KW_PRINT LNOT LPAREN CADENA RPAREN SEMI
    (69) print -> . KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI
    (70) print -> . KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE COLON COLON LT data_type GT LPAREN RPAREN RPAREN SEMI
    (71) dvariable -> . KW_LET VARIABLE SEMI
    (96) function -> . KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE
    (132) function -> . KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE
    (77) variables -> . VARIABLE
    (78) variables -> . VARIABLE COMMA variables
    (97) control_str -> . for_str
    (98) control_str -> . for_str_tagged
    (99) control_str -> . if
    (100) control_str -> . else
    (101) control_str -> . else_if
    (102) control_str -> . while
    (18) expression -> . expression PLUS expression
    (19) expression -> . expression MINUS expression
    (20) expression -> . expression TIMES expression
    (21) expression -> . expression DIVIDE expression
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . number
    (120) void -> .
    (109) data_str -> . array
    (110) data_str -> . hashmap
    (111) data_str -> . linkedlist
    (72) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI
    (73) array -> . LBRACKET mdata RBRACKET
    (74) array -> . LBRACKET data SEMI data RBRACKET
    (75) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> . KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI
    (125) linkedlist_methods -> . VARIABLE linkedlist_push
    (126) linkedlist_methods -> . VARIABLE linkedlist_remove
    (116) hashmap_methods -> . VARIABLE hashmap_insert
    (117) hashmap_methods -> . VARIABLE hashmap_remove
    (81) initialization -> . let_initialization SEMI
    (82) initialization -> . const_initialization SEMI
    (83) initialization -> . data_str SEMI
    (84) initialization -> . input_init SEMI
    (139) input -> . VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI
    (140) assignation -> . VARIABLE assign_operators number
    (141) declare_data_type -> . KW_LET VARIABLE COLON data_type SEMI
    (103) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE
    (104) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE
    (105) for_str_tagged -> . label COLON for_str
    (129) if -> . KW_IF conditional LBRACE main_rule RBRACE
    (130) else -> . KW_ELSE LBRACE main_rule RBRACE
    (131) else_if -> . KW_ELSE KW_IF conditional LBRACE main_rule RBRACE
    (79) while -> . KW_WHILE VARIABLE comparator data LBRACE main_rule RBRACE
    (24) number -> . INTEGER
    (25) number -> . FLOAT
    (26) number -> . VARIABLE
    (112) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (113) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN
    (114) hashmap -> . KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (115) hashmap -> . KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN
    (121) linkedlist -> . KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (122) linkedlist -> . KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN
    (123) linkedlist -> . KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (124) linkedlist -> . KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN
    (85) let_initialization -> . KW_LET VARIABLE EQUALS data
    (86) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS data
    (87) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS data
    (88) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS data
    (89) let_initialization -> . KW_LET VARIABLE EQUALS expression_var
    (90) let_initialization -> . KW_LET VARIABLE COLON data_type EQUALS expression_var
    (91) let_initialization -> . KW_LET KW_MUT VARIABLE EQUALS expression_var
    (92) let_initialization -> . KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var
    (93) const_initialization -> . KW_CONST VARIABLE COLON data_type EQUALS data
    (138) input_init -> . KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN
    (108) label -> . QUOTE VARIABLE

  ! shift/reduce conflict for KW_PRINT resolved as shift
  ! shift/reduce conflict for KW_LET resolved as shift
  ! shift/reduce conflict for KW_FN resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for KW_RETURN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for KW_FOR resolved as shift
  ! shift/reduce conflict for KW_IF resolved as shift
  ! shift/reduce conflict for KW_ELSE resolved as shift
  ! shift/reduce conflict for KW_WHILE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for KW_CONST resolved as shift
  ! shift/reduce conflict for QUOTE resolved as shift
    KW_RETURN       shift and go to state 319
    KW_PRINT        shift and go to state 18
    KW_LET          shift and go to state 21
    KW_FN           shift and go to state 22
    VARIABLE        shift and go to state 20
    LPAREN          shift and go to state 19
    RBRACE          reduce using rule 120 (void -> .)
    LBRACKET        shift and go to state 32
    KW_FOR          shift and go to state 36
    KW_IF           shift and go to state 38
    KW_ELSE         shift and go to state 39
    KW_WHILE        shift and go to state 40
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 42
    KW_CONST        shift and go to state 43
    QUOTE           shift and go to state 44

  ! KW_PRINT        [ reduce using rule 120 (void -> .) ]
  ! KW_LET          [ reduce using rule 120 (void -> .) ]
  ! KW_FN           [ reduce using rule 120 (void -> .) ]
  ! VARIABLE        [ reduce using rule 120 (void -> .) ]
  ! LPAREN          [ reduce using rule 120 (void -> .) ]
  ! LBRACKET        [ reduce using rule 120 (void -> .) ]
  ! KW_FOR          [ reduce using rule 120 (void -> .) ]
  ! KW_IF           [ reduce using rule 120 (void -> .) ]
  ! KW_ELSE         [ reduce using rule 120 (void -> .) ]
  ! KW_WHILE        [ reduce using rule 120 (void -> .) ]
  ! INTEGER         [ reduce using rule 120 (void -> .) ]
  ! FLOAT           [ reduce using rule 120 (void -> .) ]
  ! KW_CONST        [ reduce using rule 120 (void -> .) ]
  ! QUOTE           [ reduce using rule 120 (void -> .) ]
  ! KW_RETURN       [ reduce using rule 120 (void -> .) ]

    return                         shift and go to state 317
    main_rule                      shift and go to state 318
    father_rule                    shift and go to state 2
    print                          shift and go to state 3
    dvariable                      shift and go to state 4
    function                       shift and go to state 5
    variables                      shift and go to state 6
    control_str                    shift and go to state 7
    expression                     shift and go to state 8
    void                           shift and go to state 9
    data_str                       shift and go to state 10
    array                          shift and go to state 11
    linkedlist_methods             shift and go to state 12
    hashmap_methods                shift and go to state 13
    initialization                 shift and go to state 14
    input                          shift and go to state 15
    assignation                    shift and go to state 16
    declare_data_type              shift and go to state 17
    for_str                        shift and go to state 23
    for_str_tagged                 shift and go to state 24
    if                             shift and go to state 25
    else                           shift and go to state 26
    else_if                        shift and go to state 27
    while                          shift and go to state 28
    number                         shift and go to state 29
    hashmap                        shift and go to state 30
    linkedlist                     shift and go to state 31
    let_initialization             shift and go to state 33
    const_initialization           shift and go to state 34
    input_init                     shift and go to state 35
    label                          shift and go to state 37

state 306

    (70) print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE COLON COLON LT data_type . GT LPAREN RPAREN RPAREN SEMI

    GT              shift and go to state 320


state 307

    (139) input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT . LPAREN CADENA RPAREN SEMI

    LPAREN          shift and go to state 321


state 308

    (72) array -> KW_LET VARIABLE . EQUALS LBRACKET mdata RBRACKET SEMI
    (75) array -> KW_LET VARIABLE . COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> KW_LET VARIABLE . COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI

    EQUALS          shift and go to state 322
    COLON           shift and go to state 323


state 309

    (114) hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .

    SEMI            reduce using rule 114 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_PRINT        reduce using rule 114 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_LET          reduce using rule 114 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_FN           reduce using rule 114 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    VARIABLE        reduce using rule 114 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    LPAREN          reduce using rule 114 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    LBRACKET        reduce using rule 114 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_FOR          reduce using rule 114 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_IF           reduce using rule 114 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_ELSE         reduce using rule 114 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_WHILE        reduce using rule 114 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    INTEGER         reduce using rule 114 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    FLOAT           reduce using rule 114 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_CONST        reduce using rule 114 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    QUOTE           reduce using rule 114 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    $end            reduce using rule 114 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    RBRACE          reduce using rule 114 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_RETURN       reduce using rule 114 (hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)


state 310

    (123) linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .

    SEMI            reduce using rule 123 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_PRINT        reduce using rule 123 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_LET          reduce using rule 123 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_FN           reduce using rule 123 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    VARIABLE        reduce using rule 123 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    LPAREN          reduce using rule 123 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    LBRACKET        reduce using rule 123 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_FOR          reduce using rule 123 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_IF           reduce using rule 123 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_ELSE         reduce using rule 123 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_WHILE        reduce using rule 123 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    INTEGER         reduce using rule 123 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    FLOAT           reduce using rule 123 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_CONST        reduce using rule 123 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    QUOTE           reduce using rule 123 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    $end            reduce using rule 123 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    RBRACE          reduce using rule 123 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_RETURN       reduce using rule 123 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)


state 311

    (75) array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET . mdata RBRACKET SEMI
    (76) array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET . data SEMI data RBRACKET SEMI
    (66) mdata -> . data
    (67) mdata -> . data COMMA mdata
    (47) data -> . CADENA
    (48) data -> . INTEGER
    (49) data -> . CHAR
    (50) data -> . FLOAT
    (51) data -> . KW_FALSE
    (52) data -> . KW_TRUE
    (53) data -> . tuple
    (80) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 72
    INTEGER         shift and go to state 73
    CHAR            shift and go to state 74
    FLOAT           shift and go to state 75
    KW_FALSE        shift and go to state 76
    KW_TRUE         shift and go to state 77
    LPAREN          shift and go to state 79

    data                           shift and go to state 324
    mdata                          shift and go to state 325
    tuple                          shift and go to state 78

state 312

    (121) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON . COLON KW_NEW LPAREN RPAREN

    COLON           shift and go to state 326


state 313

    (113) hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .

    SEMI            reduce using rule 113 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    KW_PRINT        reduce using rule 113 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    KW_LET          reduce using rule 113 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    KW_FN           reduce using rule 113 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    VARIABLE        reduce using rule 113 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    LPAREN          reduce using rule 113 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    LBRACKET        reduce using rule 113 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    KW_FOR          reduce using rule 113 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    KW_IF           reduce using rule 113 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    KW_ELSE         reduce using rule 113 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    KW_WHILE        reduce using rule 113 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    INTEGER         reduce using rule 113 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    FLOAT           reduce using rule 113 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    KW_CONST        reduce using rule 113 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    QUOTE           reduce using rule 113 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    $end            reduce using rule 113 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    RBRACE          reduce using rule 113 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)
    KW_RETURN       reduce using rule 113 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN .)


state 314

    (115) hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array . RPAREN

    RPAREN          shift and go to state 327


state 315

    (124) linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array . RPAREN

    RPAREN          shift and go to state 328


state 316

    (122) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST . COLON COLON KW_NEW LPAREN RPAREN

    COLON           shift and go to state 329


state 317

    (132) function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return . RBRACE

    RBRACE          shift and go to state 330


state 318

    (135) return -> main_rule .
    (137) return -> main_rule . KW_RETURN expression_var SEMI

    RBRACE          reduce using rule 135 (return -> main_rule .)
    KW_RETURN       shift and go to state 331


state 319

    (136) return -> KW_RETURN . expression_var SEMI
    (133) expression_var -> . expression
    (134) expression_var -> . data
    (18) expression -> . expression PLUS expression
    (19) expression -> . expression MINUS expression
    (20) expression -> . expression TIMES expression
    (21) expression -> . expression DIVIDE expression
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . number
    (47) data -> . CADENA
    (48) data -> . INTEGER
    (49) data -> . CHAR
    (50) data -> . FLOAT
    (51) data -> . KW_FALSE
    (52) data -> . KW_TRUE
    (53) data -> . tuple
    (24) number -> . INTEGER
    (25) number -> . FLOAT
    (26) number -> . VARIABLE
    (80) tuple -> . LPAREN mdata RPAREN

    LPAREN          shift and go to state 194
    CADENA          shift and go to state 72
    INTEGER         shift and go to state 144
    CHAR            shift and go to state 74
    FLOAT           shift and go to state 145
    KW_FALSE        shift and go to state 76
    KW_TRUE         shift and go to state 77
    VARIABLE        shift and go to state 53

    expression_var                 shift and go to state 332
    expression                     shift and go to state 146
    data                           shift and go to state 333
    number                         shift and go to state 29
    tuple                          shift and go to state 78

state 320

    (70) print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE COLON COLON LT data_type GT . LPAREN RPAREN RPAREN SEMI

    LPAREN          shift and go to state 334


state 321

    (139) input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN . CADENA RPAREN SEMI

    CADENA          shift and go to state 335


state 322

    (72) array -> KW_LET VARIABLE EQUALS . LBRACKET mdata RBRACKET SEMI

    LBRACKET        shift and go to state 137


state 323

    (75) array -> KW_LET VARIABLE COLON . LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI
    (76) array -> KW_LET VARIABLE COLON . LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI

    LBRACKET        shift and go to state 147


state 324

    (76) array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data . SEMI data RBRACKET SEMI
    (66) mdata -> data .
    (67) mdata -> data . COMMA mdata

    SEMI            shift and go to state 336
    RBRACKET        reduce using rule 66 (mdata -> data .)
    COMMA           shift and go to state 113


state 325

    (75) array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata . RBRACKET SEMI

    RBRACKET        shift and go to state 337


state 326

    (121) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON . KW_NEW LPAREN RPAREN

    KW_NEW          shift and go to state 338


state 327

    (115) hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .

    SEMI            reduce using rule 115 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_PRINT        reduce using rule 115 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_LET          reduce using rule 115 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_FN           reduce using rule 115 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    VARIABLE        reduce using rule 115 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    LPAREN          reduce using rule 115 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    LBRACKET        reduce using rule 115 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_FOR          reduce using rule 115 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_IF           reduce using rule 115 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_ELSE         reduce using rule 115 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_WHILE        reduce using rule 115 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    INTEGER         reduce using rule 115 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    FLOAT           reduce using rule 115 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_CONST        reduce using rule 115 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    QUOTE           reduce using rule 115 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    $end            reduce using rule 115 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    RBRACE          reduce using rule 115 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_RETURN       reduce using rule 115 (hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN .)


state 328

    (124) linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .

    SEMI            reduce using rule 124 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_PRINT        reduce using rule 124 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_LET          reduce using rule 124 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_FN           reduce using rule 124 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    VARIABLE        reduce using rule 124 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    LPAREN          reduce using rule 124 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    LBRACKET        reduce using rule 124 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_FOR          reduce using rule 124 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_IF           reduce using rule 124 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_ELSE         reduce using rule 124 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_WHILE        reduce using rule 124 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    INTEGER         reduce using rule 124 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    FLOAT           reduce using rule 124 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_CONST        reduce using rule 124 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    QUOTE           reduce using rule 124 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    $end            reduce using rule 124 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    RBRACE          reduce using rule 124 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)
    KW_RETURN       reduce using rule 124 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN .)


state 329

    (122) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON . COLON KW_NEW LPAREN RPAREN

    COLON           shift and go to state 339


state 330

    (132) function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .

    KW_PRINT        reduce using rule 132 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    KW_LET          reduce using rule 132 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    KW_FN           reduce using rule 132 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    VARIABLE        reduce using rule 132 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    LPAREN          reduce using rule 132 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    LBRACKET        reduce using rule 132 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    KW_FOR          reduce using rule 132 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    KW_IF           reduce using rule 132 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    KW_ELSE         reduce using rule 132 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    KW_WHILE        reduce using rule 132 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    INTEGER         reduce using rule 132 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    FLOAT           reduce using rule 132 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    KW_CONST        reduce using rule 132 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    QUOTE           reduce using rule 132 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    $end            reduce using rule 132 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    RBRACE          reduce using rule 132 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)
    KW_RETURN       reduce using rule 132 (function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE .)


state 331

    (137) return -> main_rule KW_RETURN . expression_var SEMI
    (133) expression_var -> . expression
    (134) expression_var -> . data
    (18) expression -> . expression PLUS expression
    (19) expression -> . expression MINUS expression
    (20) expression -> . expression TIMES expression
    (21) expression -> . expression DIVIDE expression
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . number
    (47) data -> . CADENA
    (48) data -> . INTEGER
    (49) data -> . CHAR
    (50) data -> . FLOAT
    (51) data -> . KW_FALSE
    (52) data -> . KW_TRUE
    (53) data -> . tuple
    (24) number -> . INTEGER
    (25) number -> . FLOAT
    (26) number -> . VARIABLE
    (80) tuple -> . LPAREN mdata RPAREN

    LPAREN          shift and go to state 194
    CADENA          shift and go to state 72
    INTEGER         shift and go to state 144
    CHAR            shift and go to state 74
    FLOAT           shift and go to state 145
    KW_FALSE        shift and go to state 76
    KW_TRUE         shift and go to state 77
    VARIABLE        shift and go to state 53

    expression_var                 shift and go to state 340
    expression                     shift and go to state 146
    data                           shift and go to state 333
    number                         shift and go to state 29
    tuple                          shift and go to state 78

state 332

    (136) return -> KW_RETURN expression_var . SEMI

    SEMI            shift and go to state 341


state 333

    (134) expression_var -> data .

    SEMI            reduce using rule 134 (expression_var -> data .)


state 334

    (70) print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE COLON COLON LT data_type GT LPAREN . RPAREN RPAREN SEMI

    RPAREN          shift and go to state 342


state 335

    (139) input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA . RPAREN SEMI

    RPAREN          shift and go to state 343


state 336

    (76) array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI . data RBRACKET SEMI
    (47) data -> . CADENA
    (48) data -> . INTEGER
    (49) data -> . CHAR
    (50) data -> . FLOAT
    (51) data -> . KW_FALSE
    (52) data -> . KW_TRUE
    (53) data -> . tuple
    (80) tuple -> . LPAREN mdata RPAREN

    CADENA          shift and go to state 72
    INTEGER         shift and go to state 73
    CHAR            shift and go to state 74
    FLOAT           shift and go to state 75
    KW_FALSE        shift and go to state 76
    KW_TRUE         shift and go to state 77
    LPAREN          shift and go to state 79

    data                           shift and go to state 344
    tuple                          shift and go to state 78

state 337

    (75) array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET . SEMI

    SEMI            shift and go to state 345


state 338

    (121) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW . LPAREN RPAREN

    LPAREN          shift and go to state 346


state 339

    (122) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON . KW_NEW LPAREN RPAREN

    KW_NEW          shift and go to state 347


state 340

    (137) return -> main_rule KW_RETURN expression_var . SEMI

    SEMI            shift and go to state 348


state 341

    (136) return -> KW_RETURN expression_var SEMI .

    RBRACE          reduce using rule 136 (return -> KW_RETURN expression_var SEMI .)


state 342

    (70) print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE COLON COLON LT data_type GT LPAREN RPAREN . RPAREN SEMI

    RPAREN          shift and go to state 349


state 343

    (139) input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN . SEMI

    SEMI            shift and go to state 350


state 344

    (76) array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data . RBRACKET SEMI

    RBRACKET        shift and go to state 351


state 345

    (75) array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .

    KW_PRINT        reduce using rule 75 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_LET          reduce using rule 75 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_FN           reduce using rule 75 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    VARIABLE        reduce using rule 75 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    LPAREN          reduce using rule 75 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    LBRACKET        reduce using rule 75 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_FOR          reduce using rule 75 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_IF           reduce using rule 75 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_ELSE         reduce using rule 75 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_WHILE        reduce using rule 75 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    INTEGER         reduce using rule 75 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    FLOAT           reduce using rule 75 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_CONST        reduce using rule 75 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    QUOTE           reduce using rule 75 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    $end            reduce using rule 75 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    SEMI            reduce using rule 75 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    RBRACE          reduce using rule 75 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    KW_RETURN       reduce using rule 75 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)
    RPAREN          reduce using rule 75 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI .)


state 346

    (121) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN . RPAREN

    RPAREN          shift and go to state 352


state 347

    (122) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW . LPAREN RPAREN

    LPAREN          shift and go to state 353


state 348

    (137) return -> main_rule KW_RETURN expression_var SEMI .

    RBRACE          reduce using rule 137 (return -> main_rule KW_RETURN expression_var SEMI .)


state 349

    (70) print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE COLON COLON LT data_type GT LPAREN RPAREN RPAREN . SEMI

    SEMI            shift and go to state 354


state 350

    (139) input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .

    KW_PRINT        reduce using rule 139 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    KW_LET          reduce using rule 139 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    KW_FN           reduce using rule 139 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    VARIABLE        reduce using rule 139 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    LPAREN          reduce using rule 139 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    LBRACKET        reduce using rule 139 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    KW_FOR          reduce using rule 139 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    KW_IF           reduce using rule 139 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    KW_ELSE         reduce using rule 139 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    KW_WHILE        reduce using rule 139 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    INTEGER         reduce using rule 139 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    FLOAT           reduce using rule 139 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    KW_CONST        reduce using rule 139 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    QUOTE           reduce using rule 139 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    $end            reduce using rule 139 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    RBRACE          reduce using rule 139 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)
    KW_RETURN       reduce using rule 139 (input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI .)


state 351

    (76) array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET . SEMI

    SEMI            shift and go to state 355


state 352

    (121) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .

    SEMI            reduce using rule 121 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    KW_PRINT        reduce using rule 121 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    KW_LET          reduce using rule 121 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    KW_FN           reduce using rule 121 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    VARIABLE        reduce using rule 121 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    LPAREN          reduce using rule 121 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    LBRACKET        reduce using rule 121 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    KW_FOR          reduce using rule 121 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    KW_IF           reduce using rule 121 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    KW_ELSE         reduce using rule 121 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    KW_WHILE        reduce using rule 121 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    INTEGER         reduce using rule 121 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    FLOAT           reduce using rule 121 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    KW_CONST        reduce using rule 121 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    QUOTE           reduce using rule 121 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    $end            reduce using rule 121 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    RBRACE          reduce using rule 121 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    KW_RETURN       reduce using rule 121 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)


state 353

    (122) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN . RPAREN

    RPAREN          shift and go to state 356


state 354

    (70) print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE COLON COLON LT data_type GT LPAREN RPAREN RPAREN SEMI .

    KW_PRINT        reduce using rule 70 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE COLON COLON LT data_type GT LPAREN RPAREN RPAREN SEMI .)
    KW_LET          reduce using rule 70 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE COLON COLON LT data_type GT LPAREN RPAREN RPAREN SEMI .)
    KW_FN           reduce using rule 70 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE COLON COLON LT data_type GT LPAREN RPAREN RPAREN SEMI .)
    VARIABLE        reduce using rule 70 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE COLON COLON LT data_type GT LPAREN RPAREN RPAREN SEMI .)
    LPAREN          reduce using rule 70 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE COLON COLON LT data_type GT LPAREN RPAREN RPAREN SEMI .)
    LBRACKET        reduce using rule 70 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE COLON COLON LT data_type GT LPAREN RPAREN RPAREN SEMI .)
    KW_FOR          reduce using rule 70 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE COLON COLON LT data_type GT LPAREN RPAREN RPAREN SEMI .)
    KW_IF           reduce using rule 70 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE COLON COLON LT data_type GT LPAREN RPAREN RPAREN SEMI .)
    KW_ELSE         reduce using rule 70 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE COLON COLON LT data_type GT LPAREN RPAREN RPAREN SEMI .)
    KW_WHILE        reduce using rule 70 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE COLON COLON LT data_type GT LPAREN RPAREN RPAREN SEMI .)
    INTEGER         reduce using rule 70 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE COLON COLON LT data_type GT LPAREN RPAREN RPAREN SEMI .)
    FLOAT           reduce using rule 70 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE COLON COLON LT data_type GT LPAREN RPAREN RPAREN SEMI .)
    KW_CONST        reduce using rule 70 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE COLON COLON LT data_type GT LPAREN RPAREN RPAREN SEMI .)
    QUOTE           reduce using rule 70 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE COLON COLON LT data_type GT LPAREN RPAREN RPAREN SEMI .)
    $end            reduce using rule 70 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE COLON COLON LT data_type GT LPAREN RPAREN RPAREN SEMI .)
    RBRACE          reduce using rule 70 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE COLON COLON LT data_type GT LPAREN RPAREN RPAREN SEMI .)
    KW_RETURN       reduce using rule 70 (print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE COLON COLON LT data_type GT LPAREN RPAREN RPAREN SEMI .)


state 355

    (76) array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .

    KW_PRINT        reduce using rule 76 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    KW_LET          reduce using rule 76 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    KW_FN           reduce using rule 76 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    VARIABLE        reduce using rule 76 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    LPAREN          reduce using rule 76 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    LBRACKET        reduce using rule 76 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    KW_FOR          reduce using rule 76 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    KW_IF           reduce using rule 76 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    KW_ELSE         reduce using rule 76 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    KW_WHILE        reduce using rule 76 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    INTEGER         reduce using rule 76 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    FLOAT           reduce using rule 76 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    KW_CONST        reduce using rule 76 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    QUOTE           reduce using rule 76 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    $end            reduce using rule 76 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    SEMI            reduce using rule 76 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    RBRACE          reduce using rule 76 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    KW_RETURN       reduce using rule 76 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)
    RPAREN          reduce using rule 76 (array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI .)


state 356

    (122) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .

    SEMI            reduce using rule 122 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    KW_PRINT        reduce using rule 122 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    KW_LET          reduce using rule 122 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    KW_FN           reduce using rule 122 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    VARIABLE        reduce using rule 122 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    LPAREN          reduce using rule 122 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    LBRACKET        reduce using rule 122 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    KW_FOR          reduce using rule 122 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    KW_IF           reduce using rule 122 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    KW_ELSE         reduce using rule 122 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    KW_WHILE        reduce using rule 122 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    INTEGER         reduce using rule 122 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    FLOAT           reduce using rule 122 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    KW_CONST        reduce using rule 122 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    QUOTE           reduce using rule 122 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    $end            reduce using rule 122 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    RBRACE          reduce using rule 122 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)
    KW_RETURN       reduce using rule 122 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for KW_PRINT in state 0 resolved as shift
WARNING: shift/reduce conflict for KW_LET in state 0 resolved as shift
WARNING: shift/reduce conflict for KW_FN in state 0 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 0 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 0 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 0 resolved as shift
WARNING: shift/reduce conflict for KW_FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for KW_IF in state 0 resolved as shift
WARNING: shift/reduce conflict for KW_ELSE in state 0 resolved as shift
WARNING: shift/reduce conflict for KW_WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 0 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 0 resolved as shift
WARNING: shift/reduce conflict for KW_CONST in state 0 resolved as shift
WARNING: shift/reduce conflict for QUOTE in state 0 resolved as shift
WARNING: shift/reduce conflict for KW_PRINT in state 2 resolved as shift
WARNING: shift/reduce conflict for KW_LET in state 2 resolved as shift
WARNING: shift/reduce conflict for KW_FN in state 2 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 2 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 2 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 2 resolved as shift
WARNING: shift/reduce conflict for KW_FOR in state 2 resolved as shift
WARNING: shift/reduce conflict for KW_IF in state 2 resolved as shift
WARNING: shift/reduce conflict for KW_ELSE in state 2 resolved as shift
WARNING: shift/reduce conflict for KW_WHILE in state 2 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 2 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 2 resolved as shift
WARNING: shift/reduce conflict for KW_CONST in state 2 resolved as shift
WARNING: shift/reduce conflict for QUOTE in state 2 resolved as shift
WARNING: shift/reduce conflict for KW_PRINT in state 88 resolved as shift
WARNING: shift/reduce conflict for KW_LET in state 88 resolved as shift
WARNING: shift/reduce conflict for KW_FN in state 88 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 88 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 88 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 88 resolved as shift
WARNING: shift/reduce conflict for KW_FOR in state 88 resolved as shift
WARNING: shift/reduce conflict for KW_IF in state 88 resolved as shift
WARNING: shift/reduce conflict for KW_ELSE in state 88 resolved as shift
WARNING: shift/reduce conflict for KW_WHILE in state 88 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 88 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 88 resolved as shift
WARNING: shift/reduce conflict for KW_CONST in state 88 resolved as shift
WARNING: shift/reduce conflict for QUOTE in state 88 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 93 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 93 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 93 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 93 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 94 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 94 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 94 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 94 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 95 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 95 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 95 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 95 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 96 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 96 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 96 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 96 resolved as shift
WARNING: shift/reduce conflict for KW_PRINT in state 118 resolved as shift
WARNING: shift/reduce conflict for KW_LET in state 118 resolved as shift
WARNING: shift/reduce conflict for KW_FN in state 118 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 118 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 118 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 118 resolved as shift
WARNING: shift/reduce conflict for KW_FOR in state 118 resolved as shift
WARNING: shift/reduce conflict for KW_IF in state 118 resolved as shift
WARNING: shift/reduce conflict for KW_ELSE in state 118 resolved as shift
WARNING: shift/reduce conflict for KW_WHILE in state 118 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 118 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 118 resolved as shift
WARNING: shift/reduce conflict for KW_CONST in state 118 resolved as shift
WARNING: shift/reduce conflict for QUOTE in state 118 resolved as shift
WARNING: shift/reduce conflict for KW_PRINT in state 182 resolved as shift
WARNING: shift/reduce conflict for KW_LET in state 182 resolved as shift
WARNING: shift/reduce conflict for KW_FN in state 182 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 182 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 182 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 182 resolved as shift
WARNING: shift/reduce conflict for KW_FOR in state 182 resolved as shift
WARNING: shift/reduce conflict for KW_IF in state 182 resolved as shift
WARNING: shift/reduce conflict for KW_ELSE in state 182 resolved as shift
WARNING: shift/reduce conflict for KW_WHILE in state 182 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 182 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 182 resolved as shift
WARNING: shift/reduce conflict for KW_CONST in state 182 resolved as shift
WARNING: shift/reduce conflict for QUOTE in state 182 resolved as shift
WARNING: shift/reduce conflict for KW_PRINT in state 209 resolved as shift
WARNING: shift/reduce conflict for KW_LET in state 209 resolved as shift
WARNING: shift/reduce conflict for KW_FN in state 209 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 209 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 209 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 209 resolved as shift
WARNING: shift/reduce conflict for KW_FOR in state 209 resolved as shift
WARNING: shift/reduce conflict for KW_IF in state 209 resolved as shift
WARNING: shift/reduce conflict for KW_ELSE in state 209 resolved as shift
WARNING: shift/reduce conflict for KW_WHILE in state 209 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 209 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 209 resolved as shift
WARNING: shift/reduce conflict for KW_CONST in state 209 resolved as shift
WARNING: shift/reduce conflict for QUOTE in state 209 resolved as shift
WARNING: shift/reduce conflict for KW_PRINT in state 211 resolved as shift
WARNING: shift/reduce conflict for KW_LET in state 211 resolved as shift
WARNING: shift/reduce conflict for KW_FN in state 211 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 211 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 211 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 211 resolved as shift
WARNING: shift/reduce conflict for KW_FOR in state 211 resolved as shift
WARNING: shift/reduce conflict for KW_IF in state 211 resolved as shift
WARNING: shift/reduce conflict for KW_ELSE in state 211 resolved as shift
WARNING: shift/reduce conflict for KW_WHILE in state 211 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 211 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 211 resolved as shift
WARNING: shift/reduce conflict for KW_CONST in state 211 resolved as shift
WARNING: shift/reduce conflict for QUOTE in state 211 resolved as shift
WARNING: shift/reduce conflict for KW_PRINT in state 217 resolved as shift
WARNING: shift/reduce conflict for KW_LET in state 217 resolved as shift
WARNING: shift/reduce conflict for KW_FN in state 217 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 217 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 217 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 217 resolved as shift
WARNING: shift/reduce conflict for KW_FOR in state 217 resolved as shift
WARNING: shift/reduce conflict for KW_IF in state 217 resolved as shift
WARNING: shift/reduce conflict for KW_ELSE in state 217 resolved as shift
WARNING: shift/reduce conflict for KW_WHILE in state 217 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 217 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 217 resolved as shift
WARNING: shift/reduce conflict for KW_CONST in state 217 resolved as shift
WARNING: shift/reduce conflict for QUOTE in state 217 resolved as shift
WARNING: shift/reduce conflict for KW_PRINT in state 240 resolved as shift
WARNING: shift/reduce conflict for KW_LET in state 240 resolved as shift
WARNING: shift/reduce conflict for KW_FN in state 240 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 240 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 240 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 240 resolved as shift
WARNING: shift/reduce conflict for KW_FOR in state 240 resolved as shift
WARNING: shift/reduce conflict for KW_IF in state 240 resolved as shift
WARNING: shift/reduce conflict for KW_ELSE in state 240 resolved as shift
WARNING: shift/reduce conflict for KW_WHILE in state 240 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 240 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 240 resolved as shift
WARNING: shift/reduce conflict for KW_CONST in state 240 resolved as shift
WARNING: shift/reduce conflict for QUOTE in state 240 resolved as shift
WARNING: shift/reduce conflict for KW_PRINT in state 305 resolved as shift
WARNING: shift/reduce conflict for KW_LET in state 305 resolved as shift
WARNING: shift/reduce conflict for KW_FN in state 305 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 305 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 305 resolved as shift
WARNING: shift/reduce conflict for KW_RETURN in state 305 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 305 resolved as shift
WARNING: shift/reduce conflict for KW_FOR in state 305 resolved as shift
WARNING: shift/reduce conflict for KW_IF in state 305 resolved as shift
WARNING: shift/reduce conflict for KW_ELSE in state 305 resolved as shift
WARNING: shift/reduce conflict for KW_WHILE in state 305 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 305 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 305 resolved as shift
WARNING: shift/reduce conflict for KW_CONST in state 305 resolved as shift
WARNING: shift/reduce conflict for QUOTE in state 305 resolved as shift
WARNING: reduce/reduce conflict in state 2 resolved using rule (main_rule -> father_rule)
WARNING: rejected rule (void -> <empty>) in state 2
WARNING: reduce/reduce conflict in state 11 resolved using rule (father_rule -> array)
WARNING: rejected rule (data_str -> array) in state 11
WARNING: reduce/reduce conflict in state 20 resolved using rule (number -> VARIABLE)
WARNING: rejected rule (variables -> VARIABLE) in state 20
WARNING: reduce/reduce conflict in state 141 resolved using rule (let_initialization -> KW_LET VARIABLE EQUALS data)
WARNING: rejected rule (expression_var -> data) in state 141
WARNING: reduce/reduce conflict in state 144 resolved using rule (number -> INTEGER)
WARNING: rejected rule (data -> INTEGER) in state 144
WARNING: reduce/reduce conflict in state 145 resolved using rule (number -> FLOAT)
WARNING: rejected rule (data -> FLOAT) in state 145
WARNING: reduce/reduce conflict in state 203 resolved using rule (let_initialization -> KW_LET KW_MUT VARIABLE EQUALS data)
WARNING: rejected rule (expression_var -> data) in state 203
WARNING: reduce/reduce conflict in state 228 resolved using rule (number -> INTEGER)
WARNING: rejected rule (data -> INTEGER) in state 228
WARNING: reduce/reduce conflict in state 229 resolved using rule (number -> FLOAT)
WARNING: rejected rule (data -> FLOAT) in state 229
WARNING: reduce/reduce conflict in state 233 resolved using rule (let_initialization -> KW_LET VARIABLE COLON data_type EQUALS data)
WARNING: rejected rule (expression_var -> data) in state 233
WARNING: reduce/reduce conflict in state 267 resolved using rule (let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS data)
WARNING: rejected rule (expression_var -> data) in state 267
