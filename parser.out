Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    ANDE
    COMMENT
    DIVEQUAL
    HASH
    KW_ABSTRACT
    KW_AS
    KW_ASYNC
    KW_AWAIT
    KW_BECOME
    KW_BOX
    KW_BREAK
    KW_CHARACTER
    KW_CONST
    KW_CONTINUE
    KW_CRATE
    KW_DO
    KW_DYN
    KW_ENUM
    KW_EXTERN
    KW_FINAL
    KW_IMPL
    KW_LOOP
    KW_MACRO
    KW_MATCH
    KW_MOD
    KW_MOVE
    KW_OVERRIDE
    KW_PRIV
    KW_PUB
    KW_REF
    KW_RETURN
    KW_SELFTYPE
    KW_SELFVALUE
    KW_STATIC
    KW_STATICLIFETIME
    KW_STRUCT
    KW_SUPER
    KW_TRAIT
    KW_TRY
    KW_TYPE
    KW_TYPEOF
    KW_UNION
    KW_UNSAFE
    KW_UNSIZED
    KW_USE
    KW_VIRTUAL
    KW_WHERE
    KW_YIELD
    LNOT
    MINUSEQUAL
    MODULUS
    MODULUSEQUAL
    ORE
    OREXE
    PLUSEQUAL
    QMARK
    TIMESEQUAL

Grammar

Rule 0     S' -> main_rule
Rule 1     main_rule -> father_rule
Rule 2     main_rule -> father_rule main_rule
Rule 3     father_rule -> print
Rule 4     father_rule -> dvariable
Rule 5     father_rule -> array
Rule 6     father_rule -> function
Rule 7     father_rule -> variables
Rule 8     father_rule -> control_str
Rule 9     father_rule -> expression
Rule 10    father_rule -> void
Rule 11    father_rule -> linkedlist
Rule 12    father_rule -> push
Rule 13    father_rule -> remove
Rule 14    father_rule -> if
Rule 15    father_rule -> else
Rule 16    father_rule -> else_if
Rule 17    expression -> expression PLUS expression
Rule 18    expression -> expression MINUS expression
Rule 19    expression -> expression TIMES expression
Rule 20    expression -> expression DIVIDE expression
Rule 21    expression -> LPAREN expression RPAREN
Rule 22    expression -> number
Rule 23    number -> INTEGER
Rule 24    number -> FLOAT
Rule 25    number -> VARIABLE
Rule 26    dataType -> UNSIG_INT_8
Rule 27    dataType -> UNSIG_INT_16
Rule 28    dataType -> UNSIG_INT_32
Rule 29    dataType -> UNSIG_INT_64
Rule 30    dataType -> UNSIG_INT_128
Rule 31    dataType -> SIG_INT_8
Rule 32    dataType -> SIG_INT_16
Rule 33    dataType -> SIG_INT_32
Rule 34    dataType -> SIG_INT_64
Rule 35    dataType -> SIG_INT_128
Rule 36    dataType -> FLOAT_32
Rule 37    dataType -> FLOAT_64
Rule 38    dataType -> KW_BOOLEAN
Rule 39    data -> CADENA
Rule 40    data -> INTEGER
Rule 41    data -> CHAR
Rule 42    data -> FLOAT
Rule 43    data -> KW_FALSE
Rule 44    data -> KW_TRUE
Rule 45    comparator -> <empty>
Rule 46    comparator -> EQ
Rule 47    comparator -> NE
Rule 48    comparator -> GE
Rule 49    comparator -> LE
Rule 50    comparator -> GT
Rule 51    comparator -> LT
Rule 52    and -> VARIABLE LAND VARIABLE
Rule 53    conditional -> VARIABLE comparator data
Rule 54    conditional -> and comparator data
Rule 55    or -> VARIABLE LOR VARIABLE
Rule 56    mdata -> data
Rule 57    mdata -> data COMMA mdata
Rule 58    print -> KW_PRINT LPAREN CADENA RPAREN SEMI
Rule 59    dvariable -> KW_LET VARIABLE SEMI
Rule 60    array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET
Rule 61    variables -> VARIABLE
Rule 62    variables -> VARIABLE COMMA variables
Rule 63    while -> KW_WHILE LPAREN VARIABLE
Rule 64    arguments -> void
Rule 65    arguments -> variables
Rule 66    function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE father_rule RBRACE
Rule 67    control_str -> for_str
Rule 68    control_str -> for_str_tagged
Rule 69    for_str -> KW_FOR VARIABLE KW_IN range LBRACE father_rule RBRACE
Rule 70    for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE father_rule RBRACE
Rule 71    for_str_tagged -> label COLON for_str
Rule 72    range -> INTEGER DOT DOT INTEGER
Rule 73    range -> VARIABLE DOT DOT VARIABLE
Rule 74    label -> QUOTE VARIABLE
Rule 75    void -> <empty>
Rule 76    linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI
Rule 77    linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI
Rule 78    linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI
Rule 79    linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI
Rule 80    push -> VARIABLE DOT PUSH LPAREN data RPAREN SEMI
Rule 81    remove -> VARIABLE DOT REMOVE LPAREN INTEGER RPAREN SEMI
Rule 82    if -> KW_IF conditional LBRACE father_rule RBRACE
Rule 83    else -> KW_ELSE LBRACE father_rule RBRACE
Rule 84    else_if -> KW_ELSE KW_IF conditional LBRACE father_rule RBRACE

Terminals, with rules where they appear

AND                  : 
ANDE                 : 
CADENA               : 39 58
CHAR                 : 41
COLON                : 71 76 76 76 77 77 77 78 78 79 79
COMMA                : 57 62
COMMENT              : 
DIVEQUAL             : 
DIVIDE               : 20
DOT                  : 72 72 73 73 80 81
EQ                   : 46
EQUALS               : 60 76 77 78 79
FLOAT                : 24 42
FLOAT_32             : 36
FLOAT_64             : 37
GE                   : 48
GT                   : 50 76 77
HASH                 : 
INTEGER              : 23 40 72 72 81
KW_ABSTRACT          : 
KW_AS                : 
KW_ASYNC             : 
KW_AWAIT             : 
KW_BECOME            : 
KW_BOOLEAN           : 38
KW_BOX               : 
KW_BREAK             : 
KW_CHARACTER         : 
KW_CONST             : 
KW_CONTINUE          : 
KW_CRATE             : 
KW_DO                : 
KW_DYN               : 
KW_ELSE              : 83 84
KW_ENUM              : 
KW_EXTERN            : 
KW_FALSE             : 43
KW_FINAL             : 
KW_FN                : 66
KW_FOR               : 69 70
KW_FROM              : 78 79
KW_IF                : 82 84
KW_IMPL              : 
KW_IN                : 69 70
KW_LET               : 59 60 76 77 78 79
KW_LINKEDLIST        : 76 76 77 77 78 79
KW_LOOP              : 
KW_MACRO             : 
KW_MATCH             : 
KW_MOD               : 
KW_MOVE              : 
KW_MUT               : 77 79
KW_NEW               : 76 77
KW_OVERRIDE          : 
KW_PRINT             : 58
KW_PRIV              : 
KW_PUB               : 
KW_REF               : 
KW_RETURN            : 
KW_SELFTYPE          : 
KW_SELFVALUE         : 
KW_STATIC            : 
KW_STATICLIFETIME    : 
KW_STRUCT            : 
KW_SUPER             : 
KW_TRAIT             : 
KW_TRUE              : 44
KW_TRY               : 
KW_TYPE              : 
KW_TYPEOF            : 
KW_UNION             : 
KW_UNSAFE            : 
KW_UNSIZED           : 
KW_USE               : 
KW_VIRTUAL           : 
KW_WHERE             : 
KW_WHILE             : 63
KW_YIELD             : 
LAND                 : 52
LBRACE               : 66 69 70 82 83 84
LBRACKET             : 60
LE                   : 49
LNOT                 : 
LOR                  : 55
LPAREN               : 21 58 63 66 76 77 78 79 80 81
LT                   : 51 76 77
MINUS                : 18
MINUSEQUAL           : 
MODULUS              : 
MODULUSEQUAL         : 
NE                   : 47
ORE                  : 
OREXE                : 
PLUS                 : 17
PLUSEQUAL            : 
PUSH                 : 80
QMARK                : 
QUOTE                : 74
RBRACE               : 66 69 70 82 83 84
RBRACKET             : 60
REMOVE               : 81
RPAREN               : 21 58 66 76 77 78 79 80 81
SEMI                 : 58 59 76 77 78 79 80 81
SIG_INT_128          : 35
SIG_INT_16           : 32
SIG_INT_32           : 33
SIG_INT_64           : 34
SIG_INT_8            : 31
TIMES                : 19
TIMESEQUAL           : 
UNSIG_INT_128        : 30
UNSIG_INT_16         : 27
UNSIG_INT_32         : 28
UNSIG_INT_64         : 29
UNSIG_INT_8          : 26
VARIABLE             : 25 52 52 53 55 55 59 60 61 62 63 66 69 70 70 73 73 74 76 77 78 79 80 81
error                : 

Nonterminals, with rules where they appear

and                  : 54
arguments            : 66
array                : 5 78 79
comparator           : 53 54
conditional          : 82 84
control_str          : 8
data                 : 53 54 56 57 80
dataType             : 76 77
dvariable            : 4
else                 : 15
else_if              : 16
expression           : 9 17 17 18 18 19 19 20 20 21
father_rule          : 1 2 66 69 70 82 83 84
for_str              : 67 71
for_str_tagged       : 68
function             : 6
if                   : 14
label                : 71
linkedlist           : 11
main_rule            : 2 0
mdata                : 57 60
number               : 22
or                   : 
print                : 3
push                 : 12
range                : 69
remove               : 13
variables            : 7 62 65
void                 : 10 64
while                : 

Parsing method: LALR

state 0

    (0) S' -> . main_rule
    (1) main_rule -> . father_rule
    (2) main_rule -> . father_rule main_rule
    (3) father_rule -> . print
    (4) father_rule -> . dvariable
    (5) father_rule -> . array
    (6) father_rule -> . function
    (7) father_rule -> . variables
    (8) father_rule -> . control_str
    (9) father_rule -> . expression
    (10) father_rule -> . void
    (11) father_rule -> . linkedlist
    (12) father_rule -> . push
    (13) father_rule -> . remove
    (14) father_rule -> . if
    (15) father_rule -> . else
    (16) father_rule -> . else_if
    (58) print -> . KW_PRINT LPAREN CADENA RPAREN SEMI
    (59) dvariable -> . KW_LET VARIABLE SEMI
    (60) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET
    (66) function -> . KW_FN VARIABLE LPAREN arguments RPAREN LBRACE father_rule RBRACE
    (61) variables -> . VARIABLE
    (62) variables -> . VARIABLE COMMA variables
    (67) control_str -> . for_str
    (68) control_str -> . for_str_tagged
    (17) expression -> . expression PLUS expression
    (18) expression -> . expression MINUS expression
    (19) expression -> . expression TIMES expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . LPAREN expression RPAREN
    (22) expression -> . number
    (75) void -> .
    (76) linkedlist -> . KW_LET VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI
    (77) linkedlist -> . KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI
    (78) linkedlist -> . KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI
    (79) linkedlist -> . KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI
    (80) push -> . VARIABLE DOT PUSH LPAREN data RPAREN SEMI
    (81) remove -> . VARIABLE DOT REMOVE LPAREN INTEGER RPAREN SEMI
    (82) if -> . KW_IF conditional LBRACE father_rule RBRACE
    (83) else -> . KW_ELSE LBRACE father_rule RBRACE
    (84) else_if -> . KW_ELSE KW_IF conditional LBRACE father_rule RBRACE
    (69) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE father_rule RBRACE
    (70) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE father_rule RBRACE
    (71) for_str_tagged -> . label COLON for_str
    (23) number -> . INTEGER
    (24) number -> . FLOAT
    (25) number -> . VARIABLE
    (74) label -> . QUOTE VARIABLE

  ! shift/reduce conflict for KW_PRINT resolved as shift
  ! shift/reduce conflict for KW_LET resolved as shift
  ! shift/reduce conflict for KW_FN resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for KW_IF resolved as shift
  ! shift/reduce conflict for KW_ELSE resolved as shift
  ! shift/reduce conflict for KW_FOR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for QUOTE resolved as shift
    KW_PRINT        shift and go to state 17
    KW_LET          shift and go to state 19
    KW_FN           shift and go to state 21
    VARIABLE        shift and go to state 20
    LPAREN          shift and go to state 18
    $end            reduce using rule 75 (void -> .)
    KW_IF           shift and go to state 26
    KW_ELSE         shift and go to state 27
    KW_FOR          shift and go to state 28
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 30
    QUOTE           shift and go to state 31

  ! KW_PRINT        [ reduce using rule 75 (void -> .) ]
  ! KW_LET          [ reduce using rule 75 (void -> .) ]
  ! KW_FN           [ reduce using rule 75 (void -> .) ]
  ! VARIABLE        [ reduce using rule 75 (void -> .) ]
  ! LPAREN          [ reduce using rule 75 (void -> .) ]
  ! KW_IF           [ reduce using rule 75 (void -> .) ]
  ! KW_ELSE         [ reduce using rule 75 (void -> .) ]
  ! KW_FOR          [ reduce using rule 75 (void -> .) ]
  ! INTEGER         [ reduce using rule 75 (void -> .) ]
  ! FLOAT           [ reduce using rule 75 (void -> .) ]
  ! QUOTE           [ reduce using rule 75 (void -> .) ]

    main_rule                      shift and go to state 1
    father_rule                    shift and go to state 2
    print                          shift and go to state 3
    dvariable                      shift and go to state 4
    array                          shift and go to state 5
    function                       shift and go to state 6
    variables                      shift and go to state 7
    control_str                    shift and go to state 8
    expression                     shift and go to state 9
    void                           shift and go to state 10
    linkedlist                     shift and go to state 11
    push                           shift and go to state 12
    remove                         shift and go to state 13
    if                             shift and go to state 14
    else                           shift and go to state 15
    else_if                        shift and go to state 16
    for_str                        shift and go to state 22
    for_str_tagged                 shift and go to state 23
    number                         shift and go to state 24
    label                          shift and go to state 29

state 1

    (0) S' -> main_rule .



state 2

    (1) main_rule -> father_rule .
    (2) main_rule -> father_rule . main_rule
    (1) main_rule -> . father_rule
    (2) main_rule -> . father_rule main_rule
    (3) father_rule -> . print
    (4) father_rule -> . dvariable
    (5) father_rule -> . array
    (6) father_rule -> . function
    (7) father_rule -> . variables
    (8) father_rule -> . control_str
    (9) father_rule -> . expression
    (10) father_rule -> . void
    (11) father_rule -> . linkedlist
    (12) father_rule -> . push
    (13) father_rule -> . remove
    (14) father_rule -> . if
    (15) father_rule -> . else
    (16) father_rule -> . else_if
    (58) print -> . KW_PRINT LPAREN CADENA RPAREN SEMI
    (59) dvariable -> . KW_LET VARIABLE SEMI
    (60) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET
    (66) function -> . KW_FN VARIABLE LPAREN arguments RPAREN LBRACE father_rule RBRACE
    (61) variables -> . VARIABLE
    (62) variables -> . VARIABLE COMMA variables
    (67) control_str -> . for_str
    (68) control_str -> . for_str_tagged
    (17) expression -> . expression PLUS expression
    (18) expression -> . expression MINUS expression
    (19) expression -> . expression TIMES expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . LPAREN expression RPAREN
    (22) expression -> . number
    (75) void -> .
    (76) linkedlist -> . KW_LET VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI
    (77) linkedlist -> . KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI
    (78) linkedlist -> . KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI
    (79) linkedlist -> . KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI
    (80) push -> . VARIABLE DOT PUSH LPAREN data RPAREN SEMI
    (81) remove -> . VARIABLE DOT REMOVE LPAREN INTEGER RPAREN SEMI
    (82) if -> . KW_IF conditional LBRACE father_rule RBRACE
    (83) else -> . KW_ELSE LBRACE father_rule RBRACE
    (84) else_if -> . KW_ELSE KW_IF conditional LBRACE father_rule RBRACE
    (69) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE father_rule RBRACE
    (70) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE father_rule RBRACE
    (71) for_str_tagged -> . label COLON for_str
    (23) number -> . INTEGER
    (24) number -> . FLOAT
    (25) number -> . VARIABLE
    (74) label -> . QUOTE VARIABLE

  ! shift/reduce conflict for KW_PRINT resolved as shift
  ! shift/reduce conflict for KW_LET resolved as shift
  ! shift/reduce conflict for KW_FN resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 1 (main_rule -> father_rule .)
  ! shift/reduce conflict for KW_IF resolved as shift
  ! shift/reduce conflict for KW_ELSE resolved as shift
  ! shift/reduce conflict for KW_FOR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for QUOTE resolved as shift
    $end            reduce using rule 1 (main_rule -> father_rule .)
    KW_PRINT        shift and go to state 17
    KW_LET          shift and go to state 19
    KW_FN           shift and go to state 21
    VARIABLE        shift and go to state 20
    LPAREN          shift and go to state 18
    KW_IF           shift and go to state 26
    KW_ELSE         shift and go to state 27
    KW_FOR          shift and go to state 28
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 30
    QUOTE           shift and go to state 31

  ! KW_PRINT        [ reduce using rule 75 (void -> .) ]
  ! KW_LET          [ reduce using rule 75 (void -> .) ]
  ! KW_FN           [ reduce using rule 75 (void -> .) ]
  ! VARIABLE        [ reduce using rule 75 (void -> .) ]
  ! LPAREN          [ reduce using rule 75 (void -> .) ]
  ! KW_IF           [ reduce using rule 75 (void -> .) ]
  ! KW_ELSE         [ reduce using rule 75 (void -> .) ]
  ! KW_FOR          [ reduce using rule 75 (void -> .) ]
  ! INTEGER         [ reduce using rule 75 (void -> .) ]
  ! FLOAT           [ reduce using rule 75 (void -> .) ]
  ! QUOTE           [ reduce using rule 75 (void -> .) ]
  ! $end            [ reduce using rule 75 (void -> .) ]

    father_rule                    shift and go to state 2
    main_rule                      shift and go to state 32
    print                          shift and go to state 3
    dvariable                      shift and go to state 4
    array                          shift and go to state 5
    function                       shift and go to state 6
    variables                      shift and go to state 7
    control_str                    shift and go to state 8
    expression                     shift and go to state 9
    void                           shift and go to state 10
    linkedlist                     shift and go to state 11
    push                           shift and go to state 12
    remove                         shift and go to state 13
    if                             shift and go to state 14
    else                           shift and go to state 15
    else_if                        shift and go to state 16
    for_str                        shift and go to state 22
    for_str_tagged                 shift and go to state 23
    number                         shift and go to state 24
    label                          shift and go to state 29

state 3

    (3) father_rule -> print .

    KW_PRINT        reduce using rule 3 (father_rule -> print .)
    KW_LET          reduce using rule 3 (father_rule -> print .)
    KW_FN           reduce using rule 3 (father_rule -> print .)
    VARIABLE        reduce using rule 3 (father_rule -> print .)
    LPAREN          reduce using rule 3 (father_rule -> print .)
    KW_IF           reduce using rule 3 (father_rule -> print .)
    KW_ELSE         reduce using rule 3 (father_rule -> print .)
    KW_FOR          reduce using rule 3 (father_rule -> print .)
    INTEGER         reduce using rule 3 (father_rule -> print .)
    FLOAT           reduce using rule 3 (father_rule -> print .)
    QUOTE           reduce using rule 3 (father_rule -> print .)
    $end            reduce using rule 3 (father_rule -> print .)
    RBRACE          reduce using rule 3 (father_rule -> print .)


state 4

    (4) father_rule -> dvariable .

    KW_PRINT        reduce using rule 4 (father_rule -> dvariable .)
    KW_LET          reduce using rule 4 (father_rule -> dvariable .)
    KW_FN           reduce using rule 4 (father_rule -> dvariable .)
    VARIABLE        reduce using rule 4 (father_rule -> dvariable .)
    LPAREN          reduce using rule 4 (father_rule -> dvariable .)
    KW_IF           reduce using rule 4 (father_rule -> dvariable .)
    KW_ELSE         reduce using rule 4 (father_rule -> dvariable .)
    KW_FOR          reduce using rule 4 (father_rule -> dvariable .)
    INTEGER         reduce using rule 4 (father_rule -> dvariable .)
    FLOAT           reduce using rule 4 (father_rule -> dvariable .)
    QUOTE           reduce using rule 4 (father_rule -> dvariable .)
    $end            reduce using rule 4 (father_rule -> dvariable .)
    RBRACE          reduce using rule 4 (father_rule -> dvariable .)


state 5

    (5) father_rule -> array .

    KW_PRINT        reduce using rule 5 (father_rule -> array .)
    KW_LET          reduce using rule 5 (father_rule -> array .)
    KW_FN           reduce using rule 5 (father_rule -> array .)
    VARIABLE        reduce using rule 5 (father_rule -> array .)
    LPAREN          reduce using rule 5 (father_rule -> array .)
    KW_IF           reduce using rule 5 (father_rule -> array .)
    KW_ELSE         reduce using rule 5 (father_rule -> array .)
    KW_FOR          reduce using rule 5 (father_rule -> array .)
    INTEGER         reduce using rule 5 (father_rule -> array .)
    FLOAT           reduce using rule 5 (father_rule -> array .)
    QUOTE           reduce using rule 5 (father_rule -> array .)
    $end            reduce using rule 5 (father_rule -> array .)
    RBRACE          reduce using rule 5 (father_rule -> array .)


state 6

    (6) father_rule -> function .

    KW_PRINT        reduce using rule 6 (father_rule -> function .)
    KW_LET          reduce using rule 6 (father_rule -> function .)
    KW_FN           reduce using rule 6 (father_rule -> function .)
    VARIABLE        reduce using rule 6 (father_rule -> function .)
    LPAREN          reduce using rule 6 (father_rule -> function .)
    KW_IF           reduce using rule 6 (father_rule -> function .)
    KW_ELSE         reduce using rule 6 (father_rule -> function .)
    KW_FOR          reduce using rule 6 (father_rule -> function .)
    INTEGER         reduce using rule 6 (father_rule -> function .)
    FLOAT           reduce using rule 6 (father_rule -> function .)
    QUOTE           reduce using rule 6 (father_rule -> function .)
    $end            reduce using rule 6 (father_rule -> function .)
    RBRACE          reduce using rule 6 (father_rule -> function .)


state 7

    (7) father_rule -> variables .

    KW_PRINT        reduce using rule 7 (father_rule -> variables .)
    KW_LET          reduce using rule 7 (father_rule -> variables .)
    KW_FN           reduce using rule 7 (father_rule -> variables .)
    VARIABLE        reduce using rule 7 (father_rule -> variables .)
    LPAREN          reduce using rule 7 (father_rule -> variables .)
    KW_IF           reduce using rule 7 (father_rule -> variables .)
    KW_ELSE         reduce using rule 7 (father_rule -> variables .)
    KW_FOR          reduce using rule 7 (father_rule -> variables .)
    INTEGER         reduce using rule 7 (father_rule -> variables .)
    FLOAT           reduce using rule 7 (father_rule -> variables .)
    QUOTE           reduce using rule 7 (father_rule -> variables .)
    $end            reduce using rule 7 (father_rule -> variables .)
    RBRACE          reduce using rule 7 (father_rule -> variables .)


state 8

    (8) father_rule -> control_str .

    KW_PRINT        reduce using rule 8 (father_rule -> control_str .)
    KW_LET          reduce using rule 8 (father_rule -> control_str .)
    KW_FN           reduce using rule 8 (father_rule -> control_str .)
    VARIABLE        reduce using rule 8 (father_rule -> control_str .)
    LPAREN          reduce using rule 8 (father_rule -> control_str .)
    KW_IF           reduce using rule 8 (father_rule -> control_str .)
    KW_ELSE         reduce using rule 8 (father_rule -> control_str .)
    KW_FOR          reduce using rule 8 (father_rule -> control_str .)
    INTEGER         reduce using rule 8 (father_rule -> control_str .)
    FLOAT           reduce using rule 8 (father_rule -> control_str .)
    QUOTE           reduce using rule 8 (father_rule -> control_str .)
    $end            reduce using rule 8 (father_rule -> control_str .)
    RBRACE          reduce using rule 8 (father_rule -> control_str .)


state 9

    (9) father_rule -> expression .
    (17) expression -> expression . PLUS expression
    (18) expression -> expression . MINUS expression
    (19) expression -> expression . TIMES expression
    (20) expression -> expression . DIVIDE expression

    KW_PRINT        reduce using rule 9 (father_rule -> expression .)
    KW_LET          reduce using rule 9 (father_rule -> expression .)
    KW_FN           reduce using rule 9 (father_rule -> expression .)
    VARIABLE        reduce using rule 9 (father_rule -> expression .)
    LPAREN          reduce using rule 9 (father_rule -> expression .)
    KW_IF           reduce using rule 9 (father_rule -> expression .)
    KW_ELSE         reduce using rule 9 (father_rule -> expression .)
    KW_FOR          reduce using rule 9 (father_rule -> expression .)
    INTEGER         reduce using rule 9 (father_rule -> expression .)
    FLOAT           reduce using rule 9 (father_rule -> expression .)
    QUOTE           reduce using rule 9 (father_rule -> expression .)
    $end            reduce using rule 9 (father_rule -> expression .)
    RBRACE          reduce using rule 9 (father_rule -> expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36


state 10

    (10) father_rule -> void .

    KW_PRINT        reduce using rule 10 (father_rule -> void .)
    KW_LET          reduce using rule 10 (father_rule -> void .)
    KW_FN           reduce using rule 10 (father_rule -> void .)
    VARIABLE        reduce using rule 10 (father_rule -> void .)
    LPAREN          reduce using rule 10 (father_rule -> void .)
    KW_IF           reduce using rule 10 (father_rule -> void .)
    KW_ELSE         reduce using rule 10 (father_rule -> void .)
    KW_FOR          reduce using rule 10 (father_rule -> void .)
    INTEGER         reduce using rule 10 (father_rule -> void .)
    FLOAT           reduce using rule 10 (father_rule -> void .)
    QUOTE           reduce using rule 10 (father_rule -> void .)
    $end            reduce using rule 10 (father_rule -> void .)
    RBRACE          reduce using rule 10 (father_rule -> void .)


state 11

    (11) father_rule -> linkedlist .

    KW_PRINT        reduce using rule 11 (father_rule -> linkedlist .)
    KW_LET          reduce using rule 11 (father_rule -> linkedlist .)
    KW_FN           reduce using rule 11 (father_rule -> linkedlist .)
    VARIABLE        reduce using rule 11 (father_rule -> linkedlist .)
    LPAREN          reduce using rule 11 (father_rule -> linkedlist .)
    KW_IF           reduce using rule 11 (father_rule -> linkedlist .)
    KW_ELSE         reduce using rule 11 (father_rule -> linkedlist .)
    KW_FOR          reduce using rule 11 (father_rule -> linkedlist .)
    INTEGER         reduce using rule 11 (father_rule -> linkedlist .)
    FLOAT           reduce using rule 11 (father_rule -> linkedlist .)
    QUOTE           reduce using rule 11 (father_rule -> linkedlist .)
    $end            reduce using rule 11 (father_rule -> linkedlist .)
    RBRACE          reduce using rule 11 (father_rule -> linkedlist .)


state 12

    (12) father_rule -> push .

    KW_PRINT        reduce using rule 12 (father_rule -> push .)
    KW_LET          reduce using rule 12 (father_rule -> push .)
    KW_FN           reduce using rule 12 (father_rule -> push .)
    VARIABLE        reduce using rule 12 (father_rule -> push .)
    LPAREN          reduce using rule 12 (father_rule -> push .)
    KW_IF           reduce using rule 12 (father_rule -> push .)
    KW_ELSE         reduce using rule 12 (father_rule -> push .)
    KW_FOR          reduce using rule 12 (father_rule -> push .)
    INTEGER         reduce using rule 12 (father_rule -> push .)
    FLOAT           reduce using rule 12 (father_rule -> push .)
    QUOTE           reduce using rule 12 (father_rule -> push .)
    $end            reduce using rule 12 (father_rule -> push .)
    RBRACE          reduce using rule 12 (father_rule -> push .)


state 13

    (13) father_rule -> remove .

    KW_PRINT        reduce using rule 13 (father_rule -> remove .)
    KW_LET          reduce using rule 13 (father_rule -> remove .)
    KW_FN           reduce using rule 13 (father_rule -> remove .)
    VARIABLE        reduce using rule 13 (father_rule -> remove .)
    LPAREN          reduce using rule 13 (father_rule -> remove .)
    KW_IF           reduce using rule 13 (father_rule -> remove .)
    KW_ELSE         reduce using rule 13 (father_rule -> remove .)
    KW_FOR          reduce using rule 13 (father_rule -> remove .)
    INTEGER         reduce using rule 13 (father_rule -> remove .)
    FLOAT           reduce using rule 13 (father_rule -> remove .)
    QUOTE           reduce using rule 13 (father_rule -> remove .)
    $end            reduce using rule 13 (father_rule -> remove .)
    RBRACE          reduce using rule 13 (father_rule -> remove .)


state 14

    (14) father_rule -> if .

    KW_PRINT        reduce using rule 14 (father_rule -> if .)
    KW_LET          reduce using rule 14 (father_rule -> if .)
    KW_FN           reduce using rule 14 (father_rule -> if .)
    VARIABLE        reduce using rule 14 (father_rule -> if .)
    LPAREN          reduce using rule 14 (father_rule -> if .)
    KW_IF           reduce using rule 14 (father_rule -> if .)
    KW_ELSE         reduce using rule 14 (father_rule -> if .)
    KW_FOR          reduce using rule 14 (father_rule -> if .)
    INTEGER         reduce using rule 14 (father_rule -> if .)
    FLOAT           reduce using rule 14 (father_rule -> if .)
    QUOTE           reduce using rule 14 (father_rule -> if .)
    $end            reduce using rule 14 (father_rule -> if .)
    RBRACE          reduce using rule 14 (father_rule -> if .)


state 15

    (15) father_rule -> else .

    KW_PRINT        reduce using rule 15 (father_rule -> else .)
    KW_LET          reduce using rule 15 (father_rule -> else .)
    KW_FN           reduce using rule 15 (father_rule -> else .)
    VARIABLE        reduce using rule 15 (father_rule -> else .)
    LPAREN          reduce using rule 15 (father_rule -> else .)
    KW_IF           reduce using rule 15 (father_rule -> else .)
    KW_ELSE         reduce using rule 15 (father_rule -> else .)
    KW_FOR          reduce using rule 15 (father_rule -> else .)
    INTEGER         reduce using rule 15 (father_rule -> else .)
    FLOAT           reduce using rule 15 (father_rule -> else .)
    QUOTE           reduce using rule 15 (father_rule -> else .)
    $end            reduce using rule 15 (father_rule -> else .)
    RBRACE          reduce using rule 15 (father_rule -> else .)


state 16

    (16) father_rule -> else_if .

    KW_PRINT        reduce using rule 16 (father_rule -> else_if .)
    KW_LET          reduce using rule 16 (father_rule -> else_if .)
    KW_FN           reduce using rule 16 (father_rule -> else_if .)
    VARIABLE        reduce using rule 16 (father_rule -> else_if .)
    LPAREN          reduce using rule 16 (father_rule -> else_if .)
    KW_IF           reduce using rule 16 (father_rule -> else_if .)
    KW_ELSE         reduce using rule 16 (father_rule -> else_if .)
    KW_FOR          reduce using rule 16 (father_rule -> else_if .)
    INTEGER         reduce using rule 16 (father_rule -> else_if .)
    FLOAT           reduce using rule 16 (father_rule -> else_if .)
    QUOTE           reduce using rule 16 (father_rule -> else_if .)
    $end            reduce using rule 16 (father_rule -> else_if .)
    RBRACE          reduce using rule 16 (father_rule -> else_if .)


state 17

    (58) print -> KW_PRINT . LPAREN CADENA RPAREN SEMI

    LPAREN          shift and go to state 37


state 18

    (21) expression -> LPAREN . expression RPAREN
    (17) expression -> . expression PLUS expression
    (18) expression -> . expression MINUS expression
    (19) expression -> . expression TIMES expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . LPAREN expression RPAREN
    (22) expression -> . number
    (23) number -> . INTEGER
    (24) number -> . FLOAT
    (25) number -> . VARIABLE

    LPAREN          shift and go to state 18
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 30
    VARIABLE        shift and go to state 39

    expression                     shift and go to state 38
    number                         shift and go to state 24

state 19

    (59) dvariable -> KW_LET . VARIABLE SEMI
    (60) array -> KW_LET . VARIABLE EQUALS LBRACKET mdata RBRACKET
    (76) linkedlist -> KW_LET . VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI
    (77) linkedlist -> KW_LET . KW_MUT VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI
    (78) linkedlist -> KW_LET . VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI
    (79) linkedlist -> KW_LET . KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI

    VARIABLE        shift and go to state 40
    KW_MUT          shift and go to state 41


state 20

    (61) variables -> VARIABLE .
    (62) variables -> VARIABLE . COMMA variables
    (80) push -> VARIABLE . DOT PUSH LPAREN data RPAREN SEMI
    (81) remove -> VARIABLE . DOT REMOVE LPAREN INTEGER RPAREN SEMI
    (25) number -> VARIABLE .

  ! reduce/reduce conflict for KW_PRINT resolved using rule 25 (number -> VARIABLE .)
  ! reduce/reduce conflict for KW_LET resolved using rule 25 (number -> VARIABLE .)
  ! reduce/reduce conflict for KW_FN resolved using rule 25 (number -> VARIABLE .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 25 (number -> VARIABLE .)
  ! reduce/reduce conflict for LPAREN resolved using rule 25 (number -> VARIABLE .)
  ! reduce/reduce conflict for KW_IF resolved using rule 25 (number -> VARIABLE .)
  ! reduce/reduce conflict for KW_ELSE resolved using rule 25 (number -> VARIABLE .)
  ! reduce/reduce conflict for KW_FOR resolved using rule 25 (number -> VARIABLE .)
  ! reduce/reduce conflict for INTEGER resolved using rule 25 (number -> VARIABLE .)
  ! reduce/reduce conflict for FLOAT resolved using rule 25 (number -> VARIABLE .)
  ! reduce/reduce conflict for QUOTE resolved using rule 25 (number -> VARIABLE .)
  ! reduce/reduce conflict for $end resolved using rule 25 (number -> VARIABLE .)
  ! reduce/reduce conflict for RBRACE resolved using rule 25 (number -> VARIABLE .)
    COMMA           shift and go to state 42
    DOT             shift and go to state 43
    PLUS            reduce using rule 25 (number -> VARIABLE .)
    MINUS           reduce using rule 25 (number -> VARIABLE .)
    TIMES           reduce using rule 25 (number -> VARIABLE .)
    DIVIDE          reduce using rule 25 (number -> VARIABLE .)
    KW_PRINT        reduce using rule 25 (number -> VARIABLE .)
    KW_LET          reduce using rule 25 (number -> VARIABLE .)
    KW_FN           reduce using rule 25 (number -> VARIABLE .)
    VARIABLE        reduce using rule 25 (number -> VARIABLE .)
    LPAREN          reduce using rule 25 (number -> VARIABLE .)
    KW_IF           reduce using rule 25 (number -> VARIABLE .)
    KW_ELSE         reduce using rule 25 (number -> VARIABLE .)
    KW_FOR          reduce using rule 25 (number -> VARIABLE .)
    INTEGER         reduce using rule 25 (number -> VARIABLE .)
    FLOAT           reduce using rule 25 (number -> VARIABLE .)
    QUOTE           reduce using rule 25 (number -> VARIABLE .)
    $end            reduce using rule 25 (number -> VARIABLE .)
    RBRACE          reduce using rule 25 (number -> VARIABLE .)

  ! KW_PRINT        [ reduce using rule 61 (variables -> VARIABLE .) ]
  ! KW_LET          [ reduce using rule 61 (variables -> VARIABLE .) ]
  ! KW_FN           [ reduce using rule 61 (variables -> VARIABLE .) ]
  ! VARIABLE        [ reduce using rule 61 (variables -> VARIABLE .) ]
  ! LPAREN          [ reduce using rule 61 (variables -> VARIABLE .) ]
  ! KW_IF           [ reduce using rule 61 (variables -> VARIABLE .) ]
  ! KW_ELSE         [ reduce using rule 61 (variables -> VARIABLE .) ]
  ! KW_FOR          [ reduce using rule 61 (variables -> VARIABLE .) ]
  ! INTEGER         [ reduce using rule 61 (variables -> VARIABLE .) ]
  ! FLOAT           [ reduce using rule 61 (variables -> VARIABLE .) ]
  ! QUOTE           [ reduce using rule 61 (variables -> VARIABLE .) ]
  ! $end            [ reduce using rule 61 (variables -> VARIABLE .) ]
  ! RBRACE          [ reduce using rule 61 (variables -> VARIABLE .) ]


state 21

    (66) function -> KW_FN . VARIABLE LPAREN arguments RPAREN LBRACE father_rule RBRACE

    VARIABLE        shift and go to state 44


state 22

    (67) control_str -> for_str .

    KW_PRINT        reduce using rule 67 (control_str -> for_str .)
    KW_LET          reduce using rule 67 (control_str -> for_str .)
    KW_FN           reduce using rule 67 (control_str -> for_str .)
    VARIABLE        reduce using rule 67 (control_str -> for_str .)
    LPAREN          reduce using rule 67 (control_str -> for_str .)
    KW_IF           reduce using rule 67 (control_str -> for_str .)
    KW_ELSE         reduce using rule 67 (control_str -> for_str .)
    KW_FOR          reduce using rule 67 (control_str -> for_str .)
    INTEGER         reduce using rule 67 (control_str -> for_str .)
    FLOAT           reduce using rule 67 (control_str -> for_str .)
    QUOTE           reduce using rule 67 (control_str -> for_str .)
    $end            reduce using rule 67 (control_str -> for_str .)
    RBRACE          reduce using rule 67 (control_str -> for_str .)


state 23

    (68) control_str -> for_str_tagged .

    KW_PRINT        reduce using rule 68 (control_str -> for_str_tagged .)
    KW_LET          reduce using rule 68 (control_str -> for_str_tagged .)
    KW_FN           reduce using rule 68 (control_str -> for_str_tagged .)
    VARIABLE        reduce using rule 68 (control_str -> for_str_tagged .)
    LPAREN          reduce using rule 68 (control_str -> for_str_tagged .)
    KW_IF           reduce using rule 68 (control_str -> for_str_tagged .)
    KW_ELSE         reduce using rule 68 (control_str -> for_str_tagged .)
    KW_FOR          reduce using rule 68 (control_str -> for_str_tagged .)
    INTEGER         reduce using rule 68 (control_str -> for_str_tagged .)
    FLOAT           reduce using rule 68 (control_str -> for_str_tagged .)
    QUOTE           reduce using rule 68 (control_str -> for_str_tagged .)
    $end            reduce using rule 68 (control_str -> for_str_tagged .)
    RBRACE          reduce using rule 68 (control_str -> for_str_tagged .)


state 24

    (22) expression -> number .

    PLUS            reduce using rule 22 (expression -> number .)
    MINUS           reduce using rule 22 (expression -> number .)
    TIMES           reduce using rule 22 (expression -> number .)
    DIVIDE          reduce using rule 22 (expression -> number .)
    KW_PRINT        reduce using rule 22 (expression -> number .)
    KW_LET          reduce using rule 22 (expression -> number .)
    KW_FN           reduce using rule 22 (expression -> number .)
    VARIABLE        reduce using rule 22 (expression -> number .)
    LPAREN          reduce using rule 22 (expression -> number .)
    KW_IF           reduce using rule 22 (expression -> number .)
    KW_ELSE         reduce using rule 22 (expression -> number .)
    KW_FOR          reduce using rule 22 (expression -> number .)
    INTEGER         reduce using rule 22 (expression -> number .)
    FLOAT           reduce using rule 22 (expression -> number .)
    QUOTE           reduce using rule 22 (expression -> number .)
    $end            reduce using rule 22 (expression -> number .)
    RPAREN          reduce using rule 22 (expression -> number .)
    RBRACE          reduce using rule 22 (expression -> number .)


state 25

    (23) number -> INTEGER .

    PLUS            reduce using rule 23 (number -> INTEGER .)
    MINUS           reduce using rule 23 (number -> INTEGER .)
    TIMES           reduce using rule 23 (number -> INTEGER .)
    DIVIDE          reduce using rule 23 (number -> INTEGER .)
    KW_PRINT        reduce using rule 23 (number -> INTEGER .)
    KW_LET          reduce using rule 23 (number -> INTEGER .)
    KW_FN           reduce using rule 23 (number -> INTEGER .)
    VARIABLE        reduce using rule 23 (number -> INTEGER .)
    LPAREN          reduce using rule 23 (number -> INTEGER .)
    KW_IF           reduce using rule 23 (number -> INTEGER .)
    KW_ELSE         reduce using rule 23 (number -> INTEGER .)
    KW_FOR          reduce using rule 23 (number -> INTEGER .)
    INTEGER         reduce using rule 23 (number -> INTEGER .)
    FLOAT           reduce using rule 23 (number -> INTEGER .)
    QUOTE           reduce using rule 23 (number -> INTEGER .)
    $end            reduce using rule 23 (number -> INTEGER .)
    RPAREN          reduce using rule 23 (number -> INTEGER .)
    RBRACE          reduce using rule 23 (number -> INTEGER .)


state 26

    (82) if -> KW_IF . conditional LBRACE father_rule RBRACE
    (53) conditional -> . VARIABLE comparator data
    (54) conditional -> . and comparator data
    (52) and -> . VARIABLE LAND VARIABLE

    VARIABLE        shift and go to state 46

    conditional                    shift and go to state 45
    and                            shift and go to state 47

state 27

    (83) else -> KW_ELSE . LBRACE father_rule RBRACE
    (84) else_if -> KW_ELSE . KW_IF conditional LBRACE father_rule RBRACE

    LBRACE          shift and go to state 48
    KW_IF           shift and go to state 49


state 28

    (69) for_str -> KW_FOR . VARIABLE KW_IN range LBRACE father_rule RBRACE
    (70) for_str -> KW_FOR . VARIABLE KW_IN VARIABLE LBRACE father_rule RBRACE

    VARIABLE        shift and go to state 50


state 29

    (71) for_str_tagged -> label . COLON for_str

    COLON           shift and go to state 51


state 30

    (24) number -> FLOAT .

    PLUS            reduce using rule 24 (number -> FLOAT .)
    MINUS           reduce using rule 24 (number -> FLOAT .)
    TIMES           reduce using rule 24 (number -> FLOAT .)
    DIVIDE          reduce using rule 24 (number -> FLOAT .)
    KW_PRINT        reduce using rule 24 (number -> FLOAT .)
    KW_LET          reduce using rule 24 (number -> FLOAT .)
    KW_FN           reduce using rule 24 (number -> FLOAT .)
    VARIABLE        reduce using rule 24 (number -> FLOAT .)
    LPAREN          reduce using rule 24 (number -> FLOAT .)
    KW_IF           reduce using rule 24 (number -> FLOAT .)
    KW_ELSE         reduce using rule 24 (number -> FLOAT .)
    KW_FOR          reduce using rule 24 (number -> FLOAT .)
    INTEGER         reduce using rule 24 (number -> FLOAT .)
    FLOAT           reduce using rule 24 (number -> FLOAT .)
    QUOTE           reduce using rule 24 (number -> FLOAT .)
    $end            reduce using rule 24 (number -> FLOAT .)
    RPAREN          reduce using rule 24 (number -> FLOAT .)
    RBRACE          reduce using rule 24 (number -> FLOAT .)


state 31

    (74) label -> QUOTE . VARIABLE

    VARIABLE        shift and go to state 52


state 32

    (2) main_rule -> father_rule main_rule .

    $end            reduce using rule 2 (main_rule -> father_rule main_rule .)


state 33

    (17) expression -> expression PLUS . expression
    (17) expression -> . expression PLUS expression
    (18) expression -> . expression MINUS expression
    (19) expression -> . expression TIMES expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . LPAREN expression RPAREN
    (22) expression -> . number
    (23) number -> . INTEGER
    (24) number -> . FLOAT
    (25) number -> . VARIABLE

    LPAREN          shift and go to state 18
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 30
    VARIABLE        shift and go to state 39

    expression                     shift and go to state 53
    number                         shift and go to state 24

state 34

    (18) expression -> expression MINUS . expression
    (17) expression -> . expression PLUS expression
    (18) expression -> . expression MINUS expression
    (19) expression -> . expression TIMES expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . LPAREN expression RPAREN
    (22) expression -> . number
    (23) number -> . INTEGER
    (24) number -> . FLOAT
    (25) number -> . VARIABLE

    LPAREN          shift and go to state 18
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 30
    VARIABLE        shift and go to state 39

    expression                     shift and go to state 54
    number                         shift and go to state 24

state 35

    (19) expression -> expression TIMES . expression
    (17) expression -> . expression PLUS expression
    (18) expression -> . expression MINUS expression
    (19) expression -> . expression TIMES expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . LPAREN expression RPAREN
    (22) expression -> . number
    (23) number -> . INTEGER
    (24) number -> . FLOAT
    (25) number -> . VARIABLE

    LPAREN          shift and go to state 18
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 30
    VARIABLE        shift and go to state 39

    expression                     shift and go to state 55
    number                         shift and go to state 24

state 36

    (20) expression -> expression DIVIDE . expression
    (17) expression -> . expression PLUS expression
    (18) expression -> . expression MINUS expression
    (19) expression -> . expression TIMES expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . LPAREN expression RPAREN
    (22) expression -> . number
    (23) number -> . INTEGER
    (24) number -> . FLOAT
    (25) number -> . VARIABLE

    LPAREN          shift and go to state 18
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 30
    VARIABLE        shift and go to state 39

    expression                     shift and go to state 56
    number                         shift and go to state 24

state 37

    (58) print -> KW_PRINT LPAREN . CADENA RPAREN SEMI

    CADENA          shift and go to state 57


state 38

    (21) expression -> LPAREN expression . RPAREN
    (17) expression -> expression . PLUS expression
    (18) expression -> expression . MINUS expression
    (19) expression -> expression . TIMES expression
    (20) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 58
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36


state 39

    (25) number -> VARIABLE .

    RPAREN          reduce using rule 25 (number -> VARIABLE .)
    PLUS            reduce using rule 25 (number -> VARIABLE .)
    MINUS           reduce using rule 25 (number -> VARIABLE .)
    TIMES           reduce using rule 25 (number -> VARIABLE .)
    DIVIDE          reduce using rule 25 (number -> VARIABLE .)
    KW_PRINT        reduce using rule 25 (number -> VARIABLE .)
    KW_LET          reduce using rule 25 (number -> VARIABLE .)
    KW_FN           reduce using rule 25 (number -> VARIABLE .)
    VARIABLE        reduce using rule 25 (number -> VARIABLE .)
    LPAREN          reduce using rule 25 (number -> VARIABLE .)
    KW_IF           reduce using rule 25 (number -> VARIABLE .)
    KW_ELSE         reduce using rule 25 (number -> VARIABLE .)
    KW_FOR          reduce using rule 25 (number -> VARIABLE .)
    INTEGER         reduce using rule 25 (number -> VARIABLE .)
    FLOAT           reduce using rule 25 (number -> VARIABLE .)
    QUOTE           reduce using rule 25 (number -> VARIABLE .)
    $end            reduce using rule 25 (number -> VARIABLE .)
    RBRACE          reduce using rule 25 (number -> VARIABLE .)


state 40

    (59) dvariable -> KW_LET VARIABLE . SEMI
    (60) array -> KW_LET VARIABLE . EQUALS LBRACKET mdata RBRACKET
    (76) linkedlist -> KW_LET VARIABLE . COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI
    (78) linkedlist -> KW_LET VARIABLE . EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI

    SEMI            shift and go to state 59
    EQUALS          shift and go to state 60
    COLON           shift and go to state 61


state 41

    (77) linkedlist -> KW_LET KW_MUT . VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI
    (79) linkedlist -> KW_LET KW_MUT . VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI

    VARIABLE        shift and go to state 62


state 42

    (62) variables -> VARIABLE COMMA . variables
    (61) variables -> . VARIABLE
    (62) variables -> . VARIABLE COMMA variables

    VARIABLE        shift and go to state 63

    variables                      shift and go to state 64

state 43

    (80) push -> VARIABLE DOT . PUSH LPAREN data RPAREN SEMI
    (81) remove -> VARIABLE DOT . REMOVE LPAREN INTEGER RPAREN SEMI

    PUSH            shift and go to state 65
    REMOVE          shift and go to state 66


state 44

    (66) function -> KW_FN VARIABLE . LPAREN arguments RPAREN LBRACE father_rule RBRACE

    LPAREN          shift and go to state 67


state 45

    (82) if -> KW_IF conditional . LBRACE father_rule RBRACE

    LBRACE          shift and go to state 68


state 46

    (53) conditional -> VARIABLE . comparator data
    (52) and -> VARIABLE . LAND VARIABLE
    (45) comparator -> .
    (46) comparator -> . EQ
    (47) comparator -> . NE
    (48) comparator -> . GE
    (49) comparator -> . LE
    (50) comparator -> . GT
    (51) comparator -> . LT

    LAND            shift and go to state 70
    CADENA          reduce using rule 45 (comparator -> .)
    INTEGER         reduce using rule 45 (comparator -> .)
    CHAR            reduce using rule 45 (comparator -> .)
    FLOAT           reduce using rule 45 (comparator -> .)
    KW_FALSE        reduce using rule 45 (comparator -> .)
    KW_TRUE         reduce using rule 45 (comparator -> .)
    EQ              shift and go to state 71
    NE              shift and go to state 72
    GE              shift and go to state 73
    LE              shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76

    comparator                     shift and go to state 69

state 47

    (54) conditional -> and . comparator data
    (45) comparator -> .
    (46) comparator -> . EQ
    (47) comparator -> . NE
    (48) comparator -> . GE
    (49) comparator -> . LE
    (50) comparator -> . GT
    (51) comparator -> . LT

    CADENA          reduce using rule 45 (comparator -> .)
    INTEGER         reduce using rule 45 (comparator -> .)
    CHAR            reduce using rule 45 (comparator -> .)
    FLOAT           reduce using rule 45 (comparator -> .)
    KW_FALSE        reduce using rule 45 (comparator -> .)
    KW_TRUE         reduce using rule 45 (comparator -> .)
    EQ              shift and go to state 71
    NE              shift and go to state 72
    GE              shift and go to state 73
    LE              shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76

    comparator                     shift and go to state 77

state 48

    (83) else -> KW_ELSE LBRACE . father_rule RBRACE
    (3) father_rule -> . print
    (4) father_rule -> . dvariable
    (5) father_rule -> . array
    (6) father_rule -> . function
    (7) father_rule -> . variables
    (8) father_rule -> . control_str
    (9) father_rule -> . expression
    (10) father_rule -> . void
    (11) father_rule -> . linkedlist
    (12) father_rule -> . push
    (13) father_rule -> . remove
    (14) father_rule -> . if
    (15) father_rule -> . else
    (16) father_rule -> . else_if
    (58) print -> . KW_PRINT LPAREN CADENA RPAREN SEMI
    (59) dvariable -> . KW_LET VARIABLE SEMI
    (60) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET
    (66) function -> . KW_FN VARIABLE LPAREN arguments RPAREN LBRACE father_rule RBRACE
    (61) variables -> . VARIABLE
    (62) variables -> . VARIABLE COMMA variables
    (67) control_str -> . for_str
    (68) control_str -> . for_str_tagged
    (17) expression -> . expression PLUS expression
    (18) expression -> . expression MINUS expression
    (19) expression -> . expression TIMES expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . LPAREN expression RPAREN
    (22) expression -> . number
    (75) void -> .
    (76) linkedlist -> . KW_LET VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI
    (77) linkedlist -> . KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI
    (78) linkedlist -> . KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI
    (79) linkedlist -> . KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI
    (80) push -> . VARIABLE DOT PUSH LPAREN data RPAREN SEMI
    (81) remove -> . VARIABLE DOT REMOVE LPAREN INTEGER RPAREN SEMI
    (82) if -> . KW_IF conditional LBRACE father_rule RBRACE
    (83) else -> . KW_ELSE LBRACE father_rule RBRACE
    (84) else_if -> . KW_ELSE KW_IF conditional LBRACE father_rule RBRACE
    (69) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE father_rule RBRACE
    (70) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE father_rule RBRACE
    (71) for_str_tagged -> . label COLON for_str
    (23) number -> . INTEGER
    (24) number -> . FLOAT
    (25) number -> . VARIABLE
    (74) label -> . QUOTE VARIABLE

    KW_PRINT        shift and go to state 17
    KW_LET          shift and go to state 19
    KW_FN           shift and go to state 21
    VARIABLE        shift and go to state 20
    LPAREN          shift and go to state 18
    RBRACE          reduce using rule 75 (void -> .)
    KW_IF           shift and go to state 26
    KW_ELSE         shift and go to state 27
    KW_FOR          shift and go to state 28
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 30
    QUOTE           shift and go to state 31

    father_rule                    shift and go to state 78
    print                          shift and go to state 3
    dvariable                      shift and go to state 4
    array                          shift and go to state 5
    function                       shift and go to state 6
    variables                      shift and go to state 7
    control_str                    shift and go to state 8
    expression                     shift and go to state 9
    void                           shift and go to state 10
    linkedlist                     shift and go to state 11
    push                           shift and go to state 12
    remove                         shift and go to state 13
    if                             shift and go to state 14
    else                           shift and go to state 15
    else_if                        shift and go to state 16
    for_str                        shift and go to state 22
    for_str_tagged                 shift and go to state 23
    number                         shift and go to state 24
    label                          shift and go to state 29

state 49

    (84) else_if -> KW_ELSE KW_IF . conditional LBRACE father_rule RBRACE
    (53) conditional -> . VARIABLE comparator data
    (54) conditional -> . and comparator data
    (52) and -> . VARIABLE LAND VARIABLE

    VARIABLE        shift and go to state 46

    conditional                    shift and go to state 79
    and                            shift and go to state 47

state 50

    (69) for_str -> KW_FOR VARIABLE . KW_IN range LBRACE father_rule RBRACE
    (70) for_str -> KW_FOR VARIABLE . KW_IN VARIABLE LBRACE father_rule RBRACE

    KW_IN           shift and go to state 80


state 51

    (71) for_str_tagged -> label COLON . for_str
    (69) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE father_rule RBRACE
    (70) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE father_rule RBRACE

    KW_FOR          shift and go to state 28

    for_str                        shift and go to state 81

state 52

    (74) label -> QUOTE VARIABLE .

    COLON           reduce using rule 74 (label -> QUOTE VARIABLE .)


state 53

    (17) expression -> expression PLUS expression .
    (17) expression -> expression . PLUS expression
    (18) expression -> expression . MINUS expression
    (19) expression -> expression . TIMES expression
    (20) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    KW_PRINT        reduce using rule 17 (expression -> expression PLUS expression .)
    KW_LET          reduce using rule 17 (expression -> expression PLUS expression .)
    KW_FN           reduce using rule 17 (expression -> expression PLUS expression .)
    VARIABLE        reduce using rule 17 (expression -> expression PLUS expression .)
    LPAREN          reduce using rule 17 (expression -> expression PLUS expression .)
    KW_IF           reduce using rule 17 (expression -> expression PLUS expression .)
    KW_ELSE         reduce using rule 17 (expression -> expression PLUS expression .)
    KW_FOR          reduce using rule 17 (expression -> expression PLUS expression .)
    INTEGER         reduce using rule 17 (expression -> expression PLUS expression .)
    FLOAT           reduce using rule 17 (expression -> expression PLUS expression .)
    QUOTE           reduce using rule 17 (expression -> expression PLUS expression .)
    $end            reduce using rule 17 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 17 (expression -> expression PLUS expression .)
    RBRACE          reduce using rule 17 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36

  ! PLUS            [ reduce using rule 17 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 17 (expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 17 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 17 (expression -> expression PLUS expression .) ]


state 54

    (18) expression -> expression MINUS expression .
    (17) expression -> expression . PLUS expression
    (18) expression -> expression . MINUS expression
    (19) expression -> expression . TIMES expression
    (20) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    KW_PRINT        reduce using rule 18 (expression -> expression MINUS expression .)
    KW_LET          reduce using rule 18 (expression -> expression MINUS expression .)
    KW_FN           reduce using rule 18 (expression -> expression MINUS expression .)
    VARIABLE        reduce using rule 18 (expression -> expression MINUS expression .)
    LPAREN          reduce using rule 18 (expression -> expression MINUS expression .)
    KW_IF           reduce using rule 18 (expression -> expression MINUS expression .)
    KW_ELSE         reduce using rule 18 (expression -> expression MINUS expression .)
    KW_FOR          reduce using rule 18 (expression -> expression MINUS expression .)
    INTEGER         reduce using rule 18 (expression -> expression MINUS expression .)
    FLOAT           reduce using rule 18 (expression -> expression MINUS expression .)
    QUOTE           reduce using rule 18 (expression -> expression MINUS expression .)
    $end            reduce using rule 18 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 18 (expression -> expression MINUS expression .)
    RBRACE          reduce using rule 18 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36

  ! PLUS            [ reduce using rule 18 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 18 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 18 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 18 (expression -> expression MINUS expression .) ]


state 55

    (19) expression -> expression TIMES expression .
    (17) expression -> expression . PLUS expression
    (18) expression -> expression . MINUS expression
    (19) expression -> expression . TIMES expression
    (20) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    KW_PRINT        reduce using rule 19 (expression -> expression TIMES expression .)
    KW_LET          reduce using rule 19 (expression -> expression TIMES expression .)
    KW_FN           reduce using rule 19 (expression -> expression TIMES expression .)
    VARIABLE        reduce using rule 19 (expression -> expression TIMES expression .)
    LPAREN          reduce using rule 19 (expression -> expression TIMES expression .)
    KW_IF           reduce using rule 19 (expression -> expression TIMES expression .)
    KW_ELSE         reduce using rule 19 (expression -> expression TIMES expression .)
    KW_FOR          reduce using rule 19 (expression -> expression TIMES expression .)
    INTEGER         reduce using rule 19 (expression -> expression TIMES expression .)
    FLOAT           reduce using rule 19 (expression -> expression TIMES expression .)
    QUOTE           reduce using rule 19 (expression -> expression TIMES expression .)
    $end            reduce using rule 19 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 19 (expression -> expression TIMES expression .)
    RBRACE          reduce using rule 19 (expression -> expression TIMES expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36

  ! PLUS            [ reduce using rule 19 (expression -> expression TIMES expression .) ]
  ! MINUS           [ reduce using rule 19 (expression -> expression TIMES expression .) ]
  ! TIMES           [ reduce using rule 19 (expression -> expression TIMES expression .) ]
  ! DIVIDE          [ reduce using rule 19 (expression -> expression TIMES expression .) ]


state 56

    (20) expression -> expression DIVIDE expression .
    (17) expression -> expression . PLUS expression
    (18) expression -> expression . MINUS expression
    (19) expression -> expression . TIMES expression
    (20) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    KW_PRINT        reduce using rule 20 (expression -> expression DIVIDE expression .)
    KW_LET          reduce using rule 20 (expression -> expression DIVIDE expression .)
    KW_FN           reduce using rule 20 (expression -> expression DIVIDE expression .)
    VARIABLE        reduce using rule 20 (expression -> expression DIVIDE expression .)
    LPAREN          reduce using rule 20 (expression -> expression DIVIDE expression .)
    KW_IF           reduce using rule 20 (expression -> expression DIVIDE expression .)
    KW_ELSE         reduce using rule 20 (expression -> expression DIVIDE expression .)
    KW_FOR          reduce using rule 20 (expression -> expression DIVIDE expression .)
    INTEGER         reduce using rule 20 (expression -> expression DIVIDE expression .)
    FLOAT           reduce using rule 20 (expression -> expression DIVIDE expression .)
    QUOTE           reduce using rule 20 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 20 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 20 (expression -> expression DIVIDE expression .)
    RBRACE          reduce using rule 20 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36

  ! PLUS            [ reduce using rule 20 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 20 (expression -> expression DIVIDE expression .) ]
  ! TIMES           [ reduce using rule 20 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 20 (expression -> expression DIVIDE expression .) ]


state 57

    (58) print -> KW_PRINT LPAREN CADENA . RPAREN SEMI

    RPAREN          shift and go to state 82


state 58

    (21) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    KW_PRINT        reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    KW_LET          reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    KW_FN           reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    VARIABLE        reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    KW_IF           reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    KW_ELSE         reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    KW_FOR          reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    INTEGER         reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    FLOAT           reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    QUOTE           reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 21 (expression -> LPAREN expression RPAREN .)


state 59

    (59) dvariable -> KW_LET VARIABLE SEMI .

    KW_PRINT        reduce using rule 59 (dvariable -> KW_LET VARIABLE SEMI .)
    KW_LET          reduce using rule 59 (dvariable -> KW_LET VARIABLE SEMI .)
    KW_FN           reduce using rule 59 (dvariable -> KW_LET VARIABLE SEMI .)
    VARIABLE        reduce using rule 59 (dvariable -> KW_LET VARIABLE SEMI .)
    LPAREN          reduce using rule 59 (dvariable -> KW_LET VARIABLE SEMI .)
    KW_IF           reduce using rule 59 (dvariable -> KW_LET VARIABLE SEMI .)
    KW_ELSE         reduce using rule 59 (dvariable -> KW_LET VARIABLE SEMI .)
    KW_FOR          reduce using rule 59 (dvariable -> KW_LET VARIABLE SEMI .)
    INTEGER         reduce using rule 59 (dvariable -> KW_LET VARIABLE SEMI .)
    FLOAT           reduce using rule 59 (dvariable -> KW_LET VARIABLE SEMI .)
    QUOTE           reduce using rule 59 (dvariable -> KW_LET VARIABLE SEMI .)
    $end            reduce using rule 59 (dvariable -> KW_LET VARIABLE SEMI .)
    RBRACE          reduce using rule 59 (dvariable -> KW_LET VARIABLE SEMI .)


state 60

    (60) array -> KW_LET VARIABLE EQUALS . LBRACKET mdata RBRACKET
    (78) linkedlist -> KW_LET VARIABLE EQUALS . KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI

    LBRACKET        shift and go to state 83
    KW_LINKEDLIST   shift and go to state 84


state 61

    (76) linkedlist -> KW_LET VARIABLE COLON . KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI

    KW_LINKEDLIST   shift and go to state 85


state 62

    (77) linkedlist -> KW_LET KW_MUT VARIABLE . COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI
    (79) linkedlist -> KW_LET KW_MUT VARIABLE . EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI

    COLON           shift and go to state 86
    EQUALS          shift and go to state 87


state 63

    (61) variables -> VARIABLE .
    (62) variables -> VARIABLE . COMMA variables

    KW_PRINT        reduce using rule 61 (variables -> VARIABLE .)
    KW_LET          reduce using rule 61 (variables -> VARIABLE .)
    KW_FN           reduce using rule 61 (variables -> VARIABLE .)
    VARIABLE        reduce using rule 61 (variables -> VARIABLE .)
    LPAREN          reduce using rule 61 (variables -> VARIABLE .)
    KW_IF           reduce using rule 61 (variables -> VARIABLE .)
    KW_ELSE         reduce using rule 61 (variables -> VARIABLE .)
    KW_FOR          reduce using rule 61 (variables -> VARIABLE .)
    INTEGER         reduce using rule 61 (variables -> VARIABLE .)
    FLOAT           reduce using rule 61 (variables -> VARIABLE .)
    QUOTE           reduce using rule 61 (variables -> VARIABLE .)
    $end            reduce using rule 61 (variables -> VARIABLE .)
    RBRACE          reduce using rule 61 (variables -> VARIABLE .)
    RPAREN          reduce using rule 61 (variables -> VARIABLE .)
    COMMA           shift and go to state 42


state 64

    (62) variables -> VARIABLE COMMA variables .

    KW_PRINT        reduce using rule 62 (variables -> VARIABLE COMMA variables .)
    KW_LET          reduce using rule 62 (variables -> VARIABLE COMMA variables .)
    KW_FN           reduce using rule 62 (variables -> VARIABLE COMMA variables .)
    VARIABLE        reduce using rule 62 (variables -> VARIABLE COMMA variables .)
    LPAREN          reduce using rule 62 (variables -> VARIABLE COMMA variables .)
    KW_IF           reduce using rule 62 (variables -> VARIABLE COMMA variables .)
    KW_ELSE         reduce using rule 62 (variables -> VARIABLE COMMA variables .)
    KW_FOR          reduce using rule 62 (variables -> VARIABLE COMMA variables .)
    INTEGER         reduce using rule 62 (variables -> VARIABLE COMMA variables .)
    FLOAT           reduce using rule 62 (variables -> VARIABLE COMMA variables .)
    QUOTE           reduce using rule 62 (variables -> VARIABLE COMMA variables .)
    $end            reduce using rule 62 (variables -> VARIABLE COMMA variables .)
    RBRACE          reduce using rule 62 (variables -> VARIABLE COMMA variables .)
    RPAREN          reduce using rule 62 (variables -> VARIABLE COMMA variables .)


state 65

    (80) push -> VARIABLE DOT PUSH . LPAREN data RPAREN SEMI

    LPAREN          shift and go to state 88


state 66

    (81) remove -> VARIABLE DOT REMOVE . LPAREN INTEGER RPAREN SEMI

    LPAREN          shift and go to state 89


state 67

    (66) function -> KW_FN VARIABLE LPAREN . arguments RPAREN LBRACE father_rule RBRACE
    (64) arguments -> . void
    (65) arguments -> . variables
    (75) void -> .
    (61) variables -> . VARIABLE
    (62) variables -> . VARIABLE COMMA variables

    RPAREN          reduce using rule 75 (void -> .)
    VARIABLE        shift and go to state 63

    arguments                      shift and go to state 90
    void                           shift and go to state 91
    variables                      shift and go to state 92

state 68

    (82) if -> KW_IF conditional LBRACE . father_rule RBRACE
    (3) father_rule -> . print
    (4) father_rule -> . dvariable
    (5) father_rule -> . array
    (6) father_rule -> . function
    (7) father_rule -> . variables
    (8) father_rule -> . control_str
    (9) father_rule -> . expression
    (10) father_rule -> . void
    (11) father_rule -> . linkedlist
    (12) father_rule -> . push
    (13) father_rule -> . remove
    (14) father_rule -> . if
    (15) father_rule -> . else
    (16) father_rule -> . else_if
    (58) print -> . KW_PRINT LPAREN CADENA RPAREN SEMI
    (59) dvariable -> . KW_LET VARIABLE SEMI
    (60) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET
    (66) function -> . KW_FN VARIABLE LPAREN arguments RPAREN LBRACE father_rule RBRACE
    (61) variables -> . VARIABLE
    (62) variables -> . VARIABLE COMMA variables
    (67) control_str -> . for_str
    (68) control_str -> . for_str_tagged
    (17) expression -> . expression PLUS expression
    (18) expression -> . expression MINUS expression
    (19) expression -> . expression TIMES expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . LPAREN expression RPAREN
    (22) expression -> . number
    (75) void -> .
    (76) linkedlist -> . KW_LET VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI
    (77) linkedlist -> . KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI
    (78) linkedlist -> . KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI
    (79) linkedlist -> . KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI
    (80) push -> . VARIABLE DOT PUSH LPAREN data RPAREN SEMI
    (81) remove -> . VARIABLE DOT REMOVE LPAREN INTEGER RPAREN SEMI
    (82) if -> . KW_IF conditional LBRACE father_rule RBRACE
    (83) else -> . KW_ELSE LBRACE father_rule RBRACE
    (84) else_if -> . KW_ELSE KW_IF conditional LBRACE father_rule RBRACE
    (69) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE father_rule RBRACE
    (70) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE father_rule RBRACE
    (71) for_str_tagged -> . label COLON for_str
    (23) number -> . INTEGER
    (24) number -> . FLOAT
    (25) number -> . VARIABLE
    (74) label -> . QUOTE VARIABLE

    KW_PRINT        shift and go to state 17
    KW_LET          shift and go to state 19
    KW_FN           shift and go to state 21
    VARIABLE        shift and go to state 20
    LPAREN          shift and go to state 18
    RBRACE          reduce using rule 75 (void -> .)
    KW_IF           shift and go to state 26
    KW_ELSE         shift and go to state 27
    KW_FOR          shift and go to state 28
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 30
    QUOTE           shift and go to state 31

    father_rule                    shift and go to state 93
    print                          shift and go to state 3
    dvariable                      shift and go to state 4
    array                          shift and go to state 5
    function                       shift and go to state 6
    variables                      shift and go to state 7
    control_str                    shift and go to state 8
    expression                     shift and go to state 9
    void                           shift and go to state 10
    linkedlist                     shift and go to state 11
    push                           shift and go to state 12
    remove                         shift and go to state 13
    if                             shift and go to state 14
    else                           shift and go to state 15
    else_if                        shift and go to state 16
    for_str                        shift and go to state 22
    for_str_tagged                 shift and go to state 23
    number                         shift and go to state 24
    label                          shift and go to state 29

state 69

    (53) conditional -> VARIABLE comparator . data
    (39) data -> . CADENA
    (40) data -> . INTEGER
    (41) data -> . CHAR
    (42) data -> . FLOAT
    (43) data -> . KW_FALSE
    (44) data -> . KW_TRUE

    CADENA          shift and go to state 95
    INTEGER         shift and go to state 96
    CHAR            shift and go to state 97
    FLOAT           shift and go to state 98
    KW_FALSE        shift and go to state 99
    KW_TRUE         shift and go to state 100

    data                           shift and go to state 94

state 70

    (52) and -> VARIABLE LAND . VARIABLE

    VARIABLE        shift and go to state 101


state 71

    (46) comparator -> EQ .

    CADENA          reduce using rule 46 (comparator -> EQ .)
    INTEGER         reduce using rule 46 (comparator -> EQ .)
    CHAR            reduce using rule 46 (comparator -> EQ .)
    FLOAT           reduce using rule 46 (comparator -> EQ .)
    KW_FALSE        reduce using rule 46 (comparator -> EQ .)
    KW_TRUE         reduce using rule 46 (comparator -> EQ .)


state 72

    (47) comparator -> NE .

    CADENA          reduce using rule 47 (comparator -> NE .)
    INTEGER         reduce using rule 47 (comparator -> NE .)
    CHAR            reduce using rule 47 (comparator -> NE .)
    FLOAT           reduce using rule 47 (comparator -> NE .)
    KW_FALSE        reduce using rule 47 (comparator -> NE .)
    KW_TRUE         reduce using rule 47 (comparator -> NE .)


state 73

    (48) comparator -> GE .

    CADENA          reduce using rule 48 (comparator -> GE .)
    INTEGER         reduce using rule 48 (comparator -> GE .)
    CHAR            reduce using rule 48 (comparator -> GE .)
    FLOAT           reduce using rule 48 (comparator -> GE .)
    KW_FALSE        reduce using rule 48 (comparator -> GE .)
    KW_TRUE         reduce using rule 48 (comparator -> GE .)


state 74

    (49) comparator -> LE .

    CADENA          reduce using rule 49 (comparator -> LE .)
    INTEGER         reduce using rule 49 (comparator -> LE .)
    CHAR            reduce using rule 49 (comparator -> LE .)
    FLOAT           reduce using rule 49 (comparator -> LE .)
    KW_FALSE        reduce using rule 49 (comparator -> LE .)
    KW_TRUE         reduce using rule 49 (comparator -> LE .)


state 75

    (50) comparator -> GT .

    CADENA          reduce using rule 50 (comparator -> GT .)
    INTEGER         reduce using rule 50 (comparator -> GT .)
    CHAR            reduce using rule 50 (comparator -> GT .)
    FLOAT           reduce using rule 50 (comparator -> GT .)
    KW_FALSE        reduce using rule 50 (comparator -> GT .)
    KW_TRUE         reduce using rule 50 (comparator -> GT .)


state 76

    (51) comparator -> LT .

    CADENA          reduce using rule 51 (comparator -> LT .)
    INTEGER         reduce using rule 51 (comparator -> LT .)
    CHAR            reduce using rule 51 (comparator -> LT .)
    FLOAT           reduce using rule 51 (comparator -> LT .)
    KW_FALSE        reduce using rule 51 (comparator -> LT .)
    KW_TRUE         reduce using rule 51 (comparator -> LT .)


state 77

    (54) conditional -> and comparator . data
    (39) data -> . CADENA
    (40) data -> . INTEGER
    (41) data -> . CHAR
    (42) data -> . FLOAT
    (43) data -> . KW_FALSE
    (44) data -> . KW_TRUE

    CADENA          shift and go to state 95
    INTEGER         shift and go to state 96
    CHAR            shift and go to state 97
    FLOAT           shift and go to state 98
    KW_FALSE        shift and go to state 99
    KW_TRUE         shift and go to state 100

    data                           shift and go to state 102

state 78

    (83) else -> KW_ELSE LBRACE father_rule . RBRACE

    RBRACE          shift and go to state 103


state 79

    (84) else_if -> KW_ELSE KW_IF conditional . LBRACE father_rule RBRACE

    LBRACE          shift and go to state 104


state 80

    (69) for_str -> KW_FOR VARIABLE KW_IN . range LBRACE father_rule RBRACE
    (70) for_str -> KW_FOR VARIABLE KW_IN . VARIABLE LBRACE father_rule RBRACE
    (72) range -> . INTEGER DOT DOT INTEGER
    (73) range -> . VARIABLE DOT DOT VARIABLE

    VARIABLE        shift and go to state 105
    INTEGER         shift and go to state 107

    range                          shift and go to state 106

state 81

    (71) for_str_tagged -> label COLON for_str .

    KW_PRINT        reduce using rule 71 (for_str_tagged -> label COLON for_str .)
    KW_LET          reduce using rule 71 (for_str_tagged -> label COLON for_str .)
    KW_FN           reduce using rule 71 (for_str_tagged -> label COLON for_str .)
    VARIABLE        reduce using rule 71 (for_str_tagged -> label COLON for_str .)
    LPAREN          reduce using rule 71 (for_str_tagged -> label COLON for_str .)
    KW_IF           reduce using rule 71 (for_str_tagged -> label COLON for_str .)
    KW_ELSE         reduce using rule 71 (for_str_tagged -> label COLON for_str .)
    KW_FOR          reduce using rule 71 (for_str_tagged -> label COLON for_str .)
    INTEGER         reduce using rule 71 (for_str_tagged -> label COLON for_str .)
    FLOAT           reduce using rule 71 (for_str_tagged -> label COLON for_str .)
    QUOTE           reduce using rule 71 (for_str_tagged -> label COLON for_str .)
    $end            reduce using rule 71 (for_str_tagged -> label COLON for_str .)
    RBRACE          reduce using rule 71 (for_str_tagged -> label COLON for_str .)


state 82

    (58) print -> KW_PRINT LPAREN CADENA RPAREN . SEMI

    SEMI            shift and go to state 108


state 83

    (60) array -> KW_LET VARIABLE EQUALS LBRACKET . mdata RBRACKET
    (56) mdata -> . data
    (57) mdata -> . data COMMA mdata
    (39) data -> . CADENA
    (40) data -> . INTEGER
    (41) data -> . CHAR
    (42) data -> . FLOAT
    (43) data -> . KW_FALSE
    (44) data -> . KW_TRUE

    CADENA          shift and go to state 95
    INTEGER         shift and go to state 96
    CHAR            shift and go to state 97
    FLOAT           shift and go to state 98
    KW_FALSE        shift and go to state 99
    KW_TRUE         shift and go to state 100

    mdata                          shift and go to state 109
    data                           shift and go to state 110

state 84

    (78) linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST . COLON COLON KW_FROM LPAREN array RPAREN SEMI

    COLON           shift and go to state 111


state 85

    (76) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST . LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI

    LT              shift and go to state 112


state 86

    (77) linkedlist -> KW_LET KW_MUT VARIABLE COLON . KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI

    KW_LINKEDLIST   shift and go to state 113


state 87

    (79) linkedlist -> KW_LET KW_MUT VARIABLE EQUALS . KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI

    KW_LINKEDLIST   shift and go to state 114


state 88

    (80) push -> VARIABLE DOT PUSH LPAREN . data RPAREN SEMI
    (39) data -> . CADENA
    (40) data -> . INTEGER
    (41) data -> . CHAR
    (42) data -> . FLOAT
    (43) data -> . KW_FALSE
    (44) data -> . KW_TRUE

    CADENA          shift and go to state 95
    INTEGER         shift and go to state 96
    CHAR            shift and go to state 97
    FLOAT           shift and go to state 98
    KW_FALSE        shift and go to state 99
    KW_TRUE         shift and go to state 100

    data                           shift and go to state 115

state 89

    (81) remove -> VARIABLE DOT REMOVE LPAREN . INTEGER RPAREN SEMI

    INTEGER         shift and go to state 116


state 90

    (66) function -> KW_FN VARIABLE LPAREN arguments . RPAREN LBRACE father_rule RBRACE

    RPAREN          shift and go to state 117


state 91

    (64) arguments -> void .

    RPAREN          reduce using rule 64 (arguments -> void .)


state 92

    (65) arguments -> variables .

    RPAREN          reduce using rule 65 (arguments -> variables .)


state 93

    (82) if -> KW_IF conditional LBRACE father_rule . RBRACE

    RBRACE          shift and go to state 118


state 94

    (53) conditional -> VARIABLE comparator data .

    LBRACE          reduce using rule 53 (conditional -> VARIABLE comparator data .)


state 95

    (39) data -> CADENA .

    LBRACE          reduce using rule 39 (data -> CADENA .)
    COMMA           reduce using rule 39 (data -> CADENA .)
    RBRACKET        reduce using rule 39 (data -> CADENA .)
    RPAREN          reduce using rule 39 (data -> CADENA .)


state 96

    (40) data -> INTEGER .

    LBRACE          reduce using rule 40 (data -> INTEGER .)
    COMMA           reduce using rule 40 (data -> INTEGER .)
    RBRACKET        reduce using rule 40 (data -> INTEGER .)
    RPAREN          reduce using rule 40 (data -> INTEGER .)


state 97

    (41) data -> CHAR .

    LBRACE          reduce using rule 41 (data -> CHAR .)
    COMMA           reduce using rule 41 (data -> CHAR .)
    RBRACKET        reduce using rule 41 (data -> CHAR .)
    RPAREN          reduce using rule 41 (data -> CHAR .)


state 98

    (42) data -> FLOAT .

    LBRACE          reduce using rule 42 (data -> FLOAT .)
    COMMA           reduce using rule 42 (data -> FLOAT .)
    RBRACKET        reduce using rule 42 (data -> FLOAT .)
    RPAREN          reduce using rule 42 (data -> FLOAT .)


state 99

    (43) data -> KW_FALSE .

    LBRACE          reduce using rule 43 (data -> KW_FALSE .)
    COMMA           reduce using rule 43 (data -> KW_FALSE .)
    RBRACKET        reduce using rule 43 (data -> KW_FALSE .)
    RPAREN          reduce using rule 43 (data -> KW_FALSE .)


state 100

    (44) data -> KW_TRUE .

    LBRACE          reduce using rule 44 (data -> KW_TRUE .)
    COMMA           reduce using rule 44 (data -> KW_TRUE .)
    RBRACKET        reduce using rule 44 (data -> KW_TRUE .)
    RPAREN          reduce using rule 44 (data -> KW_TRUE .)


state 101

    (52) and -> VARIABLE LAND VARIABLE .

    EQ              reduce using rule 52 (and -> VARIABLE LAND VARIABLE .)
    NE              reduce using rule 52 (and -> VARIABLE LAND VARIABLE .)
    GE              reduce using rule 52 (and -> VARIABLE LAND VARIABLE .)
    LE              reduce using rule 52 (and -> VARIABLE LAND VARIABLE .)
    GT              reduce using rule 52 (and -> VARIABLE LAND VARIABLE .)
    LT              reduce using rule 52 (and -> VARIABLE LAND VARIABLE .)
    CADENA          reduce using rule 52 (and -> VARIABLE LAND VARIABLE .)
    INTEGER         reduce using rule 52 (and -> VARIABLE LAND VARIABLE .)
    CHAR            reduce using rule 52 (and -> VARIABLE LAND VARIABLE .)
    FLOAT           reduce using rule 52 (and -> VARIABLE LAND VARIABLE .)
    KW_FALSE        reduce using rule 52 (and -> VARIABLE LAND VARIABLE .)
    KW_TRUE         reduce using rule 52 (and -> VARIABLE LAND VARIABLE .)


state 102

    (54) conditional -> and comparator data .

    LBRACE          reduce using rule 54 (conditional -> and comparator data .)


state 103

    (83) else -> KW_ELSE LBRACE father_rule RBRACE .

    KW_PRINT        reduce using rule 83 (else -> KW_ELSE LBRACE father_rule RBRACE .)
    KW_LET          reduce using rule 83 (else -> KW_ELSE LBRACE father_rule RBRACE .)
    KW_FN           reduce using rule 83 (else -> KW_ELSE LBRACE father_rule RBRACE .)
    VARIABLE        reduce using rule 83 (else -> KW_ELSE LBRACE father_rule RBRACE .)
    LPAREN          reduce using rule 83 (else -> KW_ELSE LBRACE father_rule RBRACE .)
    KW_IF           reduce using rule 83 (else -> KW_ELSE LBRACE father_rule RBRACE .)
    KW_ELSE         reduce using rule 83 (else -> KW_ELSE LBRACE father_rule RBRACE .)
    KW_FOR          reduce using rule 83 (else -> KW_ELSE LBRACE father_rule RBRACE .)
    INTEGER         reduce using rule 83 (else -> KW_ELSE LBRACE father_rule RBRACE .)
    FLOAT           reduce using rule 83 (else -> KW_ELSE LBRACE father_rule RBRACE .)
    QUOTE           reduce using rule 83 (else -> KW_ELSE LBRACE father_rule RBRACE .)
    $end            reduce using rule 83 (else -> KW_ELSE LBRACE father_rule RBRACE .)
    RBRACE          reduce using rule 83 (else -> KW_ELSE LBRACE father_rule RBRACE .)


state 104

    (84) else_if -> KW_ELSE KW_IF conditional LBRACE . father_rule RBRACE
    (3) father_rule -> . print
    (4) father_rule -> . dvariable
    (5) father_rule -> . array
    (6) father_rule -> . function
    (7) father_rule -> . variables
    (8) father_rule -> . control_str
    (9) father_rule -> . expression
    (10) father_rule -> . void
    (11) father_rule -> . linkedlist
    (12) father_rule -> . push
    (13) father_rule -> . remove
    (14) father_rule -> . if
    (15) father_rule -> . else
    (16) father_rule -> . else_if
    (58) print -> . KW_PRINT LPAREN CADENA RPAREN SEMI
    (59) dvariable -> . KW_LET VARIABLE SEMI
    (60) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET
    (66) function -> . KW_FN VARIABLE LPAREN arguments RPAREN LBRACE father_rule RBRACE
    (61) variables -> . VARIABLE
    (62) variables -> . VARIABLE COMMA variables
    (67) control_str -> . for_str
    (68) control_str -> . for_str_tagged
    (17) expression -> . expression PLUS expression
    (18) expression -> . expression MINUS expression
    (19) expression -> . expression TIMES expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . LPAREN expression RPAREN
    (22) expression -> . number
    (75) void -> .
    (76) linkedlist -> . KW_LET VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI
    (77) linkedlist -> . KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI
    (78) linkedlist -> . KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI
    (79) linkedlist -> . KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI
    (80) push -> . VARIABLE DOT PUSH LPAREN data RPAREN SEMI
    (81) remove -> . VARIABLE DOT REMOVE LPAREN INTEGER RPAREN SEMI
    (82) if -> . KW_IF conditional LBRACE father_rule RBRACE
    (83) else -> . KW_ELSE LBRACE father_rule RBRACE
    (84) else_if -> . KW_ELSE KW_IF conditional LBRACE father_rule RBRACE
    (69) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE father_rule RBRACE
    (70) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE father_rule RBRACE
    (71) for_str_tagged -> . label COLON for_str
    (23) number -> . INTEGER
    (24) number -> . FLOAT
    (25) number -> . VARIABLE
    (74) label -> . QUOTE VARIABLE

    KW_PRINT        shift and go to state 17
    KW_LET          shift and go to state 19
    KW_FN           shift and go to state 21
    VARIABLE        shift and go to state 20
    LPAREN          shift and go to state 18
    RBRACE          reduce using rule 75 (void -> .)
    KW_IF           shift and go to state 26
    KW_ELSE         shift and go to state 27
    KW_FOR          shift and go to state 28
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 30
    QUOTE           shift and go to state 31

    father_rule                    shift and go to state 119
    print                          shift and go to state 3
    dvariable                      shift and go to state 4
    array                          shift and go to state 5
    function                       shift and go to state 6
    variables                      shift and go to state 7
    control_str                    shift and go to state 8
    expression                     shift and go to state 9
    void                           shift and go to state 10
    linkedlist                     shift and go to state 11
    push                           shift and go to state 12
    remove                         shift and go to state 13
    if                             shift and go to state 14
    else                           shift and go to state 15
    else_if                        shift and go to state 16
    for_str                        shift and go to state 22
    for_str_tagged                 shift and go to state 23
    number                         shift and go to state 24
    label                          shift and go to state 29

state 105

    (70) for_str -> KW_FOR VARIABLE KW_IN VARIABLE . LBRACE father_rule RBRACE
    (73) range -> VARIABLE . DOT DOT VARIABLE

    LBRACE          shift and go to state 120
    DOT             shift and go to state 121


state 106

    (69) for_str -> KW_FOR VARIABLE KW_IN range . LBRACE father_rule RBRACE

    LBRACE          shift and go to state 122


state 107

    (72) range -> INTEGER . DOT DOT INTEGER

    DOT             shift and go to state 123


state 108

    (58) print -> KW_PRINT LPAREN CADENA RPAREN SEMI .

    KW_PRINT        reduce using rule 58 (print -> KW_PRINT LPAREN CADENA RPAREN SEMI .)
    KW_LET          reduce using rule 58 (print -> KW_PRINT LPAREN CADENA RPAREN SEMI .)
    KW_FN           reduce using rule 58 (print -> KW_PRINT LPAREN CADENA RPAREN SEMI .)
    VARIABLE        reduce using rule 58 (print -> KW_PRINT LPAREN CADENA RPAREN SEMI .)
    LPAREN          reduce using rule 58 (print -> KW_PRINT LPAREN CADENA RPAREN SEMI .)
    KW_IF           reduce using rule 58 (print -> KW_PRINT LPAREN CADENA RPAREN SEMI .)
    KW_ELSE         reduce using rule 58 (print -> KW_PRINT LPAREN CADENA RPAREN SEMI .)
    KW_FOR          reduce using rule 58 (print -> KW_PRINT LPAREN CADENA RPAREN SEMI .)
    INTEGER         reduce using rule 58 (print -> KW_PRINT LPAREN CADENA RPAREN SEMI .)
    FLOAT           reduce using rule 58 (print -> KW_PRINT LPAREN CADENA RPAREN SEMI .)
    QUOTE           reduce using rule 58 (print -> KW_PRINT LPAREN CADENA RPAREN SEMI .)
    $end            reduce using rule 58 (print -> KW_PRINT LPAREN CADENA RPAREN SEMI .)
    RBRACE          reduce using rule 58 (print -> KW_PRINT LPAREN CADENA RPAREN SEMI .)


state 109

    (60) array -> KW_LET VARIABLE EQUALS LBRACKET mdata . RBRACKET

    RBRACKET        shift and go to state 124


state 110

    (56) mdata -> data .
    (57) mdata -> data . COMMA mdata

    RBRACKET        reduce using rule 56 (mdata -> data .)
    COMMA           shift and go to state 125


state 111

    (78) linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON . COLON KW_FROM LPAREN array RPAREN SEMI

    COLON           shift and go to state 126


state 112

    (76) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT . dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI
    (26) dataType -> . UNSIG_INT_8
    (27) dataType -> . UNSIG_INT_16
    (28) dataType -> . UNSIG_INT_32
    (29) dataType -> . UNSIG_INT_64
    (30) dataType -> . UNSIG_INT_128
    (31) dataType -> . SIG_INT_8
    (32) dataType -> . SIG_INT_16
    (33) dataType -> . SIG_INT_32
    (34) dataType -> . SIG_INT_64
    (35) dataType -> . SIG_INT_128
    (36) dataType -> . FLOAT_32
    (37) dataType -> . FLOAT_64
    (38) dataType -> . KW_BOOLEAN

    UNSIG_INT_8     shift and go to state 128
    UNSIG_INT_16    shift and go to state 129
    UNSIG_INT_32    shift and go to state 130
    UNSIG_INT_64    shift and go to state 131
    UNSIG_INT_128   shift and go to state 132
    SIG_INT_8       shift and go to state 133
    SIG_INT_16      shift and go to state 134
    SIG_INT_32      shift and go to state 135
    SIG_INT_64      shift and go to state 136
    SIG_INT_128     shift and go to state 137
    FLOAT_32        shift and go to state 138
    FLOAT_64        shift and go to state 139
    KW_BOOLEAN      shift and go to state 140

    dataType                       shift and go to state 127

state 113

    (77) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST . LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI

    LT              shift and go to state 141


state 114

    (79) linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST . COLON COLON KW_FROM LPAREN array RPAREN SEMI

    COLON           shift and go to state 142


state 115

    (80) push -> VARIABLE DOT PUSH LPAREN data . RPAREN SEMI

    RPAREN          shift and go to state 143


state 116

    (81) remove -> VARIABLE DOT REMOVE LPAREN INTEGER . RPAREN SEMI

    RPAREN          shift and go to state 144


state 117

    (66) function -> KW_FN VARIABLE LPAREN arguments RPAREN . LBRACE father_rule RBRACE

    LBRACE          shift and go to state 145


state 118

    (82) if -> KW_IF conditional LBRACE father_rule RBRACE .

    KW_PRINT        reduce using rule 82 (if -> KW_IF conditional LBRACE father_rule RBRACE .)
    KW_LET          reduce using rule 82 (if -> KW_IF conditional LBRACE father_rule RBRACE .)
    KW_FN           reduce using rule 82 (if -> KW_IF conditional LBRACE father_rule RBRACE .)
    VARIABLE        reduce using rule 82 (if -> KW_IF conditional LBRACE father_rule RBRACE .)
    LPAREN          reduce using rule 82 (if -> KW_IF conditional LBRACE father_rule RBRACE .)
    KW_IF           reduce using rule 82 (if -> KW_IF conditional LBRACE father_rule RBRACE .)
    KW_ELSE         reduce using rule 82 (if -> KW_IF conditional LBRACE father_rule RBRACE .)
    KW_FOR          reduce using rule 82 (if -> KW_IF conditional LBRACE father_rule RBRACE .)
    INTEGER         reduce using rule 82 (if -> KW_IF conditional LBRACE father_rule RBRACE .)
    FLOAT           reduce using rule 82 (if -> KW_IF conditional LBRACE father_rule RBRACE .)
    QUOTE           reduce using rule 82 (if -> KW_IF conditional LBRACE father_rule RBRACE .)
    $end            reduce using rule 82 (if -> KW_IF conditional LBRACE father_rule RBRACE .)
    RBRACE          reduce using rule 82 (if -> KW_IF conditional LBRACE father_rule RBRACE .)


state 119

    (84) else_if -> KW_ELSE KW_IF conditional LBRACE father_rule . RBRACE

    RBRACE          shift and go to state 146


state 120

    (70) for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE . father_rule RBRACE
    (3) father_rule -> . print
    (4) father_rule -> . dvariable
    (5) father_rule -> . array
    (6) father_rule -> . function
    (7) father_rule -> . variables
    (8) father_rule -> . control_str
    (9) father_rule -> . expression
    (10) father_rule -> . void
    (11) father_rule -> . linkedlist
    (12) father_rule -> . push
    (13) father_rule -> . remove
    (14) father_rule -> . if
    (15) father_rule -> . else
    (16) father_rule -> . else_if
    (58) print -> . KW_PRINT LPAREN CADENA RPAREN SEMI
    (59) dvariable -> . KW_LET VARIABLE SEMI
    (60) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET
    (66) function -> . KW_FN VARIABLE LPAREN arguments RPAREN LBRACE father_rule RBRACE
    (61) variables -> . VARIABLE
    (62) variables -> . VARIABLE COMMA variables
    (67) control_str -> . for_str
    (68) control_str -> . for_str_tagged
    (17) expression -> . expression PLUS expression
    (18) expression -> . expression MINUS expression
    (19) expression -> . expression TIMES expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . LPAREN expression RPAREN
    (22) expression -> . number
    (75) void -> .
    (76) linkedlist -> . KW_LET VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI
    (77) linkedlist -> . KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI
    (78) linkedlist -> . KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI
    (79) linkedlist -> . KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI
    (80) push -> . VARIABLE DOT PUSH LPAREN data RPAREN SEMI
    (81) remove -> . VARIABLE DOT REMOVE LPAREN INTEGER RPAREN SEMI
    (82) if -> . KW_IF conditional LBRACE father_rule RBRACE
    (83) else -> . KW_ELSE LBRACE father_rule RBRACE
    (84) else_if -> . KW_ELSE KW_IF conditional LBRACE father_rule RBRACE
    (69) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE father_rule RBRACE
    (70) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE father_rule RBRACE
    (71) for_str_tagged -> . label COLON for_str
    (23) number -> . INTEGER
    (24) number -> . FLOAT
    (25) number -> . VARIABLE
    (74) label -> . QUOTE VARIABLE

    KW_PRINT        shift and go to state 17
    KW_LET          shift and go to state 19
    KW_FN           shift and go to state 21
    VARIABLE        shift and go to state 20
    LPAREN          shift and go to state 18
    RBRACE          reduce using rule 75 (void -> .)
    KW_IF           shift and go to state 26
    KW_ELSE         shift and go to state 27
    KW_FOR          shift and go to state 28
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 30
    QUOTE           shift and go to state 31

    father_rule                    shift and go to state 147
    print                          shift and go to state 3
    dvariable                      shift and go to state 4
    array                          shift and go to state 5
    function                       shift and go to state 6
    variables                      shift and go to state 7
    control_str                    shift and go to state 8
    expression                     shift and go to state 9
    void                           shift and go to state 10
    linkedlist                     shift and go to state 11
    push                           shift and go to state 12
    remove                         shift and go to state 13
    if                             shift and go to state 14
    else                           shift and go to state 15
    else_if                        shift and go to state 16
    for_str                        shift and go to state 22
    for_str_tagged                 shift and go to state 23
    number                         shift and go to state 24
    label                          shift and go to state 29

state 121

    (73) range -> VARIABLE DOT . DOT VARIABLE

    DOT             shift and go to state 148


state 122

    (69) for_str -> KW_FOR VARIABLE KW_IN range LBRACE . father_rule RBRACE
    (3) father_rule -> . print
    (4) father_rule -> . dvariable
    (5) father_rule -> . array
    (6) father_rule -> . function
    (7) father_rule -> . variables
    (8) father_rule -> . control_str
    (9) father_rule -> . expression
    (10) father_rule -> . void
    (11) father_rule -> . linkedlist
    (12) father_rule -> . push
    (13) father_rule -> . remove
    (14) father_rule -> . if
    (15) father_rule -> . else
    (16) father_rule -> . else_if
    (58) print -> . KW_PRINT LPAREN CADENA RPAREN SEMI
    (59) dvariable -> . KW_LET VARIABLE SEMI
    (60) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET
    (66) function -> . KW_FN VARIABLE LPAREN arguments RPAREN LBRACE father_rule RBRACE
    (61) variables -> . VARIABLE
    (62) variables -> . VARIABLE COMMA variables
    (67) control_str -> . for_str
    (68) control_str -> . for_str_tagged
    (17) expression -> . expression PLUS expression
    (18) expression -> . expression MINUS expression
    (19) expression -> . expression TIMES expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . LPAREN expression RPAREN
    (22) expression -> . number
    (75) void -> .
    (76) linkedlist -> . KW_LET VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI
    (77) linkedlist -> . KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI
    (78) linkedlist -> . KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI
    (79) linkedlist -> . KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI
    (80) push -> . VARIABLE DOT PUSH LPAREN data RPAREN SEMI
    (81) remove -> . VARIABLE DOT REMOVE LPAREN INTEGER RPAREN SEMI
    (82) if -> . KW_IF conditional LBRACE father_rule RBRACE
    (83) else -> . KW_ELSE LBRACE father_rule RBRACE
    (84) else_if -> . KW_ELSE KW_IF conditional LBRACE father_rule RBRACE
    (69) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE father_rule RBRACE
    (70) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE father_rule RBRACE
    (71) for_str_tagged -> . label COLON for_str
    (23) number -> . INTEGER
    (24) number -> . FLOAT
    (25) number -> . VARIABLE
    (74) label -> . QUOTE VARIABLE

    KW_PRINT        shift and go to state 17
    KW_LET          shift and go to state 19
    KW_FN           shift and go to state 21
    VARIABLE        shift and go to state 20
    LPAREN          shift and go to state 18
    RBRACE          reduce using rule 75 (void -> .)
    KW_IF           shift and go to state 26
    KW_ELSE         shift and go to state 27
    KW_FOR          shift and go to state 28
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 30
    QUOTE           shift and go to state 31

    father_rule                    shift and go to state 149
    print                          shift and go to state 3
    dvariable                      shift and go to state 4
    array                          shift and go to state 5
    function                       shift and go to state 6
    variables                      shift and go to state 7
    control_str                    shift and go to state 8
    expression                     shift and go to state 9
    void                           shift and go to state 10
    linkedlist                     shift and go to state 11
    push                           shift and go to state 12
    remove                         shift and go to state 13
    if                             shift and go to state 14
    else                           shift and go to state 15
    else_if                        shift and go to state 16
    for_str                        shift and go to state 22
    for_str_tagged                 shift and go to state 23
    number                         shift and go to state 24
    label                          shift and go to state 29

state 123

    (72) range -> INTEGER DOT . DOT INTEGER

    DOT             shift and go to state 150


state 124

    (60) array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET .

    KW_PRINT        reduce using rule 60 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET .)
    KW_LET          reduce using rule 60 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET .)
    KW_FN           reduce using rule 60 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET .)
    VARIABLE        reduce using rule 60 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET .)
    LPAREN          reduce using rule 60 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET .)
    KW_IF           reduce using rule 60 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET .)
    KW_ELSE         reduce using rule 60 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET .)
    KW_FOR          reduce using rule 60 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET .)
    INTEGER         reduce using rule 60 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET .)
    FLOAT           reduce using rule 60 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET .)
    QUOTE           reduce using rule 60 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET .)
    $end            reduce using rule 60 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET .)
    RBRACE          reduce using rule 60 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET .)
    RPAREN          reduce using rule 60 (array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET .)


state 125

    (57) mdata -> data COMMA . mdata
    (56) mdata -> . data
    (57) mdata -> . data COMMA mdata
    (39) data -> . CADENA
    (40) data -> . INTEGER
    (41) data -> . CHAR
    (42) data -> . FLOAT
    (43) data -> . KW_FALSE
    (44) data -> . KW_TRUE

    CADENA          shift and go to state 95
    INTEGER         shift and go to state 96
    CHAR            shift and go to state 97
    FLOAT           shift and go to state 98
    KW_FALSE        shift and go to state 99
    KW_TRUE         shift and go to state 100

    data                           shift and go to state 110
    mdata                          shift and go to state 151

state 126

    (78) linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON . KW_FROM LPAREN array RPAREN SEMI

    KW_FROM         shift and go to state 152


state 127

    (76) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT dataType . GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI

    GT              shift and go to state 153


state 128

    (26) dataType -> UNSIG_INT_8 .

    GT              reduce using rule 26 (dataType -> UNSIG_INT_8 .)


state 129

    (27) dataType -> UNSIG_INT_16 .

    GT              reduce using rule 27 (dataType -> UNSIG_INT_16 .)


state 130

    (28) dataType -> UNSIG_INT_32 .

    GT              reduce using rule 28 (dataType -> UNSIG_INT_32 .)


state 131

    (29) dataType -> UNSIG_INT_64 .

    GT              reduce using rule 29 (dataType -> UNSIG_INT_64 .)


state 132

    (30) dataType -> UNSIG_INT_128 .

    GT              reduce using rule 30 (dataType -> UNSIG_INT_128 .)


state 133

    (31) dataType -> SIG_INT_8 .

    GT              reduce using rule 31 (dataType -> SIG_INT_8 .)


state 134

    (32) dataType -> SIG_INT_16 .

    GT              reduce using rule 32 (dataType -> SIG_INT_16 .)


state 135

    (33) dataType -> SIG_INT_32 .

    GT              reduce using rule 33 (dataType -> SIG_INT_32 .)


state 136

    (34) dataType -> SIG_INT_64 .

    GT              reduce using rule 34 (dataType -> SIG_INT_64 .)


state 137

    (35) dataType -> SIG_INT_128 .

    GT              reduce using rule 35 (dataType -> SIG_INT_128 .)


state 138

    (36) dataType -> FLOAT_32 .

    GT              reduce using rule 36 (dataType -> FLOAT_32 .)


state 139

    (37) dataType -> FLOAT_64 .

    GT              reduce using rule 37 (dataType -> FLOAT_64 .)


state 140

    (38) dataType -> KW_BOOLEAN .

    GT              reduce using rule 38 (dataType -> KW_BOOLEAN .)


state 141

    (77) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT . dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI
    (26) dataType -> . UNSIG_INT_8
    (27) dataType -> . UNSIG_INT_16
    (28) dataType -> . UNSIG_INT_32
    (29) dataType -> . UNSIG_INT_64
    (30) dataType -> . UNSIG_INT_128
    (31) dataType -> . SIG_INT_8
    (32) dataType -> . SIG_INT_16
    (33) dataType -> . SIG_INT_32
    (34) dataType -> . SIG_INT_64
    (35) dataType -> . SIG_INT_128
    (36) dataType -> . FLOAT_32
    (37) dataType -> . FLOAT_64
    (38) dataType -> . KW_BOOLEAN

    UNSIG_INT_8     shift and go to state 128
    UNSIG_INT_16    shift and go to state 129
    UNSIG_INT_32    shift and go to state 130
    UNSIG_INT_64    shift and go to state 131
    UNSIG_INT_128   shift and go to state 132
    SIG_INT_8       shift and go to state 133
    SIG_INT_16      shift and go to state 134
    SIG_INT_32      shift and go to state 135
    SIG_INT_64      shift and go to state 136
    SIG_INT_128     shift and go to state 137
    FLOAT_32        shift and go to state 138
    FLOAT_64        shift and go to state 139
    KW_BOOLEAN      shift and go to state 140

    dataType                       shift and go to state 154

state 142

    (79) linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON . COLON KW_FROM LPAREN array RPAREN SEMI

    COLON           shift and go to state 155


state 143

    (80) push -> VARIABLE DOT PUSH LPAREN data RPAREN . SEMI

    SEMI            shift and go to state 156


state 144

    (81) remove -> VARIABLE DOT REMOVE LPAREN INTEGER RPAREN . SEMI

    SEMI            shift and go to state 157


state 145

    (66) function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE . father_rule RBRACE
    (3) father_rule -> . print
    (4) father_rule -> . dvariable
    (5) father_rule -> . array
    (6) father_rule -> . function
    (7) father_rule -> . variables
    (8) father_rule -> . control_str
    (9) father_rule -> . expression
    (10) father_rule -> . void
    (11) father_rule -> . linkedlist
    (12) father_rule -> . push
    (13) father_rule -> . remove
    (14) father_rule -> . if
    (15) father_rule -> . else
    (16) father_rule -> . else_if
    (58) print -> . KW_PRINT LPAREN CADENA RPAREN SEMI
    (59) dvariable -> . KW_LET VARIABLE SEMI
    (60) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET
    (66) function -> . KW_FN VARIABLE LPAREN arguments RPAREN LBRACE father_rule RBRACE
    (61) variables -> . VARIABLE
    (62) variables -> . VARIABLE COMMA variables
    (67) control_str -> . for_str
    (68) control_str -> . for_str_tagged
    (17) expression -> . expression PLUS expression
    (18) expression -> . expression MINUS expression
    (19) expression -> . expression TIMES expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . LPAREN expression RPAREN
    (22) expression -> . number
    (75) void -> .
    (76) linkedlist -> . KW_LET VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI
    (77) linkedlist -> . KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI
    (78) linkedlist -> . KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI
    (79) linkedlist -> . KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI
    (80) push -> . VARIABLE DOT PUSH LPAREN data RPAREN SEMI
    (81) remove -> . VARIABLE DOT REMOVE LPAREN INTEGER RPAREN SEMI
    (82) if -> . KW_IF conditional LBRACE father_rule RBRACE
    (83) else -> . KW_ELSE LBRACE father_rule RBRACE
    (84) else_if -> . KW_ELSE KW_IF conditional LBRACE father_rule RBRACE
    (69) for_str -> . KW_FOR VARIABLE KW_IN range LBRACE father_rule RBRACE
    (70) for_str -> . KW_FOR VARIABLE KW_IN VARIABLE LBRACE father_rule RBRACE
    (71) for_str_tagged -> . label COLON for_str
    (23) number -> . INTEGER
    (24) number -> . FLOAT
    (25) number -> . VARIABLE
    (74) label -> . QUOTE VARIABLE

    KW_PRINT        shift and go to state 17
    KW_LET          shift and go to state 19
    KW_FN           shift and go to state 21
    VARIABLE        shift and go to state 20
    LPAREN          shift and go to state 18
    RBRACE          reduce using rule 75 (void -> .)
    KW_IF           shift and go to state 26
    KW_ELSE         shift and go to state 27
    KW_FOR          shift and go to state 28
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 30
    QUOTE           shift and go to state 31

    father_rule                    shift and go to state 158
    print                          shift and go to state 3
    dvariable                      shift and go to state 4
    array                          shift and go to state 5
    function                       shift and go to state 6
    variables                      shift and go to state 7
    control_str                    shift and go to state 8
    expression                     shift and go to state 9
    void                           shift and go to state 10
    linkedlist                     shift and go to state 11
    push                           shift and go to state 12
    remove                         shift and go to state 13
    if                             shift and go to state 14
    else                           shift and go to state 15
    else_if                        shift and go to state 16
    for_str                        shift and go to state 22
    for_str_tagged                 shift and go to state 23
    number                         shift and go to state 24
    label                          shift and go to state 29

state 146

    (84) else_if -> KW_ELSE KW_IF conditional LBRACE father_rule RBRACE .

    KW_PRINT        reduce using rule 84 (else_if -> KW_ELSE KW_IF conditional LBRACE father_rule RBRACE .)
    KW_LET          reduce using rule 84 (else_if -> KW_ELSE KW_IF conditional LBRACE father_rule RBRACE .)
    KW_FN           reduce using rule 84 (else_if -> KW_ELSE KW_IF conditional LBRACE father_rule RBRACE .)
    VARIABLE        reduce using rule 84 (else_if -> KW_ELSE KW_IF conditional LBRACE father_rule RBRACE .)
    LPAREN          reduce using rule 84 (else_if -> KW_ELSE KW_IF conditional LBRACE father_rule RBRACE .)
    KW_IF           reduce using rule 84 (else_if -> KW_ELSE KW_IF conditional LBRACE father_rule RBRACE .)
    KW_ELSE         reduce using rule 84 (else_if -> KW_ELSE KW_IF conditional LBRACE father_rule RBRACE .)
    KW_FOR          reduce using rule 84 (else_if -> KW_ELSE KW_IF conditional LBRACE father_rule RBRACE .)
    INTEGER         reduce using rule 84 (else_if -> KW_ELSE KW_IF conditional LBRACE father_rule RBRACE .)
    FLOAT           reduce using rule 84 (else_if -> KW_ELSE KW_IF conditional LBRACE father_rule RBRACE .)
    QUOTE           reduce using rule 84 (else_if -> KW_ELSE KW_IF conditional LBRACE father_rule RBRACE .)
    $end            reduce using rule 84 (else_if -> KW_ELSE KW_IF conditional LBRACE father_rule RBRACE .)
    RBRACE          reduce using rule 84 (else_if -> KW_ELSE KW_IF conditional LBRACE father_rule RBRACE .)


state 147

    (70) for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE father_rule . RBRACE

    RBRACE          shift and go to state 159


state 148

    (73) range -> VARIABLE DOT DOT . VARIABLE

    VARIABLE        shift and go to state 160


state 149

    (69) for_str -> KW_FOR VARIABLE KW_IN range LBRACE father_rule . RBRACE

    RBRACE          shift and go to state 161


state 150

    (72) range -> INTEGER DOT DOT . INTEGER

    INTEGER         shift and go to state 162


state 151

    (57) mdata -> data COMMA mdata .

    RBRACKET        reduce using rule 57 (mdata -> data COMMA mdata .)


state 152

    (78) linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM . LPAREN array RPAREN SEMI

    LPAREN          shift and go to state 163


state 153

    (76) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT dataType GT . EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI

    EQUALS          shift and go to state 164


state 154

    (77) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT dataType . GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI

    GT              shift and go to state 165


state 155

    (79) linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON . KW_FROM LPAREN array RPAREN SEMI

    KW_FROM         shift and go to state 166


state 156

    (80) push -> VARIABLE DOT PUSH LPAREN data RPAREN SEMI .

    KW_PRINT        reduce using rule 80 (push -> VARIABLE DOT PUSH LPAREN data RPAREN SEMI .)
    KW_LET          reduce using rule 80 (push -> VARIABLE DOT PUSH LPAREN data RPAREN SEMI .)
    KW_FN           reduce using rule 80 (push -> VARIABLE DOT PUSH LPAREN data RPAREN SEMI .)
    VARIABLE        reduce using rule 80 (push -> VARIABLE DOT PUSH LPAREN data RPAREN SEMI .)
    LPAREN          reduce using rule 80 (push -> VARIABLE DOT PUSH LPAREN data RPAREN SEMI .)
    KW_IF           reduce using rule 80 (push -> VARIABLE DOT PUSH LPAREN data RPAREN SEMI .)
    KW_ELSE         reduce using rule 80 (push -> VARIABLE DOT PUSH LPAREN data RPAREN SEMI .)
    KW_FOR          reduce using rule 80 (push -> VARIABLE DOT PUSH LPAREN data RPAREN SEMI .)
    INTEGER         reduce using rule 80 (push -> VARIABLE DOT PUSH LPAREN data RPAREN SEMI .)
    FLOAT           reduce using rule 80 (push -> VARIABLE DOT PUSH LPAREN data RPAREN SEMI .)
    QUOTE           reduce using rule 80 (push -> VARIABLE DOT PUSH LPAREN data RPAREN SEMI .)
    $end            reduce using rule 80 (push -> VARIABLE DOT PUSH LPAREN data RPAREN SEMI .)
    RBRACE          reduce using rule 80 (push -> VARIABLE DOT PUSH LPAREN data RPAREN SEMI .)


state 157

    (81) remove -> VARIABLE DOT REMOVE LPAREN INTEGER RPAREN SEMI .

    KW_PRINT        reduce using rule 81 (remove -> VARIABLE DOT REMOVE LPAREN INTEGER RPAREN SEMI .)
    KW_LET          reduce using rule 81 (remove -> VARIABLE DOT REMOVE LPAREN INTEGER RPAREN SEMI .)
    KW_FN           reduce using rule 81 (remove -> VARIABLE DOT REMOVE LPAREN INTEGER RPAREN SEMI .)
    VARIABLE        reduce using rule 81 (remove -> VARIABLE DOT REMOVE LPAREN INTEGER RPAREN SEMI .)
    LPAREN          reduce using rule 81 (remove -> VARIABLE DOT REMOVE LPAREN INTEGER RPAREN SEMI .)
    KW_IF           reduce using rule 81 (remove -> VARIABLE DOT REMOVE LPAREN INTEGER RPAREN SEMI .)
    KW_ELSE         reduce using rule 81 (remove -> VARIABLE DOT REMOVE LPAREN INTEGER RPAREN SEMI .)
    KW_FOR          reduce using rule 81 (remove -> VARIABLE DOT REMOVE LPAREN INTEGER RPAREN SEMI .)
    INTEGER         reduce using rule 81 (remove -> VARIABLE DOT REMOVE LPAREN INTEGER RPAREN SEMI .)
    FLOAT           reduce using rule 81 (remove -> VARIABLE DOT REMOVE LPAREN INTEGER RPAREN SEMI .)
    QUOTE           reduce using rule 81 (remove -> VARIABLE DOT REMOVE LPAREN INTEGER RPAREN SEMI .)
    $end            reduce using rule 81 (remove -> VARIABLE DOT REMOVE LPAREN INTEGER RPAREN SEMI .)
    RBRACE          reduce using rule 81 (remove -> VARIABLE DOT REMOVE LPAREN INTEGER RPAREN SEMI .)


state 158

    (66) function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE father_rule . RBRACE

    RBRACE          shift and go to state 167


state 159

    (70) for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE father_rule RBRACE .

    KW_PRINT        reduce using rule 70 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE father_rule RBRACE .)
    KW_LET          reduce using rule 70 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE father_rule RBRACE .)
    KW_FN           reduce using rule 70 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE father_rule RBRACE .)
    VARIABLE        reduce using rule 70 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE father_rule RBRACE .)
    LPAREN          reduce using rule 70 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE father_rule RBRACE .)
    KW_IF           reduce using rule 70 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE father_rule RBRACE .)
    KW_ELSE         reduce using rule 70 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE father_rule RBRACE .)
    KW_FOR          reduce using rule 70 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE father_rule RBRACE .)
    INTEGER         reduce using rule 70 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE father_rule RBRACE .)
    FLOAT           reduce using rule 70 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE father_rule RBRACE .)
    QUOTE           reduce using rule 70 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE father_rule RBRACE .)
    $end            reduce using rule 70 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE father_rule RBRACE .)
    RBRACE          reduce using rule 70 (for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE father_rule RBRACE .)


state 160

    (73) range -> VARIABLE DOT DOT VARIABLE .

    LBRACE          reduce using rule 73 (range -> VARIABLE DOT DOT VARIABLE .)


state 161

    (69) for_str -> KW_FOR VARIABLE KW_IN range LBRACE father_rule RBRACE .

    KW_PRINT        reduce using rule 69 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE father_rule RBRACE .)
    KW_LET          reduce using rule 69 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE father_rule RBRACE .)
    KW_FN           reduce using rule 69 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE father_rule RBRACE .)
    VARIABLE        reduce using rule 69 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE father_rule RBRACE .)
    LPAREN          reduce using rule 69 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE father_rule RBRACE .)
    KW_IF           reduce using rule 69 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE father_rule RBRACE .)
    KW_ELSE         reduce using rule 69 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE father_rule RBRACE .)
    KW_FOR          reduce using rule 69 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE father_rule RBRACE .)
    INTEGER         reduce using rule 69 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE father_rule RBRACE .)
    FLOAT           reduce using rule 69 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE father_rule RBRACE .)
    QUOTE           reduce using rule 69 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE father_rule RBRACE .)
    $end            reduce using rule 69 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE father_rule RBRACE .)
    RBRACE          reduce using rule 69 (for_str -> KW_FOR VARIABLE KW_IN range LBRACE father_rule RBRACE .)


state 162

    (72) range -> INTEGER DOT DOT INTEGER .

    LBRACE          reduce using rule 72 (range -> INTEGER DOT DOT INTEGER .)


state 163

    (78) linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN . array RPAREN SEMI
    (60) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET

    KW_LET          shift and go to state 168

    array                          shift and go to state 169

state 164

    (76) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS . KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI

    KW_LINKEDLIST   shift and go to state 170


state 165

    (77) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT dataType GT . EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI

    EQUALS          shift and go to state 171


state 166

    (79) linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM . LPAREN array RPAREN SEMI

    LPAREN          shift and go to state 172


state 167

    (66) function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE father_rule RBRACE .

    KW_PRINT        reduce using rule 66 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE father_rule RBRACE .)
    KW_LET          reduce using rule 66 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE father_rule RBRACE .)
    KW_FN           reduce using rule 66 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE father_rule RBRACE .)
    VARIABLE        reduce using rule 66 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE father_rule RBRACE .)
    LPAREN          reduce using rule 66 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE father_rule RBRACE .)
    KW_IF           reduce using rule 66 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE father_rule RBRACE .)
    KW_ELSE         reduce using rule 66 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE father_rule RBRACE .)
    KW_FOR          reduce using rule 66 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE father_rule RBRACE .)
    INTEGER         reduce using rule 66 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE father_rule RBRACE .)
    FLOAT           reduce using rule 66 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE father_rule RBRACE .)
    QUOTE           reduce using rule 66 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE father_rule RBRACE .)
    $end            reduce using rule 66 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE father_rule RBRACE .)
    RBRACE          reduce using rule 66 (function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE father_rule RBRACE .)


state 168

    (60) array -> KW_LET . VARIABLE EQUALS LBRACKET mdata RBRACKET

    VARIABLE        shift and go to state 173


state 169

    (78) linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array . RPAREN SEMI

    RPAREN          shift and go to state 174


state 170

    (76) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST . COLON COLON KW_NEW LPAREN RPAREN SEMI

    COLON           shift and go to state 175


state 171

    (77) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS . KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI

    KW_LINKEDLIST   shift and go to state 176


state 172

    (79) linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN . array RPAREN SEMI
    (60) array -> . KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET

    KW_LET          shift and go to state 168

    array                          shift and go to state 177

state 173

    (60) array -> KW_LET VARIABLE . EQUALS LBRACKET mdata RBRACKET

    EQUALS          shift and go to state 178


state 174

    (78) linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN . SEMI

    SEMI            shift and go to state 179


state 175

    (76) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON . COLON KW_NEW LPAREN RPAREN SEMI

    COLON           shift and go to state 180


state 176

    (77) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST . COLON COLON KW_NEW LPAREN RPAREN SEMI

    COLON           shift and go to state 181


state 177

    (79) linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array . RPAREN SEMI

    RPAREN          shift and go to state 182


state 178

    (60) array -> KW_LET VARIABLE EQUALS . LBRACKET mdata RBRACKET

    LBRACKET        shift and go to state 83


state 179

    (78) linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI .

    KW_PRINT        reduce using rule 78 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI .)
    KW_LET          reduce using rule 78 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI .)
    KW_FN           reduce using rule 78 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI .)
    VARIABLE        reduce using rule 78 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI .)
    LPAREN          reduce using rule 78 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI .)
    KW_IF           reduce using rule 78 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI .)
    KW_ELSE         reduce using rule 78 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI .)
    KW_FOR          reduce using rule 78 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI .)
    INTEGER         reduce using rule 78 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI .)
    FLOAT           reduce using rule 78 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI .)
    QUOTE           reduce using rule 78 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI .)
    $end            reduce using rule 78 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI .)
    RBRACE          reduce using rule 78 (linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI .)


state 180

    (76) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON . KW_NEW LPAREN RPAREN SEMI

    KW_NEW          shift and go to state 183


state 181

    (77) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON . COLON KW_NEW LPAREN RPAREN SEMI

    COLON           shift and go to state 184


state 182

    (79) linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN . SEMI

    SEMI            shift and go to state 185


state 183

    (76) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW . LPAREN RPAREN SEMI

    LPAREN          shift and go to state 186


state 184

    (77) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON . KW_NEW LPAREN RPAREN SEMI

    KW_NEW          shift and go to state 187


state 185

    (79) linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI .

    KW_PRINT        reduce using rule 79 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI .)
    KW_LET          reduce using rule 79 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI .)
    KW_FN           reduce using rule 79 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI .)
    VARIABLE        reduce using rule 79 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI .)
    LPAREN          reduce using rule 79 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI .)
    KW_IF           reduce using rule 79 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI .)
    KW_ELSE         reduce using rule 79 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI .)
    KW_FOR          reduce using rule 79 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI .)
    INTEGER         reduce using rule 79 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI .)
    FLOAT           reduce using rule 79 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI .)
    QUOTE           reduce using rule 79 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI .)
    $end            reduce using rule 79 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI .)
    RBRACE          reduce using rule 79 (linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN SEMI .)


state 186

    (76) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN . RPAREN SEMI

    RPAREN          shift and go to state 188


state 187

    (77) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW . LPAREN RPAREN SEMI

    LPAREN          shift and go to state 189


state 188

    (76) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN . SEMI

    SEMI            shift and go to state 190


state 189

    (77) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN . RPAREN SEMI

    RPAREN          shift and go to state 191


state 190

    (76) linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI .

    KW_PRINT        reduce using rule 76 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI .)
    KW_LET          reduce using rule 76 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI .)
    KW_FN           reduce using rule 76 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI .)
    VARIABLE        reduce using rule 76 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI .)
    LPAREN          reduce using rule 76 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI .)
    KW_IF           reduce using rule 76 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI .)
    KW_ELSE         reduce using rule 76 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI .)
    KW_FOR          reduce using rule 76 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI .)
    INTEGER         reduce using rule 76 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI .)
    FLOAT           reduce using rule 76 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI .)
    QUOTE           reduce using rule 76 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI .)
    $end            reduce using rule 76 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI .)
    RBRACE          reduce using rule 76 (linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI .)


state 191

    (77) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN . SEMI

    SEMI            shift and go to state 192


state 192

    (77) linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI .

    KW_PRINT        reduce using rule 77 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI .)
    KW_LET          reduce using rule 77 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI .)
    KW_FN           reduce using rule 77 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI .)
    VARIABLE        reduce using rule 77 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI .)
    LPAREN          reduce using rule 77 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI .)
    KW_IF           reduce using rule 77 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI .)
    KW_ELSE         reduce using rule 77 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI .)
    KW_FOR          reduce using rule 77 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI .)
    INTEGER         reduce using rule 77 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI .)
    FLOAT           reduce using rule 77 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI .)
    QUOTE           reduce using rule 77 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI .)
    $end            reduce using rule 77 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI .)
    RBRACE          reduce using rule 77 (linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT dataType GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN SEMI .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for KW_PRINT in state 0 resolved as shift
WARNING: shift/reduce conflict for KW_LET in state 0 resolved as shift
WARNING: shift/reduce conflict for KW_FN in state 0 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 0 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 0 resolved as shift
WARNING: shift/reduce conflict for KW_IF in state 0 resolved as shift
WARNING: shift/reduce conflict for KW_ELSE in state 0 resolved as shift
WARNING: shift/reduce conflict for KW_FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 0 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 0 resolved as shift
WARNING: shift/reduce conflict for QUOTE in state 0 resolved as shift
WARNING: shift/reduce conflict for KW_PRINT in state 2 resolved as shift
WARNING: shift/reduce conflict for KW_LET in state 2 resolved as shift
WARNING: shift/reduce conflict for KW_FN in state 2 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 2 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 2 resolved as shift
WARNING: shift/reduce conflict for KW_IF in state 2 resolved as shift
WARNING: shift/reduce conflict for KW_ELSE in state 2 resolved as shift
WARNING: shift/reduce conflict for KW_FOR in state 2 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 2 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 2 resolved as shift
WARNING: shift/reduce conflict for QUOTE in state 2 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 53 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 53 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 53 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 53 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 54 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 54 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 54 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 54 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 55 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 55 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 55 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 55 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 56 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 56 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 56 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 56 resolved as shift
WARNING: reduce/reduce conflict in state 2 resolved using rule (main_rule -> father_rule)
WARNING: rejected rule (void -> <empty>) in state 2
WARNING: reduce/reduce conflict in state 20 resolved using rule (number -> VARIABLE)
WARNING: rejected rule (variables -> VARIABLE) in state 20
