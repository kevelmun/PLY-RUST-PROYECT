
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND CADENA CHAR COLON COMMA COMMENT DIVEQUAL DIVIDE DOT EQ EQUALS FLOAT FLOAT_32 FLOAT_64 GE GT INTEGER KW_AS KW_BOOLEAN KW_CHARACTER KW_CONST KW_ELSE KW_EXPECT KW_FALSE KW_FN KW_FOR KW_FROM KW_HASHMAP KW_IF KW_IN KW_INSERT KW_IO KW_LET KW_LINKEDLIST KW_MUT KW_NEW KW_PRINT KW_PUSH_BACK KW_READ_LINE KW_REMOVE KW_RETURN KW_STDIN KW_STRING KW_TRUE KW_WHILE LAND LBRACE LBRACKET LE LNOT LOR LPAREN LT MINUS MINUSEQUAL MODULUSEQUAL NE PLUS PLUSEQUAL QUOTE RBRACE RBRACKET RPAREN SEMI SIG_INT_128 SIG_INT_16 SIG_INT_32 SIG_INT_64 SIG_INT_8 TIMES TIMESEQUAL UNSIG_INT_128 UNSIG_INT_16 UNSIG_INT_32 UNSIG_INT_64 UNSIG_INT_8 VARIABLEmain_rule : father_rule\n    | father_rule main_rulefather_rule : print\n    | dvariable\n    | function\n    | control_str\n    | void\n    | array\n    | linkedlist_methods\n    | hashmap_methods\n    | initialization\n    | input\n    | assignation\n    | declare_data_type\n    | castingexpression : expression PLUS expression\n    | expression MINUS expression\n    | expression TIMES expression\n    | LPAREN expression RPAREN\n    | number\n    | division\n    | variablenumber : INTEGER\n    | FLOATvariable : VARIABLEdata_type : UNSIG_INT_8\n                | UNSIG_INT_16\n                | UNSIG_INT_32\n                | UNSIG_INT_64\n                | UNSIG_INT_128\n                | SIG_INT_8\n                | SIG_INT_16\n                | SIG_INT_32\n                | SIG_INT_64\n                | SIG_INT_128\n                | FLOAT_32\n                | FLOAT_64\n                | KW_BOOLEAN\n                | KW_STRING\n                | KW_CHARACTERassign_operators : EQUALS\n                        | TIMESEQUAL \n                        | DIVEQUAL\n                        | MODULUSEQUAL\n                        | PLUSEQUAL \n                        | MINUSEQUALsigint : SIG_INT_8\n    | SIG_INT_16\n    | SIG_INT_32\n    | SIG_INT_64\n    | SIG_INT_128unsigint : UNSIG_INT_8\n    | UNSIG_INT_16\n    | UNSIG_INT_32\n    | UNSIG_INT_64\n    | UNSIG_INT_128flotante : FLOAT_32\n    | FLOAT_64casting : flotante KW_AS sigint\n    | flotante KW_AS unsigint\n    | sigint KW_AS flotante\n    | unsigint KW_AS flotante\n    | flotante KW_AS flotantedivision : INTEGER DIVIDE INTEGER\n    | FLOAT DIVIDE FLOATdata : CADENA\n    | INTEGER\n    | CHAR\n    | FLOAT\n    | KW_FALSE\n    | KW_TRUE\n    | tuplecomparator :\n    | EQ\n    | NE\n    | GE\n    | LE\n    | GT\n    | LTlogic : LOR\n    | LANDlvariable : conditional \n    | VARIABLE\n    | KW_TRUE\n    | KW_FALSE\n    | VARIABLE logic lvariable\n    | conditional logic lvariableconditional : VARIABLE comparator data\n    | data comparator VARIABLE\n    | VARIABLE comparator VARIABLE\n    | data comparator datamdata : data\n    | data COMMA mdataprint : KW_PRINT LNOT LPAREN CADENA RPAREN SEMI\n    | KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMIdvariable : KW_LET VARIABLE COLON data_type SEMIarray : KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI\n    | LBRACKET mdata RBRACKET\n    | LBRACKET data SEMI data RBRACKET\n    | KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI\n    | KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI\n    | KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI\n    | KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMIvariables : VARIABLE \n    | VARIABLE COMMA variableswhile : KW_WHILE lvariable LBRACE main_rule RBRACEtuple : LPAREN mdata RPARENinitialization : let_initialization SEMI \n    | const_initialization SEMI \n    | data_str SEMI\n    | input_init SEMIlet_initialization : KW_LET VARIABLE EQUALS data\n    | KW_LET VARIABLE COLON data_type EQUALS data\n    | KW_LET KW_MUT VARIABLE EQUALS data\n    | KW_LET KW_MUT VARIABLE COLON data_type EQUALS data\n    | KW_LET VARIABLE EQUALS expression_var\n    | KW_LET VARIABLE COLON data_type EQUALS expression_var\n    | KW_LET KW_MUT VARIABLE EQUALS expression_var\n    | KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_varconst_initialization : KW_CONST VARIABLE COLON data_type EQUALS dataarguments : void\n    | variablesfunction : KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACEcontrol_str : for_str\n    | for_str_tagged\n    | if\n    | else\n    | else_if\n    | whilefor_str : KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE\n    | KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACEfor_str_tagged : label COLON for_strrange : INTEGER DOT DOT INTEGER\n    | VARIABLE DOT DOT VARIABLE\n    | LBRACKET mdata RBRACKETlabel : QUOTE VARIABLEdata_str : array\n    | hashmap\n    | linkedlisthashmap : KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN\n    | KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPARENhashmap_methods : VARIABLE hashmap_insert\n    | VARIABLE hashmap_removehashmap_insert : DOT KW_INSERT LPAREN data COMMA data RPAREN SEMIhashmap_remove : DOT KW_REMOVE LPAREN AND data RPAREN SEMIvoid : linkedlist : KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN\n                  | KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPARENlinkedlist : KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN\n                  | KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPARENlinkedlist_methods : VARIABLE linkedlist_push\n    | VARIABLE linkedlist_removelinkedlist_push : DOT KW_PUSH_BACK LPAREN data RPAREN SEMIlinkedlist_remove : DOT KW_REMOVE LPAREN INTEGER RPAREN SEMIif : KW_IF lvariable LBRACE main_rule RBRACEelse : KW_ELSE LBRACE main_rule RBRACEelse_if : KW_ELSE KW_IF lvariable LBRACE main_rule RBRACEfunction : KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACEexpression_var : expression\n                      | datareturn : main_rule\n              | KW_RETURN expression_var SEMI\n              | main_rule KW_RETURN expression_var SEMIinput_init : KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPARENinput : VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMIassignation : VARIABLE assign_operators number SEMI\n    | VARIABLE assign_operators expression SEMI\n    | VARIABLE assign_operators number\n    | VARIABLE assign_operators expressiondeclare_data_type : KW_LET VARIABLE COLON data_type SEMI'
    
_lr_action_items = {'KW_PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,42,43,44,45,46,47,48,49,50,51,52,53,57,58,59,60,82,83,84,85,97,107,108,109,110,111,113,114,119,124,125,126,127,128,130,131,146,153,154,161,210,211,221,222,223,224,225,226,227,245,246,248,251,253,255,278,285,289,290,295,307,309,311,313,324,327,338,362,378,384,388,390,393,],[16,16,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-124,-125,-126,-127,-128,-129,-57,-58,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-151,-152,-142,-143,-108,-109,-110,-111,16,-25,-20,-169,-23,-24,-21,-22,-98,-63,-59,-60,-61,-62,-132,16,16,-166,-167,-20,-156,16,-16,-17,-18,-64,-65,-19,-96,-99,16,16,-155,-106,-94,16,-157,-153,-154,-97,-131,-130,-95,-145,-123,-144,16,-158,-100,-165,-102,-101,-103,]),'KW_LET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,42,43,44,45,46,47,48,49,50,51,52,53,57,58,59,60,82,83,84,85,97,107,108,109,110,111,113,114,119,124,125,126,127,128,130,131,146,153,154,161,210,211,221,222,223,224,225,226,227,245,246,248,251,253,255,278,285,289,290,295,307,309,311,313,319,324,327,337,338,362,378,384,388,390,393,],[18,18,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-124,-125,-126,-127,-128,-129,-57,-58,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-151,-152,-142,-143,-108,-109,-110,-111,18,-25,-20,-169,-23,-24,-21,-22,-98,-63,-59,-60,-61,-62,-132,18,18,-166,-167,-20,-156,18,-16,-17,-18,-64,-65,-19,-96,-99,18,18,-155,-106,-94,18,-157,-153,-154,-97,-131,-130,-95,-145,332,-123,-144,332,18,-158,-100,-165,-102,-101,-103,]),'KW_FN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,42,43,44,45,46,47,48,49,50,51,52,53,57,58,59,60,82,83,84,85,97,107,108,109,110,111,113,114,119,124,125,126,127,128,130,131,146,153,154,161,210,211,221,222,223,224,225,226,227,245,246,248,251,253,255,278,285,289,290,295,307,309,311,313,324,327,338,362,378,384,388,390,393,],[19,19,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-124,-125,-126,-127,-128,-129,-57,-58,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-151,-152,-142,-143,-108,-109,-110,-111,19,-25,-20,-169,-23,-24,-21,-22,-98,-63,-59,-60,-61,-62,-132,19,19,-166,-167,-20,-156,19,-16,-17,-18,-64,-65,-19,-96,-99,19,19,-155,-106,-94,19,-157,-153,-154,-97,-131,-130,-95,-145,-123,-144,19,-158,-100,-165,-102,-101,-103,]),'LBRACKET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,42,43,44,45,46,47,48,49,50,51,52,53,57,58,59,60,82,83,84,85,97,107,108,109,110,111,113,114,115,116,119,124,125,126,127,128,129,130,131,146,153,154,161,190,210,211,221,222,223,224,225,226,227,245,246,248,251,253,255,278,285,289,290,295,307,309,311,313,319,324,327,328,337,338,345,356,357,362,370,378,384,388,390,393,],[26,26,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-124,-125,-126,-127,-128,-129,-57,-58,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-151,-152,-142,-143,-108,-109,-110,-111,26,-25,-20,-169,-23,-24,-21,-22,163,180,-98,-63,-59,-60,-61,-62,202,-132,26,26,-166,-167,-20,236,-156,26,-16,-17,-18,-64,-65,-19,-96,-99,26,26,-155,-106,-94,26,-157,-153,-154,-97,-131,-130,-95,-145,26,-123,-144,340,26,26,359,180,163,-158,236,-100,-165,-102,-101,-103,]),'VARIABLE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,18,19,20,21,22,23,24,25,34,36,38,39,42,43,44,45,46,47,48,49,50,51,52,53,54,57,58,59,60,62,63,64,65,66,67,68,70,74,75,76,77,80,82,83,84,85,93,94,95,96,97,98,107,108,109,110,111,112,113,114,116,118,119,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,146,153,154,155,156,157,161,184,191,198,210,211,215,221,222,223,224,225,226,227,228,233,243,245,246,248,251,253,255,257,273,278,281,285,289,290,295,307,309,311,313,324,327,332,338,343,351,362,363,378,384,388,390,393,],[17,17,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,69,71,-124,-125,-126,-127,-128,-129,89,93,93,100,-57,-58,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,101,-151,-152,-142,-143,107,-41,-42,-43,-44,-45,-46,117,-66,-67,-68,-69,-72,-108,-109,-110,-111,-73,-71,-70,-73,17,93,-25,-20,-169,-23,-24,107,-21,-22,107,192,-98,-63,-59,-60,-61,-62,199,-132,17,93,-80,-81,93,206,-74,-75,-76,-77,-78,-79,209,17,-166,-167,107,107,107,-20,107,107,-107,-156,17,256,-16,-17,-18,-64,-65,-19,-96,107,107,192,-99,17,17,-155,-106,-94,288,107,17,308,-157,-153,-154,-97,-131,-130,-95,-145,-123,-144,342,17,358,107,-158,107,-100,-165,-102,-101,-103,]),'KW_FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,42,43,44,45,46,47,48,49,50,51,52,53,57,58,59,60,82,83,84,85,90,97,107,108,109,110,111,113,114,119,124,125,126,127,128,130,131,146,153,154,161,210,211,221,222,223,224,225,226,227,245,246,248,251,253,255,278,285,289,290,295,307,309,311,313,324,327,338,362,378,384,388,390,393,],[34,34,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-124,-125,-126,-127,-128,-129,-57,-58,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-151,-152,-142,-143,-108,-109,-110,-111,34,34,-25,-20,-169,-23,-24,-21,-22,-98,-63,-59,-60,-61,-62,-132,34,34,-166,-167,-20,-156,34,-16,-17,-18,-64,-65,-19,-96,-99,34,34,-155,-106,-94,34,-157,-153,-154,-97,-131,-130,-95,-145,-123,-144,34,-158,-100,-165,-102,-101,-103,]),'KW_IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,37,42,43,44,45,46,47,48,49,50,51,52,53,57,58,59,60,82,83,84,85,97,107,108,109,110,111,113,114,119,124,125,126,127,128,130,131,146,153,154,161,210,211,221,222,223,224,225,226,227,245,246,248,251,253,255,278,285,289,290,295,307,309,311,313,324,327,338,362,378,384,388,390,393,],[36,36,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-124,-125,-126,-127,-128,-129,98,-57,-58,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-151,-152,-142,-143,-108,-109,-110,-111,36,-25,-20,-169,-23,-24,-21,-22,-98,-63,-59,-60,-61,-62,-132,36,36,-166,-167,-20,-156,36,-16,-17,-18,-64,-65,-19,-96,-99,36,36,-155,-106,-94,36,-157,-153,-154,-97,-131,-130,-95,-145,-123,-144,36,-158,-100,-165,-102,-101,-103,]),'KW_ELSE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,42,43,44,45,46,47,48,49,50,51,52,53,57,58,59,60,82,83,84,85,97,107,108,109,110,111,113,114,119,124,125,126,127,128,130,131,146,153,154,161,210,211,221,222,223,224,225,226,227,245,246,248,251,253,255,278,285,289,290,295,307,309,311,313,324,327,338,362,378,384,388,390,393,],[37,37,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-124,-125,-126,-127,-128,-129,-57,-58,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-151,-152,-142,-143,-108,-109,-110,-111,37,-25,-20,-169,-23,-24,-21,-22,-98,-63,-59,-60,-61,-62,-132,37,37,-166,-167,-20,-156,37,-16,-17,-18,-64,-65,-19,-96,-99,37,37,-155,-106,-94,37,-157,-153,-154,-97,-131,-130,-95,-145,-123,-144,37,-158,-100,-165,-102,-101,-103,]),'KW_WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,42,43,44,45,46,47,48,49,50,51,52,53,57,58,59,60,82,83,84,85,97,107,108,109,110,111,113,114,119,124,125,126,127,128,130,131,146,153,154,161,210,211,221,222,223,224,225,226,227,245,246,248,251,253,255,278,285,289,290,295,307,309,311,313,324,327,338,362,378,384,388,390,393,],[38,38,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-124,-125,-126,-127,-128,-129,-57,-58,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-151,-152,-142,-143,-108,-109,-110,-111,38,-25,-20,-169,-23,-24,-21,-22,-98,-63,-59,-60,-61,-62,-132,38,38,-166,-167,-20,-156,38,-16,-17,-18,-64,-65,-19,-96,-99,38,38,-155,-106,-94,38,-157,-153,-154,-97,-131,-130,-95,-145,-123,-144,38,-158,-100,-165,-102,-101,-103,]),'KW_CONST':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,42,43,44,45,46,47,48,49,50,51,52,53,57,58,59,60,82,83,84,85,97,107,108,109,110,111,113,114,119,124,125,126,127,128,130,131,146,153,154,161,210,211,221,222,223,224,225,226,227,245,246,248,251,253,255,278,285,289,290,295,307,309,311,313,324,327,338,362,378,384,388,390,393,],[39,39,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-124,-125,-126,-127,-128,-129,-57,-58,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-151,-152,-142,-143,-108,-109,-110,-111,39,-25,-20,-169,-23,-24,-21,-22,-98,-63,-59,-60,-61,-62,-132,39,39,-166,-167,-20,-156,39,-16,-17,-18,-64,-65,-19,-96,-99,39,39,-155,-106,-94,39,-157,-153,-154,-97,-131,-130,-95,-145,-123,-144,39,-158,-100,-165,-102,-101,-103,]),'FLOAT_32':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,42,43,44,45,46,47,48,49,50,51,52,53,57,58,59,60,82,83,84,85,86,87,88,97,107,108,109,110,111,113,114,115,119,124,125,126,127,128,130,131,146,147,153,154,161,163,190,210,211,221,222,223,224,225,226,227,230,236,245,246,248,251,253,255,274,278,285,289,290,295,306,307,309,311,313,324,327,338,362,378,384,388,390,393,],[42,42,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-124,-125,-126,-127,-128,-129,-57,-58,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-151,-152,-142,-143,-108,-109,-110,-111,42,42,42,42,-25,-20,-169,-23,-24,-21,-22,175,-98,-63,-59,-60,-61,-62,-132,42,42,175,-166,-167,-20,175,175,-156,42,-16,-17,-18,-64,-65,-19,-96,175,175,-99,42,42,-155,-106,-94,175,42,-157,-153,-154,-97,175,-131,-130,-95,-145,-123,-144,42,-158,-100,-165,-102,-101,-103,]),'FLOAT_64':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,42,43,44,45,46,47,48,49,50,51,52,53,57,58,59,60,82,83,84,85,86,87,88,97,107,108,109,110,111,113,114,115,119,124,125,126,127,128,130,131,146,147,153,154,161,163,190,210,211,221,222,223,224,225,226,227,230,236,245,246,248,251,253,255,274,278,285,289,290,295,306,307,309,311,313,324,327,338,362,378,384,388,390,393,],[43,43,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-124,-125,-126,-127,-128,-129,-57,-58,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-151,-152,-142,-143,-108,-109,-110,-111,43,43,43,43,-25,-20,-169,-23,-24,-21,-22,176,-98,-63,-59,-60,-61,-62,-132,43,43,176,-166,-167,-20,176,176,-156,43,-16,-17,-18,-64,-65,-19,-96,176,176,-99,43,43,-155,-106,-94,176,43,-157,-153,-154,-97,176,-131,-130,-95,-145,-123,-144,43,-158,-100,-165,-102,-101,-103,]),'SIG_INT_8':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,42,43,44,45,46,47,48,49,50,51,52,53,57,58,59,60,82,83,84,85,86,97,107,108,109,110,111,113,114,115,119,124,125,126,127,128,130,131,146,147,153,154,161,163,190,210,211,221,222,223,224,225,226,227,230,236,245,246,248,251,253,255,274,278,285,289,290,295,306,307,309,311,313,324,327,338,362,378,384,388,390,393,],[44,44,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-124,-125,-126,-127,-128,-129,-57,-58,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-151,-152,-142,-143,-108,-109,-110,-111,44,44,-25,-20,-169,-23,-24,-21,-22,170,-98,-63,-59,-60,-61,-62,-132,44,44,170,-166,-167,-20,170,170,-156,44,-16,-17,-18,-64,-65,-19,-96,170,170,-99,44,44,-155,-106,-94,170,44,-157,-153,-154,-97,170,-131,-130,-95,-145,-123,-144,44,-158,-100,-165,-102,-101,-103,]),'SIG_INT_16':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,42,43,44,45,46,47,48,49,50,51,52,53,57,58,59,60,82,83,84,85,86,97,107,108,109,110,111,113,114,115,119,124,125,126,127,128,130,131,146,147,153,154,161,163,190,210,211,221,222,223,224,225,226,227,230,236,245,246,248,251,253,255,274,278,285,289,290,295,306,307,309,311,313,324,327,338,362,378,384,388,390,393,],[45,45,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-124,-125,-126,-127,-128,-129,-57,-58,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-151,-152,-142,-143,-108,-109,-110,-111,45,45,-25,-20,-169,-23,-24,-21,-22,171,-98,-63,-59,-60,-61,-62,-132,45,45,171,-166,-167,-20,171,171,-156,45,-16,-17,-18,-64,-65,-19,-96,171,171,-99,45,45,-155,-106,-94,171,45,-157,-153,-154,-97,171,-131,-130,-95,-145,-123,-144,45,-158,-100,-165,-102,-101,-103,]),'SIG_INT_32':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,42,43,44,45,46,47,48,49,50,51,52,53,57,58,59,60,82,83,84,85,86,97,107,108,109,110,111,113,114,115,119,124,125,126,127,128,130,131,146,147,153,154,161,163,190,210,211,221,222,223,224,225,226,227,230,236,245,246,248,251,253,255,274,278,285,289,290,295,306,307,309,311,313,324,327,338,362,378,384,388,390,393,],[46,46,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-124,-125,-126,-127,-128,-129,-57,-58,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-151,-152,-142,-143,-108,-109,-110,-111,46,46,-25,-20,-169,-23,-24,-21,-22,172,-98,-63,-59,-60,-61,-62,-132,46,46,172,-166,-167,-20,172,172,-156,46,-16,-17,-18,-64,-65,-19,-96,172,172,-99,46,46,-155,-106,-94,172,46,-157,-153,-154,-97,172,-131,-130,-95,-145,-123,-144,46,-158,-100,-165,-102,-101,-103,]),'SIG_INT_64':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,42,43,44,45,46,47,48,49,50,51,52,53,57,58,59,60,82,83,84,85,86,97,107,108,109,110,111,113,114,115,119,124,125,126,127,128,130,131,146,147,153,154,161,163,190,210,211,221,222,223,224,225,226,227,230,236,245,246,248,251,253,255,274,278,285,289,290,295,306,307,309,311,313,324,327,338,362,378,384,388,390,393,],[47,47,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-124,-125,-126,-127,-128,-129,-57,-58,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-151,-152,-142,-143,-108,-109,-110,-111,47,47,-25,-20,-169,-23,-24,-21,-22,173,-98,-63,-59,-60,-61,-62,-132,47,47,173,-166,-167,-20,173,173,-156,47,-16,-17,-18,-64,-65,-19,-96,173,173,-99,47,47,-155,-106,-94,173,47,-157,-153,-154,-97,173,-131,-130,-95,-145,-123,-144,47,-158,-100,-165,-102,-101,-103,]),'SIG_INT_128':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,42,43,44,45,46,47,48,49,50,51,52,53,57,58,59,60,82,83,84,85,86,97,107,108,109,110,111,113,114,115,119,124,125,126,127,128,130,131,146,147,153,154,161,163,190,210,211,221,222,223,224,225,226,227,230,236,245,246,248,251,253,255,274,278,285,289,290,295,306,307,309,311,313,324,327,338,362,378,384,388,390,393,],[48,48,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-124,-125,-126,-127,-128,-129,-57,-58,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-151,-152,-142,-143,-108,-109,-110,-111,48,48,-25,-20,-169,-23,-24,-21,-22,174,-98,-63,-59,-60,-61,-62,-132,48,48,174,-166,-167,-20,174,174,-156,48,-16,-17,-18,-64,-65,-19,-96,174,174,-99,48,48,-155,-106,-94,174,48,-157,-153,-154,-97,174,-131,-130,-95,-145,-123,-144,48,-158,-100,-165,-102,-101,-103,]),'UNSIG_INT_8':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,42,43,44,45,46,47,48,49,50,51,52,53,57,58,59,60,82,83,84,85,86,97,107,108,109,110,111,113,114,115,119,124,125,126,127,128,130,131,146,147,153,154,161,163,190,210,211,221,222,223,224,225,226,227,230,236,245,246,248,251,253,255,274,278,285,289,290,295,306,307,309,311,313,324,327,338,362,378,384,388,390,393,],[49,49,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-124,-125,-126,-127,-128,-129,-57,-58,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-151,-152,-142,-143,-108,-109,-110,-111,49,49,-25,-20,-169,-23,-24,-21,-22,165,-98,-63,-59,-60,-61,-62,-132,49,49,165,-166,-167,-20,165,165,-156,49,-16,-17,-18,-64,-65,-19,-96,165,165,-99,49,49,-155,-106,-94,165,49,-157,-153,-154,-97,165,-131,-130,-95,-145,-123,-144,49,-158,-100,-165,-102,-101,-103,]),'UNSIG_INT_16':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,42,43,44,45,46,47,48,49,50,51,52,53,57,58,59,60,82,83,84,85,86,97,107,108,109,110,111,113,114,115,119,124,125,126,127,128,130,131,146,147,153,154,161,163,190,210,211,221,222,223,224,225,226,227,230,236,245,246,248,251,253,255,274,278,285,289,290,295,306,307,309,311,313,324,327,338,362,378,384,388,390,393,],[50,50,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-124,-125,-126,-127,-128,-129,-57,-58,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-151,-152,-142,-143,-108,-109,-110,-111,50,50,-25,-20,-169,-23,-24,-21,-22,166,-98,-63,-59,-60,-61,-62,-132,50,50,166,-166,-167,-20,166,166,-156,50,-16,-17,-18,-64,-65,-19,-96,166,166,-99,50,50,-155,-106,-94,166,50,-157,-153,-154,-97,166,-131,-130,-95,-145,-123,-144,50,-158,-100,-165,-102,-101,-103,]),'UNSIG_INT_32':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,42,43,44,45,46,47,48,49,50,51,52,53,57,58,59,60,82,83,84,85,86,97,107,108,109,110,111,113,114,115,119,124,125,126,127,128,130,131,146,147,153,154,161,163,190,210,211,221,222,223,224,225,226,227,230,236,245,246,248,251,253,255,274,278,285,289,290,295,306,307,309,311,313,324,327,338,362,378,384,388,390,393,],[51,51,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-124,-125,-126,-127,-128,-129,-57,-58,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-151,-152,-142,-143,-108,-109,-110,-111,51,51,-25,-20,-169,-23,-24,-21,-22,167,-98,-63,-59,-60,-61,-62,-132,51,51,167,-166,-167,-20,167,167,-156,51,-16,-17,-18,-64,-65,-19,-96,167,167,-99,51,51,-155,-106,-94,167,51,-157,-153,-154,-97,167,-131,-130,-95,-145,-123,-144,51,-158,-100,-165,-102,-101,-103,]),'UNSIG_INT_64':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,42,43,44,45,46,47,48,49,50,51,52,53,57,58,59,60,82,83,84,85,86,97,107,108,109,110,111,113,114,115,119,124,125,126,127,128,130,131,146,147,153,154,161,163,190,210,211,221,222,223,224,225,226,227,230,236,245,246,248,251,253,255,274,278,285,289,290,295,306,307,309,311,313,324,327,338,362,378,384,388,390,393,],[52,52,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-124,-125,-126,-127,-128,-129,-57,-58,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-151,-152,-142,-143,-108,-109,-110,-111,52,52,-25,-20,-169,-23,-24,-21,-22,168,-98,-63,-59,-60,-61,-62,-132,52,52,168,-166,-167,-20,168,168,-156,52,-16,-17,-18,-64,-65,-19,-96,168,168,-99,52,52,-155,-106,-94,168,52,-157,-153,-154,-97,168,-131,-130,-95,-145,-123,-144,52,-158,-100,-165,-102,-101,-103,]),'UNSIG_INT_128':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,42,43,44,45,46,47,48,49,50,51,52,53,57,58,59,60,82,83,84,85,86,97,107,108,109,110,111,113,114,115,119,124,125,126,127,128,130,131,146,147,153,154,161,163,190,210,211,221,222,223,224,225,226,227,230,236,245,246,248,251,253,255,274,278,285,289,290,295,306,307,309,311,313,324,327,338,362,378,384,388,390,393,],[53,53,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-124,-125,-126,-127,-128,-129,-57,-58,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-151,-152,-142,-143,-108,-109,-110,-111,53,53,-25,-20,-169,-23,-24,-21,-22,169,-98,-63,-59,-60,-61,-62,-132,53,53,169,-166,-167,-20,169,169,-156,53,-16,-17,-18,-64,-65,-19,-96,169,169,-99,53,53,-155,-106,-94,169,53,-157,-153,-154,-97,169,-131,-130,-95,-145,-123,-144,53,-158,-100,-165,-102,-101,-103,]),'QUOTE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,42,43,44,45,46,47,48,49,50,51,52,53,57,58,59,60,82,83,84,85,97,107,108,109,110,111,113,114,119,124,125,126,127,128,130,131,146,153,154,161,210,211,221,222,223,224,225,226,227,245,246,248,251,253,255,278,285,289,290,295,307,309,311,313,324,327,338,362,378,384,388,390,393,],[54,54,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-124,-125,-126,-127,-128,-129,-57,-58,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-151,-152,-142,-143,-108,-109,-110,-111,54,-25,-20,-169,-23,-24,-21,-22,-98,-63,-59,-60,-61,-62,-132,54,54,-166,-167,-20,-156,54,-16,-17,-18,-64,-65,-19,-96,-99,54,54,-155,-106,-94,54,-157,-153,-154,-97,-131,-130,-95,-145,-123,-144,54,-158,-100,-165,-102,-101,-103,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,42,43,44,45,46,47,48,49,50,51,52,53,55,57,58,59,60,82,83,84,85,107,108,109,110,111,113,114,119,124,125,126,127,128,130,153,154,161,210,221,222,223,224,225,226,227,245,251,253,255,285,289,290,295,307,309,311,313,324,327,362,378,384,388,390,393,],[-146,0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-124,-125,-126,-127,-128,-129,-57,-58,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-2,-151,-152,-142,-143,-108,-109,-110,-111,-25,-20,-169,-23,-24,-21,-22,-98,-63,-59,-60,-61,-62,-132,-166,-167,-20,-156,-16,-17,-18,-64,-65,-19,-96,-99,-155,-106,-94,-157,-153,-154,-97,-131,-130,-95,-145,-123,-144,-158,-100,-165,-102,-101,-103,]),'RBRACE':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,42,43,44,45,46,47,48,49,50,51,52,53,55,57,58,59,60,82,83,84,85,97,107,108,109,110,111,113,114,119,124,125,126,127,128,130,131,144,146,153,154,161,203,210,211,212,221,222,223,224,225,226,227,245,246,248,251,252,253,255,278,280,282,285,289,290,295,305,307,309,311,313,324,327,338,349,350,362,375,378,383,384,388,390,393,],[-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-124,-125,-126,-127,-128,-129,-57,-58,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-2,-151,-152,-142,-143,-108,-109,-110,-111,-146,-25,-20,-169,-23,-24,-21,-22,-98,-63,-59,-60,-61,-62,-132,-146,210,-146,-166,-167,-20,251,-156,-146,253,-16,-17,-18,-64,-65,-19,-96,-99,-146,-146,-155,285,-106,-94,-146,307,309,-157,-153,-154,-97,324,-131,-130,-95,-145,-123,-144,-146,362,-161,-158,-162,-100,-163,-165,-102,-101,-103,]),'KW_RETURN':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,42,43,44,45,46,47,48,49,50,51,52,53,55,57,58,59,60,82,83,84,85,107,108,109,110,111,113,114,119,124,125,126,127,128,130,153,154,161,210,221,222,223,224,225,226,227,245,251,253,255,285,289,290,295,307,309,311,313,324,327,338,350,362,378,384,388,390,393,],[-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-124,-125,-126,-127,-128,-129,-57,-58,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-2,-151,-152,-142,-143,-108,-109,-110,-111,-25,-20,-169,-23,-24,-21,-22,-98,-63,-59,-60,-61,-62,-132,-166,-167,-20,-156,-16,-17,-18,-64,-65,-19,-96,-99,-155,-106,-94,-157,-153,-154,-97,-131,-130,-95,-145,-123,-144,351,363,-158,-100,-165,-102,-101,-103,]),'SEMI':([8,27,28,29,30,40,41,73,74,75,76,77,78,79,80,107,108,109,110,111,113,114,119,161,162,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,181,182,187,188,189,198,214,221,222,223,224,225,226,229,239,240,245,258,259,262,263,266,272,286,287,291,295,300,301,314,330,331,344,347,353,361,364,365,368,371,374,376,378,381,385,386,388,390,391,392,393,],[-137,82,83,84,85,-138,-139,120,-66,-67,-68,-69,-70,-71,-72,-25,153,154,-23,-24,-21,-22,-98,-20,227,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-112,-116,-23,-24,-159,-107,255,-16,-17,-18,-64,-65,-19,264,-114,-118,-99,289,290,-113,-117,295,299,-120,311,313,-97,-115,-119,327,-164,-140,-149,-141,367,-150,375,-160,378,380,383,384,-100,388,390,-147,-102,-101,393,-148,-103,]),'LNOT':([16,],[56,]),'DOT':([17,199,201,247,249,312,],[61,247,249,281,283,326,]),'EQUALS':([17,69,117,162,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,213,237,294,315,321,334,342,],[63,116,191,228,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,254,273,316,328,335,345,356,]),'TIMESEQUAL':([17,],[64,]),'DIVEQUAL':([17,],[65,]),'MODULUSEQUAL':([17,],[66,]),'PLUSEQUAL':([17,],[67,]),'MINUSEQUAL':([17,],[68,]),'KW_MUT':([18,216,332,],[70,257,343,]),'CADENA':([26,36,38,74,75,76,77,80,81,93,94,95,96,98,102,116,120,121,132,133,134,135,136,137,138,139,140,141,142,143,150,152,180,184,191,198,202,219,228,233,254,261,264,273,299,340,351,352,359,363,367,380,],[74,74,74,-66,-67,-68,-69,-72,74,-73,-71,-70,-73,74,148,74,74,74,74,-80,-81,74,74,-74,-75,-76,-77,-78,-79,74,74,74,74,74,74,-107,74,74,74,74,74,74,74,74,74,74,74,366,74,74,74,74,]),'INTEGER':([26,36,38,62,63,64,65,66,67,68,74,75,76,77,80,81,93,94,95,96,98,112,116,120,121,129,132,133,134,135,136,137,138,139,140,141,142,143,150,151,152,155,156,157,158,180,184,191,198,202,219,228,233,254,261,264,273,283,299,340,351,359,363,367,380,],[75,75,75,110,-41,-42,-43,-44,-45,-46,-66,-67,-68,-69,-72,75,-73,-71,-70,-73,75,110,187,75,75,201,75,-80,-81,75,75,-74,-75,-76,-77,-78,-79,75,75,218,75,110,110,110,224,75,187,187,-107,75,75,187,268,75,75,75,187,310,75,75,187,75,187,75,75,]),'CHAR':([26,36,38,74,75,76,77,80,81,93,94,95,96,98,116,120,121,132,133,134,135,136,137,138,139,140,141,142,143,150,152,180,184,191,198,202,219,228,233,254,261,264,273,299,340,351,359,363,367,380,],[76,76,76,-66,-67,-68,-69,-72,76,-73,-71,-70,-73,76,76,76,76,76,-80,-81,76,76,-74,-75,-76,-77,-78,-79,76,76,76,76,76,76,-107,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'FLOAT':([26,36,38,62,63,64,65,66,67,68,74,75,76,77,80,81,93,94,95,96,98,112,116,120,121,132,133,134,135,136,137,138,139,140,141,142,143,150,152,155,156,157,159,180,184,191,198,202,219,228,233,254,261,264,273,299,340,351,359,363,367,380,],[77,77,77,111,-41,-42,-43,-44,-45,-46,-66,-67,-68,-69,-72,77,-73,-71,-70,-73,77,111,188,77,77,77,-80,-81,77,77,-74,-75,-76,-77,-78,-79,77,77,77,111,111,111,225,77,188,188,-107,77,77,188,269,77,77,77,188,77,77,188,77,188,77,77,]),'KW_FALSE':([26,36,38,74,75,76,77,80,81,93,94,95,96,98,116,120,121,132,133,134,135,136,137,138,139,140,141,142,143,150,152,180,184,191,198,202,219,228,233,254,261,264,273,299,340,351,359,363,367,380,],[78,95,95,-66,-67,-68,-69,-72,78,-73,-71,-70,-73,95,78,78,78,95,-80,-81,95,78,-74,-75,-76,-77,-78,-79,78,78,78,78,78,78,-107,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'KW_TRUE':([26,36,38,74,75,76,77,80,81,93,94,95,96,98,116,120,121,132,133,134,135,136,137,138,139,140,141,142,143,150,152,180,184,191,198,202,219,228,233,254,261,264,273,299,340,351,359,363,367,380,],[79,94,94,-66,-67,-68,-69,-72,79,-73,-71,-70,-73,94,79,79,79,94,-80,-81,94,79,-74,-75,-76,-77,-78,-79,79,79,79,79,79,79,-107,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'LPAREN':([26,36,38,56,62,63,64,65,66,67,68,71,74,75,76,77,80,81,93,94,95,96,98,103,104,105,106,112,116,120,121,132,133,134,135,136,137,138,139,140,141,142,143,150,152,155,156,157,180,184,191,198,202,219,228,233,254,261,264,273,296,297,298,299,322,323,339,340,351,359,363,367,369,380,382,],[81,81,81,102,112,-41,-42,-43,-44,-45,-46,118,-66,-67,-68,-69,-72,81,-73,-71,-70,-73,81,149,150,151,152,112,184,81,81,81,-80,-81,81,81,-74,-75,-76,-77,-78,-79,81,81,81,112,112,112,81,233,184,-107,81,81,184,233,81,81,81,184,317,318,319,81,336,337,352,81,233,81,233,81,379,81,389,]),'KW_AS':([31,32,33,42,43,44,45,46,47,48,49,50,51,52,53,],[86,87,88,-57,-58,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,]),'COLON':([35,69,100,101,117,183,185,186,232,234,235,241,242,275,276,329,341,342,346,358,360,],[90,115,147,-136,190,232,234,235,267,270,271,275,276,303,304,341,355,357,360,370,373,]),'LBRACE':([37,74,75,76,77,78,79,80,91,92,93,94,95,99,145,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,198,199,200,204,205,206,207,208,209,244,284,308,310,325,],[97,-66,-67,-68,-69,-70,-71,-72,131,-82,-83,-84,-85,146,211,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-107,246,248,-87,-86,-90,-88,-91,-89,278,-135,-134,-133,338,]),'KW_READ_LINE':([61,],[103,]),'KW_PUSH_BACK':([61,],[104,]),'KW_REMOVE':([61,],[105,]),'KW_INSERT':([61,],[106,]),'RBRACKET':([72,73,74,75,76,77,78,79,80,123,196,197,198,231,250,293,320,353,354,371,372,377,387,],[119,-92,-66,-67,-68,-69,-70,-71,-72,-92,245,-93,-107,266,284,315,334,-92,368,-92,381,385,391,]),'COMMA':([73,74,75,76,77,78,79,80,123,148,187,188,192,198,220,268,269,353,371,],[121,-66,-67,-68,-69,-70,-71,-72,121,215,-67,-69,243,-107,261,-67,-69,121,121,]),'EQ':([74,75,76,77,80,93,94,95,96,198,],[-66,-67,-68,-69,-72,137,-71,-70,137,-107,]),'NE':([74,75,76,77,80,93,94,95,96,198,],[-66,-67,-68,-69,-72,138,-71,-70,138,-107,]),'GE':([74,75,76,77,80,93,94,95,96,198,],[-66,-67,-68,-69,-72,139,-71,-70,139,-107,]),'LE':([74,75,76,77,80,93,94,95,96,198,],[-66,-67,-68,-69,-72,140,-71,-70,140,-107,]),'GT':([74,75,76,77,80,93,94,95,96,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,198,265,279,302,],[-66,-67,-68,-69,-72,141,-71,-70,141,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-107,294,306,321,]),'LT':([74,75,76,77,80,93,94,95,96,164,198,238,],[-66,-67,-68,-69,-72,142,-71,-70,142,230,-107,274,]),'RPAREN':([74,75,76,77,78,79,80,107,110,111,113,114,118,119,122,123,148,160,161,187,188,192,193,194,195,197,198,217,218,221,222,223,224,225,226,245,256,260,268,269,277,288,292,295,317,318,333,336,348,366,378,379,388,389,390,393,],[-66,-67,-68,-69,-70,-71,-72,-25,-23,-24,-21,-22,-146,-98,198,-92,214,226,-20,-23,-24,-104,244,-121,-122,-93,-107,258,259,-16,-17,-18,-64,-65,-19,-99,287,291,-23,-24,-105,312,314,-97,330,331,344,347,361,376,-100,386,-102,392,-101,-103,]),'LOR':([74,75,76,77,78,79,80,92,93,198,206,207,208,209,],[-66,-67,-68,-69,-70,-71,-72,133,133,-107,-90,-88,-91,-89,]),'LAND':([74,75,76,77,78,79,80,92,93,198,206,207,208,209,],[-66,-67,-68,-69,-70,-71,-72,134,134,-107,-90,-88,-91,-89,]),'KW_IN':([89,],[129,]),'PLUS':([107,108,109,110,111,113,114,160,161,187,188,189,221,222,223,224,225,226,268,269,],[-25,-20,155,-23,-24,-21,-22,155,-20,-23,-24,155,155,155,155,-64,-65,-19,-23,-24,]),'MINUS':([107,108,109,110,111,113,114,160,161,187,188,189,221,222,223,224,225,226,244,268,269,],[-25,-20,156,-23,-24,-21,-22,156,-20,-23,-24,156,156,156,156,-64,-65,-19,279,-23,-24,]),'TIMES':([107,108,109,110,111,113,114,160,161,187,188,189,221,222,223,224,225,226,268,269,],[-25,-20,157,-23,-24,-21,-22,157,-20,-23,-24,157,157,157,157,-64,-65,-19,-23,-24,]),'DIVIDE':([110,111,187,188,268,269,],[158,159,158,159,158,159,]),'KW_LINKEDLIST':([115,116,190,191,316,335,],[164,186,238,242,329,346,]),'KW_BOOLEAN':([115,147,163,190,230,236,274,306,],[177,177,177,177,177,177,177,177,]),'KW_STRING':([115,147,163,190,230,236,274,306,],[178,178,178,178,178,178,178,178,]),'KW_CHARACTER':([115,147,163,190,230,236,274,306,],[179,179,179,179,179,179,179,179,]),'KW_IO':([116,],[183,]),'KW_HASHMAP':([116,191,],[185,241,]),'AND':([149,151,],[216,219,]),'KW_STDIN':([267,],[296,]),'KW_NEW':([270,303,355,373,],[297,322,369,382,]),'KW_FROM':([271,304,],[298,323,]),'KW_EXPECT':([326,],[339,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'main_rule':([0,2,97,131,146,211,246,248,278,338,],[1,55,144,203,212,252,280,282,305,350,]),'father_rule':([0,2,97,131,146,211,246,248,278,338,],[2,2,2,2,2,2,2,2,2,2,]),'print':([0,2,97,131,146,211,246,248,278,338,],[3,3,3,3,3,3,3,3,3,3,]),'dvariable':([0,2,97,131,146,211,246,248,278,338,],[4,4,4,4,4,4,4,4,4,4,]),'function':([0,2,97,131,146,211,246,248,278,338,],[5,5,5,5,5,5,5,5,5,5,]),'control_str':([0,2,97,131,146,211,246,248,278,338,],[6,6,6,6,6,6,6,6,6,6,]),'void':([0,2,97,118,131,146,211,246,248,278,338,],[7,7,7,194,7,7,7,7,7,7,7,]),'array':([0,2,97,131,146,211,246,248,278,319,337,338,],[8,8,8,8,8,8,8,8,8,333,348,8,]),'linkedlist_methods':([0,2,97,131,146,211,246,248,278,338,],[9,9,9,9,9,9,9,9,9,9,]),'hashmap_methods':([0,2,97,131,146,211,246,248,278,338,],[10,10,10,10,10,10,10,10,10,10,]),'initialization':([0,2,97,131,146,211,246,248,278,338,],[11,11,11,11,11,11,11,11,11,11,]),'input':([0,2,97,131,146,211,246,248,278,338,],[12,12,12,12,12,12,12,12,12,12,]),'assignation':([0,2,97,131,146,211,246,248,278,338,],[13,13,13,13,13,13,13,13,13,13,]),'declare_data_type':([0,2,97,131,146,211,246,248,278,338,],[14,14,14,14,14,14,14,14,14,14,]),'casting':([0,2,97,131,146,211,246,248,278,338,],[15,15,15,15,15,15,15,15,15,15,]),'for_str':([0,2,90,97,131,146,211,246,248,278,338,],[20,20,130,20,20,20,20,20,20,20,20,]),'for_str_tagged':([0,2,97,131,146,211,246,248,278,338,],[21,21,21,21,21,21,21,21,21,21,]),'if':([0,2,97,131,146,211,246,248,278,338,],[22,22,22,22,22,22,22,22,22,22,]),'else':([0,2,97,131,146,211,246,248,278,338,],[23,23,23,23,23,23,23,23,23,23,]),'else_if':([0,2,97,131,146,211,246,248,278,338,],[24,24,24,24,24,24,24,24,24,24,]),'while':([0,2,97,131,146,211,246,248,278,338,],[25,25,25,25,25,25,25,25,25,25,]),'let_initialization':([0,2,97,131,146,211,246,248,278,338,],[27,27,27,27,27,27,27,27,27,27,]),'const_initialization':([0,2,97,131,146,211,246,248,278,338,],[28,28,28,28,28,28,28,28,28,28,]),'data_str':([0,2,97,131,146,211,246,248,278,338,],[29,29,29,29,29,29,29,29,29,29,]),'input_init':([0,2,97,131,146,211,246,248,278,338,],[30,30,30,30,30,30,30,30,30,30,]),'flotante':([0,2,86,87,88,97,131,146,211,246,248,278,338,],[31,31,124,127,128,31,31,31,31,31,31,31,31,]),'sigint':([0,2,86,97,131,146,211,246,248,278,338,],[32,32,125,32,32,32,32,32,32,32,32,]),'unsigint':([0,2,86,97,131,146,211,246,248,278,338,],[33,33,126,33,33,33,33,33,33,33,33,]),'label':([0,2,97,131,146,211,246,248,278,338,],[35,35,35,35,35,35,35,35,35,35,]),'hashmap':([0,2,97,131,146,211,246,248,278,338,],[40,40,40,40,40,40,40,40,40,40,]),'linkedlist':([0,2,97,131,146,211,246,248,278,338,],[41,41,41,41,41,41,41,41,41,41,]),'linkedlist_push':([17,],[57,]),'linkedlist_remove':([17,],[58,]),'hashmap_insert':([17,],[59,]),'hashmap_remove':([17,],[60,]),'assign_operators':([17,],[62,]),'mdata':([26,81,121,180,184,202,233,340,359,],[72,122,197,231,122,250,122,354,372,]),'data':([26,36,38,81,98,116,120,121,132,135,136,143,150,152,180,184,191,202,219,228,233,254,261,264,273,299,340,351,359,363,367,380,],[73,96,96,123,96,181,196,123,96,96,207,208,217,220,123,123,239,123,260,262,123,286,292,293,300,320,353,365,371,365,377,387,]),'tuple':([26,36,38,81,98,116,120,121,132,135,136,143,150,152,180,184,191,202,219,228,233,254,261,264,273,299,340,351,359,363,367,380,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'lvariable':([36,38,98,132,135,],[91,99,145,204,205,]),'conditional':([36,38,98,132,135,],[92,92,92,92,92,]),'number':([62,112,116,155,156,157,184,191,228,233,273,351,363,],[108,161,161,161,161,161,161,161,161,161,161,161,161,]),'expression':([62,112,116,155,156,157,184,191,228,233,273,351,363,],[109,160,189,221,222,223,160,189,189,160,189,189,189,]),'division':([62,112,116,155,156,157,184,191,228,233,273,351,363,],[113,113,113,113,113,113,113,113,113,113,113,113,113,]),'variable':([62,112,116,155,156,157,184,191,228,233,273,351,363,],[114,114,114,114,114,114,114,114,114,114,114,114,114,]),'logic':([92,93,],[132,135,]),'comparator':([93,96,],[136,143,]),'data_type':([115,147,163,190,230,236,274,306,],[162,213,229,237,265,272,302,325,]),'expression_var':([116,191,228,273,351,363,],[182,240,263,301,364,374,]),'arguments':([118,],[193,]),'variables':([118,243,],[195,277,]),'range':([129,],[200,]),'return':([338,],[349,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> main_rule","S'",1,None,None,None),
  ('main_rule -> father_rule','main_rule',1,'p_main_rule','pyacc.py',14),
  ('main_rule -> father_rule main_rule','main_rule',2,'p_main_rule','pyacc.py',15),
  ('father_rule -> print','father_rule',1,'p_father_rule','pyacc.py',20),
  ('father_rule -> dvariable','father_rule',1,'p_father_rule','pyacc.py',21),
  ('father_rule -> function','father_rule',1,'p_father_rule','pyacc.py',22),
  ('father_rule -> control_str','father_rule',1,'p_father_rule','pyacc.py',23),
  ('father_rule -> void','father_rule',1,'p_father_rule','pyacc.py',24),
  ('father_rule -> array','father_rule',1,'p_father_rule','pyacc.py',25),
  ('father_rule -> linkedlist_methods','father_rule',1,'p_father_rule','pyacc.py',26),
  ('father_rule -> hashmap_methods','father_rule',1,'p_father_rule','pyacc.py',27),
  ('father_rule -> initialization','father_rule',1,'p_father_rule','pyacc.py',28),
  ('father_rule -> input','father_rule',1,'p_father_rule','pyacc.py',29),
  ('father_rule -> assignation','father_rule',1,'p_father_rule','pyacc.py',30),
  ('father_rule -> declare_data_type','father_rule',1,'p_father_rule','pyacc.py',31),
  ('father_rule -> casting','father_rule',1,'p_father_rule','pyacc.py',32),
  ('expression -> expression PLUS expression','expression',3,'p_expression','pyacc.py',38),
  ('expression -> expression MINUS expression','expression',3,'p_expression','pyacc.py',39),
  ('expression -> expression TIMES expression','expression',3,'p_expression','pyacc.py',40),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','pyacc.py',41),
  ('expression -> number','expression',1,'p_expression','pyacc.py',42),
  ('expression -> division','expression',1,'p_expression','pyacc.py',43),
  ('expression -> variable','expression',1,'p_expression','pyacc.py',44),
  ('number -> INTEGER','number',1,'p_number','pyacc.py',49),
  ('number -> FLOAT','number',1,'p_number','pyacc.py',50),
  ('variable -> VARIABLE','variable',1,'p_variable','pyacc.py',53),
  ('data_type -> UNSIG_INT_8','data_type',1,'p_data_type','pyacc.py',57),
  ('data_type -> UNSIG_INT_16','data_type',1,'p_data_type','pyacc.py',58),
  ('data_type -> UNSIG_INT_32','data_type',1,'p_data_type','pyacc.py',59),
  ('data_type -> UNSIG_INT_64','data_type',1,'p_data_type','pyacc.py',60),
  ('data_type -> UNSIG_INT_128','data_type',1,'p_data_type','pyacc.py',61),
  ('data_type -> SIG_INT_8','data_type',1,'p_data_type','pyacc.py',62),
  ('data_type -> SIG_INT_16','data_type',1,'p_data_type','pyacc.py',63),
  ('data_type -> SIG_INT_32','data_type',1,'p_data_type','pyacc.py',64),
  ('data_type -> SIG_INT_64','data_type',1,'p_data_type','pyacc.py',65),
  ('data_type -> SIG_INT_128','data_type',1,'p_data_type','pyacc.py',66),
  ('data_type -> FLOAT_32','data_type',1,'p_data_type','pyacc.py',67),
  ('data_type -> FLOAT_64','data_type',1,'p_data_type','pyacc.py',68),
  ('data_type -> KW_BOOLEAN','data_type',1,'p_data_type','pyacc.py',69),
  ('data_type -> KW_STRING','data_type',1,'p_data_type','pyacc.py',70),
  ('data_type -> KW_CHARACTER','data_type',1,'p_data_type','pyacc.py',71),
  ('assign_operators -> EQUALS','assign_operators',1,'p_assign_operators','pyacc.py',75),
  ('assign_operators -> TIMESEQUAL','assign_operators',1,'p_assign_operators','pyacc.py',76),
  ('assign_operators -> DIVEQUAL','assign_operators',1,'p_assign_operators','pyacc.py',77),
  ('assign_operators -> MODULUSEQUAL','assign_operators',1,'p_assign_operators','pyacc.py',78),
  ('assign_operators -> PLUSEQUAL','assign_operators',1,'p_assign_operators','pyacc.py',79),
  ('assign_operators -> MINUSEQUAL','assign_operators',1,'p_assign_operators','pyacc.py',80),
  ('sigint -> SIG_INT_8','sigint',1,'p_semantic_cast_sigint','pyacc.py',84),
  ('sigint -> SIG_INT_16','sigint',1,'p_semantic_cast_sigint','pyacc.py',85),
  ('sigint -> SIG_INT_32','sigint',1,'p_semantic_cast_sigint','pyacc.py',86),
  ('sigint -> SIG_INT_64','sigint',1,'p_semantic_cast_sigint','pyacc.py',87),
  ('sigint -> SIG_INT_128','sigint',1,'p_semantic_cast_sigint','pyacc.py',88),
  ('unsigint -> UNSIG_INT_8','unsigint',1,'p_semantic_cast_unsigint','pyacc.py',91),
  ('unsigint -> UNSIG_INT_16','unsigint',1,'p_semantic_cast_unsigint','pyacc.py',92),
  ('unsigint -> UNSIG_INT_32','unsigint',1,'p_semantic_cast_unsigint','pyacc.py',93),
  ('unsigint -> UNSIG_INT_64','unsigint',1,'p_semantic_cast_unsigint','pyacc.py',94),
  ('unsigint -> UNSIG_INT_128','unsigint',1,'p_semantic_cast_unsigint','pyacc.py',95),
  ('flotante -> FLOAT_32','flotante',1,'p_semantic_cast_float','pyacc.py',98),
  ('flotante -> FLOAT_64','flotante',1,'p_semantic_cast_float','pyacc.py',99),
  ('casting -> flotante KW_AS sigint','casting',3,'p_semantic_casting','pyacc.py',102),
  ('casting -> flotante KW_AS unsigint','casting',3,'p_semantic_casting','pyacc.py',103),
  ('casting -> sigint KW_AS flotante','casting',3,'p_semantic_casting','pyacc.py',104),
  ('casting -> unsigint KW_AS flotante','casting',3,'p_semantic_casting','pyacc.py',105),
  ('casting -> flotante KW_AS flotante','casting',3,'p_semantic_casting','pyacc.py',106),
  ('division -> INTEGER DIVIDE INTEGER','division',3,'p_semantic_division','pyacc.py',109),
  ('division -> FLOAT DIVIDE FLOAT','division',3,'p_semantic_division','pyacc.py',110),
  ('data -> CADENA','data',1,'p_data','pyacc.py',113),
  ('data -> INTEGER','data',1,'p_data','pyacc.py',114),
  ('data -> CHAR','data',1,'p_data','pyacc.py',115),
  ('data -> FLOAT','data',1,'p_data','pyacc.py',116),
  ('data -> KW_FALSE','data',1,'p_data','pyacc.py',117),
  ('data -> KW_TRUE','data',1,'p_data','pyacc.py',118),
  ('data -> tuple','data',1,'p_data','pyacc.py',119),
  ('comparator -> <empty>','comparator',0,'p_comparator','pyacc.py',122),
  ('comparator -> EQ','comparator',1,'p_comparator','pyacc.py',123),
  ('comparator -> NE','comparator',1,'p_comparator','pyacc.py',124),
  ('comparator -> GE','comparator',1,'p_comparator','pyacc.py',125),
  ('comparator -> LE','comparator',1,'p_comparator','pyacc.py',126),
  ('comparator -> GT','comparator',1,'p_comparator','pyacc.py',127),
  ('comparator -> LT','comparator',1,'p_comparator','pyacc.py',128),
  ('logic -> LOR','logic',1,'p_logic','pyacc.py',131),
  ('logic -> LAND','logic',1,'p_logic','pyacc.py',132),
  ('lvariable -> conditional','lvariable',1,'p_logic_variable','pyacc.py',135),
  ('lvariable -> VARIABLE','lvariable',1,'p_logic_variable','pyacc.py',136),
  ('lvariable -> KW_TRUE','lvariable',1,'p_logic_variable','pyacc.py',137),
  ('lvariable -> KW_FALSE','lvariable',1,'p_logic_variable','pyacc.py',138),
  ('lvariable -> VARIABLE logic lvariable','lvariable',3,'p_logic_variable','pyacc.py',139),
  ('lvariable -> conditional logic lvariable','lvariable',3,'p_logic_variable','pyacc.py',140),
  ('conditional -> VARIABLE comparator data','conditional',3,'p_conditional','pyacc.py',143),
  ('conditional -> data comparator VARIABLE','conditional',3,'p_conditional','pyacc.py',144),
  ('conditional -> VARIABLE comparator VARIABLE','conditional',3,'p_conditional','pyacc.py',145),
  ('conditional -> data comparator data','conditional',3,'p_conditional','pyacc.py',146),
  ('mdata -> data','mdata',1,'p_mdata','pyacc.py',149),
  ('mdata -> data COMMA mdata','mdata',3,'p_mdata','pyacc.py',150),
  ('print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI','print',6,'p_print','pyacc.py',153),
  ('print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI','print',8,'p_print','pyacc.py',154),
  ('dvariable -> KW_LET VARIABLE COLON data_type SEMI','dvariable',5,'p_declare_variable','pyacc.py',157),
  ('array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI','array',7,'p_array','pyacc.py',160),
  ('array -> LBRACKET mdata RBRACKET','array',3,'p_array','pyacc.py',161),
  ('array -> LBRACKET data SEMI data RBRACKET','array',5,'p_array','pyacc.py',162),
  ('array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI','array',13,'p_array','pyacc.py',163),
  ('array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI','array',15,'p_array','pyacc.py',164),
  ('array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI','array',14,'p_array','pyacc.py',165),
  ('array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI','array',16,'p_array','pyacc.py',166),
  ('variables -> VARIABLE','variables',1,'p_variables','pyacc.py',169),
  ('variables -> VARIABLE COMMA variables','variables',3,'p_variables','pyacc.py',170),
  ('while -> KW_WHILE lvariable LBRACE main_rule RBRACE','while',5,'p_while','pyacc.py',173),
  ('tuple -> LPAREN mdata RPAREN','tuple',3,'p_tuple','pyacc.py',179),
  ('initialization -> let_initialization SEMI','initialization',2,'p_initialization','pyacc.py',183),
  ('initialization -> const_initialization SEMI','initialization',2,'p_initialization','pyacc.py',184),
  ('initialization -> data_str SEMI','initialization',2,'p_initialization','pyacc.py',185),
  ('initialization -> input_init SEMI','initialization',2,'p_initialization','pyacc.py',186),
  ('let_initialization -> KW_LET VARIABLE EQUALS data','let_initialization',4,'p_let_initialization','pyacc.py',190),
  ('let_initialization -> KW_LET VARIABLE COLON data_type EQUALS data','let_initialization',6,'p_let_initialization','pyacc.py',191),
  ('let_initialization -> KW_LET KW_MUT VARIABLE EQUALS data','let_initialization',5,'p_let_initialization','pyacc.py',192),
  ('let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS data','let_initialization',7,'p_let_initialization','pyacc.py',193),
  ('let_initialization -> KW_LET VARIABLE EQUALS expression_var','let_initialization',4,'p_let_initialization','pyacc.py',194),
  ('let_initialization -> KW_LET VARIABLE COLON data_type EQUALS expression_var','let_initialization',6,'p_let_initialization','pyacc.py',195),
  ('let_initialization -> KW_LET KW_MUT VARIABLE EQUALS expression_var','let_initialization',5,'p_let_initialization','pyacc.py',196),
  ('let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var','let_initialization',7,'p_let_initialization','pyacc.py',197),
  ('const_initialization -> KW_CONST VARIABLE COLON data_type EQUALS data','const_initialization',6,'p_const_initialization','pyacc.py',201),
  ('arguments -> void','arguments',1,'p_arguments','pyacc.py',205),
  ('arguments -> variables','arguments',1,'p_arguments','pyacc.py',206),
  ('function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE','function',8,'p_function','pyacc.py',210),
  ('control_str -> for_str','control_str',1,'p_control_str','pyacc.py',214),
  ('control_str -> for_str_tagged','control_str',1,'p_control_str','pyacc.py',215),
  ('control_str -> if','control_str',1,'p_control_str','pyacc.py',216),
  ('control_str -> else','control_str',1,'p_control_str','pyacc.py',217),
  ('control_str -> else_if','control_str',1,'p_control_str','pyacc.py',218),
  ('control_str -> while','control_str',1,'p_control_str','pyacc.py',219),
  ('for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE','for_str',7,'p_for_str','pyacc.py',223),
  ('for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE','for_str',7,'p_for_str','pyacc.py',224),
  ('for_str_tagged -> label COLON for_str','for_str_tagged',3,'p_for_str_tagged','pyacc.py',228),
  ('range -> INTEGER DOT DOT INTEGER','range',4,'p_range','pyacc.py',232),
  ('range -> VARIABLE DOT DOT VARIABLE','range',4,'p_range','pyacc.py',233),
  ('range -> LBRACKET mdata RBRACKET','range',3,'p_range','pyacc.py',234),
  ('label -> QUOTE VARIABLE','label',2,'p_label','pyacc.py',238),
  ('data_str -> array','data_str',1,'p_data_str','pyacc.py',242),
  ('data_str -> hashmap','data_str',1,'p_data_str','pyacc.py',243),
  ('data_str -> linkedlist','data_str',1,'p_data_str','pyacc.py',244),
  ('hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN','hashmap',9,'p_hashmap','pyacc.py',248),
  ('hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN','hashmap',10,'p_hashmap','pyacc.py',249),
  ('hashmap_methods -> VARIABLE hashmap_insert','hashmap_methods',2,'p_hashmap_methods','pyacc.py',253),
  ('hashmap_methods -> VARIABLE hashmap_remove','hashmap_methods',2,'p_hashmap_methods','pyacc.py',254),
  ('hashmap_insert -> DOT KW_INSERT LPAREN data COMMA data RPAREN SEMI','hashmap_insert',8,'p_hashmap_insert','pyacc.py',258),
  ('hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI','hashmap_remove',7,'p_hashmap_remove','pyacc.py',262),
  ('void -> <empty>','void',0,'p_void','pyacc.py',266),
  ('linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN','linkedlist',14,'p_linkedlist_empty','pyacc.py',274),
  ('linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN','linkedlist',15,'p_linkedlist_empty','pyacc.py',275),
  ('linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN','linkedlist',10,'p_linkedlist_array','pyacc.py',278),
  ('linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN','linkedlist',11,'p_linkedlist_array','pyacc.py',279),
  ('linkedlist_methods -> VARIABLE linkedlist_push','linkedlist_methods',2,'p_linkedlist_methods','pyacc.py',282),
  ('linkedlist_methods -> VARIABLE linkedlist_remove','linkedlist_methods',2,'p_linkedlist_methods','pyacc.py',283),
  ('linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI','linkedlist_push',6,'p_linkedlist_push','pyacc.py',286),
  ('linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI','linkedlist_remove',6,'p_linkedlist_remove','pyacc.py',289),
  ('if -> KW_IF lvariable LBRACE main_rule RBRACE','if',5,'p_if','pyacc.py',294),
  ('else -> KW_ELSE LBRACE main_rule RBRACE','else',4,'p_else','pyacc.py',297),
  ('else_if -> KW_ELSE KW_IF lvariable LBRACE main_rule RBRACE','else_if',6,'p_else_if','pyacc.py',300),
  ('function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE','function',11,'p_function_return','pyacc.py',305),
  ('expression_var -> expression','expression_var',1,'p_expression_var','pyacc.py',308),
  ('expression_var -> data','expression_var',1,'p_expression_var','pyacc.py',309),
  ('return -> main_rule','return',1,'p_return_statement','pyacc.py',312),
  ('return -> KW_RETURN expression_var SEMI','return',3,'p_return_statement','pyacc.py',313),
  ('return -> main_rule KW_RETURN expression_var SEMI','return',4,'p_return_statement','pyacc.py',314),
  ('input_init -> KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN','input_init',9,'p_input_init','pyacc.py',319),
  ('input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI','input',14,'p_input','pyacc.py',322),
  ('assignation -> VARIABLE assign_operators number SEMI','assignation',4,'p_assignation','pyacc.py',327),
  ('assignation -> VARIABLE assign_operators expression SEMI','assignation',4,'p_assignation','pyacc.py',328),
  ('assignation -> VARIABLE assign_operators number','assignation',3,'p_assignation','pyacc.py',329),
  ('assignation -> VARIABLE assign_operators expression','assignation',3,'p_assignation','pyacc.py',330),
  ('declare_data_type -> KW_LET VARIABLE COLON data_type SEMI','declare_data_type',5,'p_declare_datat_type','pyacc.py',335),
]
