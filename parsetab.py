
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND CADENA CHAR COLON COMMA COMMENT DIVEQUAL DIVIDE DOT EQ EQUALS FLOAT FLOAT_32 FLOAT_64 GE GT INTEGER KW_BOOLEAN KW_CHARACTER KW_CONST KW_ELSE KW_EXPECT KW_FALSE KW_FN KW_FOR KW_FROM KW_HASHMAP KW_IF KW_IN KW_INSERT KW_IO KW_LET KW_LINKEDLIST KW_MUT KW_NEW KW_PRINT KW_PUSH_BACK KW_READ_LINE KW_REMOVE KW_RETURN KW_STDIN KW_STRING KW_TRUE KW_WHILE LAND LBRACE LBRACKET LE LNOT LOR LPAREN LT MINUS MINUSEQUAL MODULUSEQUAL NE PLUS PLUSEQUAL QUOTE RBRACE RBRACKET RPAREN SEMI SIG_INT_128 SIG_INT_16 SIG_INT_32 SIG_INT_64 SIG_INT_8 TIMES TIMESEQUAL UNSIG_INT_128 UNSIG_INT_16 UNSIG_INT_32 UNSIG_INT_64 UNSIG_INT_8 VARIABLEmain_rule : father_rule\n    | father_rule main_rulefather_rule : print\n    | dvariable\n    | function\n    | control_str\n    | expression\n    | void\n    | data_str\n    | array\n    | linkedlist_methods\n    | hashmap_methods\n    | initialization\n    | input\n    | assignation\n    | declare_data_typeexpression : expression PLUS expression\n    | expression MINUS expression\n    | expression TIMES expression\n    | LPAREN expression RPAREN\n    | number\n    | divisionnumber : INTEGER\n    | FLOAT\n    | VARIABLEdata_type : UNSIG_INT_8\n                | UNSIG_INT_16\n                | UNSIG_INT_32\n                | UNSIG_INT_64\n                | UNSIG_INT_128\n                | SIG_INT_8\n                | SIG_INT_16\n                | SIG_INT_32\n                | SIG_INT_64\n                | SIG_INT_128\n                | FLOAT_32\n                | FLOAT_64\n                | KW_BOOLEAN\n                | KW_STRING\n                | KW_CHARACTERassign_operators : EQUALS\n                        | TIMESEQUAL \n                        | DIVEQUAL\n                        | MODULUSEQUAL\n                        | PLUSEQUAL \n                        | MINUSEQUALdivision : INTEGER DIVIDE INTEGER\n    | FLOAT DIVIDE FLOATdata : CADENA\n    | INTEGER\n    | CHAR\n    | FLOAT\n    | KW_FALSE\n    | KW_TRUE\n    | tuplecomparator :\n    | EQ\n    | NE\n    | GE\n    | LE\n    | GT\n    | LTlogic : LOR\n    | LANDlvariable : VARIABLE logic VARIABLEconditional : VARIABLE comparator data\n    | LPAREN lvariable RPAREN comparator datamdata : data\n    | data COMMA mdataprint : KW_PRINT LNOT LPAREN CADENA RPAREN SEMI\n    | KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMIdvariable : KW_LET VARIABLE SEMIarray : KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI\n    | LBRACKET mdata RBRACKET\n    | LBRACKET data SEMI data RBRACKET\n    | KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI\n    | KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMIvariables : VARIABLE \n    | VARIABLE COMMA variableswhile : KW_WHILE conditional LBRACE main_rule RBRACEtuple : LPAREN mdata RPARENinitialization : let_initialization SEMI \n    | const_initialization SEMI \n    | data_str SEMI\n    | input_init SEMIlet_initialization : KW_LET VARIABLE EQUALS data\n    | KW_LET VARIABLE COLON data_type EQUALS data\n    | KW_LET KW_MUT VARIABLE EQUALS data\n    | KW_LET KW_MUT VARIABLE COLON data_type EQUALS data\n    | KW_LET VARIABLE EQUALS expression_var\n    | KW_LET VARIABLE COLON data_type EQUALS expression_var\n    | KW_LET KW_MUT VARIABLE EQUALS expression_var\n    | KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_varconst_initialization : KW_CONST VARIABLE COLON data_type EQUALS dataarguments : void\n    | variablesfunction : KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACEcontrol_str : for_str\n    | for_str_tagged\n    | if\n    | else\n    | else_if\n    | whilefor_str : KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE\n    | KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACEfor_str_tagged : label COLON for_strrange : INTEGER DOT DOT INTEGER\n    | VARIABLE DOT DOT VARIABLElabel : QUOTE VARIABLEdata_str : array\n    | hashmap\n    | linkedlisthashmap : KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN\n    | KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN\n    | KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN\n    | KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPARENhashmap_methods : VARIABLE hashmap_insert\n    | VARIABLE hashmap_removehashmap_insert : DOT KW_INSERT LPAREN mdata RPAREN SEMIhashmap_remove : DOT KW_REMOVE LPAREN AND data RPAREN SEMIvoid : linkedlist : KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN\n                  | KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPARENlinkedlist : KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN\n                  | KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPARENlinkedlist_methods : VARIABLE linkedlist_push\n    | VARIABLE linkedlist_removelinkedlist_push : DOT KW_PUSH_BACK LPAREN data RPAREN SEMIlinkedlist_remove : DOT KW_REMOVE LPAREN INTEGER RPAREN SEMIif : KW_IF conditional LBRACE main_rule RBRACEelse : KW_ELSE LBRACE main_rule RBRACEelse_if : KW_ELSE KW_IF conditional LBRACE main_rule RBRACEfunction : KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACEexpression_var : expression\n                      | datareturn : main_rule\n              | KW_RETURN expression_var SEMI\n              | main_rule KW_RETURN expression_var SEMIinput_init : KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPARENinput : VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMIassignation : VARIABLE assign_operators numberdeclare_data_type : KW_LET VARIABLE COLON data_type SEMI'
    
_lr_action_items = {'KW_PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,19,22,23,24,25,26,27,28,29,30,31,41,42,49,52,53,54,55,56,78,79,80,86,93,94,95,97,102,103,104,105,110,116,117,129,130,131,183,184,199,211,212,214,216,220,222,244,251,255,256,258,259,273,275,277,279,290,293,304,308,309,313,325,326,327,345,346,348,351,352,],[17,17,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-25,-98,-99,-100,-101,-102,-103,-21,-22,-111,-112,-23,-24,-84,-25,-126,-127,-117,-118,-82,-83,-85,17,-17,-18,-19,-20,-141,-23,-24,-72,-74,-106,17,17,-47,-48,-131,17,-142,-75,17,17,-130,-80,-70,17,-132,-128,-129,-119,-73,-105,-104,-71,-120,-97,-113,17,-115,-124,-114,-116,-125,-133,-140,-122,-76,-123,-77,]),'KW_LET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,19,22,23,24,25,26,27,28,29,30,31,41,42,49,52,53,54,55,56,78,79,80,86,93,94,95,97,102,103,104,105,110,116,117,129,130,131,183,184,199,211,212,214,216,220,222,244,251,255,256,258,259,273,275,277,279,281,282,290,293,302,303,304,308,309,313,325,326,327,345,346,348,351,352,],[20,20,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-25,-98,-99,-100,-101,-102,-103,-21,-22,-111,-112,-23,-24,-84,-25,-126,-127,-117,-118,-82,-83,-85,20,-17,-18,-19,-20,-141,-23,-24,-72,-74,-106,20,20,-47,-48,-131,20,-142,-75,20,20,-130,-80,-70,20,-132,-128,-129,-119,-73,-105,-104,-71,-120,294,294,-97,-113,294,294,20,-115,-124,-114,-116,-125,-133,-140,-122,-76,-123,-77,]),'KW_FN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,19,22,23,24,25,26,27,28,29,30,31,41,42,49,52,53,54,55,56,78,79,80,86,93,94,95,97,102,103,104,105,110,116,117,129,130,131,183,184,199,211,212,214,216,220,222,244,251,255,256,258,259,273,275,277,279,290,293,304,308,309,313,325,326,327,345,346,348,351,352,],[21,21,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-25,-98,-99,-100,-101,-102,-103,-21,-22,-111,-112,-23,-24,-84,-25,-126,-127,-117,-118,-82,-83,-85,21,-17,-18,-19,-20,-141,-23,-24,-72,-74,-106,21,21,-47,-48,-131,21,-142,-75,21,21,-130,-80,-70,21,-132,-128,-129,-119,-73,-105,-104,-71,-120,-97,-113,21,-115,-124,-114,-116,-125,-133,-140,-122,-76,-123,-77,]),'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,22,23,24,25,26,27,28,29,30,31,32,38,40,41,42,46,47,48,49,50,52,53,54,55,56,67,77,78,79,80,84,86,87,93,94,95,97,98,99,100,101,102,103,104,105,106,110,111,112,116,117,118,119,120,121,122,123,124,129,130,131,135,137,138,140,166,179,183,184,192,196,199,200,211,212,214,216,217,220,221,222,239,244,251,255,256,258,259,260,261,262,263,265,273,275,277,279,287,288,289,290,293,304,305,308,309,313,318,323,325,326,327,328,333,341,343,345,346,348,351,352,],[18,18,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,18,-25,-98,-99,-100,-101,-102,-103,-21,-22,-111,-112,77,85,85,-23,-24,18,18,18,-84,96,-25,-126,-127,-117,-118,109,77,-82,-83,-85,-56,18,85,-17,-18,-19,-20,134,135,136,137,-141,-23,-24,-72,140,-74,77,77,-106,18,77,-57,-58,-59,-60,-61,-62,18,-47,-48,77,77,77,196,140,-56,-131,18,77,196,-142,140,-75,18,18,-130,77,-80,77,-70,140,18,-132,-128,-129,-119,-73,280,281,282,283,77,-105,-104,-71,-120,301,302,303,-97,-113,18,319,-115,-124,-114,196,77,-116,-125,-133,196,340,77,349,-140,-122,-76,-123,-77,]),'LBRACKET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,19,22,23,24,25,26,27,28,29,30,31,41,42,49,52,53,54,55,56,78,79,80,86,93,94,95,97,102,103,104,105,106,110,116,117,129,130,131,165,183,184,199,211,212,214,216,220,222,244,251,255,256,258,259,273,275,277,279,281,282,290,293,302,303,304,308,309,311,313,320,325,326,327,332,345,346,348,351,352,],[32,32,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-25,-98,-99,-100,-101,-102,-103,-21,-22,-111,-112,-23,-24,-84,-25,-126,-127,-117,-118,-82,-83,-85,32,-17,-18,-19,-20,-141,-23,-24,-72,138,-74,-106,32,32,-47,-48,202,-131,32,-142,-75,32,32,-130,-80,-70,32,-132,-128,-129,-119,-73,-105,-104,-71,-120,32,32,-97,-113,32,32,32,-115,-124,323,-114,138,-116,-125,-133,202,-140,-122,-76,-123,-77,]),'VARIABLE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,20,21,22,23,24,25,26,27,28,29,30,31,36,38,40,41,42,43,44,46,47,48,49,52,53,54,55,56,58,59,60,61,62,63,64,66,78,79,80,85,86,87,93,94,95,97,102,103,104,105,106,109,110,115,116,117,129,130,131,140,166,180,181,182,183,184,188,196,199,200,209,211,212,214,216,220,222,224,239,244,247,251,255,256,258,259,273,275,277,279,290,293,294,304,307,308,309,313,318,325,326,327,328,345,346,348,351,352,],[19,19,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,52,-25,65,67,-98,-99,-100,-101,-102,-103,-21,-22,-111,-112,81,84,84,-23,-24,91,92,52,52,52,-84,-25,-126,-127,-117,-118,52,-41,-42,-43,-44,-45,-46,108,-82,-83,-85,126,19,84,-17,-18,-19,-20,-141,-23,-24,-72,52,167,-74,174,-106,19,19,-47,-48,52,52,218,-63,-64,-131,19,223,52,-142,52,167,-75,19,19,-130,-80,-70,254,52,19,274,-132,-128,-129,-119,-73,-105,-104,-71,-120,-97,-113,306,19,321,-115,-124,-114,52,-116,-125,-133,52,-140,-122,-76,-123,-77,]),'KW_FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,19,22,23,24,25,26,27,28,29,30,31,41,42,49,52,53,54,55,56,78,79,80,82,86,93,94,95,97,102,103,104,105,110,116,117,129,130,131,183,184,199,211,212,214,216,220,222,244,251,255,256,258,259,273,275,277,279,290,293,304,308,309,313,325,326,327,345,346,348,351,352,],[36,36,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-25,-98,-99,-100,-101,-102,-103,-21,-22,-111,-112,-23,-24,-84,-25,-126,-127,-117,-118,-82,-83,-85,36,36,-17,-18,-19,-20,-141,-23,-24,-72,-74,-106,36,36,-47,-48,-131,36,-142,-75,36,36,-130,-80,-70,36,-132,-128,-129,-119,-73,-105,-104,-71,-120,-97,-113,36,-115,-124,-114,-116,-125,-133,-140,-122,-76,-123,-77,]),'KW_IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,19,22,23,24,25,26,27,28,29,30,31,39,41,42,49,52,53,54,55,56,78,79,80,86,93,94,95,97,102,103,104,105,110,116,117,129,130,131,183,184,199,211,212,214,216,220,222,244,251,255,256,258,259,273,275,277,279,290,293,304,308,309,313,325,326,327,345,346,348,351,352,],[38,38,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-25,-98,-99,-100,-101,-102,-103,-21,-22,-111,-112,87,-23,-24,-84,-25,-126,-127,-117,-118,-82,-83,-85,38,-17,-18,-19,-20,-141,-23,-24,-72,-74,-106,38,38,-47,-48,-131,38,-142,-75,38,38,-130,-80,-70,38,-132,-128,-129,-119,-73,-105,-104,-71,-120,-97,-113,38,-115,-124,-114,-116,-125,-133,-140,-122,-76,-123,-77,]),'KW_ELSE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,19,22,23,24,25,26,27,28,29,30,31,41,42,49,52,53,54,55,56,78,79,80,86,93,94,95,97,102,103,104,105,110,116,117,129,130,131,183,184,199,211,212,214,216,220,222,244,251,255,256,258,259,273,275,277,279,290,293,304,308,309,313,325,326,327,345,346,348,351,352,],[39,39,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-25,-98,-99,-100,-101,-102,-103,-21,-22,-111,-112,-23,-24,-84,-25,-126,-127,-117,-118,-82,-83,-85,39,-17,-18,-19,-20,-141,-23,-24,-72,-74,-106,39,39,-47,-48,-131,39,-142,-75,39,39,-130,-80,-70,39,-132,-128,-129,-119,-73,-105,-104,-71,-120,-97,-113,39,-115,-124,-114,-116,-125,-133,-140,-122,-76,-123,-77,]),'KW_WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,19,22,23,24,25,26,27,28,29,30,31,41,42,49,52,53,54,55,56,78,79,80,86,93,94,95,97,102,103,104,105,110,116,117,129,130,131,183,184,199,211,212,214,216,220,222,244,251,255,256,258,259,273,275,277,279,290,293,304,308,309,313,325,326,327,345,346,348,351,352,],[40,40,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-25,-98,-99,-100,-101,-102,-103,-21,-22,-111,-112,-23,-24,-84,-25,-126,-127,-117,-118,-82,-83,-85,40,-17,-18,-19,-20,-141,-23,-24,-72,-74,-106,40,40,-47,-48,-131,40,-142,-75,40,40,-130,-80,-70,40,-132,-128,-129,-119,-73,-105,-104,-71,-120,-97,-113,40,-115,-124,-114,-116,-125,-133,-140,-122,-76,-123,-77,]),'INTEGER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,22,23,24,25,26,27,28,29,30,31,32,41,42,46,47,48,49,52,53,54,55,56,58,59,60,61,62,63,64,77,78,79,80,84,86,89,93,94,95,97,102,103,104,105,106,110,111,112,115,116,117,118,119,120,121,122,123,124,129,130,131,135,136,137,138,140,166,179,183,184,192,196,199,200,211,212,214,216,217,220,221,222,239,244,249,251,255,256,258,259,265,273,275,277,279,290,293,304,308,309,313,318,323,325,326,327,328,341,345,346,348,351,352,],[41,41,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,41,-25,-98,-99,-100,-101,-102,-103,-21,-22,-111,-112,71,-23,-24,41,41,41,-84,-25,-126,-127,-117,-118,103,-41,-42,-43,-44,-45,-46,71,-82,-83,-85,-56,41,130,-17,-18,-19,-20,-141,-23,-24,-72,145,-74,71,71,176,-106,41,71,-57,-58,-59,-60,-61,-62,41,-47,-48,71,191,71,71,145,145,-56,-131,41,71,231,-142,145,-75,41,41,-130,71,-80,71,-70,145,41,276,-132,-128,-129,-119,-73,71,-105,-104,-71,-120,-97,-113,41,-115,-124,-114,145,71,-116,-125,-133,145,71,-140,-122,-76,-123,-77,]),'FLOAT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,22,23,24,25,26,27,28,29,30,31,32,41,42,46,47,48,49,52,53,54,55,56,58,59,60,61,62,63,64,77,78,79,80,84,86,90,93,94,95,97,102,103,104,105,106,110,111,112,116,117,118,119,120,121,122,123,124,129,130,131,135,137,138,140,166,179,183,184,192,196,199,200,211,212,214,216,217,220,221,222,239,244,251,255,256,258,259,265,273,275,277,279,290,293,304,308,309,313,318,323,325,326,327,328,341,345,346,348,351,352,],[42,42,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,42,-25,-98,-99,-100,-101,-102,-103,-21,-22,-111,-112,73,-23,-24,42,42,42,-84,-25,-126,-127,-117,-118,104,-41,-42,-43,-44,-45,-46,73,-82,-83,-85,-56,42,131,-17,-18,-19,-20,-141,-23,-24,-72,146,-74,73,73,-106,42,73,-57,-58,-59,-60,-61,-62,42,-47,-48,73,73,73,146,146,-56,-131,42,73,232,-142,146,-75,42,42,-130,73,-80,73,-70,146,42,-132,-128,-129,-119,-73,73,-105,-104,-71,-120,-97,-113,42,-115,-124,-114,146,73,-116,-125,-133,146,73,-140,-122,-76,-123,-77,]),'KW_CONST':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,19,22,23,24,25,26,27,28,29,30,31,41,42,49,52,53,54,55,56,78,79,80,86,93,94,95,97,102,103,104,105,110,116,117,129,130,131,183,184,199,211,212,214,216,220,222,244,251,255,256,258,259,273,275,277,279,290,293,304,308,309,313,325,326,327,345,346,348,351,352,],[43,43,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-25,-98,-99,-100,-101,-102,-103,-21,-22,-111,-112,-23,-24,-84,-25,-126,-127,-117,-118,-82,-83,-85,43,-17,-18,-19,-20,-141,-23,-24,-72,-74,-106,43,43,-47,-48,-131,43,-142,-75,43,43,-130,-80,-70,43,-132,-128,-129,-119,-73,-105,-104,-71,-120,-97,-113,43,-115,-124,-114,-116,-125,-133,-140,-122,-76,-123,-77,]),'QUOTE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,19,22,23,24,25,26,27,28,29,30,31,41,42,49,52,53,54,55,56,78,79,80,86,93,94,95,97,102,103,104,105,110,116,117,129,130,131,183,184,199,211,212,214,216,220,222,244,251,255,256,258,259,273,275,277,279,290,293,304,308,309,313,325,326,327,345,346,348,351,352,],[44,44,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-25,-98,-99,-100,-101,-102,-103,-21,-22,-111,-112,-23,-24,-84,-25,-126,-127,-117,-118,-82,-83,-85,44,-17,-18,-19,-20,-141,-23,-24,-72,-74,-106,44,44,-47,-48,-131,44,-142,-75,44,44,-130,-80,-70,44,-132,-128,-129,-119,-73,-105,-104,-71,-120,-97,-113,44,-115,-124,-114,-116,-125,-133,-140,-122,-76,-123,-77,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,19,22,23,24,25,26,27,28,29,30,31,41,42,45,49,52,53,54,55,56,78,79,80,93,94,95,97,102,103,104,105,110,116,130,131,183,199,211,216,220,222,251,255,256,258,259,273,275,277,279,290,293,308,309,313,325,326,327,345,346,348,351,352,],[-121,0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-25,-98,-99,-100,-101,-102,-103,-21,-22,-111,-112,-23,-24,-2,-84,-25,-126,-127,-117,-118,-82,-83,-85,-17,-18,-19,-20,-141,-23,-24,-72,-74,-106,-47,-48,-131,-142,-75,-130,-80,-70,-132,-128,-129,-119,-73,-105,-104,-71,-120,-97,-113,-115,-124,-114,-116,-125,-133,-140,-122,-76,-123,-77,]),'RBRACE':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,19,22,23,24,25,26,27,28,29,30,31,41,42,45,49,52,53,54,55,56,78,79,80,86,93,94,95,97,102,103,104,105,110,116,117,127,129,130,131,177,183,184,185,199,211,212,214,216,219,220,222,244,246,248,251,255,256,258,259,271,273,275,277,279,290,293,304,308,309,313,316,317,325,326,327,338,344,345,346,348,351,352,],[-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-25,-98,-99,-100,-101,-102,-103,-21,-22,-111,-112,-23,-24,-2,-84,-25,-126,-127,-117,-118,-82,-83,-85,-121,-17,-18,-19,-20,-141,-23,-24,-72,-74,-106,-121,183,-121,-47,-48,216,-131,-121,220,-142,-75,-121,-121,-130,251,-80,-70,-121,273,275,-132,-128,-129,-119,-73,290,-105,-104,-71,-120,-97,-113,-121,-115,-124,-114,327,-136,-116,-125,-133,-137,-138,-140,-122,-76,-123,-77,]),'KW_RETURN':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,19,22,23,24,25,26,27,28,29,30,31,41,42,45,49,52,53,54,55,56,78,79,80,93,94,95,97,102,103,104,105,110,116,130,131,183,199,211,216,220,222,251,255,256,258,259,273,275,277,279,290,293,304,308,309,313,317,325,326,327,345,346,348,351,352,],[-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-25,-98,-99,-100,-101,-102,-103,-21,-22,-111,-112,-23,-24,-2,-84,-25,-126,-127,-117,-118,-82,-83,-85,-17,-18,-19,-20,-141,-23,-24,-72,-74,-106,-47,-48,-131,-142,-75,-130,-80,-70,-132,-128,-129,-119,-73,-105,-104,-71,-120,-97,-113,318,-115,-124,-114,328,-116,-125,-133,-140,-122,-76,-123,-77,]),'PLUS':([7,19,28,29,41,42,51,52,93,94,95,97,130,131,145,146,147,231,232,],[46,-25,-21,-22,-23,-24,46,-25,46,46,46,-20,-47,-48,-23,-24,46,-23,-24,]),'MINUS':([7,19,28,29,41,42,51,52,93,94,95,97,130,131,145,146,147,210,231,232,],[47,-25,-21,-22,-23,-24,47,-25,47,47,47,-20,-47,-48,-23,-24,47,245,-23,-24,]),'TIMES':([7,19,28,29,41,42,51,52,93,94,95,97,130,131,145,146,147,231,232,],[48,-25,-21,-22,-23,-24,48,-25,48,48,48,-20,-47,-48,-23,-24,48,-23,-24,]),'SEMI':([9,10,28,29,30,31,33,34,35,41,42,52,65,69,70,71,72,73,74,75,76,93,94,95,97,110,130,131,142,143,145,146,147,148,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,173,187,207,208,211,225,226,228,229,235,236,238,252,253,257,259,266,267,293,297,308,309,313,325,326,329,330,334,337,339,342,346,348,350,351,352,],[49,-110,-21,-22,-111,-112,78,79,80,-23,-24,-25,105,111,-49,-50,-51,-52,-53,-54,-55,-17,-18,-19,-20,-74,-47,-48,-86,-90,-23,-24,-134,199,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-81,222,-88,-92,-75,255,256,258,259,-87,-91,265,-94,277,279,-73,-89,-93,-113,-139,-115,-124,-114,-116,-125,338,-135,341,344,345,348,-122,-76,352,-123,-77,]),'LNOT':([17,],[50,]),'DOT':([19,174,176,213,215,278,],[57,213,215,247,249,292,]),'EQUALS':([19,65,108,148,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,186,203,264,286,299,306,],[59,106,166,200,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,221,239,284,300,311,320,]),'TIMESEQUAL':([19,],[60,]),'DIVEQUAL':([19,],[61,]),'MODULUSEQUAL':([19,],[62,]),'PLUSEQUAL':([19,],[63,]),'MINUSEQUAL':([19,],[64,]),'KW_MUT':([20,189,294,],[66,224,307,]),'RPAREN':([28,29,41,42,51,52,70,71,72,73,74,75,76,93,94,95,97,109,110,113,114,125,130,131,133,145,146,167,168,169,170,172,173,190,191,193,211,218,223,227,231,232,243,254,259,280,283,295,296,301,314,315,331,340,348,349,352,],[-21,-22,-23,-24,97,-25,-49,-50,-51,-52,-53,-54,-55,-17,-18,-19,-20,-121,-74,173,-68,179,-47,-48,187,-23,-24,-78,210,-95,-96,-69,-81,225,226,228,-75,-65,253,257,-23,-24,-79,278,-73,293,297,308,309,313,325,326,339,346,-76,351,-77,]),'CADENA':([32,77,84,96,106,111,112,118,119,120,121,122,123,124,135,137,138,140,166,179,192,196,200,217,221,239,265,318,319,323,328,341,],[70,70,-56,133,70,70,70,70,-57,-58,-59,-60,-61,-62,70,70,70,70,70,-56,70,70,70,70,70,70,70,70,331,70,70,70,]),'CHAR':([32,77,84,106,111,112,118,119,120,121,122,123,124,135,137,138,140,166,179,192,196,200,217,221,239,265,318,323,328,341,],[72,72,-56,72,72,72,72,-57,-58,-59,-60,-61,-62,72,72,72,72,72,-56,72,72,72,72,72,72,72,72,72,72,72,]),'KW_FALSE':([32,77,84,106,111,112,118,119,120,121,122,123,124,135,137,138,140,166,179,192,196,200,217,221,239,265,318,323,328,341,],[74,74,-56,74,74,74,74,-57,-58,-59,-60,-61,-62,74,74,74,74,74,-56,74,74,74,74,74,74,74,74,74,74,74,]),'KW_TRUE':([32,77,84,106,111,112,118,119,120,121,122,123,124,135,137,138,140,166,179,192,196,200,217,221,239,265,318,323,328,341,],[75,75,-56,75,75,75,75,-57,-58,-59,-60,-61,-62,75,75,75,75,75,-56,75,75,75,75,75,75,75,75,75,75,75,]),'COLON':([37,65,91,92,108,139,141,144,195,197,198,205,206,241,242,298,310,312,321,324,],[82,107,132,-109,165,195,197,198,230,233,234,241,242,269,270,310,322,324,332,336,]),'LBRACE':([39,70,71,72,73,74,75,76,83,88,128,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,173,174,175,178,210,250,274,276,291,],[86,-49,-50,-51,-52,-53,-54,-55,117,129,184,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-81,212,214,-66,244,-67,-108,-107,304,]),'DIVIDE':([41,42,145,146,231,232,],[89,90,89,90,89,90,]),'KW_READ_LINE':([57,],[98,]),'KW_PUSH_BACK':([57,],[99,]),'KW_REMOVE':([57,],[100,]),'KW_INSERT':([57,],[101,]),'RBRACKET':([68,69,70,71,72,73,74,75,76,114,171,172,173,194,285,334,335,347,],[110,-68,-49,-50,-51,-52,-53,-54,-55,-68,211,-69,-81,229,299,-68,342,350,]),'COMMA':([69,70,71,72,73,74,75,76,114,133,145,146,167,173,231,232,334,],[112,-49,-50,-51,-52,-53,-54,-55,112,188,-50,-52,209,-81,-50,-52,112,]),'KW_IN':([81,],[115,]),'EQ':([84,179,],[119,119,]),'NE':([84,179,],[120,120,]),'GE':([84,179,],[121,121,]),'LE':([84,179,],[122,122,]),'GT':([84,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,179,237,245,268,],[123,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,123,264,272,286,]),'LT':([84,149,179,204,],[124,201,124,240,]),'KW_HASHMAP':([106,166,],[139,205,]),'KW_LINKEDLIST':([106,107,165,166,284,300,],[141,149,204,206,298,312,]),'KW_IO':([106,],[144,]),'UNSIG_INT_8':([107,132,165,201,202,240,272,],[150,150,150,150,150,150,150,]),'UNSIG_INT_16':([107,132,165,201,202,240,272,],[151,151,151,151,151,151,151,]),'UNSIG_INT_32':([107,132,165,201,202,240,272,],[152,152,152,152,152,152,152,]),'UNSIG_INT_64':([107,132,165,201,202,240,272,],[153,153,153,153,153,153,153,]),'UNSIG_INT_128':([107,132,165,201,202,240,272,],[154,154,154,154,154,154,154,]),'SIG_INT_8':([107,132,165,201,202,240,272,],[155,155,155,155,155,155,155,]),'SIG_INT_16':([107,132,165,201,202,240,272,],[156,156,156,156,156,156,156,]),'SIG_INT_32':([107,132,165,201,202,240,272,],[157,157,157,157,157,157,157,]),'SIG_INT_64':([107,132,165,201,202,240,272,],[158,158,158,158,158,158,158,]),'SIG_INT_128':([107,132,165,201,202,240,272,],[159,159,159,159,159,159,159,]),'FLOAT_32':([107,132,165,201,202,240,272,],[160,160,160,160,160,160,160,]),'FLOAT_64':([107,132,165,201,202,240,272,],[161,161,161,161,161,161,161,]),'KW_BOOLEAN':([107,132,165,201,202,240,272,],[162,162,162,162,162,162,162,]),'KW_STRING':([107,132,165,201,202,240,272,],[163,163,163,163,163,163,163,]),'KW_CHARACTER':([107,132,165,201,202,240,272,],[164,164,164,164,164,164,164,]),'LOR':([126,],[181,]),'LAND':([126,],[182,]),'AND':([134,136,],[189,192,]),'KW_NEW':([230,269,322,336,],[260,287,333,343,]),'KW_FROM':([230,233,269,270,],[261,262,288,289,]),'KW_STDIN':([234,],[263,]),'KW_EXPECT':([292,],[305,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'main_rule':([0,2,86,117,129,184,212,214,244,304,],[1,45,127,177,185,219,246,248,271,317,]),'father_rule':([0,2,86,117,129,184,212,214,244,304,],[2,2,2,2,2,2,2,2,2,2,]),'print':([0,2,86,117,129,184,212,214,244,304,],[3,3,3,3,3,3,3,3,3,3,]),'dvariable':([0,2,86,117,129,184,212,214,244,304,],[4,4,4,4,4,4,4,4,4,4,]),'function':([0,2,86,117,129,184,212,214,244,304,],[5,5,5,5,5,5,5,5,5,5,]),'control_str':([0,2,86,117,129,184,212,214,244,304,],[6,6,6,6,6,6,6,6,6,6,]),'expression':([0,2,18,46,47,48,86,106,117,129,140,166,184,196,200,212,214,239,244,304,318,328,],[7,7,51,93,94,95,7,147,7,7,51,147,7,51,147,7,7,147,7,7,147,147,]),'void':([0,2,86,109,117,129,184,212,214,244,304,],[8,8,8,169,8,8,8,8,8,8,8,]),'data_str':([0,2,86,117,129,184,212,214,244,304,],[9,9,9,9,9,9,9,9,9,9,]),'array':([0,2,86,117,129,184,212,214,244,281,282,302,303,304,],[10,10,10,10,10,10,10,10,10,295,296,314,315,10,]),'linkedlist_methods':([0,2,86,117,129,184,212,214,244,304,],[11,11,11,11,11,11,11,11,11,11,]),'hashmap_methods':([0,2,86,117,129,184,212,214,244,304,],[12,12,12,12,12,12,12,12,12,12,]),'initialization':([0,2,86,117,129,184,212,214,244,304,],[13,13,13,13,13,13,13,13,13,13,]),'input':([0,2,86,117,129,184,212,214,244,304,],[14,14,14,14,14,14,14,14,14,14,]),'assignation':([0,2,86,117,129,184,212,214,244,304,],[15,15,15,15,15,15,15,15,15,15,]),'declare_data_type':([0,2,86,117,129,184,212,214,244,304,],[16,16,16,16,16,16,16,16,16,16,]),'for_str':([0,2,82,86,117,129,184,212,214,244,304,],[22,22,116,22,22,22,22,22,22,22,22,]),'for_str_tagged':([0,2,86,117,129,184,212,214,244,304,],[23,23,23,23,23,23,23,23,23,23,]),'if':([0,2,86,117,129,184,212,214,244,304,],[24,24,24,24,24,24,24,24,24,24,]),'else':([0,2,86,117,129,184,212,214,244,304,],[25,25,25,25,25,25,25,25,25,25,]),'else_if':([0,2,86,117,129,184,212,214,244,304,],[26,26,26,26,26,26,26,26,26,26,]),'while':([0,2,86,117,129,184,212,214,244,304,],[27,27,27,27,27,27,27,27,27,27,]),'number':([0,2,18,46,47,48,58,86,106,117,129,140,166,184,196,200,212,214,239,244,304,318,328,],[28,28,28,28,28,28,102,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'division':([0,2,18,46,47,48,86,106,117,129,140,166,184,196,200,212,214,239,244,304,318,328,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'hashmap':([0,2,86,117,129,184,212,214,244,304,],[30,30,30,30,30,30,30,30,30,30,]),'linkedlist':([0,2,86,117,129,184,212,214,244,304,],[31,31,31,31,31,31,31,31,31,31,]),'let_initialization':([0,2,86,117,129,184,212,214,244,304,],[33,33,33,33,33,33,33,33,33,33,]),'const_initialization':([0,2,86,117,129,184,212,214,244,304,],[34,34,34,34,34,34,34,34,34,34,]),'input_init':([0,2,86,117,129,184,212,214,244,304,],[35,35,35,35,35,35,35,35,35,35,]),'label':([0,2,86,117,129,184,212,214,244,304,],[37,37,37,37,37,37,37,37,37,37,]),'linkedlist_push':([19,],[53,]),'linkedlist_remove':([19,],[54,]),'hashmap_insert':([19,],[55,]),'hashmap_remove':([19,],[56,]),'assign_operators':([19,],[58,]),'mdata':([32,77,112,137,138,140,196,323,],[68,113,172,193,194,113,113,335,]),'data':([32,77,106,111,112,118,135,137,138,140,166,192,196,200,217,221,239,265,318,323,328,341,],[69,114,142,171,114,178,190,114,114,114,207,227,114,235,250,252,266,285,330,334,330,347,]),'tuple':([32,77,106,111,112,118,135,137,138,140,166,192,196,200,217,221,239,265,318,323,328,341,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'conditional':([38,40,87,],[83,88,128,]),'comparator':([84,179,],[118,217,]),'lvariable':([85,],[125,]),'expression_var':([106,166,200,239,318,328,],[143,208,236,267,329,337,]),'data_type':([107,132,165,201,202,240,272,],[148,186,203,237,238,268,291,]),'arguments':([109,],[168,]),'variables':([109,209,],[170,243,]),'range':([115,],[175,]),'logic':([126,],[180,]),'return':([304,],[316,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> main_rule","S'",1,None,None,None),
  ('main_rule -> father_rule','main_rule',1,'p_main_rule','pyacc.py',14),
  ('main_rule -> father_rule main_rule','main_rule',2,'p_main_rule','pyacc.py',15),
  ('father_rule -> print','father_rule',1,'p_father_rule','pyacc.py',20),
  ('father_rule -> dvariable','father_rule',1,'p_father_rule','pyacc.py',21),
  ('father_rule -> function','father_rule',1,'p_father_rule','pyacc.py',22),
  ('father_rule -> control_str','father_rule',1,'p_father_rule','pyacc.py',23),
  ('father_rule -> expression','father_rule',1,'p_father_rule','pyacc.py',24),
  ('father_rule -> void','father_rule',1,'p_father_rule','pyacc.py',25),
  ('father_rule -> data_str','father_rule',1,'p_father_rule','pyacc.py',26),
  ('father_rule -> array','father_rule',1,'p_father_rule','pyacc.py',27),
  ('father_rule -> linkedlist_methods','father_rule',1,'p_father_rule','pyacc.py',28),
  ('father_rule -> hashmap_methods','father_rule',1,'p_father_rule','pyacc.py',29),
  ('father_rule -> initialization','father_rule',1,'p_father_rule','pyacc.py',30),
  ('father_rule -> input','father_rule',1,'p_father_rule','pyacc.py',31),
  ('father_rule -> assignation','father_rule',1,'p_father_rule','pyacc.py',32),
  ('father_rule -> declare_data_type','father_rule',1,'p_father_rule','pyacc.py',33),
  ('expression -> expression PLUS expression','expression',3,'p_expression','pyacc.py',39),
  ('expression -> expression MINUS expression','expression',3,'p_expression','pyacc.py',40),
  ('expression -> expression TIMES expression','expression',3,'p_expression','pyacc.py',41),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','pyacc.py',42),
  ('expression -> number','expression',1,'p_expression','pyacc.py',43),
  ('expression -> division','expression',1,'p_expression','pyacc.py',44),
  ('number -> INTEGER','number',1,'p_number','pyacc.py',49),
  ('number -> FLOAT','number',1,'p_number','pyacc.py',50),
  ('number -> VARIABLE','number',1,'p_number','pyacc.py',51),
  ('data_type -> UNSIG_INT_8','data_type',1,'p_data_type','pyacc.py',55),
  ('data_type -> UNSIG_INT_16','data_type',1,'p_data_type','pyacc.py',56),
  ('data_type -> UNSIG_INT_32','data_type',1,'p_data_type','pyacc.py',57),
  ('data_type -> UNSIG_INT_64','data_type',1,'p_data_type','pyacc.py',58),
  ('data_type -> UNSIG_INT_128','data_type',1,'p_data_type','pyacc.py',59),
  ('data_type -> SIG_INT_8','data_type',1,'p_data_type','pyacc.py',60),
  ('data_type -> SIG_INT_16','data_type',1,'p_data_type','pyacc.py',61),
  ('data_type -> SIG_INT_32','data_type',1,'p_data_type','pyacc.py',62),
  ('data_type -> SIG_INT_64','data_type',1,'p_data_type','pyacc.py',63),
  ('data_type -> SIG_INT_128','data_type',1,'p_data_type','pyacc.py',64),
  ('data_type -> FLOAT_32','data_type',1,'p_data_type','pyacc.py',65),
  ('data_type -> FLOAT_64','data_type',1,'p_data_type','pyacc.py',66),
  ('data_type -> KW_BOOLEAN','data_type',1,'p_data_type','pyacc.py',67),
  ('data_type -> KW_STRING','data_type',1,'p_data_type','pyacc.py',68),
  ('data_type -> KW_CHARACTER','data_type',1,'p_data_type','pyacc.py',69),
  ('assign_operators -> EQUALS','assign_operators',1,'p_assign_operators','pyacc.py',73),
  ('assign_operators -> TIMESEQUAL','assign_operators',1,'p_assign_operators','pyacc.py',74),
  ('assign_operators -> DIVEQUAL','assign_operators',1,'p_assign_operators','pyacc.py',75),
  ('assign_operators -> MODULUSEQUAL','assign_operators',1,'p_assign_operators','pyacc.py',76),
  ('assign_operators -> PLUSEQUAL','assign_operators',1,'p_assign_operators','pyacc.py',77),
  ('assign_operators -> MINUSEQUAL','assign_operators',1,'p_assign_operators','pyacc.py',78),
  ('division -> INTEGER DIVIDE INTEGER','division',3,'p_semantic_division','pyacc.py',82),
  ('division -> FLOAT DIVIDE FLOAT','division',3,'p_semantic_division','pyacc.py',83),
  ('data -> CADENA','data',1,'p_data','pyacc.py',86),
  ('data -> INTEGER','data',1,'p_data','pyacc.py',87),
  ('data -> CHAR','data',1,'p_data','pyacc.py',88),
  ('data -> FLOAT','data',1,'p_data','pyacc.py',89),
  ('data -> KW_FALSE','data',1,'p_data','pyacc.py',90),
  ('data -> KW_TRUE','data',1,'p_data','pyacc.py',91),
  ('data -> tuple','data',1,'p_data','pyacc.py',92),
  ('comparator -> <empty>','comparator',0,'p_comparator','pyacc.py',95),
  ('comparator -> EQ','comparator',1,'p_comparator','pyacc.py',96),
  ('comparator -> NE','comparator',1,'p_comparator','pyacc.py',97),
  ('comparator -> GE','comparator',1,'p_comparator','pyacc.py',98),
  ('comparator -> LE','comparator',1,'p_comparator','pyacc.py',99),
  ('comparator -> GT','comparator',1,'p_comparator','pyacc.py',100),
  ('comparator -> LT','comparator',1,'p_comparator','pyacc.py',101),
  ('logic -> LOR','logic',1,'p_logic','pyacc.py',104),
  ('logic -> LAND','logic',1,'p_logic','pyacc.py',105),
  ('lvariable -> VARIABLE logic VARIABLE','lvariable',3,'p_logic_variable','pyacc.py',108),
  ('conditional -> VARIABLE comparator data','conditional',3,'p_conditional','pyacc.py',111),
  ('conditional -> LPAREN lvariable RPAREN comparator data','conditional',5,'p_conditional','pyacc.py',112),
  ('mdata -> data','mdata',1,'p_mdata','pyacc.py',115),
  ('mdata -> data COMMA mdata','mdata',3,'p_mdata','pyacc.py',116),
  ('print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI','print',6,'p_print','pyacc.py',119),
  ('print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI','print',8,'p_print','pyacc.py',120),
  ('dvariable -> KW_LET VARIABLE SEMI','dvariable',3,'p_declare_variable','pyacc.py',123),
  ('array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI','array',7,'p_array','pyacc.py',126),
  ('array -> LBRACKET mdata RBRACKET','array',3,'p_array','pyacc.py',127),
  ('array -> LBRACKET data SEMI data RBRACKET','array',5,'p_array','pyacc.py',128),
  ('array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI','array',14,'p_array','pyacc.py',129),
  ('array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI','array',16,'p_array','pyacc.py',130),
  ('variables -> VARIABLE','variables',1,'p_variables','pyacc.py',133),
  ('variables -> VARIABLE COMMA variables','variables',3,'p_variables','pyacc.py',134),
  ('while -> KW_WHILE conditional LBRACE main_rule RBRACE','while',5,'p_while','pyacc.py',137),
  ('tuple -> LPAREN mdata RPAREN','tuple',3,'p_tuple','pyacc.py',143),
  ('initialization -> let_initialization SEMI','initialization',2,'p_initialization','pyacc.py',147),
  ('initialization -> const_initialization SEMI','initialization',2,'p_initialization','pyacc.py',148),
  ('initialization -> data_str SEMI','initialization',2,'p_initialization','pyacc.py',149),
  ('initialization -> input_init SEMI','initialization',2,'p_initialization','pyacc.py',150),
  ('let_initialization -> KW_LET VARIABLE EQUALS data','let_initialization',4,'p_let_initialization','pyacc.py',154),
  ('let_initialization -> KW_LET VARIABLE COLON data_type EQUALS data','let_initialization',6,'p_let_initialization','pyacc.py',155),
  ('let_initialization -> KW_LET KW_MUT VARIABLE EQUALS data','let_initialization',5,'p_let_initialization','pyacc.py',156),
  ('let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS data','let_initialization',7,'p_let_initialization','pyacc.py',157),
  ('let_initialization -> KW_LET VARIABLE EQUALS expression_var','let_initialization',4,'p_let_initialization','pyacc.py',158),
  ('let_initialization -> KW_LET VARIABLE COLON data_type EQUALS expression_var','let_initialization',6,'p_let_initialization','pyacc.py',159),
  ('let_initialization -> KW_LET KW_MUT VARIABLE EQUALS expression_var','let_initialization',5,'p_let_initialization','pyacc.py',160),
  ('let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var','let_initialization',7,'p_let_initialization','pyacc.py',161),
  ('const_initialization -> KW_CONST VARIABLE COLON data_type EQUALS data','const_initialization',6,'p_const_initialization','pyacc.py',165),
  ('arguments -> void','arguments',1,'p_arguments','pyacc.py',169),
  ('arguments -> variables','arguments',1,'p_arguments','pyacc.py',170),
  ('function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE','function',8,'p_function','pyacc.py',174),
  ('control_str -> for_str','control_str',1,'p_control_str','pyacc.py',178),
  ('control_str -> for_str_tagged','control_str',1,'p_control_str','pyacc.py',179),
  ('control_str -> if','control_str',1,'p_control_str','pyacc.py',180),
  ('control_str -> else','control_str',1,'p_control_str','pyacc.py',181),
  ('control_str -> else_if','control_str',1,'p_control_str','pyacc.py',182),
  ('control_str -> while','control_str',1,'p_control_str','pyacc.py',183),
  ('for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE','for_str',7,'p_for_str','pyacc.py',187),
  ('for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE','for_str',7,'p_for_str','pyacc.py',188),
  ('for_str_tagged -> label COLON for_str','for_str_tagged',3,'p_for_str_tagged','pyacc.py',192),
  ('range -> INTEGER DOT DOT INTEGER','range',4,'p_range','pyacc.py',196),
  ('range -> VARIABLE DOT DOT VARIABLE','range',4,'p_range','pyacc.py',197),
  ('label -> QUOTE VARIABLE','label',2,'p_label','pyacc.py',201),
  ('data_str -> array','data_str',1,'p_data_str','pyacc.py',205),
  ('data_str -> hashmap','data_str',1,'p_data_str','pyacc.py',206),
  ('data_str -> linkedlist','data_str',1,'p_data_str','pyacc.py',207),
  ('hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN','hashmap',9,'p_hashmap','pyacc.py',211),
  ('hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN','hashmap',10,'p_hashmap','pyacc.py',212),
  ('hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN','hashmap',10,'p_hashmap','pyacc.py',213),
  ('hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN','hashmap',11,'p_hashmap','pyacc.py',214),
  ('hashmap_methods -> VARIABLE hashmap_insert','hashmap_methods',2,'p_hashmap_methods','pyacc.py',218),
  ('hashmap_methods -> VARIABLE hashmap_remove','hashmap_methods',2,'p_hashmap_methods','pyacc.py',219),
  ('hashmap_insert -> DOT KW_INSERT LPAREN mdata RPAREN SEMI','hashmap_insert',6,'p_hashmap_insert','pyacc.py',223),
  ('hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI','hashmap_remove',7,'p_hashmap_remove','pyacc.py',227),
  ('void -> <empty>','void',0,'p_void','pyacc.py',231),
  ('linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN','linkedlist',14,'p_linkedlist_empty','pyacc.py',239),
  ('linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN','linkedlist',15,'p_linkedlist_empty','pyacc.py',240),
  ('linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN','linkedlist',10,'p_linkedlist_array','pyacc.py',243),
  ('linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN','linkedlist',11,'p_linkedlist_array','pyacc.py',244),
  ('linkedlist_methods -> VARIABLE linkedlist_push','linkedlist_methods',2,'p_linkedlist_methods','pyacc.py',247),
  ('linkedlist_methods -> VARIABLE linkedlist_remove','linkedlist_methods',2,'p_linkedlist_methods','pyacc.py',248),
  ('linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI','linkedlist_push',6,'p_linkedlist_push','pyacc.py',251),
  ('linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI','linkedlist_remove',6,'p_linkedlist_remove','pyacc.py',254),
  ('if -> KW_IF conditional LBRACE main_rule RBRACE','if',5,'p_if','pyacc.py',259),
  ('else -> KW_ELSE LBRACE main_rule RBRACE','else',4,'p_else','pyacc.py',262),
  ('else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE','else_if',6,'p_else_if','pyacc.py',265),
  ('function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE','function',11,'p_function_return','pyacc.py',270),
  ('expression_var -> expression','expression_var',1,'p_expression_var','pyacc.py',273),
  ('expression_var -> data','expression_var',1,'p_expression_var','pyacc.py',274),
  ('return -> main_rule','return',1,'p_return_statement','pyacc.py',277),
  ('return -> KW_RETURN expression_var SEMI','return',3,'p_return_statement','pyacc.py',278),
  ('return -> main_rule KW_RETURN expression_var SEMI','return',4,'p_return_statement','pyacc.py',279),
  ('input_init -> KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN','input_init',9,'p_input_init','pyacc.py',284),
  ('input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI','input',14,'p_input','pyacc.py',287),
  ('assignation -> VARIABLE assign_operators number','assignation',3,'p_assignation','pyacc.py',292),
  ('declare_data_type -> KW_LET VARIABLE COLON data_type SEMI','declare_data_type',5,'p_declare_datat_type','pyacc.py',297),
]
