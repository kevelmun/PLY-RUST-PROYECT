
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ANDE CADENA CHAR COLON COMMA COMMENT DIVEQUAL DIVIDE DOT EQ EQUALS FLOAT FLOAT_32 FLOAT_64 GE GT HASH INTEGER KW_ABSTRACT KW_AS KW_ASYNC KW_AWAIT KW_BECOME KW_BOOLEAN KW_BOX KW_BREAK KW_CHARACTER KW_CONST KW_CONTINUE KW_CRATE KW_DO KW_DYN KW_ELSE KW_ENUM KW_EXPECT KW_EXTERN KW_FALSE KW_FINAL KW_FN KW_FOR KW_FROM KW_HASHMAP KW_IF KW_IMPL KW_IN KW_INSERT KW_LET KW_LINKEDLIST KW_LOOP KW_MACRO KW_MATCH KW_MOD KW_MOVE KW_MUT KW_NEW KW_OVERRIDE KW_PRINT KW_PRIV KW_PUB KW_PUSH_BACK KW_READ_LINE KW_REF KW_REMOVE KW_RETURN KW_SELFTYPE KW_SELFVALUE KW_STATIC KW_STATICLIFETIME KW_STDIN KW_STRING KW_STRUCT KW_SUPER KW_TRAIT KW_TRUE KW_TRY KW_TYPE KW_TYPEOF KW_UNION KW_UNSAFE KW_UNSIZED KW_USE KW_VIRTUAL KW_WHERE KW_WHILE KW_YIELD LAND LBRACE LBRACKET LE LNOT LOR LPAREN LT MINUS MINUSEQUAL MODULUS MODULUSEQUAL NE ORE OREXE PLUS PLUSEQUAL QMARK QUOTE RBRACE RBRACKET RPAREN SEMI SIG_INT_128 SIG_INT_16 SIG_INT_32 SIG_INT_64 SIG_INT_8 TIMES TIMESEQUAL UNSIG_INT_128 UNSIG_INT_16 UNSIG_INT_32 UNSIG_INT_64 UNSIG_INT_8 VARIABLEmain_rule : father_rule\n    | father_rule main_rulefather_rule : print\n    | dvariable\n    | function\n    | variables\n    | control_str\n    | expression\n    | void\n    | data_str\n    | array\n    | linkedlist_methods\n    | hashmap_methods\n    | initializationexpression : expression PLUS expression\n    | expression MINUS expression\n    | expression TIMES expression\n    | expression DIVIDE expression\n    | LPAREN expression RPAREN\n    | numbernumber : INTEGER\n    | FLOAT\n    | VARIABLEdata_type : UNSIG_INT_8\n                | UNSIG_INT_16\n                | UNSIG_INT_32\n                | UNSIG_INT_64\n                | UNSIG_INT_128\n                | SIG_INT_8\n                | SIG_INT_16\n                | SIG_INT_32\n                | SIG_INT_64\n                | SIG_INT_128\n                | FLOAT_32\n                | FLOAT_64\n                | KW_BOOLEAN\n                | KW_STRINGdata : CADENA\n    | INTEGER\n    | CHAR\n    | FLOAT\n    | KW_FALSE\n    | KW_TRUE\n    | tuplecomparator :\n    | EQ\n    | NE\n    | GE\n    | LE\n    | GT\n    | LTand : VARIABLE LAND VARIABLEconditional : VARIABLE comparator data\n    | and comparator dataor : VARIABLE LOR VARIABLEmdata : data\n    | data COMMA mdataprint : KW_PRINT LPAREN CADENA RPAREN SEMIdvariable : KW_LET VARIABLE SEMIarray : KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET\n    | LBRACKET mdata RBRACKETvariables : VARIABLE \n    | VARIABLE COMMA variableswhile : KW_WHILE LPAREN VARIABLE tuple : LPAREN mdata RPARENinitialization : let_initialization SEMI \n    | const_initialization SEMI \n    | data_str SEMIlet_initialization : KW_LET VARIABLE EQUALS data\n    | KW_LET VARIABLE COLON data_type EQUALS data\n    | KW_LET KW_MUT VARIABLE EQUALS data\n    | KW_LET KW_MUT VARIABLE COLON data_type EQUALS dataconst_initialization : KW_CONST VARIABLE COLON data_type EQUALS dataarguments : void\n    | variablesfunction : KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACEcontrol_str : for_str\n    | for_str_tagged\n    | if\n    | else\n    | else_if\n    | whilefor_str : KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE\n    | KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACEfor_str_tagged : label COLON for_strrange : INTEGER DOT DOT INTEGER\n    | VARIABLE DOT DOT VARIABLElabel : QUOTE VARIABLEdata_str : array\n    | hashmap\n    | linkedlisthashmap : KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN\n    | KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN\n    | KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN\n    | KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPARENhashmap_methods : VARIABLE hashmap_insert\n    | VARIABLE hashmap_removehashmap_insert : DOT KW_INSERT LPAREN data RPAREN SEMIhashmap_remove : DOT KW_REMOVE LPAREN AND data RPAREN SEMIvoid : linkedlist : KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN\n                  | KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPARENlinkedlist : KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN\n                  | KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPARENlinkedlist_methods : VARIABLE linkedlist_push\n    | VARIABLE linkedlist_removelinkedlist_push : DOT KW_PUSH_BACK LPAREN data RPAREN SEMIlinkedlist_remove : DOT KW_REMOVE LPAREN INTEGER RPAREN SEMIif : KW_IF conditional LBRACE main_rule RBRACEelse : KW_ELSE LBRACE main_rule RBRACEelse_if : KW_ELSE KW_IF conditional LBRACE main_rule RBRACEfunction : KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACEexpression_var : expression\n                    | VARIABLEreturn : main_rule\n              | main_rule KW_RETURN expression_var SEMI'
    
_lr_action_items = {'KW_PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,18,20,21,22,23,24,25,26,27,28,37,38,46,49,53,54,55,56,69,70,76,81,82,83,84,86,87,91,92,97,101,102,114,154,155,157,173,175,177,180,193,199,209,210,212,215,217,227,228,230,239,241,242,244,252,253,255,265,267,],[15,15,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-23,-77,-78,-79,-80,-81,-82,-20,-90,-91,-21,-22,-68,-23,-105,-106,-96,-97,-66,-67,15,-15,-16,-17,-18,-19,-59,-62,-63,-61,-85,15,-64,-110,15,-58,15,15,-109,-60,15,-111,-107,-108,-98,-84,-83,-99,-76,-92,15,-94,-103,-93,-95,-104,-112,-101,-102,]),'KW_LET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,18,20,21,22,23,24,25,26,27,28,37,38,46,49,53,54,55,56,69,70,76,81,82,83,84,86,87,91,92,97,101,102,114,154,155,157,173,175,177,180,193,199,209,210,212,215,217,220,221,227,228,230,236,237,239,241,242,244,252,253,255,265,267,],[17,17,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-23,-77,-78,-79,-80,-81,-82,-20,-90,-91,-21,-22,-68,-23,-105,-106,-96,-97,-66,-67,17,-15,-16,-17,-18,-19,-59,-62,-63,-61,-85,17,-64,-110,17,-58,17,17,-109,-60,17,-111,-107,-108,-98,-84,-83,231,231,-99,-76,-92,231,231,17,-94,-103,-93,-95,-104,-112,-101,-102,]),'KW_FN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,18,20,21,22,23,24,25,26,27,28,37,38,46,49,53,54,55,56,69,70,76,81,82,83,84,86,87,91,92,97,101,102,114,154,155,157,173,175,177,180,193,199,209,210,212,215,217,227,228,230,239,241,242,244,252,253,255,265,267,],[19,19,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-23,-77,-78,-79,-80,-81,-82,-20,-90,-91,-21,-22,-68,-23,-105,-106,-96,-97,-66,-67,19,-15,-16,-17,-18,-19,-59,-62,-63,-61,-85,19,-64,-110,19,-58,19,19,-109,-60,19,-111,-107,-108,-98,-84,-83,-99,-76,-92,19,-94,-103,-93,-95,-104,-112,-101,-102,]),'VARIABLE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,32,34,37,38,39,40,42,43,44,45,46,49,51,52,53,54,55,56,69,70,76,77,78,81,82,83,84,86,87,91,92,96,97,100,101,102,104,114,154,155,157,173,175,177,180,193,196,199,209,210,212,215,217,227,228,230,231,239,241,242,244,252,253,255,256,265,267,],[18,18,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,49,50,-23,58,-77,-78,-79,-80,-81,-82,-20,-90,-91,71,74,-21,-22,79,80,49,49,49,49,-68,-23,90,91,-105,-106,-96,-97,-66,-67,18,74,114,-15,-16,-17,-18,-19,-59,-62,-63,91,-61,147,-85,18,152,-64,-110,18,-58,18,18,-109,-60,18,216,-111,-107,-108,-98,-84,-83,-99,-76,-92,240,18,-94,-103,-93,-95,-104,-112,261,-101,-102,]),'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,20,21,22,23,24,25,26,27,28,29,36,37,38,42,43,44,45,46,49,53,54,55,56,58,68,69,70,74,75,76,81,82,83,84,86,87,88,91,92,93,94,95,97,98,101,102,103,105,106,107,108,109,110,111,114,117,137,139,141,152,154,155,157,162,170,173,175,177,179,180,188,193,199,201,202,203,209,210,212,215,217,223,224,225,227,228,230,239,241,242,244,252,253,255,256,257,263,265,267,],[16,16,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,47,16,-23,-77,-78,-79,-80,-81,-82,-20,-90,-91,68,78,-21,-22,16,16,16,16,-68,-23,-105,-106,-96,-97,96,68,-66,-67,-45,-45,16,-15,-16,-17,-18,-19,-59,68,-62,-63,139,140,141,-61,68,-85,16,68,-46,-47,-48,-49,-50,-51,68,-64,68,68,68,68,-52,-110,16,-58,68,68,16,16,-109,68,-60,68,16,-111,219,220,221,-107,-108,-98,-84,-83,235,236,237,-99,-76,-92,16,-94,-103,-93,-95,-104,-112,16,262,266,-101,-102,]),'LBRACKET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,18,20,21,22,23,24,25,26,27,28,37,38,46,49,53,54,55,56,69,70,76,81,82,83,84,86,87,88,91,92,97,101,102,114,154,155,157,173,175,177,180,193,199,209,210,212,215,217,220,221,227,228,230,236,237,239,241,242,244,250,252,253,255,265,267,],[29,29,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-23,-77,-78,-79,-80,-81,-82,-20,-90,-91,-21,-22,-68,-23,-105,-106,-96,-97,-66,-67,29,-15,-16,-17,-18,-19,-59,117,-62,-63,-61,-85,29,-64,-110,29,-58,29,29,-109,-60,29,-111,-107,-108,-98,-84,-83,29,29,-99,-76,-92,29,29,29,-94,-103,-93,117,-95,-104,-112,-101,-102,]),'KW_FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,18,20,21,22,23,24,25,26,27,28,37,38,46,49,53,54,55,56,69,70,72,76,81,82,83,84,86,87,91,92,97,101,102,114,154,155,157,173,175,177,180,193,199,209,210,212,215,217,227,228,230,239,241,242,244,252,253,255,265,267,],[32,32,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-23,-77,-78,-79,-80,-81,-82,-20,-90,-91,-21,-22,-68,-23,-105,-106,-96,-97,-66,-67,32,32,-15,-16,-17,-18,-19,-59,-62,-63,-61,-85,32,-64,-110,32,-58,32,32,-109,-60,32,-111,-107,-108,-98,-84,-83,-99,-76,-92,32,-94,-103,-93,-95,-104,-112,-101,-102,]),'KW_IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,18,20,21,22,23,24,25,26,27,28,35,37,38,46,49,53,54,55,56,69,70,76,81,82,83,84,86,87,91,92,97,101,102,114,154,155,157,173,175,177,180,193,199,209,210,212,215,217,227,228,230,239,241,242,244,252,253,255,265,267,],[34,34,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-23,-77,-78,-79,-80,-81,-82,-20,-90,-91,77,-21,-22,-68,-23,-105,-106,-96,-97,-66,-67,34,-15,-16,-17,-18,-19,-59,-62,-63,-61,-85,34,-64,-110,34,-58,34,34,-109,-60,34,-111,-107,-108,-98,-84,-83,-99,-76,-92,34,-94,-103,-93,-95,-104,-112,-101,-102,]),'KW_ELSE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,18,20,21,22,23,24,25,26,27,28,37,38,46,49,53,54,55,56,69,70,76,81,82,83,84,86,87,91,92,97,101,102,114,154,155,157,173,175,177,180,193,199,209,210,212,215,217,227,228,230,239,241,242,244,252,253,255,265,267,],[35,35,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-23,-77,-78,-79,-80,-81,-82,-20,-90,-91,-21,-22,-68,-23,-105,-106,-96,-97,-66,-67,35,-15,-16,-17,-18,-19,-59,-62,-63,-61,-85,35,-64,-110,35,-58,35,35,-109,-60,35,-111,-107,-108,-98,-84,-83,-99,-76,-92,35,-94,-103,-93,-95,-104,-112,-101,-102,]),'KW_WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,18,20,21,22,23,24,25,26,27,28,37,38,46,49,53,54,55,56,69,70,76,81,82,83,84,86,87,91,92,97,101,102,114,154,155,157,173,175,177,180,193,199,209,210,212,215,217,227,228,230,239,241,242,244,252,253,255,265,267,],[36,36,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-23,-77,-78,-79,-80,-81,-82,-20,-90,-91,-21,-22,-68,-23,-105,-106,-96,-97,-66,-67,36,-15,-16,-17,-18,-19,-59,-62,-63,-61,-85,36,-64,-110,36,-58,36,36,-109,-60,36,-111,-107,-108,-98,-84,-83,-99,-76,-92,36,-94,-103,-93,-95,-104,-112,-101,-102,]),'INTEGER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,18,20,21,22,23,24,25,26,27,28,29,37,38,42,43,44,45,46,49,53,54,55,56,68,69,70,74,75,76,81,82,83,84,86,87,88,91,92,97,98,100,101,102,103,105,106,107,108,109,110,111,114,117,137,139,140,141,152,154,155,157,162,170,173,175,177,179,180,188,193,198,199,209,210,212,215,217,227,228,230,239,241,242,244,252,253,255,256,265,267,],[37,37,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,37,-23,-77,-78,-79,-80,-81,-82,-20,-90,-91,62,-21,-22,37,37,37,37,-68,-23,-105,-106,-96,-97,62,-66,-67,-45,-45,37,-15,-16,-17,-18,-19,-59,62,-62,-63,-61,62,149,-85,37,62,-46,-47,-48,-49,-50,-51,62,-64,62,62,62,169,62,-52,-110,37,-58,62,62,37,37,-109,62,-60,62,37,218,-111,-107,-108,-98,-84,-83,-99,-76,-92,37,-94,-103,-93,-95,-104,-112,37,-101,-102,]),'FLOAT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,18,20,21,22,23,24,25,26,27,28,29,37,38,42,43,44,45,46,49,53,54,55,56,68,69,70,74,75,76,81,82,83,84,86,87,88,91,92,97,98,101,102,103,105,106,107,108,109,110,111,114,117,137,139,141,152,154,155,157,162,170,173,175,177,179,180,188,193,199,209,210,212,215,217,227,228,230,239,241,242,244,252,253,255,256,265,267,],[38,38,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,38,-23,-77,-78,-79,-80,-81,-82,-20,-90,-91,64,-21,-22,38,38,38,38,-68,-23,-105,-106,-96,-97,64,-66,-67,-45,-45,38,-15,-16,-17,-18,-19,-59,64,-62,-63,-61,64,-85,38,64,-46,-47,-48,-49,-50,-51,64,-64,64,64,64,64,-52,-110,38,-58,64,64,38,38,-109,64,-60,64,38,-111,-107,-108,-98,-84,-83,-99,-76,-92,38,-94,-103,-93,-95,-104,-112,38,-101,-102,]),'KW_CONST':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,18,20,21,22,23,24,25,26,27,28,37,38,46,49,53,54,55,56,69,70,76,81,82,83,84,86,87,91,92,97,101,102,114,154,155,157,173,175,177,180,193,199,209,210,212,215,217,227,228,230,239,241,242,244,252,253,255,265,267,],[39,39,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-23,-77,-78,-79,-80,-81,-82,-20,-90,-91,-21,-22,-68,-23,-105,-106,-96,-97,-66,-67,39,-15,-16,-17,-18,-19,-59,-62,-63,-61,-85,39,-64,-110,39,-58,39,39,-109,-60,39,-111,-107,-108,-98,-84,-83,-99,-76,-92,39,-94,-103,-93,-95,-104,-112,-101,-102,]),'QUOTE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,18,20,21,22,23,24,25,26,27,28,37,38,46,49,53,54,55,56,69,70,76,81,82,83,84,86,87,91,92,97,101,102,114,154,155,157,173,175,177,180,193,199,209,210,212,215,217,227,228,230,239,241,242,244,252,253,255,265,267,],[40,40,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-23,-77,-78,-79,-80,-81,-82,-20,-90,-91,-21,-22,-68,-23,-105,-106,-96,-97,-66,-67,40,-15,-16,-17,-18,-19,-59,-62,-63,-61,-85,40,-64,-110,40,-58,40,40,-109,-60,40,-111,-107,-108,-98,-84,-83,-99,-76,-92,40,-94,-103,-93,-95,-104,-112,-101,-102,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,18,20,21,22,23,24,25,26,27,28,37,38,41,46,49,53,54,55,56,69,70,81,82,83,84,86,87,91,92,97,101,114,154,157,177,180,199,209,210,212,215,217,227,228,230,241,242,244,252,253,255,265,267,],[-100,0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-23,-77,-78,-79,-80,-81,-82,-20,-90,-91,-21,-22,-2,-68,-23,-105,-106,-96,-97,-66,-67,-15,-16,-17,-18,-19,-59,-62,-63,-61,-85,-64,-110,-58,-109,-60,-111,-107,-108,-98,-84,-83,-99,-76,-92,-94,-103,-93,-95,-104,-112,-101,-102,]),'RBRACE':([2,3,4,5,6,7,8,9,10,11,12,13,14,18,20,21,22,23,24,25,26,27,28,37,38,41,46,49,53,54,55,56,69,70,76,81,82,83,84,86,87,91,92,97,101,102,112,114,150,154,155,157,173,175,177,178,180,193,195,197,199,209,210,212,213,215,217,227,228,230,239,241,242,244,248,249,252,253,255,264,265,267,],[-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-23,-77,-78,-79,-80,-81,-82,-20,-90,-91,-21,-22,-2,-68,-23,-105,-106,-96,-97,-66,-67,-100,-15,-16,-17,-18,-19,-59,-62,-63,-61,-85,-100,154,-64,177,-110,-100,-58,-100,-100,-109,199,-60,-100,215,217,-111,-107,-108,-98,228,-84,-83,-99,-76,-92,-100,-94,-103,-93,255,-115,-95,-104,-112,-116,-101,-102,]),'KW_RETURN':([2,3,4,5,6,7,8,9,10,11,12,13,14,18,20,21,22,23,24,25,26,27,28,37,38,41,46,49,53,54,55,56,69,70,81,82,83,84,86,87,91,92,97,101,114,154,157,177,180,199,209,210,212,215,217,227,228,230,239,241,242,244,249,252,253,255,265,267,],[-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-23,-77,-78,-79,-80,-81,-82,-20,-90,-91,-21,-22,-2,-68,-23,-105,-106,-96,-97,-66,-67,-15,-16,-17,-18,-19,-59,-62,-63,-61,-85,-64,-110,-58,-109,-60,-111,-107,-108,-98,-84,-83,-99,-76,-92,-100,-94,-103,-93,256,-95,-104,-112,-101,-102,]),'PLUS':([8,18,26,37,38,48,49,81,82,83,84,86,260,261,],[42,-23,-20,-21,-22,42,-23,42,42,42,42,-19,42,-23,]),'MINUS':([8,18,26,37,38,48,49,81,82,83,84,86,172,260,261,],[43,-23,-20,-21,-22,43,-23,43,43,43,43,-19,194,43,-23,]),'TIMES':([8,18,26,37,38,48,49,81,82,83,84,86,260,261,],[44,-23,-20,-21,-22,44,-23,44,44,44,44,-19,44,-23,]),'DIVIDE':([8,18,26,37,38,48,49,81,82,83,84,86,260,261,],[45,-23,-20,-21,-22,45,-23,45,45,45,45,-19,45,-23,]),'SEMI':([10,11,26,27,28,30,31,37,38,49,50,61,62,63,64,65,66,67,81,82,83,84,86,97,116,120,146,165,180,184,189,190,192,200,208,211,230,241,242,244,252,253,259,260,261,265,267,],[46,-89,-20,-90,-91,69,70,-21,-22,-23,87,-38,-39,-40,-41,-42,-43,-44,-15,-16,-17,-18,-19,-61,157,-69,-65,-71,-60,-70,209,210,212,-73,-72,227,-92,-94,-103,-93,-95,-104,264,-113,-23,-101,-102,]),'KW_MUT':([17,],[51,]),'COMMA':([18,60,61,62,63,64,65,66,67,91,146,],[52,98,-38,-39,-40,-41,-42,-43,-44,52,-65,]),'DOT':([18,147,149,174,176,],[57,174,176,196,198,]),'RPAREN':([26,37,38,48,49,60,61,62,63,64,65,66,67,81,82,83,84,85,86,91,92,96,97,99,142,143,144,145,146,168,169,171,180,191,219,232,233,235,245,246,262,266,],[-20,-21,-22,86,-23,-56,-38,-39,-40,-41,-42,-43,-44,-15,-16,-17,-18,116,-19,-62,-63,-100,-61,146,172,-74,-75,-57,-65,189,190,192,-60,211,230,241,242,244,252,253,265,267,]),'CADENA':([29,47,68,74,75,88,98,103,105,106,107,108,109,110,111,117,137,139,141,152,162,170,179,188,],[61,85,61,-45,-45,61,61,61,-46,-47,-48,-49,-50,-51,61,61,61,61,61,-52,61,61,61,61,]),'CHAR':([29,68,74,75,88,98,103,105,106,107,108,109,110,111,117,137,139,141,152,162,170,179,188,],[63,63,-45,-45,63,63,63,-46,-47,-48,-49,-50,-51,63,63,63,63,63,-52,63,63,63,63,]),'KW_FALSE':([29,68,74,75,88,98,103,105,106,107,108,109,110,111,117,137,139,141,152,162,170,179,188,],[65,65,-45,-45,65,65,65,-46,-47,-48,-49,-50,-51,65,65,65,65,65,-52,65,65,65,65,]),'KW_TRUE':([29,68,74,75,88,98,103,105,106,107,108,109,110,111,117,137,139,141,152,162,170,179,188,],[66,66,-45,-45,66,66,66,-46,-47,-48,-49,-50,-51,66,66,66,66,66,-52,66,66,66,66,]),'COLON':([33,50,79,80,90,118,119,159,160,163,164,185,186,234,243,247,254,],[72,89,115,-88,138,159,160,181,182,185,186,205,206,243,251,254,258,]),'LBRACE':([35,61,62,63,64,65,66,67,73,113,123,124,125,126,127,128,129,130,131,132,133,134,135,136,146,147,148,151,153,172,216,218,229,],[76,-38,-39,-40,-41,-42,-43,-44,102,155,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-65,173,175,-53,-54,193,-87,-86,239,]),'EQUALS':([50,90,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,156,167,204,226,240,],[88,137,162,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,179,188,222,238,250,]),'KW_PUSH_BACK':([57,],[93,]),'KW_REMOVE':([57,],[94,]),'KW_INSERT':([57,],[95,]),'RBRACKET':([59,60,61,62,63,64,65,66,67,145,146,158,],[97,-56,-38,-39,-40,-41,-42,-43,-44,-57,-65,180,]),'KW_IN':([71,],[100,]),'LAND':([74,],[104,]),'EQ':([74,75,152,],[105,105,-52,]),'NE':([74,75,152,],[106,106,-52,]),'GE':([74,75,152,],[107,107,-52,]),'LE':([74,75,152,],[108,108,-52,]),'GT':([74,75,123,124,125,126,127,128,129,130,131,132,133,134,135,136,152,183,194,207,],[109,109,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-52,204,214,226,]),'LT':([74,75,121,152,166,],[110,110,161,-52,187,]),'KW_HASHMAP':([88,137,],[118,163,]),'KW_LINKEDLIST':([88,89,137,138,222,238,],[119,121,164,166,234,247,]),'UNSIG_INT_8':([89,115,138,161,187,214,],[123,123,123,123,123,123,]),'UNSIG_INT_16':([89,115,138,161,187,214,],[124,124,124,124,124,124,]),'UNSIG_INT_32':([89,115,138,161,187,214,],[125,125,125,125,125,125,]),'UNSIG_INT_64':([89,115,138,161,187,214,],[126,126,126,126,126,126,]),'UNSIG_INT_128':([89,115,138,161,187,214,],[127,127,127,127,127,127,]),'SIG_INT_8':([89,115,138,161,187,214,],[128,128,128,128,128,128,]),'SIG_INT_16':([89,115,138,161,187,214,],[129,129,129,129,129,129,]),'SIG_INT_32':([89,115,138,161,187,214,],[130,130,130,130,130,130,]),'SIG_INT_64':([89,115,138,161,187,214,],[131,131,131,131,131,131,]),'SIG_INT_128':([89,115,138,161,187,214,],[132,132,132,132,132,132,]),'FLOAT_32':([89,115,138,161,187,214,],[133,133,133,133,133,133,]),'FLOAT_64':([89,115,138,161,187,214,],[134,134,134,134,134,134,]),'KW_BOOLEAN':([89,115,138,161,187,214,],[135,135,135,135,135,135,]),'KW_STRING':([89,115,138,161,187,214,],[136,136,136,136,136,136,]),'AND':([140,],[170,]),'KW_NEW':([181,205,251,258,],[201,223,257,263,]),'KW_FROM':([181,182,205,206,],[202,203,224,225,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'main_rule':([0,2,76,102,155,173,175,193,239,],[1,41,112,150,178,195,197,213,249,]),'father_rule':([0,2,76,102,155,173,175,193,239,],[2,2,2,2,2,2,2,2,2,]),'print':([0,2,76,102,155,173,175,193,239,],[3,3,3,3,3,3,3,3,3,]),'dvariable':([0,2,76,102,155,173,175,193,239,],[4,4,4,4,4,4,4,4,4,]),'function':([0,2,76,102,155,173,175,193,239,],[5,5,5,5,5,5,5,5,5,]),'variables':([0,2,52,76,96,102,155,173,175,193,239,],[6,6,92,6,144,6,6,6,6,6,6,]),'control_str':([0,2,76,102,155,173,175,193,239,],[7,7,7,7,7,7,7,7,7,]),'expression':([0,2,16,42,43,44,45,76,102,155,173,175,193,239,256,],[8,8,48,81,82,83,84,8,8,8,8,8,8,8,260,]),'void':([0,2,76,96,102,155,173,175,193,239,],[9,9,9,143,9,9,9,9,9,9,]),'data_str':([0,2,76,102,155,173,175,193,239,],[10,10,10,10,10,10,10,10,10,]),'array':([0,2,76,102,155,173,175,193,220,221,236,237,239,],[11,11,11,11,11,11,11,11,232,233,245,246,11,]),'linkedlist_methods':([0,2,76,102,155,173,175,193,239,],[12,12,12,12,12,12,12,12,12,]),'hashmap_methods':([0,2,76,102,155,173,175,193,239,],[13,13,13,13,13,13,13,13,13,]),'initialization':([0,2,76,102,155,173,175,193,239,],[14,14,14,14,14,14,14,14,14,]),'for_str':([0,2,72,76,102,155,173,175,193,239,],[20,20,101,20,20,20,20,20,20,20,]),'for_str_tagged':([0,2,76,102,155,173,175,193,239,],[21,21,21,21,21,21,21,21,21,]),'if':([0,2,76,102,155,173,175,193,239,],[22,22,22,22,22,22,22,22,22,]),'else':([0,2,76,102,155,173,175,193,239,],[23,23,23,23,23,23,23,23,23,]),'else_if':([0,2,76,102,155,173,175,193,239,],[24,24,24,24,24,24,24,24,24,]),'while':([0,2,76,102,155,173,175,193,239,],[25,25,25,25,25,25,25,25,25,]),'number':([0,2,16,42,43,44,45,76,102,155,173,175,193,239,256,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'hashmap':([0,2,76,102,155,173,175,193,239,],[27,27,27,27,27,27,27,27,27,]),'linkedlist':([0,2,76,102,155,173,175,193,239,],[28,28,28,28,28,28,28,28,28,]),'let_initialization':([0,2,76,102,155,173,175,193,239,],[30,30,30,30,30,30,30,30,30,]),'const_initialization':([0,2,76,102,155,173,175,193,239,],[31,31,31,31,31,31,31,31,31,]),'label':([0,2,76,102,155,173,175,193,239,],[33,33,33,33,33,33,33,33,33,]),'linkedlist_push':([18,],[53,]),'linkedlist_remove':([18,],[54,]),'hashmap_insert':([18,],[55,]),'hashmap_remove':([18,],[56,]),'mdata':([29,68,98,117,],[59,99,145,158,]),'data':([29,68,88,98,103,111,117,137,139,141,162,170,179,188,],[60,60,120,60,151,153,60,165,168,171,184,191,200,208,]),'tuple':([29,68,88,98,103,111,117,137,139,141,162,170,179,188,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'conditional':([34,77,],[73,113,]),'and':([34,77,],[75,75,]),'comparator':([74,75,],[103,111,]),'data_type':([89,115,138,161,187,214,],[122,156,167,183,207,229,]),'arguments':([96,],[142,]),'range':([100,],[148,]),'return':([239,],[248,]),'expression_var':([256,],[259,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> main_rule","S'",1,None,None,None),
  ('main_rule -> father_rule','main_rule',1,'p_main_rule','pyacc.py',9),
  ('main_rule -> father_rule main_rule','main_rule',2,'p_main_rule','pyacc.py',10),
  ('father_rule -> print','father_rule',1,'p_father_rule','pyacc.py',15),
  ('father_rule -> dvariable','father_rule',1,'p_father_rule','pyacc.py',16),
  ('father_rule -> function','father_rule',1,'p_father_rule','pyacc.py',17),
  ('father_rule -> variables','father_rule',1,'p_father_rule','pyacc.py',18),
  ('father_rule -> control_str','father_rule',1,'p_father_rule','pyacc.py',19),
  ('father_rule -> expression','father_rule',1,'p_father_rule','pyacc.py',20),
  ('father_rule -> void','father_rule',1,'p_father_rule','pyacc.py',21),
  ('father_rule -> data_str','father_rule',1,'p_father_rule','pyacc.py',22),
  ('father_rule -> array','father_rule',1,'p_father_rule','pyacc.py',23),
  ('father_rule -> linkedlist_methods','father_rule',1,'p_father_rule','pyacc.py',24),
  ('father_rule -> hashmap_methods','father_rule',1,'p_father_rule','pyacc.py',25),
  ('father_rule -> initialization','father_rule',1,'p_father_rule','pyacc.py',26),
  ('expression -> expression PLUS expression','expression',3,'p_expression','pyacc.py',32),
  ('expression -> expression MINUS expression','expression',3,'p_expression','pyacc.py',33),
  ('expression -> expression TIMES expression','expression',3,'p_expression','pyacc.py',34),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','pyacc.py',35),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','pyacc.py',36),
  ('expression -> number','expression',1,'p_expression','pyacc.py',37),
  ('number -> INTEGER','number',1,'p_number','pyacc.py',42),
  ('number -> FLOAT','number',1,'p_number','pyacc.py',43),
  ('number -> VARIABLE','number',1,'p_number','pyacc.py',44),
  ('data_type -> UNSIG_INT_8','data_type',1,'p_data_type','pyacc.py',48),
  ('data_type -> UNSIG_INT_16','data_type',1,'p_data_type','pyacc.py',49),
  ('data_type -> UNSIG_INT_32','data_type',1,'p_data_type','pyacc.py',50),
  ('data_type -> UNSIG_INT_64','data_type',1,'p_data_type','pyacc.py',51),
  ('data_type -> UNSIG_INT_128','data_type',1,'p_data_type','pyacc.py',52),
  ('data_type -> SIG_INT_8','data_type',1,'p_data_type','pyacc.py',53),
  ('data_type -> SIG_INT_16','data_type',1,'p_data_type','pyacc.py',54),
  ('data_type -> SIG_INT_32','data_type',1,'p_data_type','pyacc.py',55),
  ('data_type -> SIG_INT_64','data_type',1,'p_data_type','pyacc.py',56),
  ('data_type -> SIG_INT_128','data_type',1,'p_data_type','pyacc.py',57),
  ('data_type -> FLOAT_32','data_type',1,'p_data_type','pyacc.py',58),
  ('data_type -> FLOAT_64','data_type',1,'p_data_type','pyacc.py',59),
  ('data_type -> KW_BOOLEAN','data_type',1,'p_data_type','pyacc.py',60),
  ('data_type -> KW_STRING','data_type',1,'p_data_type','pyacc.py',61),
  ('data -> CADENA','data',1,'p_data','pyacc.py',65),
  ('data -> INTEGER','data',1,'p_data','pyacc.py',66),
  ('data -> CHAR','data',1,'p_data','pyacc.py',67),
  ('data -> FLOAT','data',1,'p_data','pyacc.py',68),
  ('data -> KW_FALSE','data',1,'p_data','pyacc.py',69),
  ('data -> KW_TRUE','data',1,'p_data','pyacc.py',70),
  ('data -> tuple','data',1,'p_data','pyacc.py',71),
  ('comparator -> <empty>','comparator',0,'p_comparator','pyacc.py',74),
  ('comparator -> EQ','comparator',1,'p_comparator','pyacc.py',75),
  ('comparator -> NE','comparator',1,'p_comparator','pyacc.py',76),
  ('comparator -> GE','comparator',1,'p_comparator','pyacc.py',77),
  ('comparator -> LE','comparator',1,'p_comparator','pyacc.py',78),
  ('comparator -> GT','comparator',1,'p_comparator','pyacc.py',79),
  ('comparator -> LT','comparator',1,'p_comparator','pyacc.py',80),
  ('and -> VARIABLE LAND VARIABLE','and',3,'p_and','pyacc.py',83),
  ('conditional -> VARIABLE comparator data','conditional',3,'p_conditional','pyacc.py',86),
  ('conditional -> and comparator data','conditional',3,'p_conditional','pyacc.py',87),
  ('or -> VARIABLE LOR VARIABLE','or',3,'p_or','pyacc.py',90),
  ('mdata -> data','mdata',1,'p_mdata','pyacc.py',93),
  ('mdata -> data COMMA mdata','mdata',3,'p_mdata','pyacc.py',94),
  ('print -> KW_PRINT LPAREN CADENA RPAREN SEMI','print',5,'p_print','pyacc.py',97),
  ('dvariable -> KW_LET VARIABLE SEMI','dvariable',3,'p_declare_variable','pyacc.py',100),
  ('array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET','array',6,'p_array','pyacc.py',103),
  ('array -> LBRACKET mdata RBRACKET','array',3,'p_array','pyacc.py',104),
  ('variables -> VARIABLE','variables',1,'p_variables','pyacc.py',107),
  ('variables -> VARIABLE COMMA variables','variables',3,'p_variables','pyacc.py',108),
  ('while -> KW_WHILE LPAREN VARIABLE','while',3,'p_while','pyacc.py',111),
  ('tuple -> LPAREN mdata RPAREN','tuple',3,'p_tuple','pyacc.py',118),
  ('initialization -> let_initialization SEMI','initialization',2,'p_initialization','pyacc.py',122),
  ('initialization -> const_initialization SEMI','initialization',2,'p_initialization','pyacc.py',123),
  ('initialization -> data_str SEMI','initialization',2,'p_initialization','pyacc.py',124),
  ('let_initialization -> KW_LET VARIABLE EQUALS data','let_initialization',4,'p_let_initialization','pyacc.py',127),
  ('let_initialization -> KW_LET VARIABLE COLON data_type EQUALS data','let_initialization',6,'p_let_initialization','pyacc.py',128),
  ('let_initialization -> KW_LET KW_MUT VARIABLE EQUALS data','let_initialization',5,'p_let_initialization','pyacc.py',129),
  ('let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS data','let_initialization',7,'p_let_initialization','pyacc.py',130),
  ('const_initialization -> KW_CONST VARIABLE COLON data_type EQUALS data','const_initialization',6,'p_const_initialization','pyacc.py',133),
  ('arguments -> void','arguments',1,'p_arguments','pyacc.py',137),
  ('arguments -> variables','arguments',1,'p_arguments','pyacc.py',138),
  ('function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE','function',8,'p_function','pyacc.py',142),
  ('control_str -> for_str','control_str',1,'p_control_str','pyacc.py',146),
  ('control_str -> for_str_tagged','control_str',1,'p_control_str','pyacc.py',147),
  ('control_str -> if','control_str',1,'p_control_str','pyacc.py',148),
  ('control_str -> else','control_str',1,'p_control_str','pyacc.py',149),
  ('control_str -> else_if','control_str',1,'p_control_str','pyacc.py',150),
  ('control_str -> while','control_str',1,'p_control_str','pyacc.py',151),
  ('for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE','for_str',7,'p_for_str','pyacc.py',155),
  ('for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE','for_str',7,'p_for_str','pyacc.py',156),
  ('for_str_tagged -> label COLON for_str','for_str_tagged',3,'p_for_str_tagged','pyacc.py',160),
  ('range -> INTEGER DOT DOT INTEGER','range',4,'p_range','pyacc.py',164),
  ('range -> VARIABLE DOT DOT VARIABLE','range',4,'p_range','pyacc.py',165),
  ('label -> QUOTE VARIABLE','label',2,'p_label','pyacc.py',169),
  ('data_str -> array','data_str',1,'p_data_str','pyacc.py',173),
  ('data_str -> hashmap','data_str',1,'p_data_str','pyacc.py',174),
  ('data_str -> linkedlist','data_str',1,'p_data_str','pyacc.py',175),
  ('hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN','hashmap',9,'p_hashmap','pyacc.py',179),
  ('hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN','hashmap',10,'p_hashmap','pyacc.py',180),
  ('hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN','hashmap',10,'p_hashmap','pyacc.py',181),
  ('hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN','hashmap',11,'p_hashmap','pyacc.py',182),
  ('hashmap_methods -> VARIABLE hashmap_insert','hashmap_methods',2,'p_hashmap_methods','pyacc.py',186),
  ('hashmap_methods -> VARIABLE hashmap_remove','hashmap_methods',2,'p_hashmap_methods','pyacc.py',187),
  ('hashmap_insert -> DOT KW_INSERT LPAREN data RPAREN SEMI','hashmap_insert',6,'p_hashmap_insert','pyacc.py',191),
  ('hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI','hashmap_remove',7,'p_hashmap_remove','pyacc.py',195),
  ('void -> <empty>','void',0,'p_void','pyacc.py',199),
  ('linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN','linkedlist',14,'p_linkedlist_empty','pyacc.py',207),
  ('linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN','linkedlist',15,'p_linkedlist_empty','pyacc.py',208),
  ('linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN','linkedlist',10,'p_linkedlist_array','pyacc.py',211),
  ('linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN','linkedlist',11,'p_linkedlist_array','pyacc.py',212),
  ('linkedlist_methods -> VARIABLE linkedlist_push','linkedlist_methods',2,'p_linkedlist_methods','pyacc.py',215),
  ('linkedlist_methods -> VARIABLE linkedlist_remove','linkedlist_methods',2,'p_linkedlist_methods','pyacc.py',216),
  ('linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI','linkedlist_push',6,'p_linkedlist_push','pyacc.py',219),
  ('linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI','linkedlist_remove',6,'p_linkedlist_remove','pyacc.py',222),
  ('if -> KW_IF conditional LBRACE main_rule RBRACE','if',5,'p_if','pyacc.py',227),
  ('else -> KW_ELSE LBRACE main_rule RBRACE','else',4,'p_else','pyacc.py',230),
  ('else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE','else_if',6,'p_else_if','pyacc.py',233),
  ('function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE','function',11,'p_function_return','pyacc.py',238),
  ('expression_var -> expression','expression_var',1,'p_expression_var','pyacc.py',241),
  ('expression_var -> VARIABLE','expression_var',1,'p_expression_var','pyacc.py',242),
  ('return -> main_rule','return',1,'p_return_statement','pyacc.py',245),
  ('return -> main_rule KW_RETURN expression_var SEMI','return',4,'p_return_statement','pyacc.py',246),
]
