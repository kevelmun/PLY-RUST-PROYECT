
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ANDE CADENA CHAR COLON COMMA COMMENT DIVEQUAL DIVIDE DOT EQ EQUALS FLOAT FLOAT_32 FLOAT_64 GE GT HASH INTEGER KW_ABSTRACT KW_AS KW_ASYNC KW_AWAIT KW_BECOME KW_BOOLEAN KW_BOX KW_BREAK KW_CHARACTER KW_CONST KW_CONTINUE KW_CRATE KW_DO KW_DYN KW_ELSE KW_ENUM KW_EXPECT KW_EXTERN KW_FALSE KW_FINAL KW_FN KW_FOR KW_FROM KW_HASHMAP KW_IF KW_IMPL KW_IN KW_INSERT KW_IO KW_LET KW_LINKEDLIST KW_LOOP KW_MACRO KW_MATCH KW_MOD KW_MOVE KW_MUT KW_NEW KW_OVERRIDE KW_PRINT KW_PRIV KW_PUB KW_PUSH_BACK KW_READ_LINE KW_REF KW_REMOVE KW_RETURN KW_SELFTYPE KW_SELFVALUE KW_STATIC KW_STATICLIFETIME KW_STDIN KW_STRING KW_STRUCT KW_SUPER KW_TRAIT KW_TRUE KW_TRY KW_TYPE KW_TYPEOF KW_UNION KW_UNSAFE KW_UNSIZED KW_USE KW_VIRTUAL KW_WHERE KW_WHILE KW_YIELD LAND LBRACE LBRACKET LE LNOT LOR LPAREN LT MINUS MINUSEQUAL MODULUS MODULUSEQUAL NE ORE OREXE PLUS PLUSEQUAL QMARK QUOTE RBRACE RBRACKET RPAREN SEMI SIG_INT_128 SIG_INT_16 SIG_INT_32 SIG_INT_64 SIG_INT_8 TIMES TIMESEQUAL UNSIG_INT_128 UNSIG_INT_16 UNSIG_INT_32 UNSIG_INT_64 UNSIG_INT_8 VARIABLEmain_rule : father_rule\n    | father_rule main_rulefather_rule : print\n    | dvariable\n    | function\n    | variables\n    | control_str\n    | expression\n    | void\n    | data_str\n    | array\n    | linkedlist_methods\n    | hashmap_methods\n    | initialization\n    | input\n    | assignation\n    | declare_data_typeexpression : expression PLUS expression\n    | expression MINUS expression\n    | expression TIMES expression\n    | expression DIVIDE expression\n    | LPAREN expression RPAREN\n    | numbernumber : INTEGER\n    | FLOAT\n    | VARIABLEdata_type : UNSIG_INT_8\n                | UNSIG_INT_16\n                | UNSIG_INT_32\n                | UNSIG_INT_64\n                | UNSIG_INT_128\n                | SIG_INT_8\n                | SIG_INT_16\n                | SIG_INT_32\n                | SIG_INT_64\n                | SIG_INT_128\n                | FLOAT_32\n                | FLOAT_64\n                | KW_BOOLEAN\n                | KW_STRINGassign_operators : EQUALS\n                        | TIMESEQUAL \n                        | DIVEQUAL\n                        | MODULUSEQUAL\n                        | PLUSEQUAL \n                        | MINUSEQUALdata : CADENA\n    | INTEGER\n    | CHAR\n    | FLOAT\n    | KW_FALSE\n    | KW_TRUE\n    | tuplecomparator :\n    | EQ\n    | NE\n    | GE\n    | LE\n    | GT\n    | LTand : VARIABLE LAND VARIABLEconditional : VARIABLE comparator data\n    | and comparator dataor : VARIABLE LOR VARIABLEmdata : data\n    | data COMMA mdataprint : KW_PRINT LPAREN CADENA RPAREN SEMIdvariable : KW_LET VARIABLE SEMIarray : KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET\n    | LBRACKET mdata RBRACKETvariables : VARIABLE \n    | VARIABLE COMMA variableswhile : KW_WHILE LPAREN VARIABLE tuple : LPAREN mdata RPARENinitialization : let_initialization SEMI \n    | const_initialization SEMI \n    | data_str SEMI\n    | input_init SEMIlet_initialization : KW_LET VARIABLE EQUALS data\n    | KW_LET VARIABLE COLON data_type EQUALS data\n    | KW_LET KW_MUT VARIABLE EQUALS data\n    | KW_LET KW_MUT VARIABLE COLON data_type EQUALS data\n    | KW_LET VARIABLE EQUALS expression_var\n    | KW_LET VARIABLE COLON data_type EQUALS expression_var\n    | KW_LET KW_MUT VARIABLE EQUALS expression_var\n    | KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_varconst_initialization : KW_CONST VARIABLE COLON data_type EQUALS dataarguments : void\n    | variablesfunction : KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACEcontrol_str : for_str\n    | for_str_tagged\n    | if\n    | else\n    | else_if\n    | whilefor_str : KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE\n    | KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACEfor_str_tagged : label COLON for_strrange : INTEGER DOT DOT INTEGER\n    | VARIABLE DOT DOT VARIABLElabel : QUOTE VARIABLEdata_str : array\n    | hashmap\n    | linkedlisthashmap : KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN\n    | KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN\n    | KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN\n    | KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPARENhashmap_methods : VARIABLE hashmap_insert\n    | VARIABLE hashmap_removehashmap_insert : DOT KW_INSERT LPAREN mdata RPAREN SEMIhashmap_remove : DOT KW_REMOVE LPAREN AND data RPAREN SEMIvoid : linkedlist : KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN\n                  | KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPARENlinkedlist : KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN\n                  | KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPARENlinkedlist_methods : VARIABLE linkedlist_push\n    | VARIABLE linkedlist_removelinkedlist_push : DOT KW_PUSH_BACK LPAREN data RPAREN SEMIlinkedlist_remove : DOT KW_REMOVE LPAREN INTEGER RPAREN SEMIif : KW_IF conditional LBRACE main_rule RBRACEelse : KW_ELSE LBRACE main_rule RBRACEelse_if : KW_ELSE KW_IF conditional LBRACE main_rule RBRACEfunction : KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACEexpression_var : expression\n                      | datareturn : main_rule\n              | KW_RETURN expression_var SEMI\n              | main_rule KW_RETURN expression_var SEMIinput_init : KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPARENinput : VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMIassignation : VARIABLE assign_operators numberdeclare_data_type : KW_LET VARIABLE COLON data_type SEMI'
    
_lr_action_items = {'KW_PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,21,23,24,25,26,27,28,29,30,31,41,42,50,53,57,58,59,60,80,81,82,88,93,94,95,96,98,99,103,104,109,111,115,116,128,175,176,178,184,199,201,203,206,224,230,243,244,246,249,251,263,264,266,277,279,280,282,292,293,296,309,311,312,],[18,18,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-26,-91,-92,-93,-94,-95,-96,-23,-104,-105,-24,-25,-77,-26,-119,-120,-110,-111,-75,-76,-78,18,-18,-19,-20,-21,-22,-68,-71,-72,-134,-70,-99,18,-73,-124,18,-67,-135,18,18,-123,-69,18,-125,-121,-122,-112,-98,-97,-113,-90,-106,18,-108,-117,-107,-109,-118,-126,-115,-133,-116,]),'KW_LET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,21,23,24,25,26,27,28,29,30,31,41,42,50,53,57,58,59,60,80,81,82,88,93,94,95,96,98,99,103,104,109,111,115,116,128,175,176,178,184,199,201,203,206,224,230,243,244,246,249,251,254,255,263,264,266,273,274,277,279,280,282,292,293,296,309,311,312,],[20,20,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-26,-91,-92,-93,-94,-95,-96,-23,-104,-105,-24,-25,-77,-26,-119,-120,-110,-111,-75,-76,-78,20,-18,-19,-20,-21,-22,-68,-71,-72,-134,-70,-99,20,-73,-124,20,-67,-135,20,20,-123,-69,20,-125,-121,-122,-112,-98,-97,267,267,-113,-90,-106,267,267,20,-108,-117,-107,-109,-118,-126,-115,-133,-116,]),'KW_FN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,21,23,24,25,26,27,28,29,30,31,41,42,50,53,57,58,59,60,80,81,82,88,93,94,95,96,98,99,103,104,109,111,115,116,128,175,176,178,184,199,201,203,206,224,230,243,244,246,249,251,263,264,266,277,279,280,282,292,293,296,309,311,312,],[22,22,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-26,-91,-92,-93,-94,-95,-96,-23,-104,-105,-24,-25,-77,-26,-119,-120,-110,-111,-75,-76,-78,22,-18,-19,-20,-21,-22,-68,-71,-72,-134,-70,-99,22,-73,-124,22,-67,-135,22,22,-123,-69,22,-125,-121,-122,-112,-98,-97,-113,-90,-106,22,-108,-117,-107,-109,-118,-126,-115,-133,-116,]),'VARIABLE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,36,38,41,42,43,44,46,47,48,49,50,53,55,56,57,58,59,60,62,63,64,65,66,67,68,80,81,82,88,89,90,93,94,95,96,98,99,100,103,104,109,110,111,114,115,116,118,128,133,157,175,176,178,181,184,185,199,201,203,206,218,219,224,227,230,243,244,246,249,251,263,264,266,267,277,279,280,282,289,292,293,296,297,309,311,312,],[21,21,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,53,54,-26,69,-91,-92,-93,-94,-95,-96,-23,-104,-105,83,86,-24,-25,91,92,53,53,53,53,-77,-26,102,103,-119,-120,-110,-111,53,-41,-42,-43,-44,-45,-46,-75,-76,-78,21,86,128,-18,-19,-20,-21,-22,-68,53,-71,-72,-134,103,-70,168,-99,21,173,-73,53,53,-124,21,-67,53,-135,53,21,21,-123,-69,53,242,21,250,-125,-121,-122,-112,-98,-97,-113,-90,-106,278,21,-108,-117,-107,53,-109,-118,-126,53,-115,-133,-116,]),'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,23,24,25,26,27,28,29,30,31,32,40,41,42,46,47,48,49,50,53,57,58,59,60,69,79,80,81,82,86,87,88,93,94,95,96,98,99,100,103,104,105,106,107,108,109,111,112,115,116,117,119,120,121,122,123,124,125,128,131,133,157,160,162,173,175,176,178,181,184,185,196,199,201,203,205,206,218,224,230,232,233,234,235,243,244,246,249,251,258,259,260,263,264,266,277,279,280,282,286,289,292,293,296,297,300,306,309,311,312,],[19,19,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,51,19,-26,-91,-92,-93,-94,-95,-96,-23,-104,-105,79,90,-24,-25,19,19,19,19,-77,-26,-119,-120,-110,-111,110,79,-75,-76,-78,-54,-54,19,-18,-19,-20,-21,-22,-68,133,-71,-72,159,160,161,162,-134,-70,79,-99,19,79,-55,-56,-57,-58,-59,-60,79,-73,79,181,133,79,79,-61,-124,19,-67,181,-135,133,79,19,19,-123,79,-69,133,19,-125,253,254,255,256,-121,-122,-112,-98,-97,272,273,274,-113,-90,-106,19,-108,-117,-107,295,181,-109,-118,-126,181,305,310,-115,-133,-116,]),'LBRACKET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,21,23,24,25,26,27,28,29,30,31,41,42,50,53,57,58,59,60,80,81,82,88,93,94,95,96,98,99,100,103,104,109,111,115,116,128,175,176,178,184,199,201,203,206,224,230,243,244,246,249,251,254,255,263,264,266,273,274,277,279,280,282,290,292,293,296,309,311,312,],[32,32,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-26,-91,-92,-93,-94,-95,-96,-23,-104,-105,-24,-25,-77,-26,-119,-120,-110,-111,-75,-76,-78,32,-18,-19,-20,-21,-22,-68,131,-71,-72,-134,-70,-99,32,-73,-124,32,-67,-135,32,32,-123,-69,32,-125,-121,-122,-112,-98,-97,32,32,-113,-90,-106,32,32,32,-108,-117,-107,131,-109,-118,-126,-115,-133,-116,]),'KW_FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,21,23,24,25,26,27,28,29,30,31,41,42,50,53,57,58,59,60,80,81,82,84,88,93,94,95,96,98,99,103,104,109,111,115,116,128,175,176,178,184,199,201,203,206,224,230,243,244,246,249,251,263,264,266,277,279,280,282,292,293,296,309,311,312,],[36,36,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-26,-91,-92,-93,-94,-95,-96,-23,-104,-105,-24,-25,-77,-26,-119,-120,-110,-111,-75,-76,-78,36,36,-18,-19,-20,-21,-22,-68,-71,-72,-134,-70,-99,36,-73,-124,36,-67,-135,36,36,-123,-69,36,-125,-121,-122,-112,-98,-97,-113,-90,-106,36,-108,-117,-107,-109,-118,-126,-115,-133,-116,]),'KW_IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,21,23,24,25,26,27,28,29,30,31,39,41,42,50,53,57,58,59,60,80,81,82,88,93,94,95,96,98,99,103,104,109,111,115,116,128,175,176,178,184,199,201,203,206,224,230,243,244,246,249,251,263,264,266,277,279,280,282,292,293,296,309,311,312,],[38,38,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-26,-91,-92,-93,-94,-95,-96,-23,-104,-105,89,-24,-25,-77,-26,-119,-120,-110,-111,-75,-76,-78,38,-18,-19,-20,-21,-22,-68,-71,-72,-134,-70,-99,38,-73,-124,38,-67,-135,38,38,-123,-69,38,-125,-121,-122,-112,-98,-97,-113,-90,-106,38,-108,-117,-107,-109,-118,-126,-115,-133,-116,]),'KW_ELSE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,21,23,24,25,26,27,28,29,30,31,41,42,50,53,57,58,59,60,80,81,82,88,93,94,95,96,98,99,103,104,109,111,115,116,128,175,176,178,184,199,201,203,206,224,230,243,244,246,249,251,263,264,266,277,279,280,282,292,293,296,309,311,312,],[39,39,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-26,-91,-92,-93,-94,-95,-96,-23,-104,-105,-24,-25,-77,-26,-119,-120,-110,-111,-75,-76,-78,39,-18,-19,-20,-21,-22,-68,-71,-72,-134,-70,-99,39,-73,-124,39,-67,-135,39,39,-123,-69,39,-125,-121,-122,-112,-98,-97,-113,-90,-106,39,-108,-117,-107,-109,-118,-126,-115,-133,-116,]),'KW_WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,21,23,24,25,26,27,28,29,30,31,41,42,50,53,57,58,59,60,80,81,82,88,93,94,95,96,98,99,103,104,109,111,115,116,128,175,176,178,184,199,201,203,206,224,230,243,244,246,249,251,263,264,266,277,279,280,282,292,293,296,309,311,312,],[40,40,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-26,-91,-92,-93,-94,-95,-96,-23,-104,-105,-24,-25,-77,-26,-119,-120,-110,-111,-75,-76,-78,40,-18,-19,-20,-21,-22,-68,-71,-72,-134,-70,-99,40,-73,-124,40,-67,-135,40,40,-123,-69,40,-125,-121,-122,-112,-98,-97,-113,-90,-106,40,-108,-117,-107,-109,-118,-126,-115,-133,-116,]),'INTEGER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,21,23,24,25,26,27,28,29,30,31,32,41,42,46,47,48,49,50,53,57,58,59,60,62,63,64,65,66,67,68,79,80,81,82,86,87,88,93,94,95,96,98,99,100,103,104,109,111,112,114,115,116,117,119,120,121,122,123,124,125,128,131,133,157,160,161,162,173,175,176,178,181,184,185,196,199,201,203,205,206,218,224,229,230,243,244,246,249,251,263,264,266,277,279,280,282,289,292,293,296,297,309,311,312,],[41,41,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,41,-26,-91,-92,-93,-94,-95,-96,-23,-104,-105,73,-24,-25,41,41,41,41,-77,-26,-119,-120,-110,-111,41,-41,-42,-43,-44,-45,-46,73,-75,-76,-78,-54,-54,41,-18,-19,-20,-21,-22,-68,138,-71,-72,-134,-70,73,170,-99,41,73,-55,-56,-57,-58,-59,-60,73,-73,73,138,138,73,195,73,-61,-124,41,-67,208,-135,138,73,41,41,-123,73,-69,138,41,252,-125,-121,-122,-112,-98,-97,-113,-90,-106,41,-108,-117,-107,138,-109,-118,-126,138,-115,-133,-116,]),'FLOAT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,21,23,24,25,26,27,28,29,30,31,32,41,42,46,47,48,49,50,53,57,58,59,60,62,63,64,65,66,67,68,79,80,81,82,86,87,88,93,94,95,96,98,99,100,103,104,109,111,112,115,116,117,119,120,121,122,123,124,125,128,131,133,157,160,162,173,175,176,178,181,184,185,196,199,201,203,205,206,218,224,230,243,244,246,249,251,263,264,266,277,279,280,282,289,292,293,296,297,309,311,312,],[42,42,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,42,-26,-91,-92,-93,-94,-95,-96,-23,-104,-105,75,-24,-25,42,42,42,42,-77,-26,-119,-120,-110,-111,42,-41,-42,-43,-44,-45,-46,75,-75,-76,-78,-54,-54,42,-18,-19,-20,-21,-22,-68,139,-71,-72,-134,-70,75,-99,42,75,-55,-56,-57,-58,-59,-60,75,-73,75,139,139,75,75,-61,-124,42,-67,209,-135,139,75,42,42,-123,75,-69,139,42,-125,-121,-122,-112,-98,-97,-113,-90,-106,42,-108,-117,-107,139,-109,-118,-126,139,-115,-133,-116,]),'KW_CONST':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,21,23,24,25,26,27,28,29,30,31,41,42,50,53,57,58,59,60,80,81,82,88,93,94,95,96,98,99,103,104,109,111,115,116,128,175,176,178,184,199,201,203,206,224,230,243,244,246,249,251,263,264,266,277,279,280,282,292,293,296,309,311,312,],[43,43,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-26,-91,-92,-93,-94,-95,-96,-23,-104,-105,-24,-25,-77,-26,-119,-120,-110,-111,-75,-76,-78,43,-18,-19,-20,-21,-22,-68,-71,-72,-134,-70,-99,43,-73,-124,43,-67,-135,43,43,-123,-69,43,-125,-121,-122,-112,-98,-97,-113,-90,-106,43,-108,-117,-107,-109,-118,-126,-115,-133,-116,]),'QUOTE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,21,23,24,25,26,27,28,29,30,31,41,42,50,53,57,58,59,60,80,81,82,88,93,94,95,96,98,99,103,104,109,111,115,116,128,175,176,178,184,199,201,203,206,224,230,243,244,246,249,251,263,264,266,277,279,280,282,292,293,296,309,311,312,],[44,44,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-26,-91,-92,-93,-94,-95,-96,-23,-104,-105,-24,-25,-77,-26,-119,-120,-110,-111,-75,-76,-78,44,-18,-19,-20,-21,-22,-68,-71,-72,-134,-70,-99,44,-73,-124,44,-67,-135,44,44,-123,-69,44,-125,-121,-122,-112,-98,-97,-113,-90,-106,44,-108,-117,-107,-109,-118,-126,-115,-133,-116,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,21,23,24,25,26,27,28,29,30,31,41,42,45,50,53,57,58,59,60,80,81,82,93,94,95,96,98,99,103,104,109,111,115,128,175,178,184,203,206,230,243,244,246,249,251,263,264,266,279,280,282,292,293,296,309,311,312,],[-114,0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-26,-91,-92,-93,-94,-95,-96,-23,-104,-105,-24,-25,-2,-77,-26,-119,-120,-110,-111,-75,-76,-78,-18,-19,-20,-21,-22,-68,-71,-72,-134,-70,-99,-73,-124,-67,-135,-123,-69,-125,-121,-122,-112,-98,-97,-113,-90,-106,-108,-117,-107,-109,-118,-126,-115,-133,-116,]),'RBRACE':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,21,23,24,25,26,27,28,29,30,31,41,42,45,50,53,57,58,59,60,80,81,82,88,93,94,95,96,98,99,103,104,109,111,115,116,126,128,171,175,176,178,184,199,201,203,204,206,224,226,228,230,243,244,246,247,249,251,263,264,266,277,279,280,282,287,288,292,293,296,304,308,309,311,312,],[-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-26,-91,-92,-93,-94,-95,-96,-23,-104,-105,-24,-25,-2,-77,-26,-119,-120,-110,-111,-75,-76,-78,-114,-18,-19,-20,-21,-22,-68,-71,-72,-134,-70,-99,-114,175,-73,203,-124,-114,-67,-135,-114,-114,-123,230,-69,-114,249,251,-125,-121,-122,-112,264,-98,-97,-113,-90,-106,-114,-108,-117,-107,296,-129,-109,-118,-126,-130,-131,-115,-133,-116,]),'KW_RETURN':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,21,23,24,25,26,27,28,29,30,31,41,42,45,50,53,57,58,59,60,80,81,82,93,94,95,96,98,99,103,104,109,111,115,128,175,178,184,203,206,230,243,244,246,249,251,263,264,266,277,279,280,282,288,292,293,296,309,311,312,],[-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-26,-91,-92,-93,-94,-95,-96,-23,-104,-105,-24,-25,-2,-77,-26,-119,-120,-110,-111,-75,-76,-78,-18,-19,-20,-21,-22,-68,-71,-72,-134,-70,-99,-73,-124,-67,-135,-123,-69,-125,-121,-122,-112,-98,-97,-113,-90,-106,289,-108,-117,-107,297,-109,-118,-126,-115,-133,-116,]),'PLUS':([8,21,29,41,42,52,53,93,94,95,96,98,138,139,140,208,209,],[46,-26,-23,-24,-25,46,-26,46,46,46,46,-22,-24,-25,46,-24,-25,]),'MINUS':([8,21,29,41,42,52,53,93,94,95,96,98,138,139,140,198,208,209,],[47,-26,-23,-24,-25,47,-26,47,47,47,47,-22,-24,-25,47,225,-24,-25,]),'TIMES':([8,21,29,41,42,52,53,93,94,95,96,98,138,139,140,208,209,],[48,-26,-23,-24,-25,48,-26,48,48,48,48,-22,-24,-25,48,-24,-25,]),'DIVIDE':([8,21,29,41,42,52,53,93,94,95,96,98,138,139,140,208,209,],[49,-26,-23,-24,-25,49,-26,49,49,49,49,-22,-24,-25,49,-24,-25,]),'SEMI':([10,11,29,30,31,33,34,35,41,42,53,54,72,73,74,75,76,77,78,93,94,95,96,98,111,130,135,136,138,139,140,141,143,144,145,146,147,148,149,150,151,152,153,154,155,156,167,189,190,206,212,213,220,221,223,231,240,241,245,266,270,279,280,282,292,293,298,299,303,307,309,312,],[50,-103,-23,-104,-105,80,81,82,-24,-25,-26,99,-47,-48,-49,-50,-51,-52,-53,-18,-19,-20,-21,-22,-70,178,-79,-83,-24,-25,-127,184,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-74,-81,-85,-69,-80,-84,243,244,246,-87,-82,-86,263,-106,-132,-108,-117,-107,-109,-118,304,-128,308,311,-115,-116,]),'KW_MUT':([20,193,],[55,219,]),'COMMA':([21,71,72,73,74,75,76,77,78,103,138,139,167,208,209,],[56,112,-47,-48,-49,-50,-51,-52,-53,56,-48,-50,-74,-48,-50,]),'DOT':([21,168,170,200,202,262,],[61,200,202,227,229,276,]),'EQUALS':([21,54,102,141,143,144,145,146,147,148,149,150,151,152,153,154,155,156,177,192,236,261,278,],[63,100,157,185,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,205,218,257,275,290,]),'TIMESEQUAL':([21,],[64,]),'DIVEQUAL':([21,],[65,]),'MODULUSEQUAL':([21,],[66,]),'PLUSEQUAL':([21,],[67,]),'MINUSEQUAL':([21,],[68,]),'RPAREN':([29,41,42,52,53,71,72,73,74,75,76,77,78,93,94,95,96,97,98,103,104,110,111,113,138,139,163,164,165,166,167,194,195,197,206,208,209,222,242,253,256,268,269,272,283,284,302,305,310,],[-23,-24,-25,98,-26,-65,-47,-48,-49,-50,-51,-52,-53,-18,-19,-20,-21,130,-22,-71,-72,-114,-70,167,-24,-25,198,-88,-89,-66,-74,220,221,223,-69,-24,-25,245,262,266,270,279,280,282,292,293,307,309,312,]),'CADENA':([32,51,79,86,87,100,112,117,119,120,121,122,123,124,125,131,133,157,160,162,173,181,185,196,205,218,289,295,297,],[72,97,72,-54,-54,72,72,72,-55,-56,-57,-58,-59,-60,72,72,72,72,72,72,-61,72,72,72,72,72,72,302,72,]),'CHAR':([32,79,86,87,100,112,117,119,120,121,122,123,124,125,131,133,157,160,162,173,181,185,196,205,218,289,297,],[74,74,-54,-54,74,74,74,-55,-56,-57,-58,-59,-60,74,74,74,74,74,74,-61,74,74,74,74,74,74,74,]),'KW_FALSE':([32,79,86,87,100,112,117,119,120,121,122,123,124,125,131,133,157,160,162,173,181,185,196,205,218,289,297,],[76,76,-54,-54,76,76,76,-55,-56,-57,-58,-59,-60,76,76,76,76,76,76,-61,76,76,76,76,76,76,76,]),'KW_TRUE':([32,79,86,87,100,112,117,119,120,121,122,123,124,125,131,133,157,160,162,173,181,185,196,205,218,289,297,],[77,77,-54,-54,77,77,77,-55,-56,-57,-58,-59,-60,77,77,77,77,77,77,-61,77,77,77,77,77,77,77,]),'COLON':([37,54,91,92,102,132,134,137,180,182,183,187,188,215,216,271,281,285,294,],[84,101,129,-102,158,180,182,183,207,210,211,215,216,237,238,281,291,294,301,]),'LBRACE':([39,72,73,74,75,76,77,78,85,127,143,144,145,146,147,148,149,150,151,152,153,154,155,156,167,168,169,172,174,198,250,252,265,],[88,-47,-48,-49,-50,-51,-52,-53,116,176,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-74,199,201,-62,-63,224,-101,-100,277,]),'KW_READ_LINE':([61,],[105,]),'KW_PUSH_BACK':([61,],[106,]),'KW_REMOVE':([61,],[107,]),'KW_INSERT':([61,],[108,]),'RBRACKET':([70,71,72,73,74,75,76,77,78,166,167,179,],[111,-65,-47,-48,-49,-50,-51,-52,-53,-66,-74,206,]),'KW_IN':([83,],[114,]),'LAND':([86,],[118,]),'EQ':([86,87,173,],[119,119,-61,]),'NE':([86,87,173,],[120,120,-61,]),'GE':([86,87,173,],[121,121,-61,]),'LE':([86,87,173,],[122,122,-61,]),'GT':([86,87,143,144,145,146,147,148,149,150,151,152,153,154,155,156,173,214,225,239,],[123,123,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-61,236,248,261,]),'LT':([86,87,142,173,191,],[124,124,186,-61,217,]),'KW_HASHMAP':([100,157,],[132,187,]),'KW_LINKEDLIST':([100,101,157,158,257,275,],[134,142,188,191,271,285,]),'KW_IO':([100,],[137,]),'UNSIG_INT_8':([101,129,158,186,217,248,],[143,143,143,143,143,143,]),'UNSIG_INT_16':([101,129,158,186,217,248,],[144,144,144,144,144,144,]),'UNSIG_INT_32':([101,129,158,186,217,248,],[145,145,145,145,145,145,]),'UNSIG_INT_64':([101,129,158,186,217,248,],[146,146,146,146,146,146,]),'UNSIG_INT_128':([101,129,158,186,217,248,],[147,147,147,147,147,147,]),'SIG_INT_8':([101,129,158,186,217,248,],[148,148,148,148,148,148,]),'SIG_INT_16':([101,129,158,186,217,248,],[149,149,149,149,149,149,]),'SIG_INT_32':([101,129,158,186,217,248,],[150,150,150,150,150,150,]),'SIG_INT_64':([101,129,158,186,217,248,],[151,151,151,151,151,151,]),'SIG_INT_128':([101,129,158,186,217,248,],[152,152,152,152,152,152,]),'FLOAT_32':([101,129,158,186,217,248,],[153,153,153,153,153,153,]),'FLOAT_64':([101,129,158,186,217,248,],[154,154,154,154,154,154,]),'KW_BOOLEAN':([101,129,158,186,217,248,],[155,155,155,155,155,155,]),'KW_STRING':([101,129,158,186,217,248,],[156,156,156,156,156,156,]),'AND':([159,161,],[193,196,]),'KW_NEW':([207,237,291,301,],[232,258,300,306,]),'KW_FROM':([207,210,237,238,],[233,234,259,260,]),'KW_STDIN':([211,],[235,]),'KW_EXPECT':([276,],[286,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'main_rule':([0,2,88,116,176,199,201,224,277,],[1,45,126,171,204,226,228,247,288,]),'father_rule':([0,2,88,116,176,199,201,224,277,],[2,2,2,2,2,2,2,2,2,]),'print':([0,2,88,116,176,199,201,224,277,],[3,3,3,3,3,3,3,3,3,]),'dvariable':([0,2,88,116,176,199,201,224,277,],[4,4,4,4,4,4,4,4,4,]),'function':([0,2,88,116,176,199,201,224,277,],[5,5,5,5,5,5,5,5,5,]),'variables':([0,2,56,88,110,116,176,199,201,224,277,],[6,6,104,6,165,6,6,6,6,6,6,]),'control_str':([0,2,88,116,176,199,201,224,277,],[7,7,7,7,7,7,7,7,7,]),'expression':([0,2,19,46,47,48,49,88,100,116,133,157,176,181,185,199,201,218,224,277,289,297,],[8,8,52,93,94,95,96,8,140,8,52,140,8,52,140,8,8,140,8,8,140,140,]),'void':([0,2,88,110,116,176,199,201,224,277,],[9,9,9,164,9,9,9,9,9,9,]),'data_str':([0,2,88,116,176,199,201,224,277,],[10,10,10,10,10,10,10,10,10,]),'array':([0,2,88,116,176,199,201,224,254,255,273,274,277,],[11,11,11,11,11,11,11,11,268,269,283,284,11,]),'linkedlist_methods':([0,2,88,116,176,199,201,224,277,],[12,12,12,12,12,12,12,12,12,]),'hashmap_methods':([0,2,88,116,176,199,201,224,277,],[13,13,13,13,13,13,13,13,13,]),'initialization':([0,2,88,116,176,199,201,224,277,],[14,14,14,14,14,14,14,14,14,]),'input':([0,2,88,116,176,199,201,224,277,],[15,15,15,15,15,15,15,15,15,]),'assignation':([0,2,88,116,176,199,201,224,277,],[16,16,16,16,16,16,16,16,16,]),'declare_data_type':([0,2,88,116,176,199,201,224,277,],[17,17,17,17,17,17,17,17,17,]),'for_str':([0,2,84,88,116,176,199,201,224,277,],[23,23,115,23,23,23,23,23,23,23,]),'for_str_tagged':([0,2,88,116,176,199,201,224,277,],[24,24,24,24,24,24,24,24,24,]),'if':([0,2,88,116,176,199,201,224,277,],[25,25,25,25,25,25,25,25,25,]),'else':([0,2,88,116,176,199,201,224,277,],[26,26,26,26,26,26,26,26,26,]),'else_if':([0,2,88,116,176,199,201,224,277,],[27,27,27,27,27,27,27,27,27,]),'while':([0,2,88,116,176,199,201,224,277,],[28,28,28,28,28,28,28,28,28,]),'number':([0,2,19,46,47,48,49,62,88,100,116,133,157,176,181,185,199,201,218,224,277,289,297,],[29,29,29,29,29,29,29,109,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'hashmap':([0,2,88,116,176,199,201,224,277,],[30,30,30,30,30,30,30,30,30,]),'linkedlist':([0,2,88,116,176,199,201,224,277,],[31,31,31,31,31,31,31,31,31,]),'let_initialization':([0,2,88,116,176,199,201,224,277,],[33,33,33,33,33,33,33,33,33,]),'const_initialization':([0,2,88,116,176,199,201,224,277,],[34,34,34,34,34,34,34,34,34,]),'input_init':([0,2,88,116,176,199,201,224,277,],[35,35,35,35,35,35,35,35,35,]),'label':([0,2,88,116,176,199,201,224,277,],[37,37,37,37,37,37,37,37,37,]),'linkedlist_push':([21,],[57,]),'linkedlist_remove':([21,],[58,]),'hashmap_insert':([21,],[59,]),'hashmap_remove':([21,],[60,]),'assign_operators':([21,],[62,]),'mdata':([32,79,112,131,133,162,181,],[70,113,166,179,113,197,113,]),'data':([32,79,100,112,117,125,131,133,157,160,162,181,185,196,205,218,289,297,],[71,71,135,71,172,174,71,71,189,194,71,71,212,222,231,240,299,299,]),'tuple':([32,79,100,112,117,125,131,133,157,160,162,181,185,196,205,218,289,297,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'conditional':([38,89,],[85,127,]),'and':([38,89,],[87,87,]),'comparator':([86,87,],[117,125,]),'expression_var':([100,157,185,218,289,297,],[136,190,213,241,298,303,]),'data_type':([101,129,158,186,217,248,],[141,177,192,214,239,265,]),'arguments':([110,],[163,]),'range':([114,],[169,]),'return':([277,],[287,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> main_rule","S'",1,None,None,None),
  ('main_rule -> father_rule','main_rule',1,'p_main_rule','pyacc.py',11),
  ('main_rule -> father_rule main_rule','main_rule',2,'p_main_rule','pyacc.py',12),
  ('father_rule -> print','father_rule',1,'p_father_rule','pyacc.py',17),
  ('father_rule -> dvariable','father_rule',1,'p_father_rule','pyacc.py',18),
  ('father_rule -> function','father_rule',1,'p_father_rule','pyacc.py',19),
  ('father_rule -> variables','father_rule',1,'p_father_rule','pyacc.py',20),
  ('father_rule -> control_str','father_rule',1,'p_father_rule','pyacc.py',21),
  ('father_rule -> expression','father_rule',1,'p_father_rule','pyacc.py',22),
  ('father_rule -> void','father_rule',1,'p_father_rule','pyacc.py',23),
  ('father_rule -> data_str','father_rule',1,'p_father_rule','pyacc.py',24),
  ('father_rule -> array','father_rule',1,'p_father_rule','pyacc.py',25),
  ('father_rule -> linkedlist_methods','father_rule',1,'p_father_rule','pyacc.py',26),
  ('father_rule -> hashmap_methods','father_rule',1,'p_father_rule','pyacc.py',27),
  ('father_rule -> initialization','father_rule',1,'p_father_rule','pyacc.py',28),
  ('father_rule -> input','father_rule',1,'p_father_rule','pyacc.py',29),
  ('father_rule -> assignation','father_rule',1,'p_father_rule','pyacc.py',30),
  ('father_rule -> declare_data_type','father_rule',1,'p_father_rule','pyacc.py',31),
  ('expression -> expression PLUS expression','expression',3,'p_expression','pyacc.py',37),
  ('expression -> expression MINUS expression','expression',3,'p_expression','pyacc.py',38),
  ('expression -> expression TIMES expression','expression',3,'p_expression','pyacc.py',39),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','pyacc.py',40),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','pyacc.py',41),
  ('expression -> number','expression',1,'p_expression','pyacc.py',42),
  ('number -> INTEGER','number',1,'p_number','pyacc.py',47),
  ('number -> FLOAT','number',1,'p_number','pyacc.py',48),
  ('number -> VARIABLE','number',1,'p_number','pyacc.py',49),
  ('data_type -> UNSIG_INT_8','data_type',1,'p_data_type','pyacc.py',53),
  ('data_type -> UNSIG_INT_16','data_type',1,'p_data_type','pyacc.py',54),
  ('data_type -> UNSIG_INT_32','data_type',1,'p_data_type','pyacc.py',55),
  ('data_type -> UNSIG_INT_64','data_type',1,'p_data_type','pyacc.py',56),
  ('data_type -> UNSIG_INT_128','data_type',1,'p_data_type','pyacc.py',57),
  ('data_type -> SIG_INT_8','data_type',1,'p_data_type','pyacc.py',58),
  ('data_type -> SIG_INT_16','data_type',1,'p_data_type','pyacc.py',59),
  ('data_type -> SIG_INT_32','data_type',1,'p_data_type','pyacc.py',60),
  ('data_type -> SIG_INT_64','data_type',1,'p_data_type','pyacc.py',61),
  ('data_type -> SIG_INT_128','data_type',1,'p_data_type','pyacc.py',62),
  ('data_type -> FLOAT_32','data_type',1,'p_data_type','pyacc.py',63),
  ('data_type -> FLOAT_64','data_type',1,'p_data_type','pyacc.py',64),
  ('data_type -> KW_BOOLEAN','data_type',1,'p_data_type','pyacc.py',65),
  ('data_type -> KW_STRING','data_type',1,'p_data_type','pyacc.py',66),
  ('assign_operators -> EQUALS','assign_operators',1,'p_assign_operators','pyacc.py',70),
  ('assign_operators -> TIMESEQUAL','assign_operators',1,'p_assign_operators','pyacc.py',71),
  ('assign_operators -> DIVEQUAL','assign_operators',1,'p_assign_operators','pyacc.py',72),
  ('assign_operators -> MODULUSEQUAL','assign_operators',1,'p_assign_operators','pyacc.py',73),
  ('assign_operators -> PLUSEQUAL','assign_operators',1,'p_assign_operators','pyacc.py',74),
  ('assign_operators -> MINUSEQUAL','assign_operators',1,'p_assign_operators','pyacc.py',75),
  ('data -> CADENA','data',1,'p_data','pyacc.py',79),
  ('data -> INTEGER','data',1,'p_data','pyacc.py',80),
  ('data -> CHAR','data',1,'p_data','pyacc.py',81),
  ('data -> FLOAT','data',1,'p_data','pyacc.py',82),
  ('data -> KW_FALSE','data',1,'p_data','pyacc.py',83),
  ('data -> KW_TRUE','data',1,'p_data','pyacc.py',84),
  ('data -> tuple','data',1,'p_data','pyacc.py',85),
  ('comparator -> <empty>','comparator',0,'p_comparator','pyacc.py',88),
  ('comparator -> EQ','comparator',1,'p_comparator','pyacc.py',89),
  ('comparator -> NE','comparator',1,'p_comparator','pyacc.py',90),
  ('comparator -> GE','comparator',1,'p_comparator','pyacc.py',91),
  ('comparator -> LE','comparator',1,'p_comparator','pyacc.py',92),
  ('comparator -> GT','comparator',1,'p_comparator','pyacc.py',93),
  ('comparator -> LT','comparator',1,'p_comparator','pyacc.py',94),
  ('and -> VARIABLE LAND VARIABLE','and',3,'p_and','pyacc.py',97),
  ('conditional -> VARIABLE comparator data','conditional',3,'p_conditional','pyacc.py',100),
  ('conditional -> and comparator data','conditional',3,'p_conditional','pyacc.py',101),
  ('or -> VARIABLE LOR VARIABLE','or',3,'p_or','pyacc.py',104),
  ('mdata -> data','mdata',1,'p_mdata','pyacc.py',107),
  ('mdata -> data COMMA mdata','mdata',3,'p_mdata','pyacc.py',108),
  ('print -> KW_PRINT LPAREN CADENA RPAREN SEMI','print',5,'p_print','pyacc.py',111),
  ('dvariable -> KW_LET VARIABLE SEMI','dvariable',3,'p_declare_variable','pyacc.py',114),
  ('array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET','array',6,'p_array','pyacc.py',117),
  ('array -> LBRACKET mdata RBRACKET','array',3,'p_array','pyacc.py',118),
  ('variables -> VARIABLE','variables',1,'p_variables','pyacc.py',121),
  ('variables -> VARIABLE COMMA variables','variables',3,'p_variables','pyacc.py',122),
  ('while -> KW_WHILE LPAREN VARIABLE','while',3,'p_while','pyacc.py',125),
  ('tuple -> LPAREN mdata RPAREN','tuple',3,'p_tuple','pyacc.py',132),
  ('initialization -> let_initialization SEMI','initialization',2,'p_initialization','pyacc.py',136),
  ('initialization -> const_initialization SEMI','initialization',2,'p_initialization','pyacc.py',137),
  ('initialization -> data_str SEMI','initialization',2,'p_initialization','pyacc.py',138),
  ('initialization -> input_init SEMI','initialization',2,'p_initialization','pyacc.py',139),
  ('let_initialization -> KW_LET VARIABLE EQUALS data','let_initialization',4,'p_let_initialization','pyacc.py',143),
  ('let_initialization -> KW_LET VARIABLE COLON data_type EQUALS data','let_initialization',6,'p_let_initialization','pyacc.py',144),
  ('let_initialization -> KW_LET KW_MUT VARIABLE EQUALS data','let_initialization',5,'p_let_initialization','pyacc.py',145),
  ('let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS data','let_initialization',7,'p_let_initialization','pyacc.py',146),
  ('let_initialization -> KW_LET VARIABLE EQUALS expression_var','let_initialization',4,'p_let_initialization','pyacc.py',147),
  ('let_initialization -> KW_LET VARIABLE COLON data_type EQUALS expression_var','let_initialization',6,'p_let_initialization','pyacc.py',148),
  ('let_initialization -> KW_LET KW_MUT VARIABLE EQUALS expression_var','let_initialization',5,'p_let_initialization','pyacc.py',149),
  ('let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var','let_initialization',7,'p_let_initialization','pyacc.py',150),
  ('const_initialization -> KW_CONST VARIABLE COLON data_type EQUALS data','const_initialization',6,'p_const_initialization','pyacc.py',154),
  ('arguments -> void','arguments',1,'p_arguments','pyacc.py',158),
  ('arguments -> variables','arguments',1,'p_arguments','pyacc.py',159),
  ('function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE','function',8,'p_function','pyacc.py',163),
  ('control_str -> for_str','control_str',1,'p_control_str','pyacc.py',167),
  ('control_str -> for_str_tagged','control_str',1,'p_control_str','pyacc.py',168),
  ('control_str -> if','control_str',1,'p_control_str','pyacc.py',169),
  ('control_str -> else','control_str',1,'p_control_str','pyacc.py',170),
  ('control_str -> else_if','control_str',1,'p_control_str','pyacc.py',171),
  ('control_str -> while','control_str',1,'p_control_str','pyacc.py',172),
  ('for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE','for_str',7,'p_for_str','pyacc.py',176),
  ('for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE','for_str',7,'p_for_str','pyacc.py',177),
  ('for_str_tagged -> label COLON for_str','for_str_tagged',3,'p_for_str_tagged','pyacc.py',181),
  ('range -> INTEGER DOT DOT INTEGER','range',4,'p_range','pyacc.py',185),
  ('range -> VARIABLE DOT DOT VARIABLE','range',4,'p_range','pyacc.py',186),
  ('label -> QUOTE VARIABLE','label',2,'p_label','pyacc.py',190),
  ('data_str -> array','data_str',1,'p_data_str','pyacc.py',194),
  ('data_str -> hashmap','data_str',1,'p_data_str','pyacc.py',195),
  ('data_str -> linkedlist','data_str',1,'p_data_str','pyacc.py',196),
  ('hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN','hashmap',9,'p_hashmap','pyacc.py',200),
  ('hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN','hashmap',10,'p_hashmap','pyacc.py',201),
  ('hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN','hashmap',10,'p_hashmap','pyacc.py',202),
  ('hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN','hashmap',11,'p_hashmap','pyacc.py',203),
  ('hashmap_methods -> VARIABLE hashmap_insert','hashmap_methods',2,'p_hashmap_methods','pyacc.py',207),
  ('hashmap_methods -> VARIABLE hashmap_remove','hashmap_methods',2,'p_hashmap_methods','pyacc.py',208),
  ('hashmap_insert -> DOT KW_INSERT LPAREN mdata RPAREN SEMI','hashmap_insert',6,'p_hashmap_insert','pyacc.py',212),
  ('hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI','hashmap_remove',7,'p_hashmap_remove','pyacc.py',216),
  ('void -> <empty>','void',0,'p_void','pyacc.py',220),
  ('linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN','linkedlist',14,'p_linkedlist_empty','pyacc.py',228),
  ('linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN','linkedlist',15,'p_linkedlist_empty','pyacc.py',229),
  ('linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN','linkedlist',10,'p_linkedlist_array','pyacc.py',232),
  ('linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN','linkedlist',11,'p_linkedlist_array','pyacc.py',233),
  ('linkedlist_methods -> VARIABLE linkedlist_push','linkedlist_methods',2,'p_linkedlist_methods','pyacc.py',236),
  ('linkedlist_methods -> VARIABLE linkedlist_remove','linkedlist_methods',2,'p_linkedlist_methods','pyacc.py',237),
  ('linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI','linkedlist_push',6,'p_linkedlist_push','pyacc.py',240),
  ('linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI','linkedlist_remove',6,'p_linkedlist_remove','pyacc.py',243),
  ('if -> KW_IF conditional LBRACE main_rule RBRACE','if',5,'p_if','pyacc.py',248),
  ('else -> KW_ELSE LBRACE main_rule RBRACE','else',4,'p_else','pyacc.py',251),
  ('else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE','else_if',6,'p_else_if','pyacc.py',254),
  ('function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE','function',11,'p_function_return','pyacc.py',259),
  ('expression_var -> expression','expression_var',1,'p_expression_var','pyacc.py',262),
  ('expression_var -> data','expression_var',1,'p_expression_var','pyacc.py',263),
  ('return -> main_rule','return',1,'p_return_statement','pyacc.py',266),
  ('return -> KW_RETURN expression_var SEMI','return',3,'p_return_statement','pyacc.py',267),
  ('return -> main_rule KW_RETURN expression_var SEMI','return',4,'p_return_statement','pyacc.py',268),
  ('input_init -> KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN','input_init',9,'p_input_init','pyacc.py',273),
  ('input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI','input',14,'p_input','pyacc.py',276),
  ('assignation -> VARIABLE assign_operators number','assignation',3,'p_assignation','pyacc.py',281),
  ('declare_data_type -> KW_LET VARIABLE COLON data_type SEMI','declare_data_type',5,'p_declare_datat_type','pyacc.py',286),
]
