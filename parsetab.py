
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND CADENA CHAR COLON COMMA COMMENT DIVEQUAL DIVIDE DOT EQ EQUALS FLOAT FLOAT_32 FLOAT_64 GE GT INTEGER KW_AS KW_BOOLEAN KW_CHARACTER KW_CONST KW_ELSE KW_EXPECT KW_FALSE KW_FN KW_FOR KW_FROM KW_HASHMAP KW_IF KW_IN KW_INSERT KW_IO KW_LET KW_LINKEDLIST KW_MUT KW_NEW KW_PRINT KW_PUSH_BACK KW_READ_LINE KW_REMOVE KW_RETURN KW_STDIN KW_STRING KW_TRUE KW_WHILE LAND LBRACE LBRACKET LE LNOT LOR LPAREN LT MINUS MINUSEQUAL MODULUSEQUAL NE PLUS PLUSEQUAL QUOTE RBRACE RBRACKET RPAREN SEMI SIG_INT_128 SIG_INT_16 SIG_INT_32 SIG_INT_64 SIG_INT_8 TIMES TIMESEQUAL UNSIG_INT_128 UNSIG_INT_16 UNSIG_INT_32 UNSIG_INT_64 UNSIG_INT_8 VARIABLEmain_rule : father_rule\n    | father_rule main_rulefather_rule : print\n    | dvariable\n    | function\n    | control_str\n    | void\n    | array\n    | linkedlist_methods\n    | hashmap_methods\n    | initialization\n    | input\n    | assignation\n    | declare_data_type\n    | castingexpression : expression PLUS expression\n    | expression MINUS expression\n    | expression TIMES expression\n    | LPAREN expression RPAREN\n    | number\n    | division\n    | variablenumber : INTEGER\n    | FLOATvariable : VARIABLEdata_type : UNSIG_INT_8\n                | UNSIG_INT_16\n                | UNSIG_INT_32\n                | UNSIG_INT_64\n                | UNSIG_INT_128\n                | SIG_INT_8\n                | SIG_INT_16\n                | SIG_INT_32\n                | SIG_INT_64\n                | SIG_INT_128\n                | FLOAT_32\n                | FLOAT_64\n                | KW_BOOLEAN\n                | KW_STRING\n                | KW_CHARACTERassign_operators : EQUALS\n                        | TIMESEQUAL \n                        | DIVEQUAL\n                        | MODULUSEQUAL\n                        | PLUSEQUAL \n                        | MINUSEQUALsigint : SIG_INT_8\n    | SIG_INT_16\n    | SIG_INT_32\n    | SIG_INT_64\n    | SIG_INT_128unsigint : UNSIG_INT_8\n    | UNSIG_INT_16\n    | UNSIG_INT_32\n    | UNSIG_INT_64\n    | UNSIG_INT_128flotante : FLOAT_32\n    | FLOAT_64casting : VARIABLE KW_AS sigint\n    | VARIABLE KW_AS unsigint\n    | VARIABLE KW_AS flotantedivision : INTEGER DIVIDE INTEGER\n    | FLOAT DIVIDE FLOATdata : CADENA\n    | INTEGER\n    | CHAR\n    | FLOAT\n    | KW_FALSE\n    | KW_TRUE\n    | tuplecomparator :\n    | EQ\n    | NE\n    | GE\n    | LE\n    | GT\n    | LTlogic : LOR\n    | LANDlvariable : conditional \n    | VARIABLE\n    | KW_TRUE\n    | KW_FALSE\n    | VARIABLE logic lvariable\n    | conditional logic lvariableconditional : VARIABLE comparator data\n    | data comparator VARIABLE\n    | VARIABLE comparator VARIABLE\n    | data comparator datamdata : data\n    | data COMMA mdataprint : KW_PRINT LNOT LPAREN CADENA RPAREN SEMI\n    | KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMIdvariable : KW_LET VARIABLE COLON data_type SEMIarray : KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI\n    | LBRACKET mdata RBRACKET\n    | LBRACKET data SEMI data RBRACKET\n    | KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI\n    | KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI\n    | KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI\n    | KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMIvariables : VARIABLE \n    | VARIABLE COMMA variableswhile : KW_WHILE lvariable LBRACE main_rule RBRACEtuple : LPAREN mdata RPARENinitialization : let_initialization SEMI \n    | const_initialization SEMI \n    | data_str SEMI\n    | input_init SEMIlet_initialization : KW_LET VARIABLE EQUALS data\n    | KW_LET VARIABLE COLON data_type EQUALS data\n    | KW_LET KW_MUT VARIABLE EQUALS data\n    | KW_LET KW_MUT VARIABLE COLON data_type EQUALS data\n    | KW_LET VARIABLE EQUALS expression_var\n    | KW_LET VARIABLE COLON data_type EQUALS expression_var\n    | KW_LET KW_MUT VARIABLE EQUALS expression_var\n    | KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var\n    | KW_LET VARIABLE EQUALS casting\n    | KW_LET KW_MUT VARIABLE EQUALS castingconst_initialization : KW_CONST VARIABLE COLON data_type EQUALS dataarguments : void\n    | variablesfunction : KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACEcontrol_str : for_str\n    | for_str_tagged\n    | if\n    | else\n    | else_if\n    | whilefor_str : KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE\n    | KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACEfor_str_tagged : label COLON for_strrange : INTEGER DOT DOT INTEGER\n    | VARIABLE DOT DOT VARIABLE\n    | LBRACKET mdata RBRACKETlabel : QUOTE VARIABLEdata_str : array\n    | hashmap\n    | linkedlisthashmap : KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN\n    | KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPARENhashmap_methods : VARIABLE hashmap_insert\n    | VARIABLE hashmap_removehashmap_insert : DOT KW_INSERT LPAREN data COMMA data RPAREN SEMIhashmap_remove : DOT KW_REMOVE LPAREN AND data RPAREN SEMIvoid : linkedlist : KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN\n                  | KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPARENlinkedlist : KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN\n                  | KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPARENlinkedlist_methods : VARIABLE linkedlist_push\n    | VARIABLE linkedlist_removelinkedlist_push : DOT KW_PUSH_BACK LPAREN data RPAREN SEMIlinkedlist_remove : DOT KW_REMOVE LPAREN INTEGER RPAREN SEMIif : KW_IF lvariable LBRACE main_rule RBRACEelse : KW_ELSE LBRACE main_rule RBRACEelse_if : KW_ELSE KW_IF lvariable LBRACE main_rule RBRACEfunction : KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACEexpression_var : expression\n                      | datareturn : main_rule\n              | KW_RETURN expression_var SEMI\n              | main_rule KW_RETURN expression_var SEMIinput_init : KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPARENinput : VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMIassignation : VARIABLE assign_operators number SEMI\n    | VARIABLE assign_operators expression SEMI\n    | VARIABLE assign_operators number\n    | VARIABLE assign_operators expressiondeclare_data_type : KW_LET VARIABLE COLON data_type SEMI'
    
_lr_action_items = {'KW_PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,42,43,44,45,68,69,70,71,80,90,91,92,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,117,123,124,139,146,147,154,205,206,216,217,218,219,220,221,222,241,242,244,247,249,251,274,281,285,286,291,303,305,307,309,320,323,334,358,374,380,384,386,389,],[16,16,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-124,-125,-126,-127,-128,-129,-151,-152,-142,-143,-106,-107,-108,-109,16,-25,-20,-169,-23,-24,-21,-22,-59,-60,-61,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-96,-132,16,16,-166,-167,-20,-156,16,-16,-17,-18,-62,-63,-19,-94,-97,16,16,-155,-104,-92,16,-157,-153,-154,-95,-131,-130,-93,-145,-123,-144,16,-158,-98,-165,-100,-99,-101,]),'KW_LET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,42,43,44,45,68,69,70,71,80,90,91,92,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,117,123,124,139,146,147,154,205,206,216,217,218,219,220,221,222,241,242,244,247,249,251,274,281,285,286,291,303,305,307,309,315,320,323,333,334,358,374,380,384,386,389,],[18,18,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-124,-125,-126,-127,-128,-129,-151,-152,-142,-143,-106,-107,-108,-109,18,-25,-20,-169,-23,-24,-21,-22,-59,-60,-61,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-96,-132,18,18,-166,-167,-20,-156,18,-16,-17,-18,-62,-63,-19,-94,-97,18,18,-155,-104,-92,18,-157,-153,-154,-95,-131,-130,-93,-145,328,-123,-144,328,18,-158,-98,-165,-100,-99,-101,]),'KW_FN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,42,43,44,45,68,69,70,71,80,90,91,92,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,117,123,124,139,146,147,154,205,206,216,217,218,219,220,221,222,241,242,244,247,249,251,274,281,285,286,291,303,305,307,309,320,323,334,358,374,380,384,386,389,],[19,19,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-124,-125,-126,-127,-128,-129,-151,-152,-142,-143,-106,-107,-108,-109,19,-25,-20,-169,-23,-24,-21,-22,-59,-60,-61,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-96,-132,19,19,-166,-167,-20,-156,19,-16,-17,-18,-62,-63,-19,-94,-97,19,19,-155,-104,-92,19,-157,-153,-154,-95,-131,-130,-93,-145,-123,-144,19,-158,-98,-165,-100,-99,-101,]),'LBRACKET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,42,43,44,45,68,69,70,71,80,90,91,92,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,117,122,123,124,139,146,147,154,185,205,206,216,217,218,219,220,221,222,241,242,244,247,249,251,274,281,285,286,291,303,305,307,309,315,320,323,324,333,334,341,352,353,358,366,374,380,384,386,389,],[26,26,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-124,-125,-126,-127,-128,-129,-151,-152,-142,-143,-106,-107,-108,-109,26,-25,-20,-169,-23,-24,-21,-22,-59,-60,-61,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,156,174,-96,197,-132,26,26,-166,-167,-20,231,-156,26,-16,-17,-18,-62,-63,-19,-94,-97,26,26,-155,-104,-92,26,-157,-153,-154,-95,-131,-130,-93,-145,26,-123,-144,336,26,26,355,174,156,-158,231,-98,-165,-100,-99,-101,]),'VARIABLE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,18,19,20,21,22,23,24,25,31,33,35,36,39,42,43,44,45,47,49,50,51,52,53,54,56,60,61,62,63,66,68,69,70,71,76,77,78,79,80,81,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,116,117,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,139,146,147,148,149,150,154,179,186,193,205,206,210,216,217,218,219,220,221,222,223,228,239,241,242,244,247,249,251,253,269,274,277,281,285,286,291,303,305,307,309,320,323,328,334,339,347,358,359,374,380,384,386,389,],[17,17,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,55,57,-124,-125,-126,-127,-128,-129,72,76,76,83,84,-151,-152,-142,-143,90,-41,-42,-43,-44,-45,-46,115,-64,-65,-66,-67,-70,-106,-107,-108,-109,-71,-69,-68,-71,17,76,-25,-20,-169,-23,-24,90,-21,-22,-59,-60,-61,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,173,187,-96,194,-132,17,76,-78,-79,76,201,-72,-73,-74,-75,-76,-77,204,17,-166,-167,90,90,90,-20,90,173,-105,-156,17,252,-16,-17,-18,-62,-63,-19,-94,90,90,187,-97,17,17,-155,-104,-92,284,90,17,304,-157,-153,-154,-95,-131,-130,-93,-145,-123,-144,338,17,354,90,-158,90,-98,-165,-100,-99,-101,]),'KW_FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,42,43,44,45,68,69,70,71,73,80,90,91,92,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,117,123,124,139,146,147,154,205,206,216,217,218,219,220,221,222,241,242,244,247,249,251,274,281,285,286,291,303,305,307,309,320,323,334,358,374,380,384,386,389,],[31,31,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-124,-125,-126,-127,-128,-129,-151,-152,-142,-143,-106,-107,-108,-109,31,31,-25,-20,-169,-23,-24,-21,-22,-59,-60,-61,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-96,-132,31,31,-166,-167,-20,-156,31,-16,-17,-18,-62,-63,-19,-94,-97,31,31,-155,-104,-92,31,-157,-153,-154,-95,-131,-130,-93,-145,-123,-144,31,-158,-98,-165,-100,-99,-101,]),'KW_IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,34,42,43,44,45,68,69,70,71,80,90,91,92,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,117,123,124,139,146,147,154,205,206,216,217,218,219,220,221,222,241,242,244,247,249,251,274,281,285,286,291,303,305,307,309,320,323,334,358,374,380,384,386,389,],[33,33,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-124,-125,-126,-127,-128,-129,81,-151,-152,-142,-143,-106,-107,-108,-109,33,-25,-20,-169,-23,-24,-21,-22,-59,-60,-61,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-96,-132,33,33,-166,-167,-20,-156,33,-16,-17,-18,-62,-63,-19,-94,-97,33,33,-155,-104,-92,33,-157,-153,-154,-95,-131,-130,-93,-145,-123,-144,33,-158,-98,-165,-100,-99,-101,]),'KW_ELSE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,42,43,44,45,68,69,70,71,80,90,91,92,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,117,123,124,139,146,147,154,205,206,216,217,218,219,220,221,222,241,242,244,247,249,251,274,281,285,286,291,303,305,307,309,320,323,334,358,374,380,384,386,389,],[34,34,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-124,-125,-126,-127,-128,-129,-151,-152,-142,-143,-106,-107,-108,-109,34,-25,-20,-169,-23,-24,-21,-22,-59,-60,-61,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-96,-132,34,34,-166,-167,-20,-156,34,-16,-17,-18,-62,-63,-19,-94,-97,34,34,-155,-104,-92,34,-157,-153,-154,-95,-131,-130,-93,-145,-123,-144,34,-158,-98,-165,-100,-99,-101,]),'KW_WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,42,43,44,45,68,69,70,71,80,90,91,92,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,117,123,124,139,146,147,154,205,206,216,217,218,219,220,221,222,241,242,244,247,249,251,274,281,285,286,291,303,305,307,309,320,323,334,358,374,380,384,386,389,],[35,35,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-124,-125,-126,-127,-128,-129,-151,-152,-142,-143,-106,-107,-108,-109,35,-25,-20,-169,-23,-24,-21,-22,-59,-60,-61,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-96,-132,35,35,-166,-167,-20,-156,35,-16,-17,-18,-62,-63,-19,-94,-97,35,35,-155,-104,-92,35,-157,-153,-154,-95,-131,-130,-93,-145,-123,-144,35,-158,-98,-165,-100,-99,-101,]),'KW_CONST':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,42,43,44,45,68,69,70,71,80,90,91,92,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,117,123,124,139,146,147,154,205,206,216,217,218,219,220,221,222,241,242,244,247,249,251,274,281,285,286,291,303,305,307,309,320,323,334,358,374,380,384,386,389,],[36,36,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-124,-125,-126,-127,-128,-129,-151,-152,-142,-143,-106,-107,-108,-109,36,-25,-20,-169,-23,-24,-21,-22,-59,-60,-61,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-96,-132,36,36,-166,-167,-20,-156,36,-16,-17,-18,-62,-63,-19,-94,-97,36,36,-155,-104,-92,36,-157,-153,-154,-95,-131,-130,-93,-145,-123,-144,36,-158,-98,-165,-100,-99,-101,]),'QUOTE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,42,43,44,45,68,69,70,71,80,90,91,92,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,117,123,124,139,146,147,154,205,206,216,217,218,219,220,221,222,241,242,244,247,249,251,274,281,285,286,291,303,305,307,309,320,323,334,358,374,380,384,386,389,],[39,39,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-124,-125,-126,-127,-128,-129,-151,-152,-142,-143,-106,-107,-108,-109,39,-25,-20,-169,-23,-24,-21,-22,-59,-60,-61,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-96,-132,39,39,-166,-167,-20,-156,39,-16,-17,-18,-62,-63,-19,-94,-97,39,39,-155,-104,-92,39,-157,-153,-154,-95,-131,-130,-93,-145,-123,-144,39,-158,-98,-165,-100,-99,-101,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,40,42,43,44,45,68,69,70,71,90,91,92,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,117,123,146,147,154,205,216,217,218,219,220,221,222,241,247,249,251,281,285,286,291,303,305,307,309,320,323,358,374,380,384,386,389,],[-146,0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-124,-125,-126,-127,-128,-129,-2,-151,-152,-142,-143,-106,-107,-108,-109,-25,-20,-169,-23,-24,-21,-22,-59,-60,-61,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-96,-132,-166,-167,-20,-156,-16,-17,-18,-62,-63,-19,-94,-97,-155,-104,-92,-157,-153,-154,-95,-131,-130,-93,-145,-123,-144,-158,-98,-165,-100,-99,-101,]),'RBRACE':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,40,42,43,44,45,68,69,70,71,80,90,91,92,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,117,123,124,137,139,146,147,154,198,205,206,207,216,217,218,219,220,221,222,241,242,244,247,248,249,251,274,276,278,281,285,286,291,301,303,305,307,309,320,323,334,345,346,358,371,374,379,380,384,386,389,],[-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-124,-125,-126,-127,-128,-129,-2,-151,-152,-142,-143,-106,-107,-108,-109,-146,-25,-20,-169,-23,-24,-21,-22,-59,-60,-61,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-96,-132,-146,205,-146,-166,-167,-20,247,-156,-146,249,-16,-17,-18,-62,-63,-19,-94,-97,-146,-146,-155,281,-104,-92,-146,303,305,-157,-153,-154,-95,320,-131,-130,-93,-145,-123,-144,-146,358,-161,-158,-162,-98,-163,-165,-100,-99,-101,]),'KW_RETURN':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,40,42,43,44,45,68,69,70,71,90,91,92,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,117,123,146,147,154,205,216,217,218,219,220,221,222,241,247,249,251,281,285,286,291,303,305,307,309,320,323,334,346,358,374,380,384,386,389,],[-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-124,-125,-126,-127,-128,-129,-2,-151,-152,-142,-143,-106,-107,-108,-109,-25,-20,-169,-23,-24,-21,-22,-59,-60,-61,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-96,-132,-166,-167,-20,-156,-16,-17,-18,-62,-63,-19,-94,-97,-155,-104,-92,-157,-153,-154,-95,-131,-130,-93,-145,-123,-144,347,359,-158,-98,-165,-100,-99,-101,]),'SEMI':([8,27,28,29,30,37,38,59,60,61,62,63,64,65,66,90,91,92,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,117,154,155,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,177,182,183,184,193,209,216,217,218,219,220,221,224,234,235,236,241,254,255,258,259,262,268,282,283,287,291,296,297,310,326,327,340,343,349,357,360,361,364,367,370,372,374,377,381,382,384,386,387,388,389,],[-137,68,69,70,71,-138,-139,118,-64,-65,-66,-67,-68,-69,-70,-25,146,147,-23,-24,-21,-22,-59,-60,-61,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-96,-20,222,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-25,-110,-114,-118,-23,-24,-159,-105,251,-16,-17,-18,-62,-63,-19,260,-112,-116,-119,-97,285,286,-111,-115,291,295,-120,307,309,-95,-113,-117,323,-164,-140,-149,-141,363,-150,371,-160,374,376,379,380,-98,384,386,-147,-100,-99,389,-148,-101,]),'LNOT':([16,],[41,]),'DOT':([17,194,196,243,245,308,],[46,243,245,277,279,322,]),'KW_AS':([17,173,],[48,48,]),'EQUALS':([17,55,115,155,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,208,232,290,311,317,330,338,],[49,114,186,223,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,250,269,312,324,331,341,352,]),'TIMESEQUAL':([17,],[50,]),'DIVEQUAL':([17,],[51,]),'MODULUSEQUAL':([17,],[52,]),'PLUSEQUAL':([17,],[53,]),'MINUSEQUAL':([17,],[54,]),'KW_MUT':([18,211,328,],[56,253,339,]),'CADENA':([26,33,35,60,61,62,63,66,67,76,77,78,79,81,85,114,118,119,125,126,127,128,129,130,131,132,133,134,135,136,143,145,174,179,186,193,197,214,223,228,250,257,260,269,295,336,347,348,355,359,363,376,],[60,60,60,-64,-65,-66,-67,-70,60,-71,-69,-68,-71,60,141,60,60,60,60,-78,-79,60,60,-72,-73,-74,-75,-76,-77,60,60,60,60,60,60,-105,60,60,60,60,60,60,60,60,60,60,60,362,60,60,60,60,]),'INTEGER':([26,33,35,47,49,50,51,52,53,54,60,61,62,63,66,67,76,77,78,79,81,95,114,118,119,122,125,126,127,128,129,130,131,132,133,134,135,136,143,144,145,148,149,150,151,174,179,186,193,197,214,223,228,250,257,260,269,279,295,336,347,355,359,363,376,],[61,61,61,93,-41,-42,-43,-44,-45,-46,-64,-65,-66,-67,-70,61,-71,-69,-68,-71,61,93,182,61,61,196,61,-78,-79,61,61,-72,-73,-74,-75,-76,-77,61,61,213,61,93,93,93,219,61,182,182,-105,61,61,182,264,61,61,61,182,306,61,61,182,61,182,61,61,]),'CHAR':([26,33,35,60,61,62,63,66,67,76,77,78,79,81,114,118,119,125,126,127,128,129,130,131,132,133,134,135,136,143,145,174,179,186,193,197,214,223,228,250,257,260,269,295,336,347,355,359,363,376,],[62,62,62,-64,-65,-66,-67,-70,62,-71,-69,-68,-71,62,62,62,62,62,-78,-79,62,62,-72,-73,-74,-75,-76,-77,62,62,62,62,62,62,-105,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'FLOAT':([26,33,35,47,49,50,51,52,53,54,60,61,62,63,66,67,76,77,78,79,81,95,114,118,119,125,126,127,128,129,130,131,132,133,134,135,136,143,145,148,149,150,152,174,179,186,193,197,214,223,228,250,257,260,269,295,336,347,355,359,363,376,],[63,63,63,94,-41,-42,-43,-44,-45,-46,-64,-65,-66,-67,-70,63,-71,-69,-68,-71,63,94,183,63,63,63,-78,-79,63,63,-72,-73,-74,-75,-76,-77,63,63,63,94,94,94,220,63,183,183,-105,63,63,183,265,63,63,63,183,63,63,183,63,183,63,63,]),'KW_FALSE':([26,33,35,60,61,62,63,66,67,76,77,78,79,81,114,118,119,125,126,127,128,129,130,131,132,133,134,135,136,143,145,174,179,186,193,197,214,223,228,250,257,260,269,295,336,347,355,359,363,376,],[64,78,78,-64,-65,-66,-67,-70,64,-71,-69,-68,-71,78,64,64,64,78,-78,-79,78,64,-72,-73,-74,-75,-76,-77,64,64,64,64,64,64,-105,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'KW_TRUE':([26,33,35,60,61,62,63,66,67,76,77,78,79,81,114,118,119,125,126,127,128,129,130,131,132,133,134,135,136,143,145,174,179,186,193,197,214,223,228,250,257,260,269,295,336,347,355,359,363,376,],[65,77,77,-64,-65,-66,-67,-70,65,-71,-69,-68,-71,77,65,65,65,77,-78,-79,77,65,-72,-73,-74,-75,-76,-77,65,65,65,65,65,65,-105,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'LPAREN':([26,33,35,41,47,49,50,51,52,53,54,57,60,61,62,63,66,67,76,77,78,79,81,86,87,88,89,95,114,118,119,125,126,127,128,129,130,131,132,133,134,135,136,143,145,148,149,150,174,179,186,193,197,214,223,228,250,257,260,269,292,293,294,295,318,319,335,336,347,355,359,363,365,376,378,],[67,67,67,85,95,-41,-42,-43,-44,-45,-46,116,-64,-65,-66,-67,-70,67,-71,-69,-68,-71,67,142,143,144,145,95,179,67,67,67,-78,-79,67,67,-72,-73,-74,-75,-76,-77,67,67,67,95,95,95,67,228,179,-105,67,67,179,228,67,67,67,179,313,314,315,67,332,333,348,67,228,67,228,67,375,67,385,]),'COLON':([32,55,83,84,115,178,180,181,227,229,230,237,238,271,272,325,337,338,342,354,356,],[73,113,140,-136,185,227,229,230,263,266,267,271,272,299,300,337,351,353,356,366,369,]),'LBRACE':([34,60,61,62,63,64,65,66,74,75,76,77,78,82,138,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,193,194,195,199,200,201,202,203,204,240,280,304,306,321,],[80,-64,-65,-66,-67,-68,-69,-70,124,-80,-81,-82,-83,139,206,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-105,242,244,-85,-84,-88,-86,-89,-87,274,-135,-134,-133,334,]),'KW_READ_LINE':([46,],[86,]),'KW_PUSH_BACK':([46,],[87,]),'KW_REMOVE':([46,],[88,]),'KW_INSERT':([46,],[89,]),'SIG_INT_8':([48,113,140,156,185,225,231,270,302,],[101,163,163,163,163,163,163,163,163,]),'SIG_INT_16':([48,113,140,156,185,225,231,270,302,],[102,164,164,164,164,164,164,164,164,]),'SIG_INT_32':([48,113,140,156,185,225,231,270,302,],[103,165,165,165,165,165,165,165,165,]),'SIG_INT_64':([48,113,140,156,185,225,231,270,302,],[104,166,166,166,166,166,166,166,166,]),'SIG_INT_128':([48,113,140,156,185,225,231,270,302,],[105,167,167,167,167,167,167,167,167,]),'UNSIG_INT_8':([48,113,140,156,185,225,231,270,302,],[106,158,158,158,158,158,158,158,158,]),'UNSIG_INT_16':([48,113,140,156,185,225,231,270,302,],[107,159,159,159,159,159,159,159,159,]),'UNSIG_INT_32':([48,113,140,156,185,225,231,270,302,],[108,160,160,160,160,160,160,160,160,]),'UNSIG_INT_64':([48,113,140,156,185,225,231,270,302,],[109,161,161,161,161,161,161,161,161,]),'UNSIG_INT_128':([48,113,140,156,185,225,231,270,302,],[110,162,162,162,162,162,162,162,162,]),'FLOAT_32':([48,113,140,156,185,225,231,270,302,],[111,168,168,168,168,168,168,168,168,]),'FLOAT_64':([48,113,140,156,185,225,231,270,302,],[112,169,169,169,169,169,169,169,169,]),'RBRACKET':([58,59,60,61,62,63,64,65,66,121,191,192,193,226,246,289,316,349,350,367,368,373,383,],[117,-90,-64,-65,-66,-67,-68,-69,-70,-90,241,-91,-105,262,280,311,330,-90,364,-90,377,381,387,]),'COMMA':([59,60,61,62,63,64,65,66,121,141,182,183,187,193,215,264,265,349,367,],[119,-64,-65,-66,-67,-68,-69,-70,119,210,-65,-67,239,-105,257,-65,-67,119,119,]),'EQ':([60,61,62,63,66,76,77,78,79,193,],[-64,-65,-66,-67,-70,130,-69,-68,130,-105,]),'NE':([60,61,62,63,66,76,77,78,79,193,],[-64,-65,-66,-67,-70,131,-69,-68,131,-105,]),'GE':([60,61,62,63,66,76,77,78,79,193,],[-64,-65,-66,-67,-70,132,-69,-68,132,-105,]),'LE':([60,61,62,63,66,76,77,78,79,193,],[-64,-65,-66,-67,-70,133,-69,-68,133,-105,]),'GT':([60,61,62,63,66,76,77,78,79,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,193,261,275,298,],[-64,-65,-66,-67,-70,134,-69,-68,134,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-105,290,302,317,]),'LT':([60,61,62,63,66,76,77,78,79,157,193,233,],[-64,-65,-66,-67,-70,135,-69,-68,135,225,-105,270,]),'RPAREN':([60,61,62,63,64,65,66,90,93,94,96,97,116,117,120,121,141,153,154,182,183,187,188,189,190,192,193,212,213,216,217,218,219,220,221,241,252,256,264,265,273,284,288,291,313,314,329,332,344,362,374,375,384,385,386,389,],[-64,-65,-66,-67,-68,-69,-70,-25,-23,-24,-21,-22,-146,-96,193,-90,209,221,-20,-23,-24,-102,240,-121,-122,-91,-105,254,255,-16,-17,-18,-62,-63,-19,-97,283,287,-23,-24,-103,308,310,-95,326,327,340,343,357,372,-98,382,-100,388,-99,-101,]),'LOR':([60,61,62,63,64,65,66,75,76,193,201,202,203,204,],[-64,-65,-66,-67,-68,-69,-70,126,126,-105,-88,-86,-89,-87,]),'LAND':([60,61,62,63,64,65,66,75,76,193,201,202,203,204,],[-64,-65,-66,-67,-68,-69,-70,127,127,-105,-88,-86,-89,-87,]),'KW_IN':([72,],[122,]),'PLUS':([90,91,92,93,94,96,97,153,154,173,182,183,184,216,217,218,219,220,221,264,265,],[-25,-20,148,-23,-24,-21,-22,148,-20,-25,-23,-24,148,148,148,148,-62,-63,-19,-23,-24,]),'MINUS':([90,91,92,93,94,96,97,153,154,173,182,183,184,216,217,218,219,220,221,240,264,265,],[-25,-20,149,-23,-24,-21,-22,149,-20,-25,-23,-24,149,149,149,149,-62,-63,-19,275,-23,-24,]),'TIMES':([90,91,92,93,94,96,97,153,154,173,182,183,184,216,217,218,219,220,221,264,265,],[-25,-20,150,-23,-24,-21,-22,150,-20,-25,-23,-24,150,150,150,150,-62,-63,-19,-23,-24,]),'DIVIDE':([93,94,182,183,264,265,],[151,152,151,152,151,152,]),'KW_LINKEDLIST':([113,114,185,186,312,331,],[157,181,233,238,325,342,]),'KW_BOOLEAN':([113,140,156,185,225,231,270,302,],[170,170,170,170,170,170,170,170,]),'KW_STRING':([113,140,156,185,225,231,270,302,],[171,171,171,171,171,171,171,171,]),'KW_CHARACTER':([113,140,156,185,225,231,270,302,],[172,172,172,172,172,172,172,172,]),'KW_IO':([114,],[178,]),'KW_HASHMAP':([114,186,],[180,237,]),'AND':([142,144,],[211,214,]),'KW_STDIN':([263,],[292,]),'KW_NEW':([266,299,351,369,],[293,318,365,378,]),'KW_FROM':([267,300,],[294,319,]),'KW_EXPECT':([322,],[335,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'main_rule':([0,2,80,124,139,206,242,244,274,334,],[1,40,137,198,207,248,276,278,301,346,]),'father_rule':([0,2,80,124,139,206,242,244,274,334,],[2,2,2,2,2,2,2,2,2,2,]),'print':([0,2,80,124,139,206,242,244,274,334,],[3,3,3,3,3,3,3,3,3,3,]),'dvariable':([0,2,80,124,139,206,242,244,274,334,],[4,4,4,4,4,4,4,4,4,4,]),'function':([0,2,80,124,139,206,242,244,274,334,],[5,5,5,5,5,5,5,5,5,5,]),'control_str':([0,2,80,124,139,206,242,244,274,334,],[6,6,6,6,6,6,6,6,6,6,]),'void':([0,2,80,116,124,139,206,242,244,274,334,],[7,7,7,189,7,7,7,7,7,7,7,]),'array':([0,2,80,124,139,206,242,244,274,315,333,334,],[8,8,8,8,8,8,8,8,8,329,344,8,]),'linkedlist_methods':([0,2,80,124,139,206,242,244,274,334,],[9,9,9,9,9,9,9,9,9,9,]),'hashmap_methods':([0,2,80,124,139,206,242,244,274,334,],[10,10,10,10,10,10,10,10,10,10,]),'initialization':([0,2,80,124,139,206,242,244,274,334,],[11,11,11,11,11,11,11,11,11,11,]),'input':([0,2,80,124,139,206,242,244,274,334,],[12,12,12,12,12,12,12,12,12,12,]),'assignation':([0,2,80,124,139,206,242,244,274,334,],[13,13,13,13,13,13,13,13,13,13,]),'declare_data_type':([0,2,80,124,139,206,242,244,274,334,],[14,14,14,14,14,14,14,14,14,14,]),'casting':([0,2,80,114,124,139,186,206,242,244,274,334,],[15,15,15,177,15,15,236,15,15,15,15,15,]),'for_str':([0,2,73,80,124,139,206,242,244,274,334,],[20,20,123,20,20,20,20,20,20,20,20,]),'for_str_tagged':([0,2,80,124,139,206,242,244,274,334,],[21,21,21,21,21,21,21,21,21,21,]),'if':([0,2,80,124,139,206,242,244,274,334,],[22,22,22,22,22,22,22,22,22,22,]),'else':([0,2,80,124,139,206,242,244,274,334,],[23,23,23,23,23,23,23,23,23,23,]),'else_if':([0,2,80,124,139,206,242,244,274,334,],[24,24,24,24,24,24,24,24,24,24,]),'while':([0,2,80,124,139,206,242,244,274,334,],[25,25,25,25,25,25,25,25,25,25,]),'let_initialization':([0,2,80,124,139,206,242,244,274,334,],[27,27,27,27,27,27,27,27,27,27,]),'const_initialization':([0,2,80,124,139,206,242,244,274,334,],[28,28,28,28,28,28,28,28,28,28,]),'data_str':([0,2,80,124,139,206,242,244,274,334,],[29,29,29,29,29,29,29,29,29,29,]),'input_init':([0,2,80,124,139,206,242,244,274,334,],[30,30,30,30,30,30,30,30,30,30,]),'label':([0,2,80,124,139,206,242,244,274,334,],[32,32,32,32,32,32,32,32,32,32,]),'hashmap':([0,2,80,124,139,206,242,244,274,334,],[37,37,37,37,37,37,37,37,37,37,]),'linkedlist':([0,2,80,124,139,206,242,244,274,334,],[38,38,38,38,38,38,38,38,38,38,]),'linkedlist_push':([17,],[42,]),'linkedlist_remove':([17,],[43,]),'hashmap_insert':([17,],[44,]),'hashmap_remove':([17,],[45,]),'assign_operators':([17,],[47,]),'mdata':([26,67,119,174,179,197,228,336,355,],[58,120,192,226,120,246,120,350,368,]),'data':([26,33,35,67,81,114,118,119,125,128,129,136,143,145,174,179,186,197,214,223,228,250,257,260,269,295,336,347,355,359,363,376,],[59,79,79,121,79,175,191,121,79,79,202,203,212,215,121,121,234,121,256,258,121,282,288,289,296,316,349,361,367,361,373,383,]),'tuple':([26,33,35,67,81,114,118,119,125,128,129,136,143,145,174,179,186,197,214,223,228,250,257,260,269,295,336,347,355,359,363,376,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'lvariable':([33,35,81,125,128,],[74,82,138,199,200,]),'conditional':([33,35,81,125,128,],[75,75,75,75,75,]),'number':([47,95,114,148,149,150,179,186,223,228,269,347,359,],[91,154,154,154,154,154,154,154,154,154,154,154,154,]),'expression':([47,95,114,148,149,150,179,186,223,228,269,347,359,],[92,153,184,216,217,218,153,184,184,153,184,184,184,]),'division':([47,95,114,148,149,150,179,186,223,228,269,347,359,],[96,96,96,96,96,96,96,96,96,96,96,96,96,]),'variable':([47,95,114,148,149,150,179,186,223,228,269,347,359,],[97,97,97,97,97,97,97,97,97,97,97,97,97,]),'sigint':([48,],[98,]),'unsigint':([48,],[99,]),'flotante':([48,],[100,]),'logic':([75,76,],[125,128,]),'comparator':([76,79,],[129,136,]),'data_type':([113,140,156,185,225,231,270,302,],[155,208,224,232,261,268,298,321,]),'expression_var':([114,186,223,269,347,359,],[176,235,259,297,360,370,]),'arguments':([116,],[188,]),'variables':([116,239,],[190,273,]),'range':([122,],[195,]),'return':([334,],[345,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> main_rule","S'",1,None,None,None),
  ('main_rule -> father_rule','main_rule',1,'p_main_rule','pyacc.py',14),
  ('main_rule -> father_rule main_rule','main_rule',2,'p_main_rule','pyacc.py',15),
  ('father_rule -> print','father_rule',1,'p_father_rule','pyacc.py',20),
  ('father_rule -> dvariable','father_rule',1,'p_father_rule','pyacc.py',21),
  ('father_rule -> function','father_rule',1,'p_father_rule','pyacc.py',22),
  ('father_rule -> control_str','father_rule',1,'p_father_rule','pyacc.py',23),
  ('father_rule -> void','father_rule',1,'p_father_rule','pyacc.py',24),
  ('father_rule -> array','father_rule',1,'p_father_rule','pyacc.py',25),
  ('father_rule -> linkedlist_methods','father_rule',1,'p_father_rule','pyacc.py',26),
  ('father_rule -> hashmap_methods','father_rule',1,'p_father_rule','pyacc.py',27),
  ('father_rule -> initialization','father_rule',1,'p_father_rule','pyacc.py',28),
  ('father_rule -> input','father_rule',1,'p_father_rule','pyacc.py',29),
  ('father_rule -> assignation','father_rule',1,'p_father_rule','pyacc.py',30),
  ('father_rule -> declare_data_type','father_rule',1,'p_father_rule','pyacc.py',31),
  ('father_rule -> casting','father_rule',1,'p_father_rule','pyacc.py',32),
  ('expression -> expression PLUS expression','expression',3,'p_expression','pyacc.py',38),
  ('expression -> expression MINUS expression','expression',3,'p_expression','pyacc.py',39),
  ('expression -> expression TIMES expression','expression',3,'p_expression','pyacc.py',40),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','pyacc.py',41),
  ('expression -> number','expression',1,'p_expression','pyacc.py',42),
  ('expression -> division','expression',1,'p_expression','pyacc.py',43),
  ('expression -> variable','expression',1,'p_expression','pyacc.py',44),
  ('number -> INTEGER','number',1,'p_number','pyacc.py',49),
  ('number -> FLOAT','number',1,'p_number','pyacc.py',50),
  ('variable -> VARIABLE','variable',1,'p_variable','pyacc.py',53),
  ('data_type -> UNSIG_INT_8','data_type',1,'p_data_type','pyacc.py',57),
  ('data_type -> UNSIG_INT_16','data_type',1,'p_data_type','pyacc.py',58),
  ('data_type -> UNSIG_INT_32','data_type',1,'p_data_type','pyacc.py',59),
  ('data_type -> UNSIG_INT_64','data_type',1,'p_data_type','pyacc.py',60),
  ('data_type -> UNSIG_INT_128','data_type',1,'p_data_type','pyacc.py',61),
  ('data_type -> SIG_INT_8','data_type',1,'p_data_type','pyacc.py',62),
  ('data_type -> SIG_INT_16','data_type',1,'p_data_type','pyacc.py',63),
  ('data_type -> SIG_INT_32','data_type',1,'p_data_type','pyacc.py',64),
  ('data_type -> SIG_INT_64','data_type',1,'p_data_type','pyacc.py',65),
  ('data_type -> SIG_INT_128','data_type',1,'p_data_type','pyacc.py',66),
  ('data_type -> FLOAT_32','data_type',1,'p_data_type','pyacc.py',67),
  ('data_type -> FLOAT_64','data_type',1,'p_data_type','pyacc.py',68),
  ('data_type -> KW_BOOLEAN','data_type',1,'p_data_type','pyacc.py',69),
  ('data_type -> KW_STRING','data_type',1,'p_data_type','pyacc.py',70),
  ('data_type -> KW_CHARACTER','data_type',1,'p_data_type','pyacc.py',71),
  ('assign_operators -> EQUALS','assign_operators',1,'p_assign_operators','pyacc.py',75),
  ('assign_operators -> TIMESEQUAL','assign_operators',1,'p_assign_operators','pyacc.py',76),
  ('assign_operators -> DIVEQUAL','assign_operators',1,'p_assign_operators','pyacc.py',77),
  ('assign_operators -> MODULUSEQUAL','assign_operators',1,'p_assign_operators','pyacc.py',78),
  ('assign_operators -> PLUSEQUAL','assign_operators',1,'p_assign_operators','pyacc.py',79),
  ('assign_operators -> MINUSEQUAL','assign_operators',1,'p_assign_operators','pyacc.py',80),
  ('sigint -> SIG_INT_8','sigint',1,'p_semantic_cast_sigint','pyacc.py',84),
  ('sigint -> SIG_INT_16','sigint',1,'p_semantic_cast_sigint','pyacc.py',85),
  ('sigint -> SIG_INT_32','sigint',1,'p_semantic_cast_sigint','pyacc.py',86),
  ('sigint -> SIG_INT_64','sigint',1,'p_semantic_cast_sigint','pyacc.py',87),
  ('sigint -> SIG_INT_128','sigint',1,'p_semantic_cast_sigint','pyacc.py',88),
  ('unsigint -> UNSIG_INT_8','unsigint',1,'p_semantic_cast_unsigint','pyacc.py',91),
  ('unsigint -> UNSIG_INT_16','unsigint',1,'p_semantic_cast_unsigint','pyacc.py',92),
  ('unsigint -> UNSIG_INT_32','unsigint',1,'p_semantic_cast_unsigint','pyacc.py',93),
  ('unsigint -> UNSIG_INT_64','unsigint',1,'p_semantic_cast_unsigint','pyacc.py',94),
  ('unsigint -> UNSIG_INT_128','unsigint',1,'p_semantic_cast_unsigint','pyacc.py',95),
  ('flotante -> FLOAT_32','flotante',1,'p_semantic_cast_float','pyacc.py',98),
  ('flotante -> FLOAT_64','flotante',1,'p_semantic_cast_float','pyacc.py',99),
  ('casting -> VARIABLE KW_AS sigint','casting',3,'p_semantic_casting','pyacc.py',102),
  ('casting -> VARIABLE KW_AS unsigint','casting',3,'p_semantic_casting','pyacc.py',103),
  ('casting -> VARIABLE KW_AS flotante','casting',3,'p_semantic_casting','pyacc.py',104),
  ('division -> INTEGER DIVIDE INTEGER','division',3,'p_semantic_division','pyacc.py',107),
  ('division -> FLOAT DIVIDE FLOAT','division',3,'p_semantic_division','pyacc.py',108),
  ('data -> CADENA','data',1,'p_data','pyacc.py',111),
  ('data -> INTEGER','data',1,'p_data','pyacc.py',112),
  ('data -> CHAR','data',1,'p_data','pyacc.py',113),
  ('data -> FLOAT','data',1,'p_data','pyacc.py',114),
  ('data -> KW_FALSE','data',1,'p_data','pyacc.py',115),
  ('data -> KW_TRUE','data',1,'p_data','pyacc.py',116),
  ('data -> tuple','data',1,'p_data','pyacc.py',117),
  ('comparator -> <empty>','comparator',0,'p_comparator','pyacc.py',120),
  ('comparator -> EQ','comparator',1,'p_comparator','pyacc.py',121),
  ('comparator -> NE','comparator',1,'p_comparator','pyacc.py',122),
  ('comparator -> GE','comparator',1,'p_comparator','pyacc.py',123),
  ('comparator -> LE','comparator',1,'p_comparator','pyacc.py',124),
  ('comparator -> GT','comparator',1,'p_comparator','pyacc.py',125),
  ('comparator -> LT','comparator',1,'p_comparator','pyacc.py',126),
  ('logic -> LOR','logic',1,'p_logic','pyacc.py',129),
  ('logic -> LAND','logic',1,'p_logic','pyacc.py',130),
  ('lvariable -> conditional','lvariable',1,'p_logic_variable','pyacc.py',133),
  ('lvariable -> VARIABLE','lvariable',1,'p_logic_variable','pyacc.py',134),
  ('lvariable -> KW_TRUE','lvariable',1,'p_logic_variable','pyacc.py',135),
  ('lvariable -> KW_FALSE','lvariable',1,'p_logic_variable','pyacc.py',136),
  ('lvariable -> VARIABLE logic lvariable','lvariable',3,'p_logic_variable','pyacc.py',137),
  ('lvariable -> conditional logic lvariable','lvariable',3,'p_logic_variable','pyacc.py',138),
  ('conditional -> VARIABLE comparator data','conditional',3,'p_conditional','pyacc.py',141),
  ('conditional -> data comparator VARIABLE','conditional',3,'p_conditional','pyacc.py',142),
  ('conditional -> VARIABLE comparator VARIABLE','conditional',3,'p_conditional','pyacc.py',143),
  ('conditional -> data comparator data','conditional',3,'p_conditional','pyacc.py',144),
  ('mdata -> data','mdata',1,'p_mdata','pyacc.py',147),
  ('mdata -> data COMMA mdata','mdata',3,'p_mdata','pyacc.py',148),
  ('print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI','print',6,'p_print','pyacc.py',151),
  ('print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI','print',8,'p_print','pyacc.py',152),
  ('dvariable -> KW_LET VARIABLE COLON data_type SEMI','dvariable',5,'p_declare_variable','pyacc.py',155),
  ('array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI','array',7,'p_array','pyacc.py',158),
  ('array -> LBRACKET mdata RBRACKET','array',3,'p_array','pyacc.py',159),
  ('array -> LBRACKET data SEMI data RBRACKET','array',5,'p_array','pyacc.py',160),
  ('array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI','array',13,'p_array','pyacc.py',161),
  ('array -> KW_LET VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI','array',15,'p_array','pyacc.py',162),
  ('array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI','array',14,'p_array','pyacc.py',163),
  ('array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI','array',16,'p_array','pyacc.py',164),
  ('variables -> VARIABLE','variables',1,'p_variables','pyacc.py',167),
  ('variables -> VARIABLE COMMA variables','variables',3,'p_variables','pyacc.py',168),
  ('while -> KW_WHILE lvariable LBRACE main_rule RBRACE','while',5,'p_while','pyacc.py',171),
  ('tuple -> LPAREN mdata RPAREN','tuple',3,'p_tuple','pyacc.py',177),
  ('initialization -> let_initialization SEMI','initialization',2,'p_initialization','pyacc.py',181),
  ('initialization -> const_initialization SEMI','initialization',2,'p_initialization','pyacc.py',182),
  ('initialization -> data_str SEMI','initialization',2,'p_initialization','pyacc.py',183),
  ('initialization -> input_init SEMI','initialization',2,'p_initialization','pyacc.py',184),
  ('let_initialization -> KW_LET VARIABLE EQUALS data','let_initialization',4,'p_let_initialization','pyacc.py',188),
  ('let_initialization -> KW_LET VARIABLE COLON data_type EQUALS data','let_initialization',6,'p_let_initialization','pyacc.py',189),
  ('let_initialization -> KW_LET KW_MUT VARIABLE EQUALS data','let_initialization',5,'p_let_initialization','pyacc.py',190),
  ('let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS data','let_initialization',7,'p_let_initialization','pyacc.py',191),
  ('let_initialization -> KW_LET VARIABLE EQUALS expression_var','let_initialization',4,'p_let_initialization','pyacc.py',192),
  ('let_initialization -> KW_LET VARIABLE COLON data_type EQUALS expression_var','let_initialization',6,'p_let_initialization','pyacc.py',193),
  ('let_initialization -> KW_LET KW_MUT VARIABLE EQUALS expression_var','let_initialization',5,'p_let_initialization','pyacc.py',194),
  ('let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var','let_initialization',7,'p_let_initialization','pyacc.py',195),
  ('let_initialization -> KW_LET VARIABLE EQUALS casting','let_initialization',4,'p_let_initialization','pyacc.py',196),
  ('let_initialization -> KW_LET KW_MUT VARIABLE EQUALS casting','let_initialization',5,'p_let_initialization','pyacc.py',197),
  ('const_initialization -> KW_CONST VARIABLE COLON data_type EQUALS data','const_initialization',6,'p_const_initialization','pyacc.py',201),
  ('arguments -> void','arguments',1,'p_arguments','pyacc.py',205),
  ('arguments -> variables','arguments',1,'p_arguments','pyacc.py',206),
  ('function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE','function',8,'p_function','pyacc.py',210),
  ('control_str -> for_str','control_str',1,'p_control_str','pyacc.py',214),
  ('control_str -> for_str_tagged','control_str',1,'p_control_str','pyacc.py',215),
  ('control_str -> if','control_str',1,'p_control_str','pyacc.py',216),
  ('control_str -> else','control_str',1,'p_control_str','pyacc.py',217),
  ('control_str -> else_if','control_str',1,'p_control_str','pyacc.py',218),
  ('control_str -> while','control_str',1,'p_control_str','pyacc.py',219),
  ('for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE','for_str',7,'p_for_str','pyacc.py',223),
  ('for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE','for_str',7,'p_for_str','pyacc.py',224),
  ('for_str_tagged -> label COLON for_str','for_str_tagged',3,'p_for_str_tagged','pyacc.py',228),
  ('range -> INTEGER DOT DOT INTEGER','range',4,'p_range','pyacc.py',232),
  ('range -> VARIABLE DOT DOT VARIABLE','range',4,'p_range','pyacc.py',233),
  ('range -> LBRACKET mdata RBRACKET','range',3,'p_range','pyacc.py',234),
  ('label -> QUOTE VARIABLE','label',2,'p_label','pyacc.py',238),
  ('data_str -> array','data_str',1,'p_data_str','pyacc.py',242),
  ('data_str -> hashmap','data_str',1,'p_data_str','pyacc.py',243),
  ('data_str -> linkedlist','data_str',1,'p_data_str','pyacc.py',244),
  ('hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN','hashmap',9,'p_hashmap','pyacc.py',248),
  ('hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN','hashmap',10,'p_hashmap','pyacc.py',249),
  ('hashmap_methods -> VARIABLE hashmap_insert','hashmap_methods',2,'p_hashmap_methods','pyacc.py',253),
  ('hashmap_methods -> VARIABLE hashmap_remove','hashmap_methods',2,'p_hashmap_methods','pyacc.py',254),
  ('hashmap_insert -> DOT KW_INSERT LPAREN data COMMA data RPAREN SEMI','hashmap_insert',8,'p_hashmap_insert','pyacc.py',258),
  ('hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI','hashmap_remove',7,'p_hashmap_remove','pyacc.py',262),
  ('void -> <empty>','void',0,'p_void','pyacc.py',266),
  ('linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN','linkedlist',14,'p_linkedlist_empty','pyacc.py',274),
  ('linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN','linkedlist',15,'p_linkedlist_empty','pyacc.py',275),
  ('linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN','linkedlist',10,'p_linkedlist_array','pyacc.py',278),
  ('linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN','linkedlist',11,'p_linkedlist_array','pyacc.py',279),
  ('linkedlist_methods -> VARIABLE linkedlist_push','linkedlist_methods',2,'p_linkedlist_methods','pyacc.py',282),
  ('linkedlist_methods -> VARIABLE linkedlist_remove','linkedlist_methods',2,'p_linkedlist_methods','pyacc.py',283),
  ('linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI','linkedlist_push',6,'p_linkedlist_push','pyacc.py',286),
  ('linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI','linkedlist_remove',6,'p_linkedlist_remove','pyacc.py',289),
  ('if -> KW_IF lvariable LBRACE main_rule RBRACE','if',5,'p_if','pyacc.py',294),
  ('else -> KW_ELSE LBRACE main_rule RBRACE','else',4,'p_else','pyacc.py',297),
  ('else_if -> KW_ELSE KW_IF lvariable LBRACE main_rule RBRACE','else_if',6,'p_else_if','pyacc.py',300),
  ('function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE','function',11,'p_function_return','pyacc.py',305),
  ('expression_var -> expression','expression_var',1,'p_expression_var','pyacc.py',308),
  ('expression_var -> data','expression_var',1,'p_expression_var','pyacc.py',309),
  ('return -> main_rule','return',1,'p_return_statement','pyacc.py',312),
  ('return -> KW_RETURN expression_var SEMI','return',3,'p_return_statement','pyacc.py',313),
  ('return -> main_rule KW_RETURN expression_var SEMI','return',4,'p_return_statement','pyacc.py',314),
  ('input_init -> KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN','input_init',9,'p_input_init','pyacc.py',319),
  ('input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI','input',14,'p_input','pyacc.py',322),
  ('assignation -> VARIABLE assign_operators number SEMI','assignation',4,'p_assignation','pyacc.py',327),
  ('assignation -> VARIABLE assign_operators expression SEMI','assignation',4,'p_assignation','pyacc.py',328),
  ('assignation -> VARIABLE assign_operators number','assignation',3,'p_assignation','pyacc.py',329),
  ('assignation -> VARIABLE assign_operators expression','assignation',3,'p_assignation','pyacc.py',330),
  ('declare_data_type -> KW_LET VARIABLE COLON data_type SEMI','declare_data_type',5,'p_declare_datat_type','pyacc.py',335),
]
