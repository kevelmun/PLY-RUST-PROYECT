
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND CADENA CHAR COLON COMMA COMMENT DIVEQUAL DIVIDE DOT EQ EQUALS FLOAT FLOAT_32 FLOAT_64 GE GT INTEGER KW_BOOLEAN KW_CHARACTER KW_CONST KW_ELSE KW_EXPECT KW_FALSE KW_FN KW_FOR KW_FROM KW_HASHMAP KW_IF KW_IN KW_INSERT KW_IO KW_LET KW_LINKEDLIST KW_MUT KW_NEW KW_PRINT KW_PUSH_BACK KW_READ_LINE KW_REMOVE KW_RETURN KW_STDIN KW_STRING KW_TRUE KW_WHILE LAND LBRACE LBRACKET LE LNOT LOR LPAREN LT MINUS MINUSEQUAL MODULUSEQUAL NE PLUS PLUSEQUAL QUOTE RBRACE RBRACKET RPAREN SEMI SIG_INT_128 SIG_INT_16 SIG_INT_32 SIG_INT_64 SIG_INT_8 TIMES TIMESEQUAL UNSIG_INT_128 UNSIG_INT_16 UNSIG_INT_32 UNSIG_INT_64 UNSIG_INT_8 VARIABLEmain_rule : father_rule\n    | father_rule main_rulefather_rule : print\n    | dvariable\n    | function\n    | control_str\n    | void\n    | data_str\n    | array\n    | linkedlist_methods\n    | hashmap_methods\n    | initialization\n    | input\n    | assignation\n    | declare_data_typeexpression : expression PLUS expression\n    | expression MINUS expression\n    | expression TIMES expression\n    | LPAREN expression RPAREN\n    | number\n    | divisionnumber : INTEGER\n    | FLOAT\n    | VARIABLEdata_type : UNSIG_INT_8\n                | UNSIG_INT_16\n                | UNSIG_INT_32\n                | UNSIG_INT_64\n                | UNSIG_INT_128\n                | SIG_INT_8\n                | SIG_INT_16\n                | SIG_INT_32\n                | SIG_INT_64\n                | SIG_INT_128\n                | FLOAT_32\n                | FLOAT_64\n                | KW_BOOLEAN\n                | KW_STRING\n                | KW_CHARACTERassign_operators : EQUALS\n                        | TIMESEQUAL \n                        | DIVEQUAL\n                        | MODULUSEQUAL\n                        | PLUSEQUAL \n                        | MINUSEQUALdivision : INTEGER DIVIDE INTEGER\n    | FLOAT DIVIDE FLOATdata : CADENA\n    | INTEGER\n    | CHAR\n    | FLOAT\n    | KW_FALSE\n    | KW_TRUE\n    | tuplecomparator :\n    | EQ\n    | NE\n    | GE\n    | LE\n    | GT\n    | LTlogic : LOR\n    | LANDlvariable : VARIABLE logic VARIABLEconditional : VARIABLE comparator data\n    | LPAREN lvariable RPAREN comparator datamdata : data\n    | data COMMA mdataprint : KW_PRINT LNOT LPAREN CADENA RPAREN SEMI\n    | KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMIdvariable : KW_LET VARIABLE SEMIarray : KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI\n    | LBRACKET mdata RBRACKET\n    | LBRACKET data SEMI data RBRACKET\n    | KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI\n    | KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMIvariables : VARIABLE \n    | VARIABLE COMMA variableswhile : KW_WHILE conditional LBRACE main_rule RBRACEtuple : LPAREN mdata RPARENinitialization : let_initialization SEMI \n    | const_initialization SEMI \n    | data_str SEMI\n    | input_init SEMIlet_initialization : KW_LET VARIABLE EQUALS data\n    | KW_LET VARIABLE COLON data_type EQUALS data\n    | KW_LET KW_MUT VARIABLE EQUALS data\n    | KW_LET KW_MUT VARIABLE COLON data_type EQUALS data\n    | KW_LET VARIABLE EQUALS expression_var\n    | KW_LET VARIABLE COLON data_type EQUALS expression_var\n    | KW_LET KW_MUT VARIABLE EQUALS expression_var\n    | KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_varconst_initialization : KW_CONST VARIABLE COLON data_type EQUALS dataarguments : void\n    | variablesfunction : KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACEcontrol_str : for_str\n    | for_str_tagged\n    | if\n    | else\n    | else_if\n    | whilefor_str : KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE\n    | KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACEfor_str_tagged : label COLON for_strrange : INTEGER DOT DOT INTEGER\n    | VARIABLE DOT DOT VARIABLElabel : QUOTE VARIABLEdata_str : array\n    | hashmap\n    | linkedlisthashmap : KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN\n    | KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN\n    | KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN\n    | KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPARENhashmap_methods : VARIABLE hashmap_insert\n    | VARIABLE hashmap_removehashmap_insert : DOT KW_INSERT LPAREN mdata RPAREN SEMIhashmap_remove : DOT KW_REMOVE LPAREN AND data RPAREN SEMIvoid : linkedlist : KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN\n                  | KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPARENlinkedlist : KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN\n                  | KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPARENlinkedlist_methods : VARIABLE linkedlist_push\n    | VARIABLE linkedlist_removelinkedlist_push : DOT KW_PUSH_BACK LPAREN data RPAREN SEMIlinkedlist_remove : DOT KW_REMOVE LPAREN INTEGER RPAREN SEMIif : KW_IF conditional LBRACE main_rule RBRACEelse : KW_ELSE LBRACE main_rule RBRACEelse_if : KW_ELSE KW_IF conditional LBRACE main_rule RBRACEfunction : KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACEexpression_var : expression\n                      | datareturn : main_rule\n              | KW_RETURN expression_var SEMI\n              | main_rule KW_RETURN expression_var SEMIinput_init : KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPARENinput : VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMIassignation : VARIABLE assign_operators number SEMI\n    | VARIABLE assign_operators expression SEMI\n    | VARIABLE assign_operators number\n    | VARIABLE assign_operators expressiondeclare_data_type : KW_LET VARIABLE COLON data_type SEMI'
    
_lr_action_items = {'KW_PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,26,27,40,42,43,44,45,67,68,69,75,85,86,87,88,89,91,92,97,103,104,116,123,124,131,177,178,188,189,190,191,192,193,199,211,212,214,216,220,222,244,251,255,256,258,259,273,275,277,279,290,293,304,308,309,313,325,326,327,345,346,348,351,352,],[16,16,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-97,-98,-99,-100,-101,-102,-110,-111,-83,-125,-126,-116,-117,-81,-82,-84,16,-24,-20,-143,-22,-23,-21,-71,-73,-105,16,16,-140,-141,-20,-130,16,-16,-17,-18,-46,-47,-19,-144,-74,16,16,-129,-79,-69,16,-131,-127,-128,-118,-72,-104,-103,-70,-119,-96,-112,16,-114,-123,-113,-115,-124,-132,-139,-121,-75,-122,-76,]),'KW_LET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,26,27,40,42,43,44,45,67,68,69,75,85,86,87,88,89,91,92,97,103,104,116,123,124,131,177,178,188,189,190,191,192,193,199,211,212,214,216,220,222,244,251,255,256,258,259,273,275,277,279,281,282,290,293,302,303,304,308,309,313,325,326,327,345,346,348,351,352,],[18,18,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-97,-98,-99,-100,-101,-102,-110,-111,-83,-125,-126,-116,-117,-81,-82,-84,18,-24,-20,-143,-22,-23,-21,-71,-73,-105,18,18,-140,-141,-20,-130,18,-16,-17,-18,-46,-47,-19,-144,-74,18,18,-129,-79,-69,18,-131,-127,-128,-118,-72,-104,-103,-70,-119,294,294,-96,-112,294,294,18,-114,-123,-113,-115,-124,-132,-139,-121,-75,-122,-76,]),'KW_FN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,26,27,40,42,43,44,45,67,68,69,75,85,86,87,88,89,91,92,97,103,104,116,123,124,131,177,178,188,189,190,191,192,193,199,211,212,214,216,220,222,244,251,255,256,258,259,273,275,277,279,290,293,304,308,309,313,325,326,327,345,346,348,351,352,],[19,19,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-97,-98,-99,-100,-101,-102,-110,-111,-83,-125,-126,-116,-117,-81,-82,-84,19,-24,-20,-143,-22,-23,-21,-71,-73,-105,19,19,-140,-141,-20,-130,19,-16,-17,-18,-46,-47,-19,-144,-74,19,19,-129,-79,-69,19,-131,-127,-128,-118,-72,-104,-103,-70,-119,-96,-112,19,-114,-123,-113,-115,-124,-132,-139,-121,-75,-122,-76,]),'LBRACKET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,26,27,40,42,43,44,45,67,68,69,75,85,86,87,88,89,91,92,93,97,103,104,116,123,124,131,159,177,178,188,189,190,191,192,193,199,211,212,214,216,220,222,244,251,255,256,258,259,273,275,277,279,281,282,290,293,302,303,304,308,309,311,313,320,325,326,327,332,345,346,348,351,352,],[28,28,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-97,-98,-99,-100,-101,-102,-110,-111,-83,-125,-126,-116,-117,-81,-82,-84,28,-24,-20,-143,-22,-23,-21,-71,132,-73,-105,28,28,-140,-141,-20,202,-130,28,-16,-17,-18,-46,-47,-19,-144,-74,28,28,-129,-79,-69,28,-131,-127,-128,-118,-72,-104,-103,-70,-119,28,28,-96,-112,28,28,28,-114,-123,323,-113,132,-115,-124,-132,202,-139,-121,-75,-122,-76,]),'VARIABLE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,18,19,20,21,22,23,24,25,26,27,32,34,36,37,38,40,42,43,44,45,47,48,49,50,51,52,53,55,67,68,69,74,75,76,85,86,87,88,89,90,91,92,93,96,97,102,103,104,116,123,124,125,126,127,131,134,160,174,175,176,177,178,182,188,189,190,191,192,193,196,199,200,209,211,212,214,216,220,222,224,239,244,247,251,255,256,258,259,273,275,277,279,290,293,294,304,307,308,309,313,318,325,326,327,328,345,346,348,351,352,],[17,17,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,54,56,-97,-98,-99,-100,-101,-102,-110,-111,70,73,73,78,79,-83,-125,-126,-116,-117,85,-40,-41,-42,-43,-44,-45,95,-81,-82,-84,113,17,73,-24,-20,-143,-22,-23,85,-21,-71,85,161,-73,168,-105,17,17,-140,-141,85,85,85,-20,85,85,218,-62,-63,-130,17,223,-16,-17,-18,-46,-47,-19,85,-144,85,161,-74,17,17,-129,-79,-69,254,85,17,274,-131,-127,-128,-118,-72,-104,-103,-70,-119,-96,-112,306,17,321,-114,-123,-113,85,-115,-124,-132,85,-139,-121,-75,-122,-76,]),'KW_FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,26,27,40,42,43,44,45,67,68,69,71,75,85,86,87,88,89,91,92,97,103,104,116,123,124,131,177,178,188,189,190,191,192,193,199,211,212,214,216,220,222,244,251,255,256,258,259,273,275,277,279,290,293,304,308,309,313,325,326,327,345,346,348,351,352,],[32,32,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-97,-98,-99,-100,-101,-102,-110,-111,-83,-125,-126,-116,-117,-81,-82,-84,32,32,-24,-20,-143,-22,-23,-21,-71,-73,-105,32,32,-140,-141,-20,-130,32,-16,-17,-18,-46,-47,-19,-144,-74,32,32,-129,-79,-69,32,-131,-127,-128,-118,-72,-104,-103,-70,-119,-96,-112,32,-114,-123,-113,-115,-124,-132,-139,-121,-75,-122,-76,]),'KW_IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,26,27,35,40,42,43,44,45,67,68,69,75,85,86,87,88,89,91,92,97,103,104,116,123,124,131,177,178,188,189,190,191,192,193,199,211,212,214,216,220,222,244,251,255,256,258,259,273,275,277,279,290,293,304,308,309,313,325,326,327,345,346,348,351,352,],[34,34,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-97,-98,-99,-100,-101,-102,-110,-111,76,-83,-125,-126,-116,-117,-81,-82,-84,34,-24,-20,-143,-22,-23,-21,-71,-73,-105,34,34,-140,-141,-20,-130,34,-16,-17,-18,-46,-47,-19,-144,-74,34,34,-129,-79,-69,34,-131,-127,-128,-118,-72,-104,-103,-70,-119,-96,-112,34,-114,-123,-113,-115,-124,-132,-139,-121,-75,-122,-76,]),'KW_ELSE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,26,27,40,42,43,44,45,67,68,69,75,85,86,87,88,89,91,92,97,103,104,116,123,124,131,177,178,188,189,190,191,192,193,199,211,212,214,216,220,222,244,251,255,256,258,259,273,275,277,279,290,293,304,308,309,313,325,326,327,345,346,348,351,352,],[35,35,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-97,-98,-99,-100,-101,-102,-110,-111,-83,-125,-126,-116,-117,-81,-82,-84,35,-24,-20,-143,-22,-23,-21,-71,-73,-105,35,35,-140,-141,-20,-130,35,-16,-17,-18,-46,-47,-19,-144,-74,35,35,-129,-79,-69,35,-131,-127,-128,-118,-72,-104,-103,-70,-119,-96,-112,35,-114,-123,-113,-115,-124,-132,-139,-121,-75,-122,-76,]),'KW_WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,26,27,40,42,43,44,45,67,68,69,75,85,86,87,88,89,91,92,97,103,104,116,123,124,131,177,178,188,189,190,191,192,193,199,211,212,214,216,220,222,244,251,255,256,258,259,273,275,277,279,290,293,304,308,309,313,325,326,327,345,346,348,351,352,],[36,36,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-97,-98,-99,-100,-101,-102,-110,-111,-83,-125,-126,-116,-117,-81,-82,-84,36,-24,-20,-143,-22,-23,-21,-71,-73,-105,36,36,-140,-141,-20,-130,36,-16,-17,-18,-46,-47,-19,-144,-74,36,36,-129,-79,-69,36,-131,-127,-128,-118,-72,-104,-103,-70,-119,-96,-112,36,-114,-123,-113,-115,-124,-132,-139,-121,-75,-122,-76,]),'KW_CONST':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,26,27,40,42,43,44,45,67,68,69,75,85,86,87,88,89,91,92,97,103,104,116,123,124,131,177,178,188,189,190,191,192,193,199,211,212,214,216,220,222,244,251,255,256,258,259,273,275,277,279,290,293,304,308,309,313,325,326,327,345,346,348,351,352,],[37,37,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-97,-98,-99,-100,-101,-102,-110,-111,-83,-125,-126,-116,-117,-81,-82,-84,37,-24,-20,-143,-22,-23,-21,-71,-73,-105,37,37,-140,-141,-20,-130,37,-16,-17,-18,-46,-47,-19,-144,-74,37,37,-129,-79,-69,37,-131,-127,-128,-118,-72,-104,-103,-70,-119,-96,-112,37,-114,-123,-113,-115,-124,-132,-139,-121,-75,-122,-76,]),'QUOTE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,26,27,40,42,43,44,45,67,68,69,75,85,86,87,88,89,91,92,97,103,104,116,123,124,131,177,178,188,189,190,191,192,193,199,211,212,214,216,220,222,244,251,255,256,258,259,273,275,277,279,290,293,304,308,309,313,325,326,327,345,346,348,351,352,],[38,38,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-97,-98,-99,-100,-101,-102,-110,-111,-83,-125,-126,-116,-117,-81,-82,-84,38,-24,-20,-143,-22,-23,-21,-71,-73,-105,38,38,-140,-141,-20,-130,38,-16,-17,-18,-46,-47,-19,-144,-74,38,38,-129,-79,-69,38,-131,-127,-128,-118,-72,-104,-103,-70,-119,-96,-112,38,-114,-123,-113,-115,-124,-132,-139,-121,-75,-122,-76,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,26,27,39,40,42,43,44,45,67,68,69,85,86,87,88,89,91,92,97,103,123,124,131,177,188,189,190,191,192,193,199,211,216,220,222,251,255,256,258,259,273,275,277,279,290,293,308,309,313,325,326,327,345,346,348,351,352,],[-120,0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-97,-98,-99,-100,-101,-102,-110,-111,-2,-83,-125,-126,-116,-117,-81,-82,-84,-24,-20,-143,-22,-23,-21,-71,-73,-105,-140,-141,-20,-130,-16,-17,-18,-46,-47,-19,-144,-74,-129,-79,-69,-131,-127,-128,-118,-72,-104,-103,-70,-119,-96,-112,-114,-123,-113,-115,-124,-132,-139,-121,-75,-122,-76,]),'RBRACE':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,26,27,39,40,42,43,44,45,67,68,69,75,85,86,87,88,89,91,92,97,103,104,114,116,123,124,131,171,177,178,179,188,189,190,191,192,193,199,211,212,214,216,219,220,222,244,246,248,251,255,256,258,259,271,273,275,277,279,290,293,304,308,309,313,316,317,325,326,327,338,344,345,346,348,351,352,],[-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-97,-98,-99,-100,-101,-102,-110,-111,-2,-83,-125,-126,-116,-117,-81,-82,-84,-120,-24,-20,-143,-22,-23,-21,-71,-73,-105,-120,177,-120,-140,-141,-20,216,-130,-120,220,-16,-17,-18,-46,-47,-19,-144,-74,-120,-120,-129,251,-79,-69,-120,273,275,-131,-127,-128,-118,-72,290,-104,-103,-70,-119,-96,-112,-120,-114,-123,-113,327,-135,-115,-124,-132,-136,-137,-139,-121,-75,-122,-76,]),'KW_RETURN':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,22,23,24,25,26,27,39,40,42,43,44,45,67,68,69,85,86,87,88,89,91,92,97,103,123,124,131,177,188,189,190,191,192,193,199,211,216,220,222,251,255,256,258,259,273,275,277,279,290,293,304,308,309,313,317,325,326,327,345,346,348,351,352,],[-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-97,-98,-99,-100,-101,-102,-110,-111,-2,-83,-125,-126,-116,-117,-81,-82,-84,-24,-20,-143,-22,-23,-21,-71,-73,-105,-140,-141,-20,-130,-16,-17,-18,-46,-47,-19,-144,-74,-129,-79,-69,-131,-127,-128,-118,-72,-104,-103,-70,-119,-96,-112,318,-114,-123,-113,328,-115,-124,-132,-139,-121,-75,-122,-76,]),'SEMI':([8,9,26,27,29,30,31,54,58,59,60,61,62,63,64,65,85,86,87,88,89,91,97,131,136,137,139,140,141,142,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,167,181,188,189,190,191,192,193,207,208,211,225,226,228,229,235,236,238,252,253,257,259,266,267,293,297,308,309,313,325,326,329,330,334,337,339,342,346,348,350,351,352,],[40,-109,-110,-111,67,68,69,92,98,-48,-49,-50,-51,-52,-53,-54,-24,123,124,-22,-23,-21,-73,-20,-85,-89,-22,-23,-133,199,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-80,222,-16,-17,-18,-46,-47,-19,-87,-91,-74,255,256,258,259,-86,-90,265,-93,277,279,-72,-88,-92,-112,-138,-114,-123,-113,-115,-124,338,-134,341,344,345,348,-121,-75,352,-122,-76,]),'LNOT':([16,],[41,]),'DOT':([17,168,170,213,215,278,],[46,213,215,247,249,292,]),'EQUALS':([17,54,95,142,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,180,203,264,286,299,306,],[48,93,160,200,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,221,239,284,300,311,320,]),'TIMESEQUAL':([17,],[49,]),'DIVEQUAL':([17,],[50,]),'MODULUSEQUAL':([17,],[51,]),'PLUSEQUAL':([17,],[52,]),'MINUSEQUAL':([17,],[53,]),'KW_MUT':([18,183,294,],[55,224,307,]),'CADENA':([28,66,73,80,93,98,99,105,106,107,108,109,110,111,120,122,132,134,160,173,186,196,200,217,221,239,265,318,319,323,328,341,],[59,59,-55,118,59,59,59,59,-56,-57,-58,-59,-60,-61,59,59,59,59,59,-55,59,59,59,59,59,59,59,59,331,59,59,59,]),'INTEGER':([28,47,48,49,50,51,52,53,66,73,90,93,98,99,102,105,106,107,108,109,110,111,120,121,122,125,126,127,128,132,134,160,173,186,196,200,217,221,239,249,265,318,323,328,341,],[60,88,-40,-41,-42,-43,-44,-45,60,-55,88,139,60,60,170,60,-56,-57,-58,-59,-60,-61,60,185,60,88,88,88,191,60,139,139,-55,60,231,139,60,60,139,276,60,139,60,139,60,]),'CHAR':([28,66,73,93,98,99,105,106,107,108,109,110,111,120,122,132,134,160,173,186,196,200,217,221,239,265,318,323,328,341,],[61,61,-55,61,61,61,61,-56,-57,-58,-59,-60,-61,61,61,61,61,61,-55,61,61,61,61,61,61,61,61,61,61,61,]),'FLOAT':([28,47,48,49,50,51,52,53,66,73,90,93,98,99,105,106,107,108,109,110,111,120,122,125,126,127,129,132,134,160,173,186,196,200,217,221,239,265,318,323,328,341,],[62,89,-40,-41,-42,-43,-44,-45,62,-55,89,140,62,62,62,-56,-57,-58,-59,-60,-61,62,62,89,89,89,192,62,140,140,-55,62,232,140,62,62,140,62,140,62,140,62,]),'KW_FALSE':([28,66,73,93,98,99,105,106,107,108,109,110,111,120,122,132,134,160,173,186,196,200,217,221,239,265,318,323,328,341,],[63,63,-55,63,63,63,63,-56,-57,-58,-59,-60,-61,63,63,63,63,63,-55,63,63,63,63,63,63,63,63,63,63,63,]),'KW_TRUE':([28,66,73,93,98,99,105,106,107,108,109,110,111,120,122,132,134,160,173,186,196,200,217,221,239,265,318,323,328,341,],[64,64,-55,64,64,64,64,-56,-57,-58,-59,-60,-61,64,64,64,64,64,-55,64,64,64,64,64,64,64,64,64,64,64,]),'LPAREN':([28,34,36,41,47,48,49,50,51,52,53,56,66,73,76,81,82,83,84,90,93,98,99,105,106,107,108,109,110,111,120,122,125,126,127,132,134,160,173,186,196,200,217,221,239,260,261,262,263,265,287,288,289,305,318,323,328,333,341,343,],[66,74,74,80,90,-40,-41,-42,-43,-44,-45,96,66,-55,74,119,120,121,122,90,134,66,66,66,-56,-57,-58,-59,-60,-61,66,66,90,90,90,66,196,134,-55,66,196,134,66,66,134,280,281,282,283,66,301,302,303,319,196,66,196,340,66,349,]),'COLON':([33,54,78,79,95,133,135,138,195,197,198,205,206,241,242,298,310,312,321,324,],[71,94,117,-108,159,195,197,198,230,233,234,241,242,269,270,310,322,324,332,336,]),'LBRACE':([35,59,60,61,62,63,64,65,72,77,115,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,167,168,169,172,210,250,274,276,291,],[75,-48,-49,-50,-51,-52,-53,-54,104,116,178,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-80,212,214,-65,244,-66,-107,-106,304,]),'KW_READ_LINE':([46,],[81,]),'KW_PUSH_BACK':([46,],[82,]),'KW_REMOVE':([46,],[83,]),'KW_INSERT':([46,],[84,]),'RBRACKET':([57,58,59,60,61,62,63,64,65,101,165,166,167,194,285,334,335,347,],[97,-67,-48,-49,-50,-51,-52,-53,-54,-67,211,-68,-80,229,299,-67,342,350,]),'COMMA':([58,59,60,61,62,63,64,65,101,118,139,140,161,167,231,232,334,],[99,-48,-49,-50,-51,-52,-53,-54,99,182,-49,-51,209,-80,-49,-51,99,]),'RPAREN':([59,60,61,62,63,64,65,85,88,89,91,96,97,100,101,112,118,130,131,139,140,161,162,163,164,166,167,184,185,187,188,189,190,191,192,193,211,218,223,227,231,232,243,254,259,280,283,295,296,301,314,315,331,340,348,349,352,],[-48,-49,-50,-51,-52,-53,-54,-24,-22,-23,-21,-120,-73,167,-67,173,181,193,-20,-22,-23,-77,210,-94,-95,-68,-80,225,226,228,-16,-17,-18,-46,-47,-19,-74,-64,253,257,-22,-23,-78,278,-72,293,297,308,309,313,325,326,339,346,-75,351,-76,]),'KW_IN':([70,],[102,]),'EQ':([73,173,],[106,106,]),'NE':([73,173,],[107,107,]),'GE':([73,173,],[108,108,]),'LE':([73,173,],[109,109,]),'GT':([73,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,173,237,245,268,],[110,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,110,264,272,286,]),'LT':([73,143,173,204,],[111,201,111,240,]),'PLUS':([85,86,87,88,89,91,130,131,139,140,141,188,189,190,191,192,193,231,232,],[-24,-20,125,-22,-23,-21,125,-20,-22,-23,125,125,125,125,-46,-47,-19,-22,-23,]),'MINUS':([85,86,87,88,89,91,130,131,139,140,141,188,189,190,191,192,193,210,231,232,],[-24,-20,126,-22,-23,-21,126,-20,-22,-23,126,126,126,126,-46,-47,-19,245,-22,-23,]),'TIMES':([85,86,87,88,89,91,130,131,139,140,141,188,189,190,191,192,193,231,232,],[-24,-20,127,-22,-23,-21,127,-20,-22,-23,127,127,127,127,-46,-47,-19,-22,-23,]),'DIVIDE':([88,89,139,140,231,232,],[128,129,128,129,128,129,]),'KW_HASHMAP':([93,160,],[133,205,]),'KW_LINKEDLIST':([93,94,159,160,284,300,],[135,143,204,206,298,312,]),'KW_IO':([93,],[138,]),'UNSIG_INT_8':([94,117,159,201,202,240,272,],[144,144,144,144,144,144,144,]),'UNSIG_INT_16':([94,117,159,201,202,240,272,],[145,145,145,145,145,145,145,]),'UNSIG_INT_32':([94,117,159,201,202,240,272,],[146,146,146,146,146,146,146,]),'UNSIG_INT_64':([94,117,159,201,202,240,272,],[147,147,147,147,147,147,147,]),'UNSIG_INT_128':([94,117,159,201,202,240,272,],[148,148,148,148,148,148,148,]),'SIG_INT_8':([94,117,159,201,202,240,272,],[149,149,149,149,149,149,149,]),'SIG_INT_16':([94,117,159,201,202,240,272,],[150,150,150,150,150,150,150,]),'SIG_INT_32':([94,117,159,201,202,240,272,],[151,151,151,151,151,151,151,]),'SIG_INT_64':([94,117,159,201,202,240,272,],[152,152,152,152,152,152,152,]),'SIG_INT_128':([94,117,159,201,202,240,272,],[153,153,153,153,153,153,153,]),'FLOAT_32':([94,117,159,201,202,240,272,],[154,154,154,154,154,154,154,]),'FLOAT_64':([94,117,159,201,202,240,272,],[155,155,155,155,155,155,155,]),'KW_BOOLEAN':([94,117,159,201,202,240,272,],[156,156,156,156,156,156,156,]),'KW_STRING':([94,117,159,201,202,240,272,],[157,157,157,157,157,157,157,]),'KW_CHARACTER':([94,117,159,201,202,240,272,],[158,158,158,158,158,158,158,]),'LOR':([113,],[175,]),'LAND':([113,],[176,]),'AND':([119,121,],[183,186,]),'KW_NEW':([230,269,322,336,],[260,287,333,343,]),'KW_FROM':([230,233,269,270,],[261,262,288,289,]),'KW_STDIN':([234,],[263,]),'KW_EXPECT':([292,],[305,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'main_rule':([0,2,75,104,116,178,212,214,244,304,],[1,39,114,171,179,219,246,248,271,317,]),'father_rule':([0,2,75,104,116,178,212,214,244,304,],[2,2,2,2,2,2,2,2,2,2,]),'print':([0,2,75,104,116,178,212,214,244,304,],[3,3,3,3,3,3,3,3,3,3,]),'dvariable':([0,2,75,104,116,178,212,214,244,304,],[4,4,4,4,4,4,4,4,4,4,]),'function':([0,2,75,104,116,178,212,214,244,304,],[5,5,5,5,5,5,5,5,5,5,]),'control_str':([0,2,75,104,116,178,212,214,244,304,],[6,6,6,6,6,6,6,6,6,6,]),'void':([0,2,75,96,104,116,178,212,214,244,304,],[7,7,7,163,7,7,7,7,7,7,7,]),'data_str':([0,2,75,104,116,178,212,214,244,304,],[8,8,8,8,8,8,8,8,8,8,]),'array':([0,2,75,104,116,178,212,214,244,281,282,302,303,304,],[9,9,9,9,9,9,9,9,9,295,296,314,315,9,]),'linkedlist_methods':([0,2,75,104,116,178,212,214,244,304,],[10,10,10,10,10,10,10,10,10,10,]),'hashmap_methods':([0,2,75,104,116,178,212,214,244,304,],[11,11,11,11,11,11,11,11,11,11,]),'initialization':([0,2,75,104,116,178,212,214,244,304,],[12,12,12,12,12,12,12,12,12,12,]),'input':([0,2,75,104,116,178,212,214,244,304,],[13,13,13,13,13,13,13,13,13,13,]),'assignation':([0,2,75,104,116,178,212,214,244,304,],[14,14,14,14,14,14,14,14,14,14,]),'declare_data_type':([0,2,75,104,116,178,212,214,244,304,],[15,15,15,15,15,15,15,15,15,15,]),'for_str':([0,2,71,75,104,116,178,212,214,244,304,],[20,20,103,20,20,20,20,20,20,20,20,]),'for_str_tagged':([0,2,75,104,116,178,212,214,244,304,],[21,21,21,21,21,21,21,21,21,21,]),'if':([0,2,75,104,116,178,212,214,244,304,],[22,22,22,22,22,22,22,22,22,22,]),'else':([0,2,75,104,116,178,212,214,244,304,],[23,23,23,23,23,23,23,23,23,23,]),'else_if':([0,2,75,104,116,178,212,214,244,304,],[24,24,24,24,24,24,24,24,24,24,]),'while':([0,2,75,104,116,178,212,214,244,304,],[25,25,25,25,25,25,25,25,25,25,]),'hashmap':([0,2,75,104,116,178,212,214,244,304,],[26,26,26,26,26,26,26,26,26,26,]),'linkedlist':([0,2,75,104,116,178,212,214,244,304,],[27,27,27,27,27,27,27,27,27,27,]),'let_initialization':([0,2,75,104,116,178,212,214,244,304,],[29,29,29,29,29,29,29,29,29,29,]),'const_initialization':([0,2,75,104,116,178,212,214,244,304,],[30,30,30,30,30,30,30,30,30,30,]),'input_init':([0,2,75,104,116,178,212,214,244,304,],[31,31,31,31,31,31,31,31,31,31,]),'label':([0,2,75,104,116,178,212,214,244,304,],[33,33,33,33,33,33,33,33,33,33,]),'linkedlist_push':([17,],[42,]),'linkedlist_remove':([17,],[43,]),'hashmap_insert':([17,],[44,]),'hashmap_remove':([17,],[45,]),'assign_operators':([17,],[47,]),'mdata':([28,66,99,122,132,134,196,323,],[57,100,166,187,194,100,100,335,]),'data':([28,66,93,98,99,105,120,122,132,134,160,186,196,200,217,221,239,265,318,323,328,341,],[58,101,136,165,101,172,184,101,101,101,207,227,101,235,250,252,266,285,330,334,330,347,]),'tuple':([28,66,93,98,99,105,120,122,132,134,160,186,196,200,217,221,239,265,318,323,328,341,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'conditional':([34,36,76,],[72,77,115,]),'number':([47,90,93,125,126,127,134,160,196,200,239,318,328,],[86,131,131,131,131,131,131,131,131,131,131,131,131,]),'expression':([47,90,93,125,126,127,134,160,196,200,239,318,328,],[87,130,141,188,189,190,130,141,130,141,141,141,141,]),'division':([47,90,93,125,126,127,134,160,196,200,239,318,328,],[91,91,91,91,91,91,91,91,91,91,91,91,91,]),'comparator':([73,173,],[105,217,]),'lvariable':([74,],[112,]),'expression_var':([93,160,200,239,318,328,],[137,208,236,267,329,337,]),'data_type':([94,117,159,201,202,240,272,],[142,180,203,237,238,268,291,]),'arguments':([96,],[162,]),'variables':([96,209,],[164,243,]),'range':([102,],[169,]),'logic':([113,],[174,]),'return':([304,],[316,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> main_rule","S'",1,None,None,None),
  ('main_rule -> father_rule','main_rule',1,'p_main_rule','pyacc.py',14),
  ('main_rule -> father_rule main_rule','main_rule',2,'p_main_rule','pyacc.py',15),
  ('father_rule -> print','father_rule',1,'p_father_rule','pyacc.py',20),
  ('father_rule -> dvariable','father_rule',1,'p_father_rule','pyacc.py',21),
  ('father_rule -> function','father_rule',1,'p_father_rule','pyacc.py',22),
  ('father_rule -> control_str','father_rule',1,'p_father_rule','pyacc.py',23),
  ('father_rule -> void','father_rule',1,'p_father_rule','pyacc.py',24),
  ('father_rule -> data_str','father_rule',1,'p_father_rule','pyacc.py',25),
  ('father_rule -> array','father_rule',1,'p_father_rule','pyacc.py',26),
  ('father_rule -> linkedlist_methods','father_rule',1,'p_father_rule','pyacc.py',27),
  ('father_rule -> hashmap_methods','father_rule',1,'p_father_rule','pyacc.py',28),
  ('father_rule -> initialization','father_rule',1,'p_father_rule','pyacc.py',29),
  ('father_rule -> input','father_rule',1,'p_father_rule','pyacc.py',30),
  ('father_rule -> assignation','father_rule',1,'p_father_rule','pyacc.py',31),
  ('father_rule -> declare_data_type','father_rule',1,'p_father_rule','pyacc.py',32),
  ('expression -> expression PLUS expression','expression',3,'p_expression','pyacc.py',38),
  ('expression -> expression MINUS expression','expression',3,'p_expression','pyacc.py',39),
  ('expression -> expression TIMES expression','expression',3,'p_expression','pyacc.py',40),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','pyacc.py',41),
  ('expression -> number','expression',1,'p_expression','pyacc.py',42),
  ('expression -> division','expression',1,'p_expression','pyacc.py',43),
  ('number -> INTEGER','number',1,'p_number','pyacc.py',48),
  ('number -> FLOAT','number',1,'p_number','pyacc.py',49),
  ('number -> VARIABLE','number',1,'p_number','pyacc.py',50),
  ('data_type -> UNSIG_INT_8','data_type',1,'p_data_type','pyacc.py',54),
  ('data_type -> UNSIG_INT_16','data_type',1,'p_data_type','pyacc.py',55),
  ('data_type -> UNSIG_INT_32','data_type',1,'p_data_type','pyacc.py',56),
  ('data_type -> UNSIG_INT_64','data_type',1,'p_data_type','pyacc.py',57),
  ('data_type -> UNSIG_INT_128','data_type',1,'p_data_type','pyacc.py',58),
  ('data_type -> SIG_INT_8','data_type',1,'p_data_type','pyacc.py',59),
  ('data_type -> SIG_INT_16','data_type',1,'p_data_type','pyacc.py',60),
  ('data_type -> SIG_INT_32','data_type',1,'p_data_type','pyacc.py',61),
  ('data_type -> SIG_INT_64','data_type',1,'p_data_type','pyacc.py',62),
  ('data_type -> SIG_INT_128','data_type',1,'p_data_type','pyacc.py',63),
  ('data_type -> FLOAT_32','data_type',1,'p_data_type','pyacc.py',64),
  ('data_type -> FLOAT_64','data_type',1,'p_data_type','pyacc.py',65),
  ('data_type -> KW_BOOLEAN','data_type',1,'p_data_type','pyacc.py',66),
  ('data_type -> KW_STRING','data_type',1,'p_data_type','pyacc.py',67),
  ('data_type -> KW_CHARACTER','data_type',1,'p_data_type','pyacc.py',68),
  ('assign_operators -> EQUALS','assign_operators',1,'p_assign_operators','pyacc.py',72),
  ('assign_operators -> TIMESEQUAL','assign_operators',1,'p_assign_operators','pyacc.py',73),
  ('assign_operators -> DIVEQUAL','assign_operators',1,'p_assign_operators','pyacc.py',74),
  ('assign_operators -> MODULUSEQUAL','assign_operators',1,'p_assign_operators','pyacc.py',75),
  ('assign_operators -> PLUSEQUAL','assign_operators',1,'p_assign_operators','pyacc.py',76),
  ('assign_operators -> MINUSEQUAL','assign_operators',1,'p_assign_operators','pyacc.py',77),
  ('division -> INTEGER DIVIDE INTEGER','division',3,'p_semantic_division','pyacc.py',81),
  ('division -> FLOAT DIVIDE FLOAT','division',3,'p_semantic_division','pyacc.py',82),
  ('data -> CADENA','data',1,'p_data','pyacc.py',85),
  ('data -> INTEGER','data',1,'p_data','pyacc.py',86),
  ('data -> CHAR','data',1,'p_data','pyacc.py',87),
  ('data -> FLOAT','data',1,'p_data','pyacc.py',88),
  ('data -> KW_FALSE','data',1,'p_data','pyacc.py',89),
  ('data -> KW_TRUE','data',1,'p_data','pyacc.py',90),
  ('data -> tuple','data',1,'p_data','pyacc.py',91),
  ('comparator -> <empty>','comparator',0,'p_comparator','pyacc.py',94),
  ('comparator -> EQ','comparator',1,'p_comparator','pyacc.py',95),
  ('comparator -> NE','comparator',1,'p_comparator','pyacc.py',96),
  ('comparator -> GE','comparator',1,'p_comparator','pyacc.py',97),
  ('comparator -> LE','comparator',1,'p_comparator','pyacc.py',98),
  ('comparator -> GT','comparator',1,'p_comparator','pyacc.py',99),
  ('comparator -> LT','comparator',1,'p_comparator','pyacc.py',100),
  ('logic -> LOR','logic',1,'p_logic','pyacc.py',103),
  ('logic -> LAND','logic',1,'p_logic','pyacc.py',104),
  ('lvariable -> VARIABLE logic VARIABLE','lvariable',3,'p_logic_variable','pyacc.py',107),
  ('conditional -> VARIABLE comparator data','conditional',3,'p_conditional','pyacc.py',110),
  ('conditional -> LPAREN lvariable RPAREN comparator data','conditional',5,'p_conditional','pyacc.py',111),
  ('mdata -> data','mdata',1,'p_mdata','pyacc.py',114),
  ('mdata -> data COMMA mdata','mdata',3,'p_mdata','pyacc.py',115),
  ('print -> KW_PRINT LNOT LPAREN CADENA RPAREN SEMI','print',6,'p_print','pyacc.py',118),
  ('print -> KW_PRINT LNOT LPAREN CADENA COMMA VARIABLE RPAREN SEMI','print',8,'p_print','pyacc.py',119),
  ('dvariable -> KW_LET VARIABLE SEMI','dvariable',3,'p_declare_variable','pyacc.py',122),
  ('array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET SEMI','array',7,'p_array','pyacc.py',125),
  ('array -> LBRACKET mdata RBRACKET','array',3,'p_array','pyacc.py',126),
  ('array -> LBRACKET data SEMI data RBRACKET','array',5,'p_array','pyacc.py',127),
  ('array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET mdata RBRACKET SEMI','array',14,'p_array','pyacc.py',128),
  ('array -> KW_LET KW_MUT VARIABLE COLON LBRACKET data_type SEMI data RBRACKET EQUALS LBRACKET data SEMI data RBRACKET SEMI','array',16,'p_array','pyacc.py',129),
  ('variables -> VARIABLE','variables',1,'p_variables','pyacc.py',132),
  ('variables -> VARIABLE COMMA variables','variables',3,'p_variables','pyacc.py',133),
  ('while -> KW_WHILE conditional LBRACE main_rule RBRACE','while',5,'p_while','pyacc.py',136),
  ('tuple -> LPAREN mdata RPAREN','tuple',3,'p_tuple','pyacc.py',142),
  ('initialization -> let_initialization SEMI','initialization',2,'p_initialization','pyacc.py',146),
  ('initialization -> const_initialization SEMI','initialization',2,'p_initialization','pyacc.py',147),
  ('initialization -> data_str SEMI','initialization',2,'p_initialization','pyacc.py',148),
  ('initialization -> input_init SEMI','initialization',2,'p_initialization','pyacc.py',149),
  ('let_initialization -> KW_LET VARIABLE EQUALS data','let_initialization',4,'p_let_initialization','pyacc.py',153),
  ('let_initialization -> KW_LET VARIABLE COLON data_type EQUALS data','let_initialization',6,'p_let_initialization','pyacc.py',154),
  ('let_initialization -> KW_LET KW_MUT VARIABLE EQUALS data','let_initialization',5,'p_let_initialization','pyacc.py',155),
  ('let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS data','let_initialization',7,'p_let_initialization','pyacc.py',156),
  ('let_initialization -> KW_LET VARIABLE EQUALS expression_var','let_initialization',4,'p_let_initialization','pyacc.py',157),
  ('let_initialization -> KW_LET VARIABLE COLON data_type EQUALS expression_var','let_initialization',6,'p_let_initialization','pyacc.py',158),
  ('let_initialization -> KW_LET KW_MUT VARIABLE EQUALS expression_var','let_initialization',5,'p_let_initialization','pyacc.py',159),
  ('let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS expression_var','let_initialization',7,'p_let_initialization','pyacc.py',160),
  ('const_initialization -> KW_CONST VARIABLE COLON data_type EQUALS data','const_initialization',6,'p_const_initialization','pyacc.py',164),
  ('arguments -> void','arguments',1,'p_arguments','pyacc.py',168),
  ('arguments -> variables','arguments',1,'p_arguments','pyacc.py',169),
  ('function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE','function',8,'p_function','pyacc.py',173),
  ('control_str -> for_str','control_str',1,'p_control_str','pyacc.py',177),
  ('control_str -> for_str_tagged','control_str',1,'p_control_str','pyacc.py',178),
  ('control_str -> if','control_str',1,'p_control_str','pyacc.py',179),
  ('control_str -> else','control_str',1,'p_control_str','pyacc.py',180),
  ('control_str -> else_if','control_str',1,'p_control_str','pyacc.py',181),
  ('control_str -> while','control_str',1,'p_control_str','pyacc.py',182),
  ('for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE','for_str',7,'p_for_str','pyacc.py',186),
  ('for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE','for_str',7,'p_for_str','pyacc.py',187),
  ('for_str_tagged -> label COLON for_str','for_str_tagged',3,'p_for_str_tagged','pyacc.py',191),
  ('range -> INTEGER DOT DOT INTEGER','range',4,'p_range','pyacc.py',195),
  ('range -> VARIABLE DOT DOT VARIABLE','range',4,'p_range','pyacc.py',196),
  ('label -> QUOTE VARIABLE','label',2,'p_label','pyacc.py',200),
  ('data_str -> array','data_str',1,'p_data_str','pyacc.py',204),
  ('data_str -> hashmap','data_str',1,'p_data_str','pyacc.py',205),
  ('data_str -> linkedlist','data_str',1,'p_data_str','pyacc.py',206),
  ('hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN','hashmap',9,'p_hashmap','pyacc.py',210),
  ('hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN','hashmap',10,'p_hashmap','pyacc.py',211),
  ('hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN','hashmap',10,'p_hashmap','pyacc.py',212),
  ('hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN','hashmap',11,'p_hashmap','pyacc.py',213),
  ('hashmap_methods -> VARIABLE hashmap_insert','hashmap_methods',2,'p_hashmap_methods','pyacc.py',217),
  ('hashmap_methods -> VARIABLE hashmap_remove','hashmap_methods',2,'p_hashmap_methods','pyacc.py',218),
  ('hashmap_insert -> DOT KW_INSERT LPAREN mdata RPAREN SEMI','hashmap_insert',6,'p_hashmap_insert','pyacc.py',222),
  ('hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI','hashmap_remove',7,'p_hashmap_remove','pyacc.py',226),
  ('void -> <empty>','void',0,'p_void','pyacc.py',230),
  ('linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN','linkedlist',14,'p_linkedlist_empty','pyacc.py',238),
  ('linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN','linkedlist',15,'p_linkedlist_empty','pyacc.py',239),
  ('linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN','linkedlist',10,'p_linkedlist_array','pyacc.py',242),
  ('linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN','linkedlist',11,'p_linkedlist_array','pyacc.py',243),
  ('linkedlist_methods -> VARIABLE linkedlist_push','linkedlist_methods',2,'p_linkedlist_methods','pyacc.py',246),
  ('linkedlist_methods -> VARIABLE linkedlist_remove','linkedlist_methods',2,'p_linkedlist_methods','pyacc.py',247),
  ('linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI','linkedlist_push',6,'p_linkedlist_push','pyacc.py',250),
  ('linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI','linkedlist_remove',6,'p_linkedlist_remove','pyacc.py',253),
  ('if -> KW_IF conditional LBRACE main_rule RBRACE','if',5,'p_if','pyacc.py',258),
  ('else -> KW_ELSE LBRACE main_rule RBRACE','else',4,'p_else','pyacc.py',261),
  ('else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE','else_if',6,'p_else_if','pyacc.py',264),
  ('function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE','function',11,'p_function_return','pyacc.py',269),
  ('expression_var -> expression','expression_var',1,'p_expression_var','pyacc.py',272),
  ('expression_var -> data','expression_var',1,'p_expression_var','pyacc.py',273),
  ('return -> main_rule','return',1,'p_return_statement','pyacc.py',276),
  ('return -> KW_RETURN expression_var SEMI','return',3,'p_return_statement','pyacc.py',277),
  ('return -> main_rule KW_RETURN expression_var SEMI','return',4,'p_return_statement','pyacc.py',278),
  ('input_init -> KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN','input_init',9,'p_input_init','pyacc.py',283),
  ('input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI','input',14,'p_input','pyacc.py',286),
  ('assignation -> VARIABLE assign_operators number SEMI','assignation',4,'p_assignation','pyacc.py',291),
  ('assignation -> VARIABLE assign_operators expression SEMI','assignation',4,'p_assignation','pyacc.py',292),
  ('assignation -> VARIABLE assign_operators number','assignation',3,'p_assignation','pyacc.py',293),
  ('assignation -> VARIABLE assign_operators expression','assignation',3,'p_assignation','pyacc.py',294),
  ('declare_data_type -> KW_LET VARIABLE COLON data_type SEMI','declare_data_type',5,'p_declare_datat_type','pyacc.py',299),
]
