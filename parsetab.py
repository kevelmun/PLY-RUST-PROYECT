
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ANDE CADENA CHAR COLON COMMA COMMENT DIVEQUAL DIVIDE DOT EQ EQUALS FLOAT FLOAT_32 FLOAT_64 GE GT HASH INTEGER KW_ABSTRACT KW_AS KW_ASYNC KW_AWAIT KW_BECOME KW_BOOLEAN KW_BOX KW_BREAK KW_CHARACTER KW_CONST KW_CONTINUE KW_CRATE KW_DO KW_DYN KW_ELSE KW_ENUM KW_EXPECT KW_EXTERN KW_FALSE KW_FINAL KW_FN KW_FOR KW_FROM KW_HASHMAP KW_IF KW_IMPL KW_IN KW_INSERT KW_IO KW_LET KW_LINKEDLIST KW_LOOP KW_MACRO KW_MATCH KW_MOD KW_MOVE KW_MUT KW_NEW KW_OVERRIDE KW_PRINT KW_PRIV KW_PUB KW_PUSH_BACK KW_READ_LINE KW_REF KW_REMOVE KW_RETURN KW_SELFTYPE KW_SELFVALUE KW_STATIC KW_STATICLIFETIME KW_STDIN KW_STRING KW_STRUCT KW_SUPER KW_TRAIT KW_TRUE KW_TRY KW_TYPE KW_TYPEOF KW_UNION KW_UNSAFE KW_UNSIZED KW_USE KW_VIRTUAL KW_WHERE KW_WHILE KW_YIELD LAND LBRACE LBRACKET LE LNOT LOR LPAREN LT MINUS MINUSEQUAL MODULUS MODULUSEQUAL NE ORE OREXE PLUS PLUSEQUAL QMARK QUOTE RBRACE RBRACKET RPAREN SEMI SIG_INT_128 SIG_INT_16 SIG_INT_32 SIG_INT_64 SIG_INT_8 TIMES TIMESEQUAL UNSIG_INT_128 UNSIG_INT_16 UNSIG_INT_32 UNSIG_INT_64 UNSIG_INT_8 VARIABLEmain_rule : father_rule\n    | father_rule main_rulefather_rule : print\n    | dvariable\n    | function\n    | variables\n    | control_str\n    | expression\n    | void\n    | data_str\n    | array\n    | linkedlist_methods\n    | hashmap_methods\n    | initialization\n    | input\n    | assignation\n    | declare_data_typeexpression : expression PLUS expression\n    | expression MINUS expression\n    | expression TIMES expression\n    | expression DIVIDE expression\n    | LPAREN expression RPAREN\n    | numbernumber : INTEGER\n    | FLOAT\n    | VARIABLEdata_type : UNSIG_INT_8\n                | UNSIG_INT_16\n                | UNSIG_INT_32\n                | UNSIG_INT_64\n                | UNSIG_INT_128\n                | SIG_INT_8\n                | SIG_INT_16\n                | SIG_INT_32\n                | SIG_INT_64\n                | SIG_INT_128\n                | FLOAT_32\n                | FLOAT_64\n                | KW_BOOLEAN\n                | KW_STRINGassign_operators : EQUALS\n                        | TIMESEQUAL \n                        | DIVEQUAL\n                        | MODULUSEQUAL\n                        | PLUSEQUAL \n                        | MINUSEQUALdata : CADENA\n    | INTEGER\n    | CHAR\n    | FLOAT\n    | KW_FALSE\n    | KW_TRUE\n    | tuplecomparator :\n    | EQ\n    | NE\n    | GE\n    | LE\n    | GT\n    | LTand : VARIABLE LAND VARIABLEconditional : VARIABLE comparator data\n    | and comparator dataor : VARIABLE LOR VARIABLEmdata : data\n    | data COMMA mdataprint : KW_PRINT LPAREN CADENA RPAREN SEMIdvariable : KW_LET VARIABLE SEMIarray : KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET\n    | LBRACKET mdata RBRACKETvariables : VARIABLE \n    | VARIABLE COMMA variableswhile : KW_WHILE LPAREN VARIABLE tuple : LPAREN mdata RPARENinitialization : let_initialization SEMI \n    | const_initialization SEMI \n    | data_str SEMI\n    | input_init SEMIlet_initialization : KW_LET VARIABLE EQUALS data\n    | KW_LET VARIABLE COLON data_type EQUALS data\n    | KW_LET KW_MUT VARIABLE EQUALS data\n    | KW_LET KW_MUT VARIABLE COLON data_type EQUALS dataconst_initialization : KW_CONST VARIABLE COLON data_type EQUALS dataarguments : void\n    | variablesfunction : KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACEcontrol_str : for_str\n    | for_str_tagged\n    | if\n    | else\n    | else_if\n    | whilefor_str : KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE\n    | KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACEfor_str_tagged : label COLON for_strrange : INTEGER DOT DOT INTEGER\n    | VARIABLE DOT DOT VARIABLElabel : QUOTE VARIABLEdata_str : array\n    | hashmap\n    | linkedlisthashmap : KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN\n    | KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN\n    | KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN\n    | KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPARENhashmap_methods : VARIABLE hashmap_insert\n    | VARIABLE hashmap_removehashmap_insert : DOT KW_INSERT LPAREN data RPAREN SEMIhashmap_remove : DOT KW_REMOVE LPAREN AND data RPAREN SEMIvoid : linkedlist : KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN\n                  | KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPARENlinkedlist : KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN\n                  | KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPARENlinkedlist_methods : VARIABLE linkedlist_push\n    | VARIABLE linkedlist_removelinkedlist_push : DOT KW_PUSH_BACK LPAREN data RPAREN SEMIlinkedlist_remove : DOT KW_REMOVE LPAREN INTEGER RPAREN SEMIif : KW_IF conditional LBRACE main_rule RBRACEelse : KW_ELSE LBRACE main_rule RBRACEelse_if : KW_ELSE KW_IF conditional LBRACE main_rule RBRACEfunction : KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACEexpression_var : expression\n                      | datareturn : main_rule\n              | KW_RETURN expression_var SEMI\n              | main_rule KW_RETURN expression_var SEMIinput_init : KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPARENinput : VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMIassignation : VARIABLE assign_operators numberdeclare_data_type : KW_LET VARIABLE COLON data_type SEMI'
    
_lr_action_items = {'KW_PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,21,23,24,25,26,27,28,29,30,31,41,42,50,53,57,58,59,60,80,81,82,88,93,94,95,96,98,99,103,104,109,111,115,116,128,170,171,173,178,192,194,196,199,214,220,232,233,235,238,240,252,253,255,266,268,269,271,281,282,285,304,306,307,],[18,18,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-26,-87,-88,-89,-90,-91,-92,-23,-100,-101,-24,-25,-77,-26,-115,-116,-106,-107,-75,-76,-78,18,-18,-19,-20,-21,-22,-68,-71,-72,-130,-70,-95,18,-73,-120,18,-67,-131,18,18,-119,-69,18,-121,-117,-118,-108,-94,-93,-109,-86,-102,18,-104,-113,-103,-105,-114,-122,-111,-129,-112,]),'KW_LET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,21,23,24,25,26,27,28,29,30,31,41,42,50,53,57,58,59,60,80,81,82,88,93,94,95,96,98,99,103,104,109,111,115,116,128,170,171,173,178,192,194,196,199,214,220,232,233,235,238,240,243,244,252,253,255,262,263,266,268,269,271,281,282,285,304,306,307,],[20,20,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-26,-87,-88,-89,-90,-91,-92,-23,-100,-101,-24,-25,-77,-26,-115,-116,-106,-107,-75,-76,-78,20,-18,-19,-20,-21,-22,-68,-71,-72,-130,-70,-95,20,-73,-120,20,-67,-131,20,20,-119,-69,20,-121,-117,-118,-108,-94,-93,256,256,-109,-86,-102,256,256,20,-104,-113,-103,-105,-114,-122,-111,-129,-112,]),'KW_FN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,21,23,24,25,26,27,28,29,30,31,41,42,50,53,57,58,59,60,80,81,82,88,93,94,95,96,98,99,103,104,109,111,115,116,128,170,171,173,178,192,194,196,199,214,220,232,233,235,238,240,252,253,255,266,268,269,271,281,282,285,304,306,307,],[22,22,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-26,-87,-88,-89,-90,-91,-92,-23,-100,-101,-24,-25,-77,-26,-115,-116,-106,-107,-75,-76,-78,22,-18,-19,-20,-21,-22,-68,-71,-72,-130,-70,-95,22,-73,-120,22,-67,-131,22,22,-119,-69,22,-121,-117,-118,-108,-94,-93,-109,-86,-102,22,-104,-113,-103,-105,-114,-122,-111,-129,-112,]),'VARIABLE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,36,38,41,42,43,44,46,47,48,49,50,53,55,56,57,58,59,60,62,63,64,65,66,67,68,80,81,82,88,89,90,93,94,95,96,98,99,103,104,109,110,111,114,115,116,118,128,170,171,173,178,192,194,196,199,209,214,217,220,232,233,235,238,240,252,253,255,256,266,268,269,271,278,281,282,285,286,290,304,306,307,],[21,21,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,53,54,-26,69,-87,-88,-89,-90,-91,-92,-23,-100,-101,83,86,-24,-25,91,92,53,53,53,53,-77,-26,102,103,-115,-116,-106,-107,53,-41,-42,-43,-44,-45,-46,-75,-76,-78,21,86,128,-18,-19,-20,-21,-22,-68,-71,-72,-130,103,-70,163,-95,21,168,-73,-120,21,-67,-131,21,21,-119,-69,231,21,239,-121,-117,-118,-108,-94,-93,-109,-86,-102,267,21,-104,-113,-103,53,-105,-114,-122,53,53,-111,-129,-112,]),'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,23,24,25,26,27,28,29,30,31,32,40,41,42,46,47,48,49,50,53,57,58,59,60,69,79,80,81,82,86,87,88,93,94,95,96,98,99,100,103,104,105,106,107,108,109,111,112,115,116,117,119,120,121,122,123,124,125,128,131,152,155,157,168,170,171,173,178,179,189,192,194,196,198,199,208,214,220,222,223,224,225,232,233,235,238,240,247,248,249,252,253,255,266,268,269,271,275,278,281,282,285,286,290,293,301,304,306,307,],[19,19,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,51,19,-26,-87,-88,-89,-90,-91,-92,-23,-100,-101,79,90,-24,-25,19,19,19,19,-77,-26,-115,-116,-106,-107,110,79,-75,-76,-78,-54,-54,19,-18,-19,-20,-21,-22,-68,79,-71,-72,154,155,156,157,-130,-70,79,-95,19,79,-55,-56,-57,-58,-59,-60,79,-73,79,79,79,79,-61,-120,19,-67,-131,79,79,19,19,-119,79,-69,79,19,-121,242,243,244,245,-117,-118,-108,-94,-93,261,262,263,-109,-86,-102,19,-104,-113,-103,284,290,-105,-114,-122,290,290,300,305,-111,-129,-112,]),'LBRACKET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,21,23,24,25,26,27,28,29,30,31,41,42,50,53,57,58,59,60,80,81,82,88,93,94,95,96,98,99,100,103,104,109,111,115,116,128,170,171,173,178,192,194,196,199,214,220,232,233,235,238,240,243,244,252,253,255,262,263,266,268,269,271,279,281,282,285,304,306,307,],[32,32,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-26,-87,-88,-89,-90,-91,-92,-23,-100,-101,-24,-25,-77,-26,-115,-116,-106,-107,-75,-76,-78,32,-18,-19,-20,-21,-22,-68,131,-71,-72,-130,-70,-95,32,-73,-120,32,-67,-131,32,32,-119,-69,32,-121,-117,-118,-108,-94,-93,32,32,-109,-86,-102,32,32,32,-104,-113,-103,131,-105,-114,-122,-111,-129,-112,]),'KW_FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,21,23,24,25,26,27,28,29,30,31,41,42,50,53,57,58,59,60,80,81,82,84,88,93,94,95,96,98,99,103,104,109,111,115,116,128,170,171,173,178,192,194,196,199,214,220,232,233,235,238,240,252,253,255,266,268,269,271,281,282,285,304,306,307,],[36,36,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-26,-87,-88,-89,-90,-91,-92,-23,-100,-101,-24,-25,-77,-26,-115,-116,-106,-107,-75,-76,-78,36,36,-18,-19,-20,-21,-22,-68,-71,-72,-130,-70,-95,36,-73,-120,36,-67,-131,36,36,-119,-69,36,-121,-117,-118,-108,-94,-93,-109,-86,-102,36,-104,-113,-103,-105,-114,-122,-111,-129,-112,]),'KW_IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,21,23,24,25,26,27,28,29,30,31,39,41,42,50,53,57,58,59,60,80,81,82,88,93,94,95,96,98,99,103,104,109,111,115,116,128,170,171,173,178,192,194,196,199,214,220,232,233,235,238,240,252,253,255,266,268,269,271,281,282,285,304,306,307,],[38,38,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-26,-87,-88,-89,-90,-91,-92,-23,-100,-101,89,-24,-25,-77,-26,-115,-116,-106,-107,-75,-76,-78,38,-18,-19,-20,-21,-22,-68,-71,-72,-130,-70,-95,38,-73,-120,38,-67,-131,38,38,-119,-69,38,-121,-117,-118,-108,-94,-93,-109,-86,-102,38,-104,-113,-103,-105,-114,-122,-111,-129,-112,]),'KW_ELSE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,21,23,24,25,26,27,28,29,30,31,41,42,50,53,57,58,59,60,80,81,82,88,93,94,95,96,98,99,103,104,109,111,115,116,128,170,171,173,178,192,194,196,199,214,220,232,233,235,238,240,252,253,255,266,268,269,271,281,282,285,304,306,307,],[39,39,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-26,-87,-88,-89,-90,-91,-92,-23,-100,-101,-24,-25,-77,-26,-115,-116,-106,-107,-75,-76,-78,39,-18,-19,-20,-21,-22,-68,-71,-72,-130,-70,-95,39,-73,-120,39,-67,-131,39,39,-119,-69,39,-121,-117,-118,-108,-94,-93,-109,-86,-102,39,-104,-113,-103,-105,-114,-122,-111,-129,-112,]),'KW_WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,21,23,24,25,26,27,28,29,30,31,41,42,50,53,57,58,59,60,80,81,82,88,93,94,95,96,98,99,103,104,109,111,115,116,128,170,171,173,178,192,194,196,199,214,220,232,233,235,238,240,252,253,255,266,268,269,271,281,282,285,304,306,307,],[40,40,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-26,-87,-88,-89,-90,-91,-92,-23,-100,-101,-24,-25,-77,-26,-115,-116,-106,-107,-75,-76,-78,40,-18,-19,-20,-21,-22,-68,-71,-72,-130,-70,-95,40,-73,-120,40,-67,-131,40,40,-119,-69,40,-121,-117,-118,-108,-94,-93,-109,-86,-102,40,-104,-113,-103,-105,-114,-122,-111,-129,-112,]),'INTEGER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,21,23,24,25,26,27,28,29,30,31,32,41,42,46,47,48,49,50,53,57,58,59,60,62,63,64,65,66,67,68,79,80,81,82,86,87,88,93,94,95,96,98,99,100,103,104,109,111,112,114,115,116,117,119,120,121,122,123,124,125,128,131,152,155,156,157,168,170,171,173,178,179,189,192,194,196,198,199,208,214,219,220,232,233,235,238,240,252,253,255,266,268,269,271,278,281,282,285,286,290,304,306,307,],[41,41,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,41,-26,-87,-88,-89,-90,-91,-92,-23,-100,-101,73,-24,-25,41,41,41,41,-77,-26,-115,-116,-106,-107,41,-41,-42,-43,-44,-45,-46,73,-75,-76,-78,-54,-54,41,-18,-19,-20,-21,-22,-68,73,-71,-72,-130,-70,73,165,-95,41,73,-55,-56,-57,-58,-59,-60,73,-73,73,73,73,188,73,-61,-120,41,-67,-131,73,73,41,41,-119,73,-69,73,41,241,-121,-117,-118,-108,-94,-93,-109,-86,-102,41,-104,-113,-103,291,-105,-114,-122,291,298,-111,-129,-112,]),'FLOAT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,21,23,24,25,26,27,28,29,30,31,32,41,42,46,47,48,49,50,53,57,58,59,60,62,63,64,65,66,67,68,79,80,81,82,86,87,88,93,94,95,96,98,99,100,103,104,109,111,112,115,116,117,119,120,121,122,123,124,125,128,131,152,155,157,168,170,171,173,178,179,189,192,194,196,198,199,208,214,220,232,233,235,238,240,252,253,255,266,268,269,271,278,281,282,285,286,290,304,306,307,],[42,42,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,42,-26,-87,-88,-89,-90,-91,-92,-23,-100,-101,75,-24,-25,42,42,42,42,-77,-26,-115,-116,-106,-107,42,-41,-42,-43,-44,-45,-46,75,-75,-76,-78,-54,-54,42,-18,-19,-20,-21,-22,-68,75,-71,-72,-130,-70,75,-95,42,75,-55,-56,-57,-58,-59,-60,75,-73,75,75,75,75,-61,-120,42,-67,-131,75,75,42,42,-119,75,-69,75,42,-121,-117,-118,-108,-94,-93,-109,-86,-102,42,-104,-113,-103,292,-105,-114,-122,292,299,-111,-129,-112,]),'KW_CONST':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,21,23,24,25,26,27,28,29,30,31,41,42,50,53,57,58,59,60,80,81,82,88,93,94,95,96,98,99,103,104,109,111,115,116,128,170,171,173,178,192,194,196,199,214,220,232,233,235,238,240,252,253,255,266,268,269,271,281,282,285,304,306,307,],[43,43,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-26,-87,-88,-89,-90,-91,-92,-23,-100,-101,-24,-25,-77,-26,-115,-116,-106,-107,-75,-76,-78,43,-18,-19,-20,-21,-22,-68,-71,-72,-130,-70,-95,43,-73,-120,43,-67,-131,43,43,-119,-69,43,-121,-117,-118,-108,-94,-93,-109,-86,-102,43,-104,-113,-103,-105,-114,-122,-111,-129,-112,]),'QUOTE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,21,23,24,25,26,27,28,29,30,31,41,42,50,53,57,58,59,60,80,81,82,88,93,94,95,96,98,99,103,104,109,111,115,116,128,170,171,173,178,192,194,196,199,214,220,232,233,235,238,240,252,253,255,266,268,269,271,281,282,285,304,306,307,],[44,44,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-26,-87,-88,-89,-90,-91,-92,-23,-100,-101,-24,-25,-77,-26,-115,-116,-106,-107,-75,-76,-78,44,-18,-19,-20,-21,-22,-68,-71,-72,-130,-70,-95,44,-73,-120,44,-67,-131,44,44,-119,-69,44,-121,-117,-118,-108,-94,-93,-109,-86,-102,44,-104,-113,-103,-105,-114,-122,-111,-129,-112,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,21,23,24,25,26,27,28,29,30,31,41,42,45,50,53,57,58,59,60,80,81,82,93,94,95,96,98,99,103,104,109,111,115,128,170,173,178,196,199,220,232,233,235,238,240,252,253,255,268,269,271,281,282,285,304,306,307,],[-110,0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-26,-87,-88,-89,-90,-91,-92,-23,-100,-101,-24,-25,-2,-77,-26,-115,-116,-106,-107,-75,-76,-78,-18,-19,-20,-21,-22,-68,-71,-72,-130,-70,-95,-73,-120,-67,-131,-119,-69,-121,-117,-118,-108,-94,-93,-109,-86,-102,-104,-113,-103,-105,-114,-122,-111,-129,-112,]),'RBRACE':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,21,23,24,25,26,27,28,29,30,31,41,42,45,50,53,57,58,59,60,80,81,82,88,93,94,95,96,98,99,103,104,109,111,115,116,126,128,166,170,171,173,178,192,194,196,197,199,214,216,218,220,232,233,235,236,238,240,252,253,255,266,268,269,271,276,277,281,282,285,297,303,304,306,307,],[-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-26,-87,-88,-89,-90,-91,-92,-23,-100,-101,-24,-25,-2,-77,-26,-115,-116,-106,-107,-75,-76,-78,-110,-18,-19,-20,-21,-22,-68,-71,-72,-130,-70,-95,-110,170,-73,196,-120,-110,-67,-131,-110,-110,-119,220,-69,-110,238,240,-121,-117,-118,-108,253,-94,-93,-109,-86,-102,-110,-104,-113,-103,285,-125,-105,-114,-122,-126,-127,-111,-129,-112,]),'KW_RETURN':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,21,23,24,25,26,27,28,29,30,31,41,42,45,50,53,57,58,59,60,80,81,82,93,94,95,96,98,99,103,104,109,111,115,128,170,173,178,196,199,220,232,233,235,238,240,252,253,255,266,268,269,271,277,281,282,285,304,306,307,],[-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-26,-87,-88,-89,-90,-91,-92,-23,-100,-101,-24,-25,-2,-77,-26,-115,-116,-106,-107,-75,-76,-78,-18,-19,-20,-21,-22,-68,-71,-72,-130,-70,-95,-73,-120,-67,-131,-119,-69,-121,-117,-118,-108,-94,-93,-109,-86,-102,278,-104,-113,-103,286,-105,-114,-122,-111,-129,-112,]),'PLUS':([8,21,29,41,42,52,53,93,94,95,96,98,288,291,292,298,299,],[46,-26,-23,-24,-25,46,-26,46,46,46,46,-22,46,-24,-25,-24,-25,]),'MINUS':([8,21,29,41,42,52,53,93,94,95,96,98,191,288,291,292,298,299,],[47,-26,-23,-24,-25,47,-26,47,47,47,47,-22,215,47,-24,-25,-24,-25,]),'TIMES':([8,21,29,41,42,52,53,93,94,95,96,98,288,291,292,298,299,],[48,-26,-23,-24,-25,48,-26,48,48,48,48,-22,48,-24,-25,-24,-25,]),'DIVIDE':([8,21,29,41,42,52,53,93,94,95,96,98,288,291,292,298,299,],[49,-26,-23,-24,-25,49,-26,49,49,49,49,-22,49,-24,-25,-24,-25,]),'SEMI':([10,11,29,30,31,33,34,35,41,42,53,54,72,73,74,75,76,77,78,93,94,95,96,98,111,130,134,136,138,139,140,141,142,143,144,145,146,147,148,149,150,151,162,183,199,203,210,211,213,221,230,234,255,259,268,269,271,281,282,287,288,289,291,292,296,302,304,307,],[50,-99,-23,-100,-101,80,81,82,-24,-25,-26,99,-47,-48,-49,-50,-51,-52,-53,-18,-19,-20,-21,-22,-70,173,-79,178,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-74,-81,-69,-80,232,233,235,-83,-82,252,-102,-128,-104,-113,-103,-105,-114,297,-123,-124,-24,-25,303,306,-111,-112,]),'KW_MUT':([20,186,],[55,209,]),'COMMA':([21,71,72,73,74,75,76,77,78,103,162,298,299,],[56,112,-47,-48,-49,-50,-51,-52,-53,56,-74,-48,-50,]),'DOT':([21,163,165,193,195,251,],[61,193,195,217,219,265,]),'EQUALS':([21,54,102,136,138,139,140,141,142,143,144,145,146,147,148,149,150,151,172,185,226,250,267,],[63,100,152,179,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,198,208,246,264,279,]),'TIMESEQUAL':([21,],[64,]),'DIVEQUAL':([21,],[65,]),'MODULUSEQUAL':([21,],[66,]),'PLUSEQUAL':([21,],[67,]),'MINUSEQUAL':([21,],[68,]),'RPAREN':([29,41,42,52,53,71,72,73,74,75,76,77,78,93,94,95,96,97,98,103,104,110,111,113,158,159,160,161,162,187,188,190,199,212,231,242,245,257,258,261,272,273,295,298,299,300,305,],[-23,-24,-25,98,-26,-65,-47,-48,-49,-50,-51,-52,-53,-18,-19,-20,-21,130,-22,-71,-72,-110,-70,162,191,-84,-85,-66,-74,210,211,213,-69,234,251,255,259,268,269,271,281,282,302,-24,-25,304,307,]),'CADENA':([32,51,79,86,87,100,112,117,119,120,121,122,123,124,125,131,152,155,157,168,179,189,198,208,278,284,286,290,],[72,97,72,-54,-54,72,72,72,-55,-56,-57,-58,-59,-60,72,72,72,72,72,-61,72,72,72,72,72,295,72,72,]),'CHAR':([32,79,86,87,100,112,117,119,120,121,122,123,124,125,131,152,155,157,168,179,189,198,208,278,286,290,],[74,74,-54,-54,74,74,74,-55,-56,-57,-58,-59,-60,74,74,74,74,74,-61,74,74,74,74,74,74,74,]),'KW_FALSE':([32,79,86,87,100,112,117,119,120,121,122,123,124,125,131,152,155,157,168,179,189,198,208,278,286,290,],[76,76,-54,-54,76,76,76,-55,-56,-57,-58,-59,-60,76,76,76,76,76,-61,76,76,76,76,76,76,76,]),'KW_TRUE':([32,79,86,87,100,112,117,119,120,121,122,123,124,125,131,152,155,157,168,179,189,198,208,278,286,290,],[77,77,-54,-54,77,77,77,-55,-56,-57,-58,-59,-60,77,77,77,77,77,-61,77,77,77,77,77,77,77,]),'COLON':([37,54,91,92,102,132,133,135,175,176,177,181,182,205,206,260,270,274,283,],[84,101,129,-98,153,175,176,177,200,201,202,205,206,227,228,270,280,283,294,]),'LBRACE':([39,72,73,74,75,76,77,78,85,127,138,139,140,141,142,143,144,145,146,147,148,149,150,151,162,163,164,167,169,191,239,241,254,],[88,-47,-48,-49,-50,-51,-52,-53,116,171,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-74,192,194,-62,-63,214,-97,-96,266,]),'KW_READ_LINE':([61,],[105,]),'KW_PUSH_BACK':([61,],[106,]),'KW_REMOVE':([61,],[107,]),'KW_INSERT':([61,],[108,]),'RBRACKET':([70,71,72,73,74,75,76,77,78,161,162,174,],[111,-65,-47,-48,-49,-50,-51,-52,-53,-66,-74,199,]),'KW_IN':([83,],[114,]),'LAND':([86,],[118,]),'EQ':([86,87,168,],[119,119,-61,]),'NE':([86,87,168,],[120,120,-61,]),'GE':([86,87,168,],[121,121,-61,]),'LE':([86,87,168,],[122,122,-61,]),'GT':([86,87,138,139,140,141,142,143,144,145,146,147,148,149,150,151,168,204,215,229,],[123,123,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-61,226,237,250,]),'LT':([86,87,137,168,184,],[124,124,180,-61,207,]),'KW_HASHMAP':([100,152,],[132,181,]),'KW_LINKEDLIST':([100,101,152,153,246,264,],[133,137,182,184,260,274,]),'KW_IO':([100,],[135,]),'UNSIG_INT_8':([101,129,153,180,207,237,],[138,138,138,138,138,138,]),'UNSIG_INT_16':([101,129,153,180,207,237,],[139,139,139,139,139,139,]),'UNSIG_INT_32':([101,129,153,180,207,237,],[140,140,140,140,140,140,]),'UNSIG_INT_64':([101,129,153,180,207,237,],[141,141,141,141,141,141,]),'UNSIG_INT_128':([101,129,153,180,207,237,],[142,142,142,142,142,142,]),'SIG_INT_8':([101,129,153,180,207,237,],[143,143,143,143,143,143,]),'SIG_INT_16':([101,129,153,180,207,237,],[144,144,144,144,144,144,]),'SIG_INT_32':([101,129,153,180,207,237,],[145,145,145,145,145,145,]),'SIG_INT_64':([101,129,153,180,207,237,],[146,146,146,146,146,146,]),'SIG_INT_128':([101,129,153,180,207,237,],[147,147,147,147,147,147,]),'FLOAT_32':([101,129,153,180,207,237,],[148,148,148,148,148,148,]),'FLOAT_64':([101,129,153,180,207,237,],[149,149,149,149,149,149,]),'KW_BOOLEAN':([101,129,153,180,207,237,],[150,150,150,150,150,150,]),'KW_STRING':([101,129,153,180,207,237,],[151,151,151,151,151,151,]),'AND':([154,156,],[186,189,]),'KW_NEW':([200,227,280,294,],[222,247,293,301,]),'KW_FROM':([200,201,227,228,],[223,224,248,249,]),'KW_STDIN':([202,],[225,]),'KW_EXPECT':([265,],[275,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'main_rule':([0,2,88,116,171,192,194,214,266,],[1,45,126,166,197,216,218,236,277,]),'father_rule':([0,2,88,116,171,192,194,214,266,],[2,2,2,2,2,2,2,2,2,]),'print':([0,2,88,116,171,192,194,214,266,],[3,3,3,3,3,3,3,3,3,]),'dvariable':([0,2,88,116,171,192,194,214,266,],[4,4,4,4,4,4,4,4,4,]),'function':([0,2,88,116,171,192,194,214,266,],[5,5,5,5,5,5,5,5,5,]),'variables':([0,2,56,88,110,116,171,192,194,214,266,],[6,6,104,6,160,6,6,6,6,6,6,]),'control_str':([0,2,88,116,171,192,194,214,266,],[7,7,7,7,7,7,7,7,7,]),'expression':([0,2,19,46,47,48,49,88,116,171,192,194,214,266,278,286,290,],[8,8,52,93,94,95,96,8,8,8,8,8,8,8,288,288,52,]),'void':([0,2,88,110,116,171,192,194,214,266,],[9,9,9,159,9,9,9,9,9,9,]),'data_str':([0,2,88,116,171,192,194,214,266,],[10,10,10,10,10,10,10,10,10,]),'array':([0,2,88,116,171,192,194,214,243,244,262,263,266,],[11,11,11,11,11,11,11,11,257,258,272,273,11,]),'linkedlist_methods':([0,2,88,116,171,192,194,214,266,],[12,12,12,12,12,12,12,12,12,]),'hashmap_methods':([0,2,88,116,171,192,194,214,266,],[13,13,13,13,13,13,13,13,13,]),'initialization':([0,2,88,116,171,192,194,214,266,],[14,14,14,14,14,14,14,14,14,]),'input':([0,2,88,116,171,192,194,214,266,],[15,15,15,15,15,15,15,15,15,]),'assignation':([0,2,88,116,171,192,194,214,266,],[16,16,16,16,16,16,16,16,16,]),'declare_data_type':([0,2,88,116,171,192,194,214,266,],[17,17,17,17,17,17,17,17,17,]),'for_str':([0,2,84,88,116,171,192,194,214,266,],[23,23,115,23,23,23,23,23,23,23,]),'for_str_tagged':([0,2,88,116,171,192,194,214,266,],[24,24,24,24,24,24,24,24,24,]),'if':([0,2,88,116,171,192,194,214,266,],[25,25,25,25,25,25,25,25,25,]),'else':([0,2,88,116,171,192,194,214,266,],[26,26,26,26,26,26,26,26,26,]),'else_if':([0,2,88,116,171,192,194,214,266,],[27,27,27,27,27,27,27,27,27,]),'while':([0,2,88,116,171,192,194,214,266,],[28,28,28,28,28,28,28,28,28,]),'number':([0,2,19,46,47,48,49,62,88,116,171,192,194,214,266,278,286,290,],[29,29,29,29,29,29,29,109,29,29,29,29,29,29,29,29,29,29,]),'hashmap':([0,2,88,116,171,192,194,214,266,],[30,30,30,30,30,30,30,30,30,]),'linkedlist':([0,2,88,116,171,192,194,214,266,],[31,31,31,31,31,31,31,31,31,]),'let_initialization':([0,2,88,116,171,192,194,214,266,],[33,33,33,33,33,33,33,33,33,]),'const_initialization':([0,2,88,116,171,192,194,214,266,],[34,34,34,34,34,34,34,34,34,]),'input_init':([0,2,88,116,171,192,194,214,266,],[35,35,35,35,35,35,35,35,35,]),'label':([0,2,88,116,171,192,194,214,266,],[37,37,37,37,37,37,37,37,37,]),'linkedlist_push':([21,],[57,]),'linkedlist_remove':([21,],[58,]),'hashmap_insert':([21,],[59,]),'hashmap_remove':([21,],[60,]),'assign_operators':([21,],[62,]),'mdata':([32,79,112,131,290,],[70,113,161,174,113,]),'data':([32,79,100,112,117,125,131,152,155,157,179,189,198,208,278,286,290,],[71,71,134,71,167,169,71,183,187,190,203,212,221,230,289,289,71,]),'tuple':([32,79,100,112,117,125,131,152,155,157,179,189,198,208,278,286,290,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'conditional':([38,89,],[85,127,]),'and':([38,89,],[87,87,]),'comparator':([86,87,],[117,125,]),'data_type':([101,129,153,180,207,237,],[136,172,185,204,229,254,]),'arguments':([110,],[158,]),'range':([114,],[164,]),'return':([266,],[276,]),'expression_var':([278,286,],[287,296,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> main_rule","S'",1,None,None,None),
  ('main_rule -> father_rule','main_rule',1,'p_main_rule','pyacc.py',9),
  ('main_rule -> father_rule main_rule','main_rule',2,'p_main_rule','pyacc.py',10),
  ('father_rule -> print','father_rule',1,'p_father_rule','pyacc.py',15),
  ('father_rule -> dvariable','father_rule',1,'p_father_rule','pyacc.py',16),
  ('father_rule -> function','father_rule',1,'p_father_rule','pyacc.py',17),
  ('father_rule -> variables','father_rule',1,'p_father_rule','pyacc.py',18),
  ('father_rule -> control_str','father_rule',1,'p_father_rule','pyacc.py',19),
  ('father_rule -> expression','father_rule',1,'p_father_rule','pyacc.py',20),
  ('father_rule -> void','father_rule',1,'p_father_rule','pyacc.py',21),
  ('father_rule -> data_str','father_rule',1,'p_father_rule','pyacc.py',22),
  ('father_rule -> array','father_rule',1,'p_father_rule','pyacc.py',23),
  ('father_rule -> linkedlist_methods','father_rule',1,'p_father_rule','pyacc.py',24),
  ('father_rule -> hashmap_methods','father_rule',1,'p_father_rule','pyacc.py',25),
  ('father_rule -> initialization','father_rule',1,'p_father_rule','pyacc.py',26),
  ('father_rule -> input','father_rule',1,'p_father_rule','pyacc.py',27),
  ('father_rule -> assignation','father_rule',1,'p_father_rule','pyacc.py',28),
  ('father_rule -> declare_data_type','father_rule',1,'p_father_rule','pyacc.py',29),
  ('expression -> expression PLUS expression','expression',3,'p_expression','pyacc.py',35),
  ('expression -> expression MINUS expression','expression',3,'p_expression','pyacc.py',36),
  ('expression -> expression TIMES expression','expression',3,'p_expression','pyacc.py',37),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','pyacc.py',38),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','pyacc.py',39),
  ('expression -> number','expression',1,'p_expression','pyacc.py',40),
  ('number -> INTEGER','number',1,'p_number','pyacc.py',45),
  ('number -> FLOAT','number',1,'p_number','pyacc.py',46),
  ('number -> VARIABLE','number',1,'p_number','pyacc.py',47),
  ('data_type -> UNSIG_INT_8','data_type',1,'p_data_type','pyacc.py',51),
  ('data_type -> UNSIG_INT_16','data_type',1,'p_data_type','pyacc.py',52),
  ('data_type -> UNSIG_INT_32','data_type',1,'p_data_type','pyacc.py',53),
  ('data_type -> UNSIG_INT_64','data_type',1,'p_data_type','pyacc.py',54),
  ('data_type -> UNSIG_INT_128','data_type',1,'p_data_type','pyacc.py',55),
  ('data_type -> SIG_INT_8','data_type',1,'p_data_type','pyacc.py',56),
  ('data_type -> SIG_INT_16','data_type',1,'p_data_type','pyacc.py',57),
  ('data_type -> SIG_INT_32','data_type',1,'p_data_type','pyacc.py',58),
  ('data_type -> SIG_INT_64','data_type',1,'p_data_type','pyacc.py',59),
  ('data_type -> SIG_INT_128','data_type',1,'p_data_type','pyacc.py',60),
  ('data_type -> FLOAT_32','data_type',1,'p_data_type','pyacc.py',61),
  ('data_type -> FLOAT_64','data_type',1,'p_data_type','pyacc.py',62),
  ('data_type -> KW_BOOLEAN','data_type',1,'p_data_type','pyacc.py',63),
  ('data_type -> KW_STRING','data_type',1,'p_data_type','pyacc.py',64),
  ('assign_operators -> EQUALS','assign_operators',1,'p_assign_operators','pyacc.py',68),
  ('assign_operators -> TIMESEQUAL','assign_operators',1,'p_assign_operators','pyacc.py',69),
  ('assign_operators -> DIVEQUAL','assign_operators',1,'p_assign_operators','pyacc.py',70),
  ('assign_operators -> MODULUSEQUAL','assign_operators',1,'p_assign_operators','pyacc.py',71),
  ('assign_operators -> PLUSEQUAL','assign_operators',1,'p_assign_operators','pyacc.py',72),
  ('assign_operators -> MINUSEQUAL','assign_operators',1,'p_assign_operators','pyacc.py',73),
  ('data -> CADENA','data',1,'p_data','pyacc.py',77),
  ('data -> INTEGER','data',1,'p_data','pyacc.py',78),
  ('data -> CHAR','data',1,'p_data','pyacc.py',79),
  ('data -> FLOAT','data',1,'p_data','pyacc.py',80),
  ('data -> KW_FALSE','data',1,'p_data','pyacc.py',81),
  ('data -> KW_TRUE','data',1,'p_data','pyacc.py',82),
  ('data -> tuple','data',1,'p_data','pyacc.py',83),
  ('comparator -> <empty>','comparator',0,'p_comparator','pyacc.py',86),
  ('comparator -> EQ','comparator',1,'p_comparator','pyacc.py',87),
  ('comparator -> NE','comparator',1,'p_comparator','pyacc.py',88),
  ('comparator -> GE','comparator',1,'p_comparator','pyacc.py',89),
  ('comparator -> LE','comparator',1,'p_comparator','pyacc.py',90),
  ('comparator -> GT','comparator',1,'p_comparator','pyacc.py',91),
  ('comparator -> LT','comparator',1,'p_comparator','pyacc.py',92),
  ('and -> VARIABLE LAND VARIABLE','and',3,'p_and','pyacc.py',95),
  ('conditional -> VARIABLE comparator data','conditional',3,'p_conditional','pyacc.py',98),
  ('conditional -> and comparator data','conditional',3,'p_conditional','pyacc.py',99),
  ('or -> VARIABLE LOR VARIABLE','or',3,'p_or','pyacc.py',102),
  ('mdata -> data','mdata',1,'p_mdata','pyacc.py',105),
  ('mdata -> data COMMA mdata','mdata',3,'p_mdata','pyacc.py',106),
  ('print -> KW_PRINT LPAREN CADENA RPAREN SEMI','print',5,'p_print','pyacc.py',109),
  ('dvariable -> KW_LET VARIABLE SEMI','dvariable',3,'p_declare_variable','pyacc.py',112),
  ('array -> KW_LET VARIABLE EQUALS LBRACKET mdata RBRACKET','array',6,'p_array','pyacc.py',115),
  ('array -> LBRACKET mdata RBRACKET','array',3,'p_array','pyacc.py',116),
  ('variables -> VARIABLE','variables',1,'p_variables','pyacc.py',119),
  ('variables -> VARIABLE COMMA variables','variables',3,'p_variables','pyacc.py',120),
  ('while -> KW_WHILE LPAREN VARIABLE','while',3,'p_while','pyacc.py',123),
  ('tuple -> LPAREN mdata RPAREN','tuple',3,'p_tuple','pyacc.py',130),
  ('initialization -> let_initialization SEMI','initialization',2,'p_initialization','pyacc.py',134),
  ('initialization -> const_initialization SEMI','initialization',2,'p_initialization','pyacc.py',135),
  ('initialization -> data_str SEMI','initialization',2,'p_initialization','pyacc.py',136),
  ('initialization -> input_init SEMI','initialization',2,'p_initialization','pyacc.py',137),
  ('let_initialization -> KW_LET VARIABLE EQUALS data','let_initialization',4,'p_let_initialization','pyacc.py',140),
  ('let_initialization -> KW_LET VARIABLE COLON data_type EQUALS data','let_initialization',6,'p_let_initialization','pyacc.py',141),
  ('let_initialization -> KW_LET KW_MUT VARIABLE EQUALS data','let_initialization',5,'p_let_initialization','pyacc.py',142),
  ('let_initialization -> KW_LET KW_MUT VARIABLE COLON data_type EQUALS data','let_initialization',7,'p_let_initialization','pyacc.py',143),
  ('const_initialization -> KW_CONST VARIABLE COLON data_type EQUALS data','const_initialization',6,'p_const_initialization','pyacc.py',146),
  ('arguments -> void','arguments',1,'p_arguments','pyacc.py',150),
  ('arguments -> variables','arguments',1,'p_arguments','pyacc.py',151),
  ('function -> KW_FN VARIABLE LPAREN arguments RPAREN LBRACE main_rule RBRACE','function',8,'p_function','pyacc.py',155),
  ('control_str -> for_str','control_str',1,'p_control_str','pyacc.py',159),
  ('control_str -> for_str_tagged','control_str',1,'p_control_str','pyacc.py',160),
  ('control_str -> if','control_str',1,'p_control_str','pyacc.py',161),
  ('control_str -> else','control_str',1,'p_control_str','pyacc.py',162),
  ('control_str -> else_if','control_str',1,'p_control_str','pyacc.py',163),
  ('control_str -> while','control_str',1,'p_control_str','pyacc.py',164),
  ('for_str -> KW_FOR VARIABLE KW_IN range LBRACE main_rule RBRACE','for_str',7,'p_for_str','pyacc.py',168),
  ('for_str -> KW_FOR VARIABLE KW_IN VARIABLE LBRACE main_rule RBRACE','for_str',7,'p_for_str','pyacc.py',169),
  ('for_str_tagged -> label COLON for_str','for_str_tagged',3,'p_for_str_tagged','pyacc.py',173),
  ('range -> INTEGER DOT DOT INTEGER','range',4,'p_range','pyacc.py',177),
  ('range -> VARIABLE DOT DOT VARIABLE','range',4,'p_range','pyacc.py',178),
  ('label -> QUOTE VARIABLE','label',2,'p_label','pyacc.py',182),
  ('data_str -> array','data_str',1,'p_data_str','pyacc.py',186),
  ('data_str -> hashmap','data_str',1,'p_data_str','pyacc.py',187),
  ('data_str -> linkedlist','data_str',1,'p_data_str','pyacc.py',188),
  ('hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN','hashmap',9,'p_hashmap','pyacc.py',192),
  ('hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_NEW LPAREN RPAREN','hashmap',10,'p_hashmap','pyacc.py',193),
  ('hashmap -> KW_LET VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN','hashmap',10,'p_hashmap','pyacc.py',194),
  ('hashmap -> KW_LET KW_MUT VARIABLE EQUALS KW_HASHMAP COLON COLON KW_FROM LPAREN array RPAREN','hashmap',11,'p_hashmap','pyacc.py',195),
  ('hashmap_methods -> VARIABLE hashmap_insert','hashmap_methods',2,'p_hashmap_methods','pyacc.py',199),
  ('hashmap_methods -> VARIABLE hashmap_remove','hashmap_methods',2,'p_hashmap_methods','pyacc.py',200),
  ('hashmap_insert -> DOT KW_INSERT LPAREN data RPAREN SEMI','hashmap_insert',6,'p_hashmap_insert','pyacc.py',204),
  ('hashmap_remove -> DOT KW_REMOVE LPAREN AND data RPAREN SEMI','hashmap_remove',7,'p_hashmap_remove','pyacc.py',208),
  ('void -> <empty>','void',0,'p_void','pyacc.py',212),
  ('linkedlist -> KW_LET VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN','linkedlist',14,'p_linkedlist_empty','pyacc.py',220),
  ('linkedlist -> KW_LET KW_MUT VARIABLE COLON KW_LINKEDLIST LT data_type GT EQUALS KW_LINKEDLIST COLON COLON KW_NEW LPAREN RPAREN','linkedlist',15,'p_linkedlist_empty','pyacc.py',221),
  ('linkedlist -> KW_LET VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN','linkedlist',10,'p_linkedlist_array','pyacc.py',224),
  ('linkedlist -> KW_LET KW_MUT VARIABLE EQUALS KW_LINKEDLIST COLON COLON KW_FROM LPAREN array RPAREN','linkedlist',11,'p_linkedlist_array','pyacc.py',225),
  ('linkedlist_methods -> VARIABLE linkedlist_push','linkedlist_methods',2,'p_linkedlist_methods','pyacc.py',228),
  ('linkedlist_methods -> VARIABLE linkedlist_remove','linkedlist_methods',2,'p_linkedlist_methods','pyacc.py',229),
  ('linkedlist_push -> DOT KW_PUSH_BACK LPAREN data RPAREN SEMI','linkedlist_push',6,'p_linkedlist_push','pyacc.py',232),
  ('linkedlist_remove -> DOT KW_REMOVE LPAREN INTEGER RPAREN SEMI','linkedlist_remove',6,'p_linkedlist_remove','pyacc.py',235),
  ('if -> KW_IF conditional LBRACE main_rule RBRACE','if',5,'p_if','pyacc.py',240),
  ('else -> KW_ELSE LBRACE main_rule RBRACE','else',4,'p_else','pyacc.py',243),
  ('else_if -> KW_ELSE KW_IF conditional LBRACE main_rule RBRACE','else_if',6,'p_else_if','pyacc.py',246),
  ('function -> KW_FN VARIABLE LPAREN arguments RPAREN MINUS GT data_type LBRACE return RBRACE','function',11,'p_function_return','pyacc.py',251),
  ('expression_var -> expression','expression_var',1,'p_expression_var','pyacc.py',254),
  ('expression_var -> data','expression_var',1,'p_expression_var','pyacc.py',255),
  ('return -> main_rule','return',1,'p_return_statement','pyacc.py',258),
  ('return -> KW_RETURN expression_var SEMI','return',3,'p_return_statement','pyacc.py',259),
  ('return -> main_rule KW_RETURN expression_var SEMI','return',4,'p_return_statement','pyacc.py',260),
  ('input_init -> KW_LET VARIABLE EQUALS KW_IO COLON COLON KW_STDIN LPAREN RPAREN','input_init',9,'p_input_init','pyacc.py',265),
  ('input -> VARIABLE DOT KW_READ_LINE LPAREN AND KW_MUT VARIABLE RPAREN DOT KW_EXPECT LPAREN CADENA RPAREN SEMI','input',14,'p_input','pyacc.py',268),
  ('assignation -> VARIABLE assign_operators number','assignation',3,'p_assignation','pyacc.py',273),
  ('declare_data_type -> KW_LET VARIABLE COLON data_type SEMI','declare_data_type',5,'p_declare_datat_type','pyacc.py',278),
]
